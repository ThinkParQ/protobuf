// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beewatch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_beewatch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_beewatch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_beewatch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_beewatch_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_beewatch_2eproto;
namespace beewatch {
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace beewatch
PROTOBUF_NAMESPACE_OPEN
template<> ::beewatch::Event* Arena::CreateMaybeMessage<::beewatch::Event>(Arena*);
template<> ::beewatch::Response* Arena::CreateMaybeMessage<::beewatch::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace beewatch {

enum Event_Type : int {
  Event_Type_FLUSH = 0,
  Event_Type_TRUNCATE = 1,
  Event_Type_SETATTR = 2,
  Event_Type_CLOSE_WRITE = 3,
  Event_Type_CREATE = 4,
  Event_Type_MKDIR = 5,
  Event_Type_MKNOD = 6,
  Event_Type_SYMLINK = 7,
  Event_Type_RMDIR = 8,
  Event_Type_UNLINK = 9,
  Event_Type_HARDLINK = 10,
  Event_Type_RENAME = 11,
  Event_Type_READ = 12,
  Event_Type_Event_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Event_Type_Event_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Event_Type_IsValid(int value);
constexpr Event_Type Event_Type_Type_MIN = Event_Type_FLUSH;
constexpr Event_Type Event_Type_Type_MAX = Event_Type_READ;
constexpr int Event_Type_Type_ARRAYSIZE = Event_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Event_Type_descriptor();
template<typename T>
inline const std::string& Event_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Event_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Event_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Event_Type_descriptor(), enum_t_value);
}
inline bool Event_Type_Parse(
    const std::string& name, Event_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Event_Type>(
    Event_Type_descriptor(), name, value);
}
// ===================================================================

class Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beewatch.Event) */ {
 public:
  inline Event() : Event(nullptr) {};
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beewatch.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beewatch_2eproto);
    return ::descriptor_table_beewatch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Event_Type Type;
  static constexpr Type FLUSH =
    Event_Type_FLUSH;
  static constexpr Type TRUNCATE =
    Event_Type_TRUNCATE;
  static constexpr Type SETATTR =
    Event_Type_SETATTR;
  static constexpr Type CLOSE_WRITE =
    Event_Type_CLOSE_WRITE;
  static constexpr Type CREATE =
    Event_Type_CREATE;
  static constexpr Type MKDIR =
    Event_Type_MKDIR;
  static constexpr Type MKNOD =
    Event_Type_MKNOD;
  static constexpr Type SYMLINK =
    Event_Type_SYMLINK;
  static constexpr Type RMDIR =
    Event_Type_RMDIR;
  static constexpr Type UNLINK =
    Event_Type_UNLINK;
  static constexpr Type HARDLINK =
    Event_Type_HARDLINK;
  static constexpr Type RENAME =
    Event_Type_RENAME;
  static constexpr Type READ =
    Event_Type_READ;
  static inline bool Type_IsValid(int value) {
    return Event_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Event_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Event_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Event_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Event_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Event_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Event_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 8,
    kEntryIdFieldNumber = 9,
    kParentEntryIdFieldNumber = 10,
    kTargetPathFieldNumber = 11,
    kTargetParentIdFieldNumber = 12,
    kFormatVersionMajorFieldNumber = 1,
    kFormatVersionMinorFieldNumber = 2,
    kSeqIdFieldNumber = 3,
    kDroppedSeqFieldNumber = 5,
    kSizeFieldNumber = 4,
    kTypeFieldNumber = 7,
    kMissedSeqFieldNumber = 6,
  };
  // string path = 8;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string entry_id = 9;
  void clear_entry_id();
  const std::string& entry_id() const;
  void set_entry_id(const std::string& value);
  void set_entry_id(std::string&& value);
  void set_entry_id(const char* value);
  void set_entry_id(const char* value, size_t size);
  std::string* mutable_entry_id();
  std::string* release_entry_id();
  void set_allocated_entry_id(std::string* entry_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_entry_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_entry_id(
      std::string* entry_id);
  private:
  const std::string& _internal_entry_id() const;
  void _internal_set_entry_id(const std::string& value);
  std::string* _internal_mutable_entry_id();
  public:

  // string parent_entry_id = 10;
  void clear_parent_entry_id();
  const std::string& parent_entry_id() const;
  void set_parent_entry_id(const std::string& value);
  void set_parent_entry_id(std::string&& value);
  void set_parent_entry_id(const char* value);
  void set_parent_entry_id(const char* value, size_t size);
  std::string* mutable_parent_entry_id();
  std::string* release_parent_entry_id();
  void set_allocated_parent_entry_id(std::string* parent_entry_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_parent_entry_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_parent_entry_id(
      std::string* parent_entry_id);
  private:
  const std::string& _internal_parent_entry_id() const;
  void _internal_set_parent_entry_id(const std::string& value);
  std::string* _internal_mutable_parent_entry_id();
  public:

  // string target_path = 11;
  void clear_target_path();
  const std::string& target_path() const;
  void set_target_path(const std::string& value);
  void set_target_path(std::string&& value);
  void set_target_path(const char* value);
  void set_target_path(const char* value, size_t size);
  std::string* mutable_target_path();
  std::string* release_target_path();
  void set_allocated_target_path(std::string* target_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target_path(
      std::string* target_path);
  private:
  const std::string& _internal_target_path() const;
  void _internal_set_target_path(const std::string& value);
  std::string* _internal_mutable_target_path();
  public:

  // string target_parent_id = 12;
  void clear_target_parent_id();
  const std::string& target_parent_id() const;
  void set_target_parent_id(const std::string& value);
  void set_target_parent_id(std::string&& value);
  void set_target_parent_id(const char* value);
  void set_target_parent_id(const char* value, size_t size);
  std::string* mutable_target_parent_id();
  std::string* release_target_parent_id();
  void set_allocated_target_parent_id(std::string* target_parent_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target_parent_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target_parent_id(
      std::string* target_parent_id);
  private:
  const std::string& _internal_target_parent_id() const;
  void _internal_set_target_parent_id(const std::string& value);
  std::string* _internal_mutable_target_parent_id();
  public:

  // uint32 format_version_major = 1;
  void clear_format_version_major();
  ::PROTOBUF_NAMESPACE_ID::uint32 format_version_major() const;
  void set_format_version_major(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_format_version_major() const;
  void _internal_set_format_version_major(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 format_version_minor = 2;
  void clear_format_version_minor();
  ::PROTOBUF_NAMESPACE_ID::uint32 format_version_minor() const;
  void set_format_version_minor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_format_version_minor() const;
  void _internal_set_format_version_minor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 seq_id = 3;
  void clear_seq_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_id() const;
  void set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq_id() const;
  void _internal_set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 dropped_seq = 5;
  void clear_dropped_seq();
  ::PROTOBUF_NAMESPACE_ID::uint64 dropped_seq() const;
  void set_dropped_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dropped_seq() const;
  void _internal_set_dropped_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 size = 4;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .beewatch.Event.Type type = 7;
  void clear_type();
  ::beewatch::Event_Type type() const;
  void set_type(::beewatch::Event_Type value);
  private:
  ::beewatch::Event_Type _internal_type() const;
  void _internal_set_type(::beewatch::Event_Type value);
  public:

  // uint64 missed_seq = 6;
  void clear_missed_seq();
  ::PROTOBUF_NAMESPACE_ID::uint64 missed_seq() const;
  void set_missed_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_missed_seq() const;
  void _internal_set_missed_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:beewatch.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entry_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_entry_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_parent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 format_version_major_;
  ::PROTOBUF_NAMESPACE_ID::uint32 format_version_minor_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dropped_seq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 missed_seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beewatch_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beewatch.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beewatch.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beewatch_2eproto);
    return ::descriptor_table_beewatch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompletedSeqFieldNumber = 1,
    kShuttingDownFieldNumber = 2,
  };
  // uint64 completed_seq = 1;
  void clear_completed_seq();
  ::PROTOBUF_NAMESPACE_ID::uint64 completed_seq() const;
  void set_completed_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_completed_seq() const;
  void _internal_set_completed_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool shutting_down = 2;
  void clear_shutting_down();
  bool shutting_down() const;
  void set_shutting_down(bool value);
  private:
  bool _internal_shutting_down() const;
  void _internal_set_shutting_down(bool value);
  public:

  // @@protoc_insertion_point(class_scope:beewatch.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 completed_seq_;
  bool shutting_down_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beewatch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event

// uint32 format_version_major = 1;
inline void Event::clear_format_version_major() {
  format_version_major_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Event::_internal_format_version_major() const {
  return format_version_major_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Event::format_version_major() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.format_version_major)
  return _internal_format_version_major();
}
inline void Event::_internal_set_format_version_major(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  format_version_major_ = value;
}
inline void Event::set_format_version_major(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_format_version_major(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.format_version_major)
}

// uint32 format_version_minor = 2;
inline void Event::clear_format_version_minor() {
  format_version_minor_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Event::_internal_format_version_minor() const {
  return format_version_minor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Event::format_version_minor() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.format_version_minor)
  return _internal_format_version_minor();
}
inline void Event::_internal_set_format_version_minor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  format_version_minor_ = value;
}
inline void Event::set_format_version_minor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_format_version_minor(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.format_version_minor)
}

// uint64 seq_id = 3;
inline void Event::clear_seq_id() {
  seq_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event::_internal_seq_id() const {
  return seq_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event::seq_id() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.seq_id)
  return _internal_seq_id();
}
inline void Event::_internal_set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seq_id_ = value;
}
inline void Event::set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq_id(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.seq_id)
}

// uint32 size = 4;
inline void Event::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Event::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Event::size() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.size)
  return _internal_size();
}
inline void Event::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void Event::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.size)
}

// uint64 dropped_seq = 5;
inline void Event::clear_dropped_seq() {
  dropped_seq_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event::_internal_dropped_seq() const {
  return dropped_seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event::dropped_seq() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.dropped_seq)
  return _internal_dropped_seq();
}
inline void Event::_internal_set_dropped_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dropped_seq_ = value;
}
inline void Event::set_dropped_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dropped_seq(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.dropped_seq)
}

// uint64 missed_seq = 6;
inline void Event::clear_missed_seq() {
  missed_seq_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event::_internal_missed_seq() const {
  return missed_seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event::missed_seq() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.missed_seq)
  return _internal_missed_seq();
}
inline void Event::_internal_set_missed_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  missed_seq_ = value;
}
inline void Event::set_missed_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_missed_seq(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.missed_seq)
}

// .beewatch.Event.Type type = 7;
inline void Event::clear_type() {
  type_ = 0;
}
inline ::beewatch::Event_Type Event::_internal_type() const {
  return static_cast< ::beewatch::Event_Type >(type_);
}
inline ::beewatch::Event_Type Event::type() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.type)
  return _internal_type();
}
inline void Event::_internal_set_type(::beewatch::Event_Type value) {
  
  type_ = value;
}
inline void Event::set_type(::beewatch::Event_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.type)
}

// string path = 8;
inline void Event::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event::path() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.path)
  return _internal_path();
}
inline void Event::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.path)
}
inline std::string* Event::mutable_path() {
  // @@protoc_insertion_point(field_mutable:beewatch.Event.path)
  return _internal_mutable_path();
}
inline const std::string& Event::_internal_path() const {
  return path_.Get();
}
inline void Event::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beewatch.Event.path)
}
inline void Event::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beewatch.Event.path)
}
inline void Event::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beewatch.Event.path)
}
inline std::string* Event::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event::release_path() {
  // @@protoc_insertion_point(field_release:beewatch.Event.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beewatch.Event.path)
}
inline std::string* Event::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beewatch.Event.path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event::unsafe_arena_set_allocated_path(
    std::string* path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path != nullptr) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beewatch.Event.path)
}

// string entry_id = 9;
inline void Event::clear_entry_id() {
  entry_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event::entry_id() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.entry_id)
  return _internal_entry_id();
}
inline void Event::set_entry_id(const std::string& value) {
  _internal_set_entry_id(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.entry_id)
}
inline std::string* Event::mutable_entry_id() {
  // @@protoc_insertion_point(field_mutable:beewatch.Event.entry_id)
  return _internal_mutable_entry_id();
}
inline const std::string& Event::_internal_entry_id() const {
  return entry_id_.Get();
}
inline void Event::_internal_set_entry_id(const std::string& value) {
  
  entry_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event::set_entry_id(std::string&& value) {
  
  entry_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beewatch.Event.entry_id)
}
inline void Event::set_entry_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entry_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beewatch.Event.entry_id)
}
inline void Event::set_entry_id(const char* value,
    size_t size) {
  
  entry_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beewatch.Event.entry_id)
}
inline std::string* Event::_internal_mutable_entry_id() {
  
  return entry_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event::release_entry_id() {
  // @@protoc_insertion_point(field_release:beewatch.Event.entry_id)
  return entry_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event::set_allocated_entry_id(std::string* entry_id) {
  if (entry_id != nullptr) {
    
  } else {
    
  }
  entry_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entry_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beewatch.Event.entry_id)
}
inline std::string* Event::unsafe_arena_release_entry_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beewatch.Event.entry_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return entry_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event::unsafe_arena_set_allocated_entry_id(
    std::string* entry_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (entry_id != nullptr) {
    
  } else {
    
  }
  entry_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      entry_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beewatch.Event.entry_id)
}

// string parent_entry_id = 10;
inline void Event::clear_parent_entry_id() {
  parent_entry_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event::parent_entry_id() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.parent_entry_id)
  return _internal_parent_entry_id();
}
inline void Event::set_parent_entry_id(const std::string& value) {
  _internal_set_parent_entry_id(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.parent_entry_id)
}
inline std::string* Event::mutable_parent_entry_id() {
  // @@protoc_insertion_point(field_mutable:beewatch.Event.parent_entry_id)
  return _internal_mutable_parent_entry_id();
}
inline const std::string& Event::_internal_parent_entry_id() const {
  return parent_entry_id_.Get();
}
inline void Event::_internal_set_parent_entry_id(const std::string& value) {
  
  parent_entry_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event::set_parent_entry_id(std::string&& value) {
  
  parent_entry_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beewatch.Event.parent_entry_id)
}
inline void Event::set_parent_entry_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_entry_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beewatch.Event.parent_entry_id)
}
inline void Event::set_parent_entry_id(const char* value,
    size_t size) {
  
  parent_entry_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beewatch.Event.parent_entry_id)
}
inline std::string* Event::_internal_mutable_parent_entry_id() {
  
  return parent_entry_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event::release_parent_entry_id() {
  // @@protoc_insertion_point(field_release:beewatch.Event.parent_entry_id)
  return parent_entry_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event::set_allocated_parent_entry_id(std::string* parent_entry_id) {
  if (parent_entry_id != nullptr) {
    
  } else {
    
  }
  parent_entry_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_entry_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beewatch.Event.parent_entry_id)
}
inline std::string* Event::unsafe_arena_release_parent_entry_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beewatch.Event.parent_entry_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return parent_entry_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event::unsafe_arena_set_allocated_parent_entry_id(
    std::string* parent_entry_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (parent_entry_id != nullptr) {
    
  } else {
    
  }
  parent_entry_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      parent_entry_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beewatch.Event.parent_entry_id)
}

// string target_path = 11;
inline void Event::clear_target_path() {
  target_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event::target_path() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.target_path)
  return _internal_target_path();
}
inline void Event::set_target_path(const std::string& value) {
  _internal_set_target_path(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.target_path)
}
inline std::string* Event::mutable_target_path() {
  // @@protoc_insertion_point(field_mutable:beewatch.Event.target_path)
  return _internal_mutable_target_path();
}
inline const std::string& Event::_internal_target_path() const {
  return target_path_.Get();
}
inline void Event::_internal_set_target_path(const std::string& value) {
  
  target_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event::set_target_path(std::string&& value) {
  
  target_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beewatch.Event.target_path)
}
inline void Event::set_target_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beewatch.Event.target_path)
}
inline void Event::set_target_path(const char* value,
    size_t size) {
  
  target_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beewatch.Event.target_path)
}
inline std::string* Event::_internal_mutable_target_path() {
  
  return target_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event::release_target_path() {
  // @@protoc_insertion_point(field_release:beewatch.Event.target_path)
  return target_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event::set_allocated_target_path(std::string* target_path) {
  if (target_path != nullptr) {
    
  } else {
    
  }
  target_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beewatch.Event.target_path)
}
inline std::string* Event::unsafe_arena_release_target_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beewatch.Event.target_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event::unsafe_arena_set_allocated_target_path(
    std::string* target_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target_path != nullptr) {
    
  } else {
    
  }
  target_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beewatch.Event.target_path)
}

// string target_parent_id = 12;
inline void Event::clear_target_parent_id() {
  target_parent_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event::target_parent_id() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.target_parent_id)
  return _internal_target_parent_id();
}
inline void Event::set_target_parent_id(const std::string& value) {
  _internal_set_target_parent_id(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.target_parent_id)
}
inline std::string* Event::mutable_target_parent_id() {
  // @@protoc_insertion_point(field_mutable:beewatch.Event.target_parent_id)
  return _internal_mutable_target_parent_id();
}
inline const std::string& Event::_internal_target_parent_id() const {
  return target_parent_id_.Get();
}
inline void Event::_internal_set_target_parent_id(const std::string& value) {
  
  target_parent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event::set_target_parent_id(std::string&& value) {
  
  target_parent_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beewatch.Event.target_parent_id)
}
inline void Event::set_target_parent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_parent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beewatch.Event.target_parent_id)
}
inline void Event::set_target_parent_id(const char* value,
    size_t size) {
  
  target_parent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beewatch.Event.target_parent_id)
}
inline std::string* Event::_internal_mutable_target_parent_id() {
  
  return target_parent_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event::release_target_parent_id() {
  // @@protoc_insertion_point(field_release:beewatch.Event.target_parent_id)
  return target_parent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event::set_allocated_target_parent_id(std::string* target_parent_id) {
  if (target_parent_id != nullptr) {
    
  } else {
    
  }
  target_parent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_parent_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beewatch.Event.target_parent_id)
}
inline std::string* Event::unsafe_arena_release_target_parent_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beewatch.Event.target_parent_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_parent_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event::unsafe_arena_set_allocated_target_parent_id(
    std::string* target_parent_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target_parent_id != nullptr) {
    
  } else {
    
  }
  target_parent_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target_parent_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beewatch.Event.target_parent_id)
}

// -------------------------------------------------------------------

// Response

// uint64 completed_seq = 1;
inline void Response::clear_completed_seq() {
  completed_seq_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Response::_internal_completed_seq() const {
  return completed_seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Response::completed_seq() const {
  // @@protoc_insertion_point(field_get:beewatch.Response.completed_seq)
  return _internal_completed_seq();
}
inline void Response::_internal_set_completed_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  completed_seq_ = value;
}
inline void Response::set_completed_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_completed_seq(value);
  // @@protoc_insertion_point(field_set:beewatch.Response.completed_seq)
}

// bool shutting_down = 2;
inline void Response::clear_shutting_down() {
  shutting_down_ = false;
}
inline bool Response::_internal_shutting_down() const {
  return shutting_down_;
}
inline bool Response::shutting_down() const {
  // @@protoc_insertion_point(field_get:beewatch.Response.shutting_down)
  return _internal_shutting_down();
}
inline void Response::_internal_set_shutting_down(bool value) {
  
  shutting_down_ = value;
}
inline void Response::set_shutting_down(bool value) {
  _internal_set_shutting_down(value);
  // @@protoc_insertion_point(field_set:beewatch.Response.shutting_down)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace beewatch

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::beewatch::Event_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::beewatch::Event_Type>() {
  return ::beewatch::Event_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_beewatch_2eproto
