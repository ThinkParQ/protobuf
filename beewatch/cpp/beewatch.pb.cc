// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beewatch.proto

#include "beewatch.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace beewatch {
        template <typename>
PROTOBUF_CONSTEXPR Event::Event(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.path_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.entry_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.parent_entry_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.target_path_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.target_parent_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.format_version_major_)*/ 0u,
      /*decltype(_impl_.format_version_minor_)*/ 0u,
      /*decltype(_impl_.seq_id_)*/ ::uint64_t{0u},
      /*decltype(_impl_.dropped_seq_)*/ ::uint64_t{0u},
      /*decltype(_impl_.size_)*/ 0u,
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_.missed_seq_)*/ ::uint64_t{0u},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Response::Response(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.completed_seq_)*/ ::uint64_t{0u},
      /*decltype(_impl_.shutting_down_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace beewatch
static ::_pb::Metadata file_level_metadata_beewatch_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_beewatch_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_beewatch_2eproto = nullptr;
const ::uint32_t TableStruct_beewatch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::beewatch::Event, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::beewatch::Event, _impl_.format_version_major_),
    PROTOBUF_FIELD_OFFSET(::beewatch::Event, _impl_.format_version_minor_),
    PROTOBUF_FIELD_OFFSET(::beewatch::Event, _impl_.seq_id_),
    PROTOBUF_FIELD_OFFSET(::beewatch::Event, _impl_.size_),
    PROTOBUF_FIELD_OFFSET(::beewatch::Event, _impl_.dropped_seq_),
    PROTOBUF_FIELD_OFFSET(::beewatch::Event, _impl_.missed_seq_),
    PROTOBUF_FIELD_OFFSET(::beewatch::Event, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::beewatch::Event, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::beewatch::Event, _impl_.entry_id_),
    PROTOBUF_FIELD_OFFSET(::beewatch::Event, _impl_.parent_entry_id_),
    PROTOBUF_FIELD_OFFSET(::beewatch::Event, _impl_.target_path_),
    PROTOBUF_FIELD_OFFSET(::beewatch::Event, _impl_.target_parent_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::beewatch::Response, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::beewatch::Response, _impl_.completed_seq_),
    PROTOBUF_FIELD_OFFSET(::beewatch::Response, _impl_.shutting_down_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::beewatch::Event)},
        {20, -1, -1, sizeof(::beewatch::Response)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::beewatch::_Event_default_instance_._instance,
    &::beewatch::_Response_default_instance_._instance,
};
const char descriptor_table_protodef_beewatch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\016beewatch.proto\022\010beewatch\"\300\003\n\005Event\022\034\n\024"
    "format_version_major\030\001 \001(\r\022\034\n\024format_ver"
    "sion_minor\030\002 \001(\r\022\016\n\006seq_id\030\003 \001(\004\022\014\n\004size"
    "\030\004 \001(\r\022\023\n\013dropped_seq\030\005 \001(\004\022\022\n\nmissed_se"
    "q\030\006 \001(\004\022\"\n\004type\030\007 \001(\0162\024.beewatch.Event.T"
    "ype\022\014\n\004path\030\010 \001(\t\022\020\n\010entry_id\030\t \001(\t\022\027\n\017p"
    "arent_entry_id\030\n \001(\t\022\023\n\013target_path\030\013 \001("
    "\t\022\030\n\020target_parent_id\030\014 \001(\t\"\247\001\n\004Type\022\t\n\005"
    "FLUSH\020\000\022\014\n\010TRUNCATE\020\001\022\013\n\007SETATTR\020\002\022\017\n\013CL"
    "OSE_WRITE\020\003\022\n\n\006CREATE\020\004\022\t\n\005MKDIR\020\005\022\t\n\005MK"
    "NOD\020\006\022\013\n\007SYMLINK\020\007\022\t\n\005RMDIR\020\010\022\n\n\006UNLINK\020"
    "\t\022\014\n\010HARDLINK\020\n\022\n\n\006RENAME\020\013\022\010\n\004READ\020\014\"8\n"
    "\010Response\022\025\n\rcompleted_seq\030\001 \001(\004\022\025\n\rshut"
    "ting_down\030\002 \001(\0102F\n\nSubscriber\0228\n\rReceive"
    "Events\022\017.beewatch.Event\032\022.beewatch.Respo"
    "nse(\0010\001B4Z2github.com/thinkparq/protobuf"
    "/beewatch/go;beewatchb\006proto3"
};
static ::absl::once_flag descriptor_table_beewatch_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_beewatch_2eproto = {
    false,
    false,
    669,
    descriptor_table_protodef_beewatch_2eproto,
    "beewatch.proto",
    &descriptor_table_beewatch_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_beewatch_2eproto::offsets,
    file_level_metadata_beewatch_2eproto,
    file_level_enum_descriptors_beewatch_2eproto,
    file_level_service_descriptors_beewatch_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_beewatch_2eproto_getter() {
  return &descriptor_table_beewatch_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_beewatch_2eproto(&descriptor_table_beewatch_2eproto);
namespace beewatch {
const ::google::protobuf::EnumDescriptor* Event_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_beewatch_2eproto);
  return file_level_enum_descriptors_beewatch_2eproto[0];
}
bool Event_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Event_Type Event::FLUSH;
constexpr Event_Type Event::TRUNCATE;
constexpr Event_Type Event::SETATTR;
constexpr Event_Type Event::CLOSE_WRITE;
constexpr Event_Type Event::CREATE;
constexpr Event_Type Event::MKDIR;
constexpr Event_Type Event::MKNOD;
constexpr Event_Type Event::SYMLINK;
constexpr Event_Type Event::RMDIR;
constexpr Event_Type Event::UNLINK;
constexpr Event_Type Event::HARDLINK;
constexpr Event_Type Event::RENAME;
constexpr Event_Type Event::READ;
constexpr Event_Type Event::Type_MIN;
constexpr Event_Type Event::Type_MAX;
constexpr int Event::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Event::_Internal {
 public:
};

Event::Event(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:beewatch.Event)
}
Event::Event(const Event& from) : ::google::protobuf::Message() {
  Event* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){},
      decltype(_impl_.entry_id_){},
      decltype(_impl_.parent_entry_id_){},
      decltype(_impl_.target_path_){},
      decltype(_impl_.target_parent_id_){},
      decltype(_impl_.format_version_major_){},
      decltype(_impl_.format_version_minor_){},
      decltype(_impl_.seq_id_){},
      decltype(_impl_.dropped_seq_){},
      decltype(_impl_.size_){},
      decltype(_impl_.type_){},
      decltype(_impl_.missed_seq_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  _impl_.entry_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.entry_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entry_id().empty()) {
    _this->_impl_.entry_id_.Set(from._internal_entry_id(), _this->GetArenaForAllocation());
  }
  _impl_.parent_entry_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.parent_entry_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_entry_id().empty()) {
    _this->_impl_.parent_entry_id_.Set(from._internal_parent_entry_id(), _this->GetArenaForAllocation());
  }
  _impl_.target_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_path().empty()) {
    _this->_impl_.target_path_.Set(from._internal_target_path(), _this->GetArenaForAllocation());
  }
  _impl_.target_parent_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_parent_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_parent_id().empty()) {
    _this->_impl_.target_parent_id_.Set(from._internal_target_parent_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.format_version_major_, &from._impl_.format_version_major_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.missed_seq_) -
    reinterpret_cast<char*>(&_impl_.format_version_major_)) + sizeof(_impl_.missed_seq_));

  // @@protoc_insertion_point(copy_constructor:beewatch.Event)
}
inline void Event::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){},
      decltype(_impl_.entry_id_){},
      decltype(_impl_.parent_entry_id_){},
      decltype(_impl_.target_path_){},
      decltype(_impl_.target_parent_id_){},
      decltype(_impl_.format_version_major_){0u},
      decltype(_impl_.format_version_minor_){0u},
      decltype(_impl_.seq_id_){::uint64_t{0u}},
      decltype(_impl_.dropped_seq_){::uint64_t{0u}},
      decltype(_impl_.size_){0u},
      decltype(_impl_.type_){0},
      decltype(_impl_.missed_seq_){::uint64_t{0u}},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.entry_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.entry_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parent_entry_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.parent_entry_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_parent_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_parent_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Event::~Event() {
  // @@protoc_insertion_point(destructor:beewatch.Event)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Event::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  _impl_.entry_id_.Destroy();
  _impl_.parent_entry_id_.Destroy();
  _impl_.target_path_.Destroy();
  _impl_.target_parent_id_.Destroy();
}
void Event::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:beewatch.Event)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  _impl_.entry_id_.ClearToEmpty();
  _impl_.parent_entry_id_.ClearToEmpty();
  _impl_.target_path_.ClearToEmpty();
  _impl_.target_parent_id_.ClearToEmpty();
  ::memset(&_impl_.format_version_major_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.missed_seq_) -
      reinterpret_cast<char*>(&_impl_.format_version_major_)) + sizeof(_impl_.missed_seq_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Event::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 0, 85, 2> Event::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Event_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 format_version_major = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Event, _impl_.format_version_major_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.format_version_major_)}},
    // uint32 format_version_minor = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Event, _impl_.format_version_minor_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.format_version_minor_)}},
    // uint64 seq_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Event, _impl_.seq_id_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.seq_id_)}},
    // uint32 size = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Event, _impl_.size_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.size_)}},
    // uint64 dropped_seq = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Event, _impl_.dropped_seq_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.dropped_seq_)}},
    // uint64 missed_seq = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Event, _impl_.missed_seq_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.missed_seq_)}},
    // .beewatch.Event.Type type = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Event, _impl_.type_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.type_)}},
    // string path = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.path_)}},
    // string entry_id = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.entry_id_)}},
    // string parent_entry_id = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.parent_entry_id_)}},
    // string target_path = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.target_path_)}},
    // string target_parent_id = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.target_parent_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 format_version_major = 1;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.format_version_major_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 format_version_minor = 2;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.format_version_minor_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint64 seq_id = 3;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.seq_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint32 size = 4;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint64 dropped_seq = 5;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.dropped_seq_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 missed_seq = 6;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.missed_seq_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .beewatch.Event.Type type = 7;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string path = 8;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.path_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string entry_id = 9;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.entry_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string parent_entry_id = 10;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.parent_entry_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string target_path = 11;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.target_path_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string target_parent_id = 12;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.target_parent_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\16\0\0\0\0\0\0\0\4\10\17\13\20\0\0\0"
    "beewatch.Event"
    "path"
    "entry_id"
    "parent_entry_id"
    "target_path"
    "target_parent_id"
  }},
};

::uint8_t* Event::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beewatch.Event)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 format_version_major = 1;
  if (this->_internal_format_version_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_format_version_major(), target);
  }

  // uint32 format_version_minor = 2;
  if (this->_internal_format_version_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_format_version_minor(), target);
  }

  // uint64 seq_id = 3;
  if (this->_internal_seq_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_seq_id(), target);
  }

  // uint32 size = 4;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_size(), target);
  }

  // uint64 dropped_seq = 5;
  if (this->_internal_dropped_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_dropped_seq(), target);
  }

  // uint64 missed_seq = 6;
  if (this->_internal_missed_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_missed_seq(), target);
  }

  // .beewatch.Event.Type type = 7;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_type(), target);
  }

  // string path = 8;
  if (!this->_internal_path().empty()) {
    const std::string& _s = this->_internal_path();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "beewatch.Event.path");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string entry_id = 9;
  if (!this->_internal_entry_id().empty()) {
    const std::string& _s = this->_internal_entry_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "beewatch.Event.entry_id");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string parent_entry_id = 10;
  if (!this->_internal_parent_entry_id().empty()) {
    const std::string& _s = this->_internal_parent_entry_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "beewatch.Event.parent_entry_id");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // string target_path = 11;
  if (!this->_internal_target_path().empty()) {
    const std::string& _s = this->_internal_target_path();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "beewatch.Event.target_path");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string target_parent_id = 12;
  if (!this->_internal_target_parent_id().empty()) {
    const std::string& _s = this->_internal_target_parent_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "beewatch.Event.target_parent_id");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beewatch.Event)
  return target;
}

::size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beewatch.Event)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 8;
  if (!this->_internal_path().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_path());
  }

  // string entry_id = 9;
  if (!this->_internal_entry_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_entry_id());
  }

  // string parent_entry_id = 10;
  if (!this->_internal_parent_entry_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_parent_entry_id());
  }

  // string target_path = 11;
  if (!this->_internal_target_path().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_target_path());
  }

  // string target_parent_id = 12;
  if (!this->_internal_target_parent_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_target_parent_id());
  }

  // uint32 format_version_major = 1;
  if (this->_internal_format_version_major() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_format_version_major());
  }

  // uint32 format_version_minor = 2;
  if (this->_internal_format_version_minor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_format_version_minor());
  }

  // uint64 seq_id = 3;
  if (this->_internal_seq_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_seq_id());
  }

  // uint64 dropped_seq = 5;
  if (this->_internal_dropped_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_dropped_seq());
  }

  // uint32 size = 4;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_size());
  }

  // .beewatch.Event.Type type = 7;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint64 missed_seq = 6;
  if (this->_internal_missed_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_missed_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Event::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Event::MergeImpl
};
const ::google::protobuf::Message::ClassData*Event::GetClassData() const { return &_class_data_; }


void Event::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Event*>(&to_msg);
  auto& from = static_cast<const Event&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:beewatch.Event)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_entry_id().empty()) {
    _this->_internal_set_entry_id(from._internal_entry_id());
  }
  if (!from._internal_parent_entry_id().empty()) {
    _this->_internal_set_parent_entry_id(from._internal_parent_entry_id());
  }
  if (!from._internal_target_path().empty()) {
    _this->_internal_set_target_path(from._internal_target_path());
  }
  if (!from._internal_target_parent_id().empty()) {
    _this->_internal_set_target_parent_id(from._internal_target_parent_id());
  }
  if (from._internal_format_version_major() != 0) {
    _this->_internal_set_format_version_major(from._internal_format_version_major());
  }
  if (from._internal_format_version_minor() != 0) {
    _this->_internal_set_format_version_minor(from._internal_format_version_minor());
  }
  if (from._internal_seq_id() != 0) {
    _this->_internal_set_seq_id(from._internal_seq_id());
  }
  if (from._internal_dropped_seq() != 0) {
    _this->_internal_set_dropped_seq(from._internal_dropped_seq());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_missed_seq() != 0) {
    _this->_internal_set_missed_seq(from._internal_missed_seq());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beewatch.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entry_id_, lhs_arena,
                                       &other->_impl_.entry_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.parent_entry_id_, lhs_arena,
                                       &other->_impl_.parent_entry_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_path_, lhs_arena,
                                       &other->_impl_.target_path_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_parent_id_, lhs_arena,
                                       &other->_impl_.target_parent_id_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, _impl_.missed_seq_)
      + sizeof(Event::_impl_.missed_seq_)
      - PROTOBUF_FIELD_OFFSET(Event, _impl_.format_version_major_)>(
          reinterpret_cast<char*>(&_impl_.format_version_major_),
          reinterpret_cast<char*>(&other->_impl_.format_version_major_));
}

::google::protobuf::Metadata Event::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_beewatch_2eproto_getter, &descriptor_table_beewatch_2eproto_once,
      file_level_metadata_beewatch_2eproto[0]);
}
// ===================================================================

class Response::_Internal {
 public:
};

Response::Response(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:beewatch.Response)
}
Response::Response(const Response& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:beewatch.Response)
}
inline void Response::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.completed_seq_){::uint64_t{0u}},
      decltype(_impl_.shutting_down_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Response::~Response() {
  // @@protoc_insertion_point(destructor:beewatch.Response)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Response::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:beewatch.Response)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.completed_seq_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.shutting_down_) -
      reinterpret_cast<char*>(&_impl_.completed_seq_)) + sizeof(_impl_.shutting_down_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Response::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Response::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Response_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool shutting_down = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Response, _impl_.shutting_down_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Response, _impl_.shutting_down_)}},
    // uint64 completed_seq = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Response, _impl_.completed_seq_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Response, _impl_.completed_seq_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 completed_seq = 1;
    {PROTOBUF_FIELD_OFFSET(Response, _impl_.completed_seq_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // bool shutting_down = 2;
    {PROTOBUF_FIELD_OFFSET(Response, _impl_.shutting_down_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Response::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beewatch.Response)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 completed_seq = 1;
  if (this->_internal_completed_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_completed_seq(), target);
  }

  // bool shutting_down = 2;
  if (this->_internal_shutting_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_shutting_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beewatch.Response)
  return target;
}

::size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beewatch.Response)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 completed_seq = 1;
  if (this->_internal_completed_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_completed_seq());
  }

  // bool shutting_down = 2;
  if (this->_internal_shutting_down() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Response::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Response::MergeImpl
};
const ::google::protobuf::Message::ClassData*Response::GetClassData() const { return &_class_data_; }


void Response::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Response*>(&to_msg);
  auto& from = static_cast<const Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:beewatch.Response)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_completed_seq() != 0) {
    _this->_internal_set_completed_seq(from._internal_completed_seq());
  }
  if (from._internal_shutting_down() != 0) {
    _this->_internal_set_shutting_down(from._internal_shutting_down());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beewatch.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Response, _impl_.shutting_down_)
      + sizeof(Response::_impl_.shutting_down_)
      - PROTOBUF_FIELD_OFFSET(Response, _impl_.completed_seq_)>(
          reinterpret_cast<char*>(&_impl_.completed_seq_),
          reinterpret_cast<char*>(&other->_impl_.completed_seq_));
}

::google::protobuf::Metadata Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_beewatch_2eproto_getter, &descriptor_table_beewatch_2eproto_once,
      file_level_metadata_beewatch_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace beewatch
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
