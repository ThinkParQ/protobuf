// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: beewatch.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_beewatch_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_beewatch_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_beewatch_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_beewatch_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_beewatch_2eproto;
namespace beewatch {
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace beewatch
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace beewatch {
enum Event_Type : int {
  Event_Type_INVALID = 0,
  Event_Type_FLUSH = 1,
  Event_Type_TRUNCATE = 2,
  Event_Type_SETATTR = 3,
  Event_Type_CLOSE_WRITE = 4,
  Event_Type_CREATE = 5,
  Event_Type_MKDIR = 6,
  Event_Type_MKNOD = 7,
  Event_Type_SYMLINK = 8,
  Event_Type_RMDIR = 9,
  Event_Type_UNLINK = 10,
  Event_Type_HARDLINK = 11,
  Event_Type_RENAME = 12,
  Event_Type_OPEN_READ = 13,
  Event_Type_OPEN_WRITE = 14,
  Event_Type_OPEN_READ_WRITE = 15,
  Event_Type_LAST_WRITER_CLOSED = 16,
  Event_Type_Event_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Event_Type_Event_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Event_Type_IsValid(int value);
extern const uint32_t Event_Type_internal_data_[];
constexpr Event_Type Event_Type_Type_MIN = static_cast<Event_Type>(0);
constexpr Event_Type Event_Type_Type_MAX = static_cast<Event_Type>(16);
constexpr int Event_Type_Type_ARRAYSIZE = 16 + 1;
const ::google::protobuf::EnumDescriptor*
Event_Type_descriptor();
template <typename T>
const std::string& Event_Type_Name(T value) {
  static_assert(std::is_same<T, Event_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Event_Type_Name(static_cast<Event_Type>(value));
}
template <>
inline const std::string& Event_Type_Name(Event_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Event_Type_descriptor,
                                                 0, 16>(
      static_cast<int>(value));
}
inline bool Event_Type_Parse(absl::string_view name, Event_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Event_Type>(
      Event_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Response final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:beewatch.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Response(
      ::google::protobuf::internal::ConstantInitialized);

  inline Response(const Response& from) : Response(nullptr, from) {}
  inline Response(Response&& from) noexcept
      : Response(nullptr, std::move(from)) {}
  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
        &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Response& a, Response& b) { a.Swap(&b); }
  inline void Swap(Response* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Response& from) { Response::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Response* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "beewatch.Response"; }

 protected:
  explicit Response(::google::protobuf::Arena* arena);
  Response(::google::protobuf::Arena* arena, const Response& from);
  Response(::google::protobuf::Arena* arena, Response&& from) noexcept
      : Response(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCompletedSeqFieldNumber = 1,
    kShuttingDownFieldNumber = 2,
  };
  // uint64 completed_seq = 1;
  void clear_completed_seq() ;
  ::uint64_t completed_seq() const;
  void set_completed_seq(::uint64_t value);

  private:
  ::uint64_t _internal_completed_seq() const;
  void _internal_set_completed_seq(::uint64_t value);

  public:
  // bool shutting_down = 2;
  void clear_shutting_down() ;
  bool shutting_down() const;
  void set_shutting_down(bool value);

  private:
  bool _internal_shutting_down() const;
  void _internal_set_shutting_down(bool value);

  public:
  // @@protoc_insertion_point(class_scope:beewatch.Response)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Response_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Response& from_msg);
    ::uint64_t completed_seq_;
    bool shutting_down_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beewatch_2eproto;
};
// -------------------------------------------------------------------

class Event final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:beewatch.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Event(
      ::google::protobuf::internal::ConstantInitialized);

  inline Event(const Event& from) : Event(nullptr, from) {}
  inline Event(Event&& from) noexcept
      : Event(nullptr, std::move(from)) {}
  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
        &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Event& a, Event& b) { a.Swap(&b); }
  inline void Swap(Event* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Event>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Event& from) { Event::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Event* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "beewatch.Event"; }

 protected:
  explicit Event(::google::protobuf::Arena* arena);
  Event(::google::protobuf::Arena* arena, const Event& from);
  Event(::google::protobuf::Arena* arena, Event&& from) noexcept
      : Event(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = Event_Type;
  static constexpr Type INVALID = Event_Type_INVALID;
  static constexpr Type FLUSH = Event_Type_FLUSH;
  static constexpr Type TRUNCATE = Event_Type_TRUNCATE;
  static constexpr Type SETATTR = Event_Type_SETATTR;
  static constexpr Type CLOSE_WRITE = Event_Type_CLOSE_WRITE;
  static constexpr Type CREATE = Event_Type_CREATE;
  static constexpr Type MKDIR = Event_Type_MKDIR;
  static constexpr Type MKNOD = Event_Type_MKNOD;
  static constexpr Type SYMLINK = Event_Type_SYMLINK;
  static constexpr Type RMDIR = Event_Type_RMDIR;
  static constexpr Type UNLINK = Event_Type_UNLINK;
  static constexpr Type HARDLINK = Event_Type_HARDLINK;
  static constexpr Type RENAME = Event_Type_RENAME;
  static constexpr Type OPEN_READ = Event_Type_OPEN_READ;
  static constexpr Type OPEN_WRITE = Event_Type_OPEN_WRITE;
  static constexpr Type OPEN_READ_WRITE = Event_Type_OPEN_READ_WRITE;
  static constexpr Type LAST_WRITER_CLOSED = Event_Type_LAST_WRITER_CLOSED;
  static inline bool Type_IsValid(int value) {
    return Event_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = Event_Type_Type_MIN;
  static constexpr Type Type_MAX = Event_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = Event_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return Event_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return Event_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return Event_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kPathFieldNumber = 8,
    kEntryIdFieldNumber = 9,
    kParentEntryIdFieldNumber = 10,
    kTargetPathFieldNumber = 11,
    kTargetParentIdFieldNumber = 12,
    kFormatVersionMajorFieldNumber = 1,
    kFormatVersionMinorFieldNumber = 2,
    kSeqIdFieldNumber = 3,
    kDroppedSeqFieldNumber = 5,
    kSizeFieldNumber = 4,
    kTypeFieldNumber = 7,
    kMissedSeqFieldNumber = 6,
  };
  // string path = 8;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // string entry_id = 9;
  void clear_entry_id() ;
  const std::string& entry_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_entry_id(Arg_&& arg, Args_... args);
  std::string* mutable_entry_id();
  PROTOBUF_NODISCARD std::string* release_entry_id();
  void set_allocated_entry_id(std::string* value);

  private:
  const std::string& _internal_entry_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entry_id(
      const std::string& value);
  std::string* _internal_mutable_entry_id();

  public:
  // string parent_entry_id = 10;
  void clear_parent_entry_id() ;
  const std::string& parent_entry_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent_entry_id(Arg_&& arg, Args_... args);
  std::string* mutable_parent_entry_id();
  PROTOBUF_NODISCARD std::string* release_parent_entry_id();
  void set_allocated_parent_entry_id(std::string* value);

  private:
  const std::string& _internal_parent_entry_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_entry_id(
      const std::string& value);
  std::string* _internal_mutable_parent_entry_id();

  public:
  // string target_path = 11;
  void clear_target_path() ;
  const std::string& target_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_path(Arg_&& arg, Args_... args);
  std::string* mutable_target_path();
  PROTOBUF_NODISCARD std::string* release_target_path();
  void set_allocated_target_path(std::string* value);

  private:
  const std::string& _internal_target_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_path(
      const std::string& value);
  std::string* _internal_mutable_target_path();

  public:
  // string target_parent_id = 12;
  void clear_target_parent_id() ;
  const std::string& target_parent_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_parent_id(Arg_&& arg, Args_... args);
  std::string* mutable_target_parent_id();
  PROTOBUF_NODISCARD std::string* release_target_parent_id();
  void set_allocated_target_parent_id(std::string* value);

  private:
  const std::string& _internal_target_parent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_parent_id(
      const std::string& value);
  std::string* _internal_mutable_target_parent_id();

  public:
  // uint32 format_version_major = 1;
  void clear_format_version_major() ;
  ::uint32_t format_version_major() const;
  void set_format_version_major(::uint32_t value);

  private:
  ::uint32_t _internal_format_version_major() const;
  void _internal_set_format_version_major(::uint32_t value);

  public:
  // uint32 format_version_minor = 2;
  void clear_format_version_minor() ;
  ::uint32_t format_version_minor() const;
  void set_format_version_minor(::uint32_t value);

  private:
  ::uint32_t _internal_format_version_minor() const;
  void _internal_set_format_version_minor(::uint32_t value);

  public:
  // uint64 seq_id = 3;
  void clear_seq_id() ;
  ::uint64_t seq_id() const;
  void set_seq_id(::uint64_t value);

  private:
  ::uint64_t _internal_seq_id() const;
  void _internal_set_seq_id(::uint64_t value);

  public:
  // uint64 dropped_seq = 5;
  void clear_dropped_seq() ;
  ::uint64_t dropped_seq() const;
  void set_dropped_seq(::uint64_t value);

  private:
  ::uint64_t _internal_dropped_seq() const;
  void _internal_set_dropped_seq(::uint64_t value);

  public:
  // uint32 size = 4;
  void clear_size() ;
  ::uint32_t size() const;
  void set_size(::uint32_t value);

  private:
  ::uint32_t _internal_size() const;
  void _internal_set_size(::uint32_t value);

  public:
  // .beewatch.Event.Type type = 7;
  void clear_type() ;
  ::beewatch::Event_Type type() const;
  void set_type(::beewatch::Event_Type value);

  private:
  ::beewatch::Event_Type _internal_type() const;
  void _internal_set_type(::beewatch::Event_Type value);

  public:
  // uint64 missed_seq = 6;
  void clear_missed_seq() ;
  ::uint64_t missed_seq() const;
  void set_missed_seq(::uint64_t value);

  private:
  ::uint64_t _internal_missed_seq() const;
  void _internal_set_missed_seq(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:beewatch.Event)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 0,
      85, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Event_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Event& from_msg);
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr entry_id_;
    ::google::protobuf::internal::ArenaStringPtr parent_entry_id_;
    ::google::protobuf::internal::ArenaStringPtr target_path_;
    ::google::protobuf::internal::ArenaStringPtr target_parent_id_;
    ::uint32_t format_version_major_;
    ::uint32_t format_version_minor_;
    ::uint64_t seq_id_;
    ::uint64_t dropped_seq_;
    ::uint32_t size_;
    int type_;
    ::uint64_t missed_seq_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beewatch_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Event

// uint32 format_version_major = 1;
inline void Event::clear_format_version_major() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_version_major_ = 0u;
}
inline ::uint32_t Event::format_version_major() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.format_version_major)
  return _internal_format_version_major();
}
inline void Event::set_format_version_major(::uint32_t value) {
  _internal_set_format_version_major(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.format_version_major)
}
inline ::uint32_t Event::_internal_format_version_major() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.format_version_major_;
}
inline void Event::_internal_set_format_version_major(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_version_major_ = value;
}

// uint32 format_version_minor = 2;
inline void Event::clear_format_version_minor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_version_minor_ = 0u;
}
inline ::uint32_t Event::format_version_minor() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.format_version_minor)
  return _internal_format_version_minor();
}
inline void Event::set_format_version_minor(::uint32_t value) {
  _internal_set_format_version_minor(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.format_version_minor)
}
inline ::uint32_t Event::_internal_format_version_minor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.format_version_minor_;
}
inline void Event::_internal_set_format_version_minor(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_version_minor_ = value;
}

// uint64 seq_id = 3;
inline void Event::clear_seq_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seq_id_ = ::uint64_t{0u};
}
inline ::uint64_t Event::seq_id() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.seq_id)
  return _internal_seq_id();
}
inline void Event::set_seq_id(::uint64_t value) {
  _internal_set_seq_id(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.seq_id)
}
inline ::uint64_t Event::_internal_seq_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.seq_id_;
}
inline void Event::_internal_set_seq_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seq_id_ = value;
}

// uint32 size = 4;
inline void Event::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = 0u;
}
inline ::uint32_t Event::size() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.size)
  return _internal_size();
}
inline void Event::set_size(::uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.size)
}
inline ::uint32_t Event::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_;
}
inline void Event::_internal_set_size(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = value;
}

// uint64 dropped_seq = 5;
inline void Event::clear_dropped_seq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dropped_seq_ = ::uint64_t{0u};
}
inline ::uint64_t Event::dropped_seq() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.dropped_seq)
  return _internal_dropped_seq();
}
inline void Event::set_dropped_seq(::uint64_t value) {
  _internal_set_dropped_seq(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.dropped_seq)
}
inline ::uint64_t Event::_internal_dropped_seq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dropped_seq_;
}
inline void Event::_internal_set_dropped_seq(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dropped_seq_ = value;
}

// uint64 missed_seq = 6;
inline void Event::clear_missed_seq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.missed_seq_ = ::uint64_t{0u};
}
inline ::uint64_t Event::missed_seq() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.missed_seq)
  return _internal_missed_seq();
}
inline void Event::set_missed_seq(::uint64_t value) {
  _internal_set_missed_seq(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.missed_seq)
}
inline ::uint64_t Event::_internal_missed_seq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.missed_seq_;
}
inline void Event::_internal_set_missed_seq(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.missed_seq_ = value;
}

// .beewatch.Event.Type type = 7;
inline void Event::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::beewatch::Event_Type Event::type() const {
  // @@protoc_insertion_point(field_get:beewatch.Event.type)
  return _internal_type();
}
inline void Event::set_type(::beewatch::Event_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:beewatch.Event.type)
}
inline ::beewatch::Event_Type Event::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::beewatch::Event_Type>(_impl_.type_);
}
inline void Event::_internal_set_type(::beewatch::Event_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string path = 8;
inline void Event::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& Event::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:beewatch.Event.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Event::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:beewatch.Event.path)
}
inline std::string* Event::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:beewatch.Event.path)
  return _s;
}
inline const std::string& Event::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void Event::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* Event::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* Event::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:beewatch.Event.path)
  return _impl_.path_.Release();
}
inline void Event::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beewatch.Event.path)
}

// string entry_id = 9;
inline void Event::clear_entry_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entry_id_.ClearToEmpty();
}
inline const std::string& Event::entry_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:beewatch.Event.entry_id)
  return _internal_entry_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Event::set_entry_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entry_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:beewatch.Event.entry_id)
}
inline std::string* Event::mutable_entry_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_entry_id();
  // @@protoc_insertion_point(field_mutable:beewatch.Event.entry_id)
  return _s;
}
inline const std::string& Event::_internal_entry_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entry_id_.Get();
}
inline void Event::_internal_set_entry_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entry_id_.Set(value, GetArena());
}
inline std::string* Event::_internal_mutable_entry_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.entry_id_.Mutable( GetArena());
}
inline std::string* Event::release_entry_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:beewatch.Event.entry_id)
  return _impl_.entry_id_.Release();
}
inline void Event::set_allocated_entry_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entry_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.entry_id_.IsDefault()) {
          _impl_.entry_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beewatch.Event.entry_id)
}

// string parent_entry_id = 10;
inline void Event::clear_parent_entry_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_entry_id_.ClearToEmpty();
}
inline const std::string& Event::parent_entry_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:beewatch.Event.parent_entry_id)
  return _internal_parent_entry_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Event::set_parent_entry_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_entry_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:beewatch.Event.parent_entry_id)
}
inline std::string* Event::mutable_parent_entry_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_parent_entry_id();
  // @@protoc_insertion_point(field_mutable:beewatch.Event.parent_entry_id)
  return _s;
}
inline const std::string& Event::_internal_parent_entry_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parent_entry_id_.Get();
}
inline void Event::_internal_set_parent_entry_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_entry_id_.Set(value, GetArena());
}
inline std::string* Event::_internal_mutable_parent_entry_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.parent_entry_id_.Mutable( GetArena());
}
inline std::string* Event::release_parent_entry_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:beewatch.Event.parent_entry_id)
  return _impl_.parent_entry_id_.Release();
}
inline void Event::set_allocated_parent_entry_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_entry_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.parent_entry_id_.IsDefault()) {
          _impl_.parent_entry_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beewatch.Event.parent_entry_id)
}

// string target_path = 11;
inline void Event::clear_target_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_path_.ClearToEmpty();
}
inline const std::string& Event::target_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:beewatch.Event.target_path)
  return _internal_target_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Event::set_target_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:beewatch.Event.target_path)
}
inline std::string* Event::mutable_target_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_path();
  // @@protoc_insertion_point(field_mutable:beewatch.Event.target_path)
  return _s;
}
inline const std::string& Event::_internal_target_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_path_.Get();
}
inline void Event::_internal_set_target_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_path_.Set(value, GetArena());
}
inline std::string* Event::_internal_mutable_target_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_path_.Mutable( GetArena());
}
inline std::string* Event::release_target_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:beewatch.Event.target_path)
  return _impl_.target_path_.Release();
}
inline void Event::set_allocated_target_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.target_path_.IsDefault()) {
          _impl_.target_path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beewatch.Event.target_path)
}

// string target_parent_id = 12;
inline void Event::clear_target_parent_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_parent_id_.ClearToEmpty();
}
inline const std::string& Event::target_parent_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:beewatch.Event.target_parent_id)
  return _internal_target_parent_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Event::set_target_parent_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_parent_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:beewatch.Event.target_parent_id)
}
inline std::string* Event::mutable_target_parent_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_parent_id();
  // @@protoc_insertion_point(field_mutable:beewatch.Event.target_parent_id)
  return _s;
}
inline const std::string& Event::_internal_target_parent_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_parent_id_.Get();
}
inline void Event::_internal_set_target_parent_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_parent_id_.Set(value, GetArena());
}
inline std::string* Event::_internal_mutable_target_parent_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_parent_id_.Mutable( GetArena());
}
inline std::string* Event::release_target_parent_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:beewatch.Event.target_parent_id)
  return _impl_.target_parent_id_.Release();
}
inline void Event::set_allocated_target_parent_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_parent_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.target_parent_id_.IsDefault()) {
          _impl_.target_parent_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beewatch.Event.target_parent_id)
}

// -------------------------------------------------------------------

// Response

// uint64 completed_seq = 1;
inline void Response::clear_completed_seq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.completed_seq_ = ::uint64_t{0u};
}
inline ::uint64_t Response::completed_seq() const {
  // @@protoc_insertion_point(field_get:beewatch.Response.completed_seq)
  return _internal_completed_seq();
}
inline void Response::set_completed_seq(::uint64_t value) {
  _internal_set_completed_seq(value);
  // @@protoc_insertion_point(field_set:beewatch.Response.completed_seq)
}
inline ::uint64_t Response::_internal_completed_seq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.completed_seq_;
}
inline void Response::_internal_set_completed_seq(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.completed_seq_ = value;
}

// bool shutting_down = 2;
inline void Response::clear_shutting_down() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shutting_down_ = false;
}
inline bool Response::shutting_down() const {
  // @@protoc_insertion_point(field_get:beewatch.Response.shutting_down)
  return _internal_shutting_down();
}
inline void Response::set_shutting_down(bool value) {
  _internal_set_shutting_down(value);
  // @@protoc_insertion_point(field_set:beewatch.Response.shutting_down)
}
inline bool Response::_internal_shutting_down() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shutting_down_;
}
inline void Response::_internal_set_shutting_down(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shutting_down_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace beewatch


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::beewatch::Event_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::beewatch::Event_Type>() {
  return ::beewatch::Event_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_beewatch_2eproto_2epb_2eh
