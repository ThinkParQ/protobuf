// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: license.proto
// Protobuf C++ Version: 5.27.2

#include "license.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace license {

inline constexpr VerifyFeatureResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{static_cast< ::license::VerifyResult >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VerifyFeatureResult::VerifyFeatureResult(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VerifyFeatureResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyFeatureResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyFeatureResultDefaultTypeInternal() {}
  union {
    VerifyFeatureResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyFeatureResultDefaultTypeInternal _VerifyFeatureResult_default_instance_;

inline constexpr VerifyCertResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : serial_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{static_cast< ::license::VerifyResult >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VerifyCertResult::VerifyCertResult(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VerifyCertResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyCertResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyCertResultDefaultTypeInternal() {}
  union {
    VerifyCertResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyCertResultDefaultTypeInternal _VerifyCertResult_default_instance_;

inline constexpr CertData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        dns_names_{},
        organization_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        organizationalunit_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        locality_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        commonname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        serialnumber_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        validfrom_{nullptr},
        validuntil_{nullptr},
        parent_data_{nullptr},
        serial_{::int64_t{0}},
        type_{static_cast< ::license::CertType >(0)},
        is_ca_{false} {}

template <typename>
PROTOBUF_CONSTEXPR CertData::CertData(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CertDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CertDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CertDataDefaultTypeInternal() {}
  union {
    CertData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CertDataDefaultTypeInternal _CertData_default_instance_;

inline constexpr GetCertDataResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_{nullptr},
        result_{static_cast< ::license::VerifyResult >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GetCertDataResult::GetCertDataResult(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetCertDataResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCertDataResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCertDataResultDefaultTypeInternal() {}
  union {
    GetCertDataResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCertDataResultDefaultTypeInternal _GetCertDataResult_default_instance_;
}  // namespace license
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_license_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_license_2eproto = nullptr;
const ::uint32_t
    TableStruct_license_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::license::VerifyCertResult, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::license::VerifyCertResult, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::license::VerifyCertResult, _impl_.serial_),
        PROTOBUF_FIELD_OFFSET(::license::VerifyCertResult, _impl_.message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::license::VerifyFeatureResult, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::license::VerifyFeatureResult, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::license::VerifyFeatureResult, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::license::GetCertDataResult, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::license::GetCertDataResult, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::license::GetCertDataResult, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::license::GetCertDataResult, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::license::GetCertDataResult, _impl_.message_),
        ~0u,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::license::CertData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::license::CertData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::license::CertData, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::license::CertData, _impl_.serial_),
        PROTOBUF_FIELD_OFFSET(::license::CertData, _impl_.organization_),
        PROTOBUF_FIELD_OFFSET(::license::CertData, _impl_.organizationalunit_),
        PROTOBUF_FIELD_OFFSET(::license::CertData, _impl_.country_),
        PROTOBUF_FIELD_OFFSET(::license::CertData, _impl_.locality_),
        PROTOBUF_FIELD_OFFSET(::license::CertData, _impl_.commonname_),
        PROTOBUF_FIELD_OFFSET(::license::CertData, _impl_.serialnumber_),
        PROTOBUF_FIELD_OFFSET(::license::CertData, _impl_.validfrom_),
        PROTOBUF_FIELD_OFFSET(::license::CertData, _impl_.validuntil_),
        PROTOBUF_FIELD_OFFSET(::license::CertData, _impl_.dns_names_),
        PROTOBUF_FIELD_OFFSET(::license::CertData, _impl_.is_ca_),
        PROTOBUF_FIELD_OFFSET(::license::CertData, _impl_.parent_data_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        ~0u,
        ~0u,
        2,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::license::VerifyCertResult)},
        {11, -1, -1, sizeof(::license::VerifyFeatureResult)},
        {21, 32, -1, sizeof(::license::GetCertDataResult)},
        {35, 56, -1, sizeof(::license::CertData)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::license::_VerifyCertResult_default_instance_._instance,
    &::license::_VerifyFeatureResult_default_instance_._instance,
    &::license::_GetCertDataResult_default_instance_._instance,
    &::license::_CertData_default_instance_._instance,
};
const char descriptor_table_protodef_license_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\rlicense.proto\022\007license\032\037google/protobu"
    "f/timestamp.proto\"Z\n\020VerifyCertResult\022%\n"
    "\006result\030\001 \001(\0162\025.license.VerifyResult\022\016\n\006"
    "serial\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\"M\n\023VerifyF"
    "eatureResult\022%\n\006result\030\001 \001(\0162\025.license.V"
    "erifyResult\022\017\n\007message\030\002 \001(\t\"l\n\021GetCertD"
    "ataResult\022%\n\006result\030\001 \001(\0162\025.license.Veri"
    "fyResult\022\037\n\004data\030\002 \001(\0132\021.license.CertDat"
    "a\022\017\n\007message\030\003 \001(\t\"\202\003\n\010CertData\022\037\n\004type\030"
    "\001 \001(\0162\021.license.CertType\022\016\n\006serial\030\002 \001(\003"
    "\022\024\n\014organization\030\003 \001(\t\022\032\n\022organizational"
    "Unit\030\004 \001(\t\022\017\n\007country\030\005 \001(\t\022\020\n\010locality\030"
    "\006 \001(\t\022\022\n\ncommonName\030\007 \001(\t\022\024\n\014serialNumbe"
    "r\030\010 \001(\t\022-\n\tvalidFrom\030\t \001(\0132\032.google.prot"
    "obuf.Timestamp\022.\n\nvalidUntil\030\n \001(\0132\032.goo"
    "gle.protobuf.Timestamp\022\033\n\tdns_names\030\013 \003("
    "\tR\010DNSNames\022\r\n\005is_ca\030\014 \001(\010\022+\n\013parent_dat"
    "a\030\r \001(\0132\021.license.CertDataH\000\210\001\001B\016\n\014_pare"
    "nt_data*^\n\014VerifyResult\022\026\n\022VERIFY_UNSPEC"
    "IFIED\020\000\022\020\n\014VERIFY_ERROR\020\001\022\020\n\014VERIFY_VALI"
    "D\020\002\022\022\n\016VERIFY_INVALID\020\003*\243\001\n\010CertType\022\031\n\025"
    "CERT_TYPE_UNSPECIFIED\020\000\022\025\n\021CERT_TYPE_CA_"
    "ROOT\020\001\022\035\n\031CERT_TYPE_CA_INTERMEDIATE\020\002\022\025\n"
    "\021CERT_TYPE_PARTNER\020\003\022\026\n\022CERT_TYPE_CUSTOM"
    "ER\020\004\022\027\n\023CERT_TYPE_TEMPORARY\020\005B*Z(github."
    "com/thinkparq/protobuf/go/licenseb\006proto"
    "3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_license_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_license_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_license_2eproto = {
    false,
    false,
    1041,
    descriptor_table_protodef_license_2eproto,
    "license.proto",
    &descriptor_table_license_2eproto_once,
    descriptor_table_license_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_license_2eproto::offsets,
    file_level_enum_descriptors_license_2eproto,
    file_level_service_descriptors_license_2eproto,
};
namespace license {
const ::google::protobuf::EnumDescriptor* VerifyResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_license_2eproto);
  return file_level_enum_descriptors_license_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t VerifyResult_internal_data_[] = {
    262144u, 0u, };
bool VerifyResult_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* CertType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_license_2eproto);
  return file_level_enum_descriptors_license_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t CertType_internal_data_[] = {
    393216u, 0u, };
bool CertType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
// ===================================================================

class VerifyCertResult::_Internal {
 public:
};

VerifyCertResult::VerifyCertResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:license.VerifyCertResult)
}
inline PROTOBUF_NDEBUG_INLINE VerifyCertResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::license::VerifyCertResult& from_msg)
      : serial_(arena, from.serial_),
        message_(arena, from.message_),
        _cached_size_{0} {}

VerifyCertResult::VerifyCertResult(
    ::google::protobuf::Arena* arena,
    const VerifyCertResult& from)
    : ::google::protobuf::Message(arena) {
  VerifyCertResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.result_ = from._impl_.result_;

  // @@protoc_insertion_point(copy_constructor:license.VerifyCertResult)
}
inline PROTOBUF_NDEBUG_INLINE VerifyCertResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : serial_(arena),
        message_(arena),
        _cached_size_{0} {}

inline void VerifyCertResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.result_ = {};
}
VerifyCertResult::~VerifyCertResult() {
  // @@protoc_insertion_point(destructor:license.VerifyCertResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VerifyCertResult::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.serial_.Destroy();
  _impl_.message_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
VerifyCertResult::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(VerifyCertResult, _impl_._cached_size_),
              false,
          },
          &VerifyCertResult::MergeImpl,
          &VerifyCertResult::kDescriptorMethods,
          &descriptor_table_license_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 46, 2> VerifyCertResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VerifyCertResult_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::license::VerifyCertResult>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .license.VerifyResult result = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VerifyCertResult, _impl_.result_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VerifyCertResult, _impl_.result_)}},
    // string serial = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(VerifyCertResult, _impl_.serial_)}},
    // string message = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(VerifyCertResult, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .license.VerifyResult result = 1;
    {PROTOBUF_FIELD_OFFSET(VerifyCertResult, _impl_.result_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string serial = 2;
    {PROTOBUF_FIELD_OFFSET(VerifyCertResult, _impl_.serial_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string message = 3;
    {PROTOBUF_FIELD_OFFSET(VerifyCertResult, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\30\0\6\7\0\0\0\0"
    "license.VerifyCertResult"
    "serial"
    "message"
  }},
};

PROTOBUF_NOINLINE void VerifyCertResult::Clear() {
// @@protoc_insertion_point(message_clear_start:license.VerifyCertResult)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serial_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* VerifyCertResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:license.VerifyCertResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .license.VerifyResult result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_result(), target);
  }

  // string serial = 2;
  if (!this->_internal_serial().empty()) {
    const std::string& _s = this->_internal_serial();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "license.VerifyCertResult.serial");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "license.VerifyCertResult.message");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:license.VerifyCertResult)
  return target;
}

::size_t VerifyCertResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:license.VerifyCertResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string serial = 2;
  if (!this->_internal_serial().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_serial());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // .license.VerifyResult result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void VerifyCertResult::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VerifyCertResult*>(&to_msg);
  auto& from = static_cast<const VerifyCertResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:license.VerifyCertResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serial().empty()) {
    _this->_internal_set_serial(from._internal_serial());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_result() != 0) {
    _this->_impl_.result_ = from._impl_.result_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyCertResult::CopyFrom(const VerifyCertResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:license.VerifyCertResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VerifyCertResult::InternalSwap(VerifyCertResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.serial_, &other->_impl_.serial_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  swap(_impl_.result_, other->_impl_.result_);
}

::google::protobuf::Metadata VerifyCertResult::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VerifyFeatureResult::_Internal {
 public:
};

VerifyFeatureResult::VerifyFeatureResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:license.VerifyFeatureResult)
}
inline PROTOBUF_NDEBUG_INLINE VerifyFeatureResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::license::VerifyFeatureResult& from_msg)
      : message_(arena, from.message_),
        _cached_size_{0} {}

VerifyFeatureResult::VerifyFeatureResult(
    ::google::protobuf::Arena* arena,
    const VerifyFeatureResult& from)
    : ::google::protobuf::Message(arena) {
  VerifyFeatureResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.result_ = from._impl_.result_;

  // @@protoc_insertion_point(copy_constructor:license.VerifyFeatureResult)
}
inline PROTOBUF_NDEBUG_INLINE VerifyFeatureResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void VerifyFeatureResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.result_ = {};
}
VerifyFeatureResult::~VerifyFeatureResult() {
  // @@protoc_insertion_point(destructor:license.VerifyFeatureResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VerifyFeatureResult::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
VerifyFeatureResult::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(VerifyFeatureResult, _impl_._cached_size_),
              false,
          },
          &VerifyFeatureResult::MergeImpl,
          &VerifyFeatureResult::kDescriptorMethods,
          &descriptor_table_license_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 43, 2> VerifyFeatureResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VerifyFeatureResult_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::license::VerifyFeatureResult>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(VerifyFeatureResult, _impl_.message_)}},
    // .license.VerifyResult result = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VerifyFeatureResult, _impl_.result_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VerifyFeatureResult, _impl_.result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .license.VerifyResult result = 1;
    {PROTOBUF_FIELD_OFFSET(VerifyFeatureResult, _impl_.result_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(VerifyFeatureResult, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\33\0\7\0\0\0\0\0"
    "license.VerifyFeatureResult"
    "message"
  }},
};

PROTOBUF_NOINLINE void VerifyFeatureResult::Clear() {
// @@protoc_insertion_point(message_clear_start:license.VerifyFeatureResult)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* VerifyFeatureResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:license.VerifyFeatureResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .license.VerifyResult result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_result(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "license.VerifyFeatureResult.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:license.VerifyFeatureResult)
  return target;
}

::size_t VerifyFeatureResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:license.VerifyFeatureResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // .license.VerifyResult result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void VerifyFeatureResult::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VerifyFeatureResult*>(&to_msg);
  auto& from = static_cast<const VerifyFeatureResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:license.VerifyFeatureResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_result() != 0) {
    _this->_impl_.result_ = from._impl_.result_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyFeatureResult::CopyFrom(const VerifyFeatureResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:license.VerifyFeatureResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VerifyFeatureResult::InternalSwap(VerifyFeatureResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  swap(_impl_.result_, other->_impl_.result_);
}

::google::protobuf::Metadata VerifyFeatureResult::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetCertDataResult::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetCertDataResult>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetCertDataResult, _impl_._has_bits_);
};

GetCertDataResult::GetCertDataResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:license.GetCertDataResult)
}
inline PROTOBUF_NDEBUG_INLINE GetCertDataResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::license::GetCertDataResult& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_(arena, from.message_) {}

GetCertDataResult::GetCertDataResult(
    ::google::protobuf::Arena* arena,
    const GetCertDataResult& from)
    : ::google::protobuf::Message(arena) {
  GetCertDataResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.data_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::license::CertData>(
                              arena, *from._impl_.data_)
                        : nullptr;
  _impl_.result_ = from._impl_.result_;

  // @@protoc_insertion_point(copy_constructor:license.GetCertDataResult)
}
inline PROTOBUF_NDEBUG_INLINE GetCertDataResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        message_(arena) {}

inline void GetCertDataResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, data_),
           0,
           offsetof(Impl_, result_) -
               offsetof(Impl_, data_) +
               sizeof(Impl_::result_));
}
GetCertDataResult::~GetCertDataResult() {
  // @@protoc_insertion_point(destructor:license.GetCertDataResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetCertDataResult::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  delete _impl_.data_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
GetCertDataResult::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(GetCertDataResult, _impl_._cached_size_),
              false,
          },
          &GetCertDataResult::MergeImpl,
          &GetCertDataResult::kDescriptorMethods,
          &descriptor_table_license_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 41, 2> GetCertDataResult::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetCertDataResult, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetCertDataResult_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::license::GetCertDataResult>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .license.VerifyResult result = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetCertDataResult, _impl_.result_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GetCertDataResult, _impl_.result_)}},
    // .license.CertData data = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetCertDataResult, _impl_.data_)}},
    // string message = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(GetCertDataResult, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .license.VerifyResult result = 1;
    {PROTOBUF_FIELD_OFFSET(GetCertDataResult, _impl_.result_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .license.CertData data = 2;
    {PROTOBUF_FIELD_OFFSET(GetCertDataResult, _impl_.data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string message = 3;
    {PROTOBUF_FIELD_OFFSET(GetCertDataResult, _impl_.message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::license::CertData>()},
  }}, {{
    "\31\0\0\7\0\0\0\0"
    "license.GetCertDataResult"
    "message"
  }},
};

PROTOBUF_NOINLINE void GetCertDataResult::Clear() {
// @@protoc_insertion_point(message_clear_start:license.GetCertDataResult)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* GetCertDataResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:license.GetCertDataResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .license.VerifyResult result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_result(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .license.CertData data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.data_, _impl_.data_->GetCachedSize(), target, stream);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "license.GetCertDataResult.message");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:license.GetCertDataResult)
  return target;
}

::size_t GetCertDataResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:license.GetCertDataResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // .license.CertData data = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.data_);
  }

  // .license.VerifyResult result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void GetCertDataResult::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetCertDataResult*>(&to_msg);
  auto& from = static_cast<const GetCertDataResult&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:license.GetCertDataResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.data_ != nullptr);
    if (_this->_impl_.data_ == nullptr) {
      _this->_impl_.data_ =
          ::google::protobuf::Message::CopyConstruct<::license::CertData>(arena, *from._impl_.data_);
    } else {
      _this->_impl_.data_->MergeFrom(*from._impl_.data_);
    }
  }
  if (from._internal_result() != 0) {
    _this->_impl_.result_ = from._impl_.result_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetCertDataResult::CopyFrom(const GetCertDataResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:license.GetCertDataResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetCertDataResult::InternalSwap(GetCertDataResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCertDataResult, _impl_.result_)
      + sizeof(GetCertDataResult::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(GetCertDataResult, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::google::protobuf::Metadata GetCertDataResult::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CertData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CertData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CertData, _impl_._has_bits_);
};

void CertData::clear_validfrom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.validfrom_ != nullptr) _impl_.validfrom_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CertData::clear_validuntil() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.validuntil_ != nullptr) _impl_.validuntil_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CertData::CertData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:license.CertData)
}
inline PROTOBUF_NDEBUG_INLINE CertData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::license::CertData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        dns_names_{visibility, arena, from.dns_names_},
        organization_(arena, from.organization_),
        organizationalunit_(arena, from.organizationalunit_),
        country_(arena, from.country_),
        locality_(arena, from.locality_),
        commonname_(arena, from.commonname_),
        serialnumber_(arena, from.serialnumber_) {}

CertData::CertData(
    ::google::protobuf::Arena* arena,
    const CertData& from)
    : ::google::protobuf::Message(arena) {
  CertData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.validfrom_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.validfrom_)
                        : nullptr;
  _impl_.validuntil_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.validuntil_)
                        : nullptr;
  _impl_.parent_data_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::license::CertData>(
                              arena, *from._impl_.parent_data_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, serial_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, serial_),
           offsetof(Impl_, is_ca_) -
               offsetof(Impl_, serial_) +
               sizeof(Impl_::is_ca_));

  // @@protoc_insertion_point(copy_constructor:license.CertData)
}
inline PROTOBUF_NDEBUG_INLINE CertData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        dns_names_{visibility, arena},
        organization_(arena),
        organizationalunit_(arena),
        country_(arena),
        locality_(arena),
        commonname_(arena),
        serialnumber_(arena) {}

inline void CertData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, validfrom_),
           0,
           offsetof(Impl_, is_ca_) -
               offsetof(Impl_, validfrom_) +
               sizeof(Impl_::is_ca_));
}
CertData::~CertData() {
  // @@protoc_insertion_point(destructor:license.CertData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CertData::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.organization_.Destroy();
  _impl_.organizationalunit_.Destroy();
  _impl_.country_.Destroy();
  _impl_.locality_.Destroy();
  _impl_.commonname_.Destroy();
  _impl_.serialnumber_.Destroy();
  delete _impl_.validfrom_;
  delete _impl_.validuntil_;
  delete _impl_.parent_data_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CertData::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CertData, _impl_._cached_size_),
              false,
          },
          &CertData::MergeImpl,
          &CertData::kDescriptorMethods,
          &descriptor_table_license_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 3, 109, 2> CertData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CertData, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CertData_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::license::CertData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .license.CertType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CertData, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CertData, _impl_.type_)}},
    // int64 serial = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CertData, _impl_.serial_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CertData, _impl_.serial_)}},
    // string organization = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CertData, _impl_.organization_)}},
    // string organizationalUnit = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CertData, _impl_.organizationalunit_)}},
    // string country = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(CertData, _impl_.country_)}},
    // string locality = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(CertData, _impl_.locality_)}},
    // string commonName = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(CertData, _impl_.commonname_)}},
    // string serialNumber = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(CertData, _impl_.serialnumber_)}},
    // .google.protobuf.Timestamp validFrom = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 0, 0, PROTOBUF_FIELD_OFFSET(CertData, _impl_.validfrom_)}},
    // .google.protobuf.Timestamp validUntil = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 1, 1, PROTOBUF_FIELD_OFFSET(CertData, _impl_.validuntil_)}},
    // repeated string dns_names = 11 [json_name = "DNSNames"];
    {::_pbi::TcParser::FastUR1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(CertData, _impl_.dns_names_)}},
    // bool is_ca = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CertData, _impl_.is_ca_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(CertData, _impl_.is_ca_)}},
    // optional .license.CertData parent_data = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 2, 2, PROTOBUF_FIELD_OFFSET(CertData, _impl_.parent_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .license.CertType type = 1;
    {PROTOBUF_FIELD_OFFSET(CertData, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int64 serial = 2;
    {PROTOBUF_FIELD_OFFSET(CertData, _impl_.serial_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string organization = 3;
    {PROTOBUF_FIELD_OFFSET(CertData, _impl_.organization_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string organizationalUnit = 4;
    {PROTOBUF_FIELD_OFFSET(CertData, _impl_.organizationalunit_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country = 5;
    {PROTOBUF_FIELD_OFFSET(CertData, _impl_.country_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string locality = 6;
    {PROTOBUF_FIELD_OFFSET(CertData, _impl_.locality_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string commonName = 7;
    {PROTOBUF_FIELD_OFFSET(CertData, _impl_.commonname_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string serialNumber = 8;
    {PROTOBUF_FIELD_OFFSET(CertData, _impl_.serialnumber_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp validFrom = 9;
    {PROTOBUF_FIELD_OFFSET(CertData, _impl_.validfrom_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp validUntil = 10;
    {PROTOBUF_FIELD_OFFSET(CertData, _impl_.validuntil_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string dns_names = 11 [json_name = "DNSNames"];
    {PROTOBUF_FIELD_OFFSET(CertData, _impl_.dns_names_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool is_ca = 12;
    {PROTOBUF_FIELD_OFFSET(CertData, _impl_.is_ca_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // optional .license.CertData parent_data = 13;
    {PROTOBUF_FIELD_OFFSET(CertData, _impl_.parent_data_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::license::CertData>()},
  }}, {{
    "\20\0\0\14\22\7\10\12\14\0\0\11\0\0\0\0"
    "license.CertData"
    "organization"
    "organizationalUnit"
    "country"
    "locality"
    "commonName"
    "serialNumber"
    "dns_names"
  }},
};

PROTOBUF_NOINLINE void CertData::Clear() {
// @@protoc_insertion_point(message_clear_start:license.CertData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dns_names_.Clear();
  _impl_.organization_.ClearToEmpty();
  _impl_.organizationalunit_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  _impl_.locality_.ClearToEmpty();
  _impl_.commonname_.ClearToEmpty();
  _impl_.serialnumber_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.validfrom_ != nullptr);
      _impl_.validfrom_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.validuntil_ != nullptr);
      _impl_.validuntil_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.parent_data_ != nullptr);
      _impl_.parent_data_->Clear();
    }
  }
  ::memset(&_impl_.serial_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_ca_) -
      reinterpret_cast<char*>(&_impl_.serial_)) + sizeof(_impl_.is_ca_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CertData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:license.CertData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .license.CertType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // int64 serial = 2;
  if (this->_internal_serial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_serial(), target);
  }

  // string organization = 3;
  if (!this->_internal_organization().empty()) {
    const std::string& _s = this->_internal_organization();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "license.CertData.organization");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string organizationalUnit = 4;
  if (!this->_internal_organizationalunit().empty()) {
    const std::string& _s = this->_internal_organizationalunit();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "license.CertData.organizationalUnit");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string country = 5;
  if (!this->_internal_country().empty()) {
    const std::string& _s = this->_internal_country();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "license.CertData.country");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string locality = 6;
  if (!this->_internal_locality().empty()) {
    const std::string& _s = this->_internal_locality();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "license.CertData.locality");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string commonName = 7;
  if (!this->_internal_commonname().empty()) {
    const std::string& _s = this->_internal_commonname();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "license.CertData.commonName");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string serialNumber = 8;
  if (!this->_internal_serialnumber().empty()) {
    const std::string& _s = this->_internal_serialnumber();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "license.CertData.serialNumber");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp validFrom = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *_impl_.validfrom_, _impl_.validfrom_->GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp validUntil = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, *_impl_.validuntil_, _impl_.validuntil_->GetCachedSize(), target, stream);
  }

  // repeated string dns_names = 11 [json_name = "DNSNames"];
  for (int i = 0, n = this->_internal_dns_names_size(); i < n; ++i) {
    const auto& s = this->_internal_dns_names().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "license.CertData.dns_names");
    target = stream->WriteString(11, s, target);
  }

  // bool is_ca = 12;
  if (this->_internal_is_ca() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_is_ca(), target);
  }

  // optional .license.CertData parent_data = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, *_impl_.parent_data_, _impl_.parent_data_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:license.CertData)
  return target;
}

::size_t CertData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:license.CertData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated string dns_names = 11 [json_name = "DNSNames"];
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_dns_names().size());
  for (int i = 0, n = _internal_dns_names().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_dns_names().Get(i));
  }
  // string organization = 3;
  if (!this->_internal_organization().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_organization());
  }

  // string organizationalUnit = 4;
  if (!this->_internal_organizationalunit().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_organizationalunit());
  }

  // string country = 5;
  if (!this->_internal_country().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_country());
  }

  // string locality = 6;
  if (!this->_internal_locality().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_locality());
  }

  // string commonName = 7;
  if (!this->_internal_commonname().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_commonname());
  }

  // string serialNumber = 8;
  if (!this->_internal_serialnumber().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_serialnumber());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .google.protobuf.Timestamp validFrom = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.validfrom_);
    }

    // .google.protobuf.Timestamp validUntil = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.validuntil_);
    }

    // optional .license.CertData parent_data = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.parent_data_);
    }

  }
  // int64 serial = 2;
  if (this->_internal_serial() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_serial());
  }

  // .license.CertType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool is_ca = 12;
  if (this->_internal_is_ca() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CertData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CertData*>(&to_msg);
  auto& from = static_cast<const CertData&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:license.CertData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_dns_names()->MergeFrom(from._internal_dns_names());
  if (!from._internal_organization().empty()) {
    _this->_internal_set_organization(from._internal_organization());
  }
  if (!from._internal_organizationalunit().empty()) {
    _this->_internal_set_organizationalunit(from._internal_organizationalunit());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (!from._internal_locality().empty()) {
    _this->_internal_set_locality(from._internal_locality());
  }
  if (!from._internal_commonname().empty()) {
    _this->_internal_set_commonname(from._internal_commonname());
  }
  if (!from._internal_serialnumber().empty()) {
    _this->_internal_set_serialnumber(from._internal_serialnumber());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.validfrom_ != nullptr);
      if (_this->_impl_.validfrom_ == nullptr) {
        _this->_impl_.validfrom_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.validfrom_);
      } else {
        _this->_impl_.validfrom_->MergeFrom(*from._impl_.validfrom_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.validuntil_ != nullptr);
      if (_this->_impl_.validuntil_ == nullptr) {
        _this->_impl_.validuntil_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.validuntil_);
      } else {
        _this->_impl_.validuntil_->MergeFrom(*from._impl_.validuntil_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.parent_data_ != nullptr);
      if (_this->_impl_.parent_data_ == nullptr) {
        _this->_impl_.parent_data_ =
            ::google::protobuf::Message::CopyConstruct<::license::CertData>(arena, *from._impl_.parent_data_);
      } else {
        _this->_impl_.parent_data_->MergeFrom(*from._impl_.parent_data_);
      }
    }
  }
  if (from._internal_serial() != 0) {
    _this->_impl_.serial_ = from._impl_.serial_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_is_ca() != 0) {
    _this->_impl_.is_ca_ = from._impl_.is_ca_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CertData::CopyFrom(const CertData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:license.CertData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CertData::InternalSwap(CertData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dns_names_.InternalSwap(&other->_impl_.dns_names_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.organization_, &other->_impl_.organization_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.organizationalunit_, &other->_impl_.organizationalunit_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_, &other->_impl_.country_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.locality_, &other->_impl_.locality_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.commonname_, &other->_impl_.commonname_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.serialnumber_, &other->_impl_.serialnumber_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CertData, _impl_.is_ca_)
      + sizeof(CertData::_impl_.is_ca_)
      - PROTOBUF_FIELD_OFFSET(CertData, _impl_.validfrom_)>(
          reinterpret_cast<char*>(&_impl_.validfrom_),
          reinterpret_cast<char*>(&other->_impl_.validfrom_));
}

::google::protobuf::Metadata CertData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace license
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_license_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
