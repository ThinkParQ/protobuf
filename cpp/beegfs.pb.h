// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: beegfs.proto
// Protobuf C++ Version: 5.29.2

#ifndef beegfs_2eproto_2epb_2eh
#define beegfs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_beegfs_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_beegfs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_beegfs_2eproto;
namespace beegfs {
class EntityIdSet;
struct EntityIdSetDefaultTypeInternal;
extern EntityIdSetDefaultTypeInternal _EntityIdSet_default_instance_;
class LegacyId;
struct LegacyIdDefaultTypeInternal;
extern LegacyIdDefaultTypeInternal _LegacyId_default_instance_;
}  // namespace beegfs
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace beegfs {
enum EntityType : int {
  ENTITY_TYPE_UNSPECIFIED = 0,
  NODE = 1,
  TARGET = 2,
  BUDDY_GROUP = 3,
  POOL = 4,
  EntityType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EntityType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EntityType_IsValid(int value);
extern const uint32_t EntityType_internal_data_[];
constexpr EntityType EntityType_MIN = static_cast<EntityType>(0);
constexpr EntityType EntityType_MAX = static_cast<EntityType>(4);
constexpr int EntityType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
EntityType_descriptor();
template <typename T>
const std::string& EntityType_Name(T value) {
  static_assert(std::is_same<T, EntityType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EntityType_Name().");
  return EntityType_Name(static_cast<EntityType>(value));
}
template <>
inline const std::string& EntityType_Name(EntityType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EntityType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool EntityType_Parse(absl::string_view name, EntityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EntityType>(
      EntityType_descriptor(), name, value);
}
enum NodeType : int {
  NODE_TYPE_UNSPECIFIED = 0,
  CLIENT = 1,
  META = 2,
  STORAGE = 3,
  MANAGEMENT = 4,
  REMOTE = 5,
  SYNC = 6,
  NodeType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NodeType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NodeType_IsValid(int value);
extern const uint32_t NodeType_internal_data_[];
constexpr NodeType NodeType_MIN = static_cast<NodeType>(0);
constexpr NodeType NodeType_MAX = static_cast<NodeType>(6);
constexpr int NodeType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
NodeType_descriptor();
template <typename T>
const std::string& NodeType_Name(T value) {
  static_assert(std::is_same<T, NodeType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NodeType_Name().");
  return NodeType_Name(static_cast<NodeType>(value));
}
template <>
inline const std::string& NodeType_Name(NodeType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NodeType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool NodeType_Parse(absl::string_view name, NodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeType>(
      NodeType_descriptor(), name, value);
}
enum ReachabilityState : int {
  REACHABILITY_STATE_UNSPECIFIED = 0,
  ONLINE = 1,
  POFFLINE = 2,
  OFFLINE = 3,
  ReachabilityState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ReachabilityState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ReachabilityState_IsValid(int value);
extern const uint32_t ReachabilityState_internal_data_[];
constexpr ReachabilityState ReachabilityState_MIN = static_cast<ReachabilityState>(0);
constexpr ReachabilityState ReachabilityState_MAX = static_cast<ReachabilityState>(3);
constexpr int ReachabilityState_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ReachabilityState_descriptor();
template <typename T>
const std::string& ReachabilityState_Name(T value) {
  static_assert(std::is_same<T, ReachabilityState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ReachabilityState_Name().");
  return ReachabilityState_Name(static_cast<ReachabilityState>(value));
}
template <>
inline const std::string& ReachabilityState_Name(ReachabilityState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ReachabilityState_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ReachabilityState_Parse(absl::string_view name, ReachabilityState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReachabilityState>(
      ReachabilityState_descriptor(), name, value);
}
enum ConsistencyState : int {
  CONSISTENCY_STATE_UNSPECIFIED = 0,
  GOOD = 1,
  NEEDS_RESYNC = 2,
  BAD = 3,
  ConsistencyState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ConsistencyState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ConsistencyState_IsValid(int value);
extern const uint32_t ConsistencyState_internal_data_[];
constexpr ConsistencyState ConsistencyState_MIN = static_cast<ConsistencyState>(0);
constexpr ConsistencyState ConsistencyState_MAX = static_cast<ConsistencyState>(3);
constexpr int ConsistencyState_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ConsistencyState_descriptor();
template <typename T>
const std::string& ConsistencyState_Name(T value) {
  static_assert(std::is_same<T, ConsistencyState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ConsistencyState_Name().");
  return ConsistencyState_Name(static_cast<ConsistencyState>(value));
}
template <>
inline const std::string& ConsistencyState_Name(ConsistencyState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ConsistencyState_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ConsistencyState_Parse(absl::string_view name, ConsistencyState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConsistencyState>(
      ConsistencyState_descriptor(), name, value);
}
enum CapacityPool : int {
  CAPACITY_POOL_UNSPECIFIED = 0,
  NORMAL = 1,
  LOW = 2,
  EMERGENCY = 3,
  CapacityPool_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CapacityPool_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CapacityPool_IsValid(int value);
extern const uint32_t CapacityPool_internal_data_[];
constexpr CapacityPool CapacityPool_MIN = static_cast<CapacityPool>(0);
constexpr CapacityPool CapacityPool_MAX = static_cast<CapacityPool>(3);
constexpr int CapacityPool_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
CapacityPool_descriptor();
template <typename T>
const std::string& CapacityPool_Name(T value) {
  static_assert(std::is_same<T, CapacityPool>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CapacityPool_Name().");
  return CapacityPool_Name(static_cast<CapacityPool>(value));
}
template <>
inline const std::string& CapacityPool_Name(CapacityPool value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CapacityPool_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool CapacityPool_Parse(absl::string_view name, CapacityPool* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CapacityPool>(
      CapacityPool_descriptor(), name, value);
}
enum NicType : int {
  NIC_TYPE_UNSPECIFIED = 0,
  ETHERNET = 1,
  RDMA = 2,
  NicType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NicType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NicType_IsValid(int value);
extern const uint32_t NicType_internal_data_[];
constexpr NicType NicType_MIN = static_cast<NicType>(0);
constexpr NicType NicType_MAX = static_cast<NicType>(2);
constexpr int NicType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
NicType_descriptor();
template <typename T>
const std::string& NicType_Name(T value) {
  static_assert(std::is_same<T, NicType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NicType_Name().");
  return NicType_Name(static_cast<NicType>(value));
}
template <>
inline const std::string& NicType_Name(NicType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NicType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool NicType_Parse(absl::string_view name, NicType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NicType>(
      NicType_descriptor(), name, value);
}
enum QuotaIdType : int {
  QUOTA_ID_TYPE_UNSPECIFIED = 0,
  QUOTA_ID_TYPE_USER = 1,
  QUOTA_ID_TYPE_GROUP = 2,
  QuotaIdType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  QuotaIdType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool QuotaIdType_IsValid(int value);
extern const uint32_t QuotaIdType_internal_data_[];
constexpr QuotaIdType QuotaIdType_MIN = static_cast<QuotaIdType>(0);
constexpr QuotaIdType QuotaIdType_MAX = static_cast<QuotaIdType>(2);
constexpr int QuotaIdType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
QuotaIdType_descriptor();
template <typename T>
const std::string& QuotaIdType_Name(T value) {
  static_assert(std::is_same<T, QuotaIdType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to QuotaIdType_Name().");
  return QuotaIdType_Name(static_cast<QuotaIdType>(value));
}
template <>
inline const std::string& QuotaIdType_Name(QuotaIdType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<QuotaIdType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool QuotaIdType_Parse(absl::string_view name, QuotaIdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuotaIdType>(
      QuotaIdType_descriptor(), name, value);
}
enum QuotaType : int {
  QUOTA_TYPE_UNSPECIFIED = 0,
  QUOTA_TYPE_SPACE = 1,
  QUOTA_TYPE_INODE = 2,
  QuotaType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  QuotaType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool QuotaType_IsValid(int value);
extern const uint32_t QuotaType_internal_data_[];
constexpr QuotaType QuotaType_MIN = static_cast<QuotaType>(0);
constexpr QuotaType QuotaType_MAX = static_cast<QuotaType>(2);
constexpr int QuotaType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
QuotaType_descriptor();
template <typename T>
const std::string& QuotaType_Name(T value) {
  static_assert(std::is_same<T, QuotaType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to QuotaType_Name().");
  return QuotaType_Name(static_cast<QuotaType>(value));
}
template <>
inline const std::string& QuotaType_Name(QuotaType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<QuotaType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool QuotaType_Parse(absl::string_view name, QuotaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuotaType>(
      QuotaType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class LegacyId final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:beegfs.LegacyId) */ {
 public:
  inline LegacyId() : LegacyId(nullptr) {}
  ~LegacyId() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LegacyId* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LegacyId));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LegacyId(
      ::google::protobuf::internal::ConstantInitialized);

  inline LegacyId(const LegacyId& from) : LegacyId(nullptr, from) {}
  inline LegacyId(LegacyId&& from) noexcept
      : LegacyId(nullptr, std::move(from)) {}
  inline LegacyId& operator=(const LegacyId& from) {
    CopyFrom(from);
    return *this;
  }
  inline LegacyId& operator=(LegacyId&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LegacyId& default_instance() {
    return *internal_default_instance();
  }
  static inline const LegacyId* internal_default_instance() {
    return reinterpret_cast<const LegacyId*>(
        &_LegacyId_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(LegacyId& a, LegacyId& b) { a.Swap(&b); }
  inline void Swap(LegacyId* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LegacyId* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LegacyId* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LegacyId>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LegacyId& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LegacyId& from) { LegacyId::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LegacyId* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "beegfs.LegacyId"; }

 protected:
  explicit LegacyId(::google::protobuf::Arena* arena);
  LegacyId(::google::protobuf::Arena* arena, const LegacyId& from);
  LegacyId(::google::protobuf::Arena* arena, LegacyId&& from) noexcept
      : LegacyId(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNumIdFieldNumber = 1,
    kNodeTypeFieldNumber = 2,
  };
  // uint32 num_id = 1;
  void clear_num_id() ;
  ::uint32_t num_id() const;
  void set_num_id(::uint32_t value);

  private:
  ::uint32_t _internal_num_id() const;
  void _internal_set_num_id(::uint32_t value);

  public:
  // .beegfs.NodeType node_type = 2;
  void clear_node_type() ;
  ::beegfs::NodeType node_type() const;
  void set_node_type(::beegfs::NodeType value);

  private:
  ::beegfs::NodeType _internal_node_type() const;
  void _internal_set_node_type(::beegfs::NodeType value);

  public:
  // @@protoc_insertion_point(class_scope:beegfs.LegacyId)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LegacyId& from_msg);
    ::uint32_t num_id_;
    int node_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beegfs_2eproto;
};
// -------------------------------------------------------------------

class EntityIdSet final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:beegfs.EntityIdSet) */ {
 public:
  inline EntityIdSet() : EntityIdSet(nullptr) {}
  ~EntityIdSet() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EntityIdSet* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EntityIdSet));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EntityIdSet(
      ::google::protobuf::internal::ConstantInitialized);

  inline EntityIdSet(const EntityIdSet& from) : EntityIdSet(nullptr, from) {}
  inline EntityIdSet(EntityIdSet&& from) noexcept
      : EntityIdSet(nullptr, std::move(from)) {}
  inline EntityIdSet& operator=(const EntityIdSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityIdSet& operator=(EntityIdSet&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntityIdSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntityIdSet* internal_default_instance() {
    return reinterpret_cast<const EntityIdSet*>(
        &_EntityIdSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(EntityIdSet& a, EntityIdSet& b) { a.Swap(&b); }
  inline void Swap(EntityIdSet* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityIdSet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntityIdSet* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EntityIdSet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EntityIdSet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EntityIdSet& from) { EntityIdSet::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EntityIdSet* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "beegfs.EntityIdSet"; }

 protected:
  explicit EntityIdSet(::google::protobuf::Arena* arena);
  EntityIdSet(::google::protobuf::Arena* arena, const EntityIdSet& from);
  EntityIdSet(::google::protobuf::Arena* arena, EntityIdSet&& from) noexcept
      : EntityIdSet(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAliasFieldNumber = 2,
    kLegacyIdFieldNumber = 3,
    kUidFieldNumber = 1,
  };
  // optional string alias = 2;
  bool has_alias() const;
  void clear_alias() ;
  const std::string& alias() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alias(Arg_&& arg, Args_... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* value);

  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(
      const std::string& value);
  std::string* _internal_mutable_alias();

  public:
  // optional .beegfs.LegacyId legacy_id = 3;
  bool has_legacy_id() const;
  void clear_legacy_id() ;
  const ::beegfs::LegacyId& legacy_id() const;
  PROTOBUF_NODISCARD ::beegfs::LegacyId* release_legacy_id();
  ::beegfs::LegacyId* mutable_legacy_id();
  void set_allocated_legacy_id(::beegfs::LegacyId* value);
  void unsafe_arena_set_allocated_legacy_id(::beegfs::LegacyId* value);
  ::beegfs::LegacyId* unsafe_arena_release_legacy_id();

  private:
  const ::beegfs::LegacyId& _internal_legacy_id() const;
  ::beegfs::LegacyId* _internal_mutable_legacy_id();

  public:
  // optional int64 uid = 1;
  bool has_uid() const;
  void clear_uid() ;
  ::int64_t uid() const;
  void set_uid(::int64_t value);

  private:
  ::int64_t _internal_uid() const;
  void _internal_set_uid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:beegfs.EntityIdSet)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      32, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EntityIdSet& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr alias_;
    ::beegfs::LegacyId* legacy_id_;
    ::int64_t uid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beegfs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LegacyId

// uint32 num_id = 1;
inline void LegacyId::clear_num_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_id_ = 0u;
}
inline ::uint32_t LegacyId::num_id() const {
  // @@protoc_insertion_point(field_get:beegfs.LegacyId.num_id)
  return _internal_num_id();
}
inline void LegacyId::set_num_id(::uint32_t value) {
  _internal_set_num_id(value);
  // @@protoc_insertion_point(field_set:beegfs.LegacyId.num_id)
}
inline ::uint32_t LegacyId::_internal_num_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_id_;
}
inline void LegacyId::_internal_set_num_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_id_ = value;
}

// .beegfs.NodeType node_type = 2;
inline void LegacyId::clear_node_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_type_ = 0;
}
inline ::beegfs::NodeType LegacyId::node_type() const {
  // @@protoc_insertion_point(field_get:beegfs.LegacyId.node_type)
  return _internal_node_type();
}
inline void LegacyId::set_node_type(::beegfs::NodeType value) {
  _internal_set_node_type(value);
  // @@protoc_insertion_point(field_set:beegfs.LegacyId.node_type)
}
inline ::beegfs::NodeType LegacyId::_internal_node_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::beegfs::NodeType>(_impl_.node_type_);
}
inline void LegacyId::_internal_set_node_type(::beegfs::NodeType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_type_ = value;
}

// -------------------------------------------------------------------

// EntityIdSet

// optional int64 uid = 1;
inline bool EntityIdSet::has_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void EntityIdSet::clear_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t EntityIdSet::uid() const {
  // @@protoc_insertion_point(field_get:beegfs.EntityIdSet.uid)
  return _internal_uid();
}
inline void EntityIdSet::set_uid(::int64_t value) {
  _internal_set_uid(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:beegfs.EntityIdSet.uid)
}
inline ::int64_t EntityIdSet::_internal_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uid_;
}
inline void EntityIdSet::_internal_set_uid(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_ = value;
}

// optional string alias = 2;
inline bool EntityIdSet::has_alias() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EntityIdSet::clear_alias() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EntityIdSet::alias() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:beegfs.EntityIdSet.alias)
  return _internal_alias();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EntityIdSet::set_alias(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.alias_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:beegfs.EntityIdSet.alias)
}
inline std::string* EntityIdSet::mutable_alias() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:beegfs.EntityIdSet.alias)
  return _s;
}
inline const std::string& EntityIdSet::_internal_alias() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alias_.Get();
}
inline void EntityIdSet::_internal_set_alias(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.alias_.Set(value, GetArena());
}
inline std::string* EntityIdSet::_internal_mutable_alias() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.alias_.Mutable( GetArena());
}
inline std::string* EntityIdSet::release_alias() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:beegfs.EntityIdSet.alias)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.alias_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.alias_.Set("", GetArena());
  }
  return released;
}
inline void EntityIdSet::set_allocated_alias(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.alias_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:beegfs.EntityIdSet.alias)
}

// optional .beegfs.LegacyId legacy_id = 3;
inline bool EntityIdSet::has_legacy_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.legacy_id_ != nullptr);
  return value;
}
inline void EntityIdSet::clear_legacy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.legacy_id_ != nullptr) _impl_.legacy_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::beegfs::LegacyId& EntityIdSet::_internal_legacy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::beegfs::LegacyId* p = _impl_.legacy_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::beegfs::LegacyId&>(::beegfs::_LegacyId_default_instance_);
}
inline const ::beegfs::LegacyId& EntityIdSet::legacy_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:beegfs.EntityIdSet.legacy_id)
  return _internal_legacy_id();
}
inline void EntityIdSet::unsafe_arena_set_allocated_legacy_id(::beegfs::LegacyId* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.legacy_id_);
  }
  _impl_.legacy_id_ = reinterpret_cast<::beegfs::LegacyId*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beegfs.EntityIdSet.legacy_id)
}
inline ::beegfs::LegacyId* EntityIdSet::release_legacy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::beegfs::LegacyId* released = _impl_.legacy_id_;
  _impl_.legacy_id_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::beegfs::LegacyId* EntityIdSet::unsafe_arena_release_legacy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:beegfs.EntityIdSet.legacy_id)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::beegfs::LegacyId* temp = _impl_.legacy_id_;
  _impl_.legacy_id_ = nullptr;
  return temp;
}
inline ::beegfs::LegacyId* EntityIdSet::_internal_mutable_legacy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.legacy_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::beegfs::LegacyId>(GetArena());
    _impl_.legacy_id_ = reinterpret_cast<::beegfs::LegacyId*>(p);
  }
  return _impl_.legacy_id_;
}
inline ::beegfs::LegacyId* EntityIdSet::mutable_legacy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::beegfs::LegacyId* _msg = _internal_mutable_legacy_id();
  // @@protoc_insertion_point(field_mutable:beegfs.EntityIdSet.legacy_id)
  return _msg;
}
inline void EntityIdSet::set_allocated_legacy_id(::beegfs::LegacyId* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.legacy_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.legacy_id_ = reinterpret_cast<::beegfs::LegacyId*>(value);
  // @@protoc_insertion_point(field_set_allocated:beegfs.EntityIdSet.legacy_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace beegfs


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::beegfs::EntityType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::beegfs::EntityType>() {
  return ::beegfs::EntityType_descriptor();
}
template <>
struct is_proto_enum<::beegfs::NodeType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::beegfs::NodeType>() {
  return ::beegfs::NodeType_descriptor();
}
template <>
struct is_proto_enum<::beegfs::ReachabilityState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::beegfs::ReachabilityState>() {
  return ::beegfs::ReachabilityState_descriptor();
}
template <>
struct is_proto_enum<::beegfs::ConsistencyState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::beegfs::ConsistencyState>() {
  return ::beegfs::ConsistencyState_descriptor();
}
template <>
struct is_proto_enum<::beegfs::CapacityPool> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::beegfs::CapacityPool>() {
  return ::beegfs::CapacityPool_descriptor();
}
template <>
struct is_proto_enum<::beegfs::NicType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::beegfs::NicType>() {
  return ::beegfs::NicType_descriptor();
}
template <>
struct is_proto_enum<::beegfs::QuotaIdType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::beegfs::QuotaIdType>() {
  return ::beegfs::QuotaIdType_descriptor();
}
template <>
struct is_proto_enum<::beegfs::QuotaType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::beegfs::QuotaType>() {
  return ::beegfs::QuotaType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // beegfs_2eproto_2epb_2eh
