// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: license.proto
// Protobuf C++ Version: 5.29.2

#ifndef license_2eproto_2epb_2eh
#define license_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_license_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_license_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_license_2eproto;
namespace license {
class CertData;
struct CertDataDefaultTypeInternal;
extern CertDataDefaultTypeInternal _CertData_default_instance_;
class GetCertDataResult;
struct GetCertDataResultDefaultTypeInternal;
extern GetCertDataResultDefaultTypeInternal _GetCertDataResult_default_instance_;
class VerifyCertResult;
struct VerifyCertResultDefaultTypeInternal;
extern VerifyCertResultDefaultTypeInternal _VerifyCertResult_default_instance_;
class VerifyFeatureResult;
struct VerifyFeatureResultDefaultTypeInternal;
extern VerifyFeatureResultDefaultTypeInternal _VerifyFeatureResult_default_instance_;
}  // namespace license
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace license {
enum VerifyResult : int {
  VERIFY_UNSPECIFIED = 0,
  VERIFY_ERROR = 1,
  VERIFY_VALID = 2,
  VERIFY_INVALID = 3,
  VerifyResult_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VerifyResult_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VerifyResult_IsValid(int value);
extern const uint32_t VerifyResult_internal_data_[];
constexpr VerifyResult VerifyResult_MIN = static_cast<VerifyResult>(0);
constexpr VerifyResult VerifyResult_MAX = static_cast<VerifyResult>(3);
constexpr int VerifyResult_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
VerifyResult_descriptor();
template <typename T>
const std::string& VerifyResult_Name(T value) {
  static_assert(std::is_same<T, VerifyResult>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VerifyResult_Name().");
  return VerifyResult_Name(static_cast<VerifyResult>(value));
}
template <>
inline const std::string& VerifyResult_Name(VerifyResult value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VerifyResult_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool VerifyResult_Parse(absl::string_view name, VerifyResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VerifyResult>(
      VerifyResult_descriptor(), name, value);
}
enum CertType : int {
  CERT_TYPE_UNSPECIFIED = 0,
  CERT_TYPE_CA_ROOT = 1,
  CERT_TYPE_CA_INTERMEDIATE = 2,
  CERT_TYPE_PARTNER = 3,
  CERT_TYPE_CUSTOMER = 4,
  CERT_TYPE_TEMPORARY = 5,
  CertType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CertType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CertType_IsValid(int value);
extern const uint32_t CertType_internal_data_[];
constexpr CertType CertType_MIN = static_cast<CertType>(0);
constexpr CertType CertType_MAX = static_cast<CertType>(5);
constexpr int CertType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
CertType_descriptor();
template <typename T>
const std::string& CertType_Name(T value) {
  static_assert(std::is_same<T, CertType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CertType_Name().");
  return CertType_Name(static_cast<CertType>(value));
}
template <>
inline const std::string& CertType_Name(CertType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CertType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool CertType_Parse(absl::string_view name, CertType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CertType>(
      CertType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class VerifyFeatureResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:license.VerifyFeatureResult) */ {
 public:
  inline VerifyFeatureResult() : VerifyFeatureResult(nullptr) {}
  ~VerifyFeatureResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VerifyFeatureResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VerifyFeatureResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VerifyFeatureResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline VerifyFeatureResult(const VerifyFeatureResult& from) : VerifyFeatureResult(nullptr, from) {}
  inline VerifyFeatureResult(VerifyFeatureResult&& from) noexcept
      : VerifyFeatureResult(nullptr, std::move(from)) {}
  inline VerifyFeatureResult& operator=(const VerifyFeatureResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyFeatureResult& operator=(VerifyFeatureResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerifyFeatureResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyFeatureResult* internal_default_instance() {
    return reinterpret_cast<const VerifyFeatureResult*>(
        &_VerifyFeatureResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(VerifyFeatureResult& a, VerifyFeatureResult& b) { a.Swap(&b); }
  inline void Swap(VerifyFeatureResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyFeatureResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerifyFeatureResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VerifyFeatureResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VerifyFeatureResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VerifyFeatureResult& from) { VerifyFeatureResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VerifyFeatureResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "license.VerifyFeatureResult"; }

 protected:
  explicit VerifyFeatureResult(::google::protobuf::Arena* arena);
  VerifyFeatureResult(::google::protobuf::Arena* arena, const VerifyFeatureResult& from);
  VerifyFeatureResult(::google::protobuf::Arena* arena, VerifyFeatureResult&& from) noexcept
      : VerifyFeatureResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .license.VerifyResult result = 1;
  void clear_result() ;
  ::license::VerifyResult result() const;
  void set_result(::license::VerifyResult value);

  private:
  ::license::VerifyResult _internal_result() const;
  void _internal_set_result(::license::VerifyResult value);

  public:
  // @@protoc_insertion_point(class_scope:license.VerifyFeatureResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VerifyFeatureResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    int result_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_license_2eproto;
};
// -------------------------------------------------------------------

class VerifyCertResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:license.VerifyCertResult) */ {
 public:
  inline VerifyCertResult() : VerifyCertResult(nullptr) {}
  ~VerifyCertResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VerifyCertResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VerifyCertResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VerifyCertResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline VerifyCertResult(const VerifyCertResult& from) : VerifyCertResult(nullptr, from) {}
  inline VerifyCertResult(VerifyCertResult&& from) noexcept
      : VerifyCertResult(nullptr, std::move(from)) {}
  inline VerifyCertResult& operator=(const VerifyCertResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyCertResult& operator=(VerifyCertResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerifyCertResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyCertResult* internal_default_instance() {
    return reinterpret_cast<const VerifyCertResult*>(
        &_VerifyCertResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(VerifyCertResult& a, VerifyCertResult& b) { a.Swap(&b); }
  inline void Swap(VerifyCertResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyCertResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerifyCertResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VerifyCertResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VerifyCertResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VerifyCertResult& from) { VerifyCertResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VerifyCertResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "license.VerifyCertResult"; }

 protected:
  explicit VerifyCertResult(::google::protobuf::Arena* arena);
  VerifyCertResult(::google::protobuf::Arena* arena, const VerifyCertResult& from);
  VerifyCertResult(::google::protobuf::Arena* arena, VerifyCertResult&& from) noexcept
      : VerifyCertResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSerialFieldNumber = 2,
    kMessageFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // string serial = 2;
  void clear_serial() ;
  const std::string& serial() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_serial(Arg_&& arg, Args_... args);
  std::string* mutable_serial();
  PROTOBUF_NODISCARD std::string* release_serial();
  void set_allocated_serial(std::string* value);

  private:
  const std::string& _internal_serial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial(
      const std::string& value);
  std::string* _internal_mutable_serial();

  public:
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .license.VerifyResult result = 1;
  void clear_result() ;
  ::license::VerifyResult result() const;
  void set_result(::license::VerifyResult value);

  private:
  ::license::VerifyResult _internal_result() const;
  void _internal_set_result(::license::VerifyResult value);

  public:
  // @@protoc_insertion_point(class_scope:license.VerifyCertResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      46, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VerifyCertResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr serial_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    int result_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_license_2eproto;
};
// -------------------------------------------------------------------

class CertData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:license.CertData) */ {
 public:
  inline CertData() : CertData(nullptr) {}
  ~CertData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CertData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CertData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CertData(
      ::google::protobuf::internal::ConstantInitialized);

  inline CertData(const CertData& from) : CertData(nullptr, from) {}
  inline CertData(CertData&& from) noexcept
      : CertData(nullptr, std::move(from)) {}
  inline CertData& operator=(const CertData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CertData& operator=(CertData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CertData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CertData* internal_default_instance() {
    return reinterpret_cast<const CertData*>(
        &_CertData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CertData& a, CertData& b) { a.Swap(&b); }
  inline void Swap(CertData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CertData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CertData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CertData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CertData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CertData& from) { CertData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CertData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "license.CertData"; }

 protected:
  explicit CertData(::google::protobuf::Arena* arena);
  CertData(::google::protobuf::Arena* arena, const CertData& from);
  CertData(::google::protobuf::Arena* arena, CertData&& from) noexcept
      : CertData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDnsNamesFieldNumber = 11,
    kOrganizationFieldNumber = 3,
    kOrganizationalUnitFieldNumber = 4,
    kCountryFieldNumber = 5,
    kLocalityFieldNumber = 6,
    kCommonNameFieldNumber = 7,
    kSubjectSerialFieldNumber = 8,
    kValidFromFieldNumber = 9,
    kValidUntilFieldNumber = 10,
    kParentDataFieldNumber = 13,
    kSerialFieldNumber = 2,
    kTypeFieldNumber = 1,
    kIsCaFieldNumber = 12,
  };
  // repeated string dns_names = 11 [json_name = "DNSNames"];
  int dns_names_size() const;
  private:
  int _internal_dns_names_size() const;

  public:
  void clear_dns_names() ;
  const std::string& dns_names(int index) const;
  std::string* mutable_dns_names(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dns_names(int index, Arg_&& value, Args_... args);
  std::string* add_dns_names();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_dns_names(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& dns_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_dns_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_dns_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_dns_names();

  public:
  // string organization = 3;
  void clear_organization() ;
  const std::string& organization() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_organization(Arg_&& arg, Args_... args);
  std::string* mutable_organization();
  PROTOBUF_NODISCARD std::string* release_organization();
  void set_allocated_organization(std::string* value);

  private:
  const std::string& _internal_organization() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization(
      const std::string& value);
  std::string* _internal_mutable_organization();

  public:
  // string organizational_unit = 4;
  void clear_organizational_unit() ;
  const std::string& organizational_unit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_organizational_unit(Arg_&& arg, Args_... args);
  std::string* mutable_organizational_unit();
  PROTOBUF_NODISCARD std::string* release_organizational_unit();
  void set_allocated_organizational_unit(std::string* value);

  private:
  const std::string& _internal_organizational_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organizational_unit(
      const std::string& value);
  std::string* _internal_mutable_organizational_unit();

  public:
  // string country = 5;
  void clear_country() ;
  const std::string& country() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country(Arg_&& arg, Args_... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* value);

  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(
      const std::string& value);
  std::string* _internal_mutable_country();

  public:
  // string locality = 6;
  void clear_locality() ;
  const std::string& locality() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_locality(Arg_&& arg, Args_... args);
  std::string* mutable_locality();
  PROTOBUF_NODISCARD std::string* release_locality();
  void set_allocated_locality(std::string* value);

  private:
  const std::string& _internal_locality() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locality(
      const std::string& value);
  std::string* _internal_mutable_locality();

  public:
  // string common_name = 7;
  void clear_common_name() ;
  const std::string& common_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_common_name(Arg_&& arg, Args_... args);
  std::string* mutable_common_name();
  PROTOBUF_NODISCARD std::string* release_common_name();
  void set_allocated_common_name(std::string* value);

  private:
  const std::string& _internal_common_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_common_name(
      const std::string& value);
  std::string* _internal_mutable_common_name();

  public:
  // string subject_serial = 8;
  void clear_subject_serial() ;
  const std::string& subject_serial() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subject_serial(Arg_&& arg, Args_... args);
  std::string* mutable_subject_serial();
  PROTOBUF_NODISCARD std::string* release_subject_serial();
  void set_allocated_subject_serial(std::string* value);

  private:
  const std::string& _internal_subject_serial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject_serial(
      const std::string& value);
  std::string* _internal_mutable_subject_serial();

  public:
  // .google.protobuf.Timestamp valid_from = 9;
  bool has_valid_from() const;
  void clear_valid_from() ;
  const ::google::protobuf::Timestamp& valid_from() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_valid_from();
  ::google::protobuf::Timestamp* mutable_valid_from();
  void set_allocated_valid_from(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_valid_from(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_valid_from();

  private:
  const ::google::protobuf::Timestamp& _internal_valid_from() const;
  ::google::protobuf::Timestamp* _internal_mutable_valid_from();

  public:
  // .google.protobuf.Timestamp valid_until = 10;
  bool has_valid_until() const;
  void clear_valid_until() ;
  const ::google::protobuf::Timestamp& valid_until() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_valid_until();
  ::google::protobuf::Timestamp* mutable_valid_until();
  void set_allocated_valid_until(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_valid_until(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_valid_until();

  private:
  const ::google::protobuf::Timestamp& _internal_valid_until() const;
  ::google::protobuf::Timestamp* _internal_mutable_valid_until();

  public:
  // optional .license.CertData parent_data = 13;
  bool has_parent_data() const;
  void clear_parent_data() ;
  const ::license::CertData& parent_data() const;
  PROTOBUF_NODISCARD ::license::CertData* release_parent_data();
  ::license::CertData* mutable_parent_data();
  void set_allocated_parent_data(::license::CertData* value);
  void unsafe_arena_set_allocated_parent_data(::license::CertData* value);
  ::license::CertData* unsafe_arena_release_parent_data();

  private:
  const ::license::CertData& _internal_parent_data() const;
  ::license::CertData* _internal_mutable_parent_data();

  public:
  // int64 serial = 2;
  void clear_serial() ;
  ::int64_t serial() const;
  void set_serial(::int64_t value);

  private:
  ::int64_t _internal_serial() const;
  void _internal_set_serial(::int64_t value);

  public:
  // .license.CertType type = 1;
  void clear_type() ;
  ::license::CertType type() const;
  void set_type(::license::CertType value);

  private:
  ::license::CertType _internal_type() const;
  void _internal_set_type(::license::CertType value);

  public:
  // bool is_ca = 12;
  void clear_is_ca() ;
  bool is_ca() const;
  void set_is_ca(bool value);

  private:
  bool _internal_is_ca() const;
  void _internal_set_is_ca(bool value);

  public:
  // @@protoc_insertion_point(class_scope:license.CertData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 3,
      113, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CertData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> dns_names_;
    ::google::protobuf::internal::ArenaStringPtr organization_;
    ::google::protobuf::internal::ArenaStringPtr organizational_unit_;
    ::google::protobuf::internal::ArenaStringPtr country_;
    ::google::protobuf::internal::ArenaStringPtr locality_;
    ::google::protobuf::internal::ArenaStringPtr common_name_;
    ::google::protobuf::internal::ArenaStringPtr subject_serial_;
    ::google::protobuf::Timestamp* valid_from_;
    ::google::protobuf::Timestamp* valid_until_;
    ::license::CertData* parent_data_;
    ::int64_t serial_;
    int type_;
    bool is_ca_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_license_2eproto;
};
// -------------------------------------------------------------------

class GetCertDataResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:license.GetCertDataResult) */ {
 public:
  inline GetCertDataResult() : GetCertDataResult(nullptr) {}
  ~GetCertDataResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetCertDataResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetCertDataResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetCertDataResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetCertDataResult(const GetCertDataResult& from) : GetCertDataResult(nullptr, from) {}
  inline GetCertDataResult(GetCertDataResult&& from) noexcept
      : GetCertDataResult(nullptr, std::move(from)) {}
  inline GetCertDataResult& operator=(const GetCertDataResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCertDataResult& operator=(GetCertDataResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCertDataResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCertDataResult* internal_default_instance() {
    return reinterpret_cast<const GetCertDataResult*>(
        &_GetCertDataResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(GetCertDataResult& a, GetCertDataResult& b) { a.Swap(&b); }
  inline void Swap(GetCertDataResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCertDataResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCertDataResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetCertDataResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetCertDataResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetCertDataResult& from) { GetCertDataResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetCertDataResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "license.GetCertDataResult"; }

 protected:
  explicit GetCertDataResult(::google::protobuf::Arena* arena);
  GetCertDataResult(::google::protobuf::Arena* arena, const GetCertDataResult& from);
  GetCertDataResult(::google::protobuf::Arena* arena, GetCertDataResult&& from) noexcept
      : GetCertDataResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 3,
    kDataFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .license.CertData data = 2;
  bool has_data() const;
  void clear_data() ;
  const ::license::CertData& data() const;
  PROTOBUF_NODISCARD ::license::CertData* release_data();
  ::license::CertData* mutable_data();
  void set_allocated_data(::license::CertData* value);
  void unsafe_arena_set_allocated_data(::license::CertData* value);
  ::license::CertData* unsafe_arena_release_data();

  private:
  const ::license::CertData& _internal_data() const;
  ::license::CertData* _internal_mutable_data();

  public:
  // .license.VerifyResult result = 1;
  void clear_result() ;
  ::license::VerifyResult result() const;
  void set_result(::license::VerifyResult value);

  private:
  ::license::VerifyResult _internal_result() const;
  void _internal_set_result(::license::VerifyResult value);

  public:
  // @@protoc_insertion_point(class_scope:license.GetCertDataResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetCertDataResult& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::license::CertData* data_;
    int result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_license_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VerifyCertResult

// .license.VerifyResult result = 1;
inline void VerifyCertResult::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::license::VerifyResult VerifyCertResult::result() const {
  // @@protoc_insertion_point(field_get:license.VerifyCertResult.result)
  return _internal_result();
}
inline void VerifyCertResult::set_result(::license::VerifyResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:license.VerifyCertResult.result)
}
inline ::license::VerifyResult VerifyCertResult::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::license::VerifyResult>(_impl_.result_);
}
inline void VerifyCertResult::_internal_set_result(::license::VerifyResult value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// string serial = 2;
inline void VerifyCertResult::clear_serial() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.serial_.ClearToEmpty();
}
inline const std::string& VerifyCertResult::serial() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:license.VerifyCertResult.serial)
  return _internal_serial();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VerifyCertResult::set_serial(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.serial_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:license.VerifyCertResult.serial)
}
inline std::string* VerifyCertResult::mutable_serial() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_serial();
  // @@protoc_insertion_point(field_mutable:license.VerifyCertResult.serial)
  return _s;
}
inline const std::string& VerifyCertResult::_internal_serial() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.serial_.Get();
}
inline void VerifyCertResult::_internal_set_serial(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.serial_.Set(value, GetArena());
}
inline std::string* VerifyCertResult::_internal_mutable_serial() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.serial_.Mutable( GetArena());
}
inline std::string* VerifyCertResult::release_serial() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:license.VerifyCertResult.serial)
  return _impl_.serial_.Release();
}
inline void VerifyCertResult::set_allocated_serial(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.serial_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.serial_.IsDefault()) {
    _impl_.serial_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:license.VerifyCertResult.serial)
}

// string message = 3;
inline void VerifyCertResult::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& VerifyCertResult::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:license.VerifyCertResult.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VerifyCertResult::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:license.VerifyCertResult.message)
}
inline std::string* VerifyCertResult::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:license.VerifyCertResult.message)
  return _s;
}
inline const std::string& VerifyCertResult::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void VerifyCertResult::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* VerifyCertResult::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* VerifyCertResult::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:license.VerifyCertResult.message)
  return _impl_.message_.Release();
}
inline void VerifyCertResult::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:license.VerifyCertResult.message)
}

// -------------------------------------------------------------------

// VerifyFeatureResult

// .license.VerifyResult result = 1;
inline void VerifyFeatureResult::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::license::VerifyResult VerifyFeatureResult::result() const {
  // @@protoc_insertion_point(field_get:license.VerifyFeatureResult.result)
  return _internal_result();
}
inline void VerifyFeatureResult::set_result(::license::VerifyResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:license.VerifyFeatureResult.result)
}
inline ::license::VerifyResult VerifyFeatureResult::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::license::VerifyResult>(_impl_.result_);
}
inline void VerifyFeatureResult::_internal_set_result(::license::VerifyResult value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// string message = 2;
inline void VerifyFeatureResult::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& VerifyFeatureResult::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:license.VerifyFeatureResult.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VerifyFeatureResult::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:license.VerifyFeatureResult.message)
}
inline std::string* VerifyFeatureResult::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:license.VerifyFeatureResult.message)
  return _s;
}
inline const std::string& VerifyFeatureResult::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void VerifyFeatureResult::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* VerifyFeatureResult::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* VerifyFeatureResult::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:license.VerifyFeatureResult.message)
  return _impl_.message_.Release();
}
inline void VerifyFeatureResult::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:license.VerifyFeatureResult.message)
}

// -------------------------------------------------------------------

// GetCertDataResult

// .license.VerifyResult result = 1;
inline void GetCertDataResult::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::license::VerifyResult GetCertDataResult::result() const {
  // @@protoc_insertion_point(field_get:license.GetCertDataResult.result)
  return _internal_result();
}
inline void GetCertDataResult::set_result(::license::VerifyResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:license.GetCertDataResult.result)
}
inline ::license::VerifyResult GetCertDataResult::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::license::VerifyResult>(_impl_.result_);
}
inline void GetCertDataResult::_internal_set_result(::license::VerifyResult value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// .license.CertData data = 2;
inline bool GetCertDataResult::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void GetCertDataResult::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::license::CertData& GetCertDataResult::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::license::CertData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::license::CertData&>(::license::_CertData_default_instance_);
}
inline const ::license::CertData& GetCertDataResult::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:license.GetCertDataResult.data)
  return _internal_data();
}
inline void GetCertDataResult::unsafe_arena_set_allocated_data(::license::CertData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::license::CertData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:license.GetCertDataResult.data)
}
inline ::license::CertData* GetCertDataResult::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::license::CertData* released = _impl_.data_;
  _impl_.data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::license::CertData* GetCertDataResult::unsafe_arena_release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:license.GetCertDataResult.data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::license::CertData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::license::CertData* GetCertDataResult::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::license::CertData>(GetArena());
    _impl_.data_ = reinterpret_cast<::license::CertData*>(p);
  }
  return _impl_.data_;
}
inline ::license::CertData* GetCertDataResult::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::license::CertData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:license.GetCertDataResult.data)
  return _msg;
}
inline void GetCertDataResult::set_allocated_data(::license::CertData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.data_ = reinterpret_cast<::license::CertData*>(value);
  // @@protoc_insertion_point(field_set_allocated:license.GetCertDataResult.data)
}

// string message = 3;
inline void GetCertDataResult::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GetCertDataResult::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:license.GetCertDataResult.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetCertDataResult::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:license.GetCertDataResult.message)
}
inline std::string* GetCertDataResult::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:license.GetCertDataResult.message)
  return _s;
}
inline const std::string& GetCertDataResult::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void GetCertDataResult::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* GetCertDataResult::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* GetCertDataResult::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:license.GetCertDataResult.message)
  return _impl_.message_.Release();
}
inline void GetCertDataResult::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:license.GetCertDataResult.message)
}

// -------------------------------------------------------------------

// CertData

// .license.CertType type = 1;
inline void CertData::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::license::CertType CertData::type() const {
  // @@protoc_insertion_point(field_get:license.CertData.type)
  return _internal_type();
}
inline void CertData::set_type(::license::CertType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:license.CertData.type)
}
inline ::license::CertType CertData::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::license::CertType>(_impl_.type_);
}
inline void CertData::_internal_set_type(::license::CertType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// int64 serial = 2;
inline void CertData::clear_serial() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.serial_ = ::int64_t{0};
}
inline ::int64_t CertData::serial() const {
  // @@protoc_insertion_point(field_get:license.CertData.serial)
  return _internal_serial();
}
inline void CertData::set_serial(::int64_t value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:license.CertData.serial)
}
inline ::int64_t CertData::_internal_serial() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.serial_;
}
inline void CertData::_internal_set_serial(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.serial_ = value;
}

// string organization = 3;
inline void CertData::clear_organization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.organization_.ClearToEmpty();
}
inline const std::string& CertData::organization() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:license.CertData.organization)
  return _internal_organization();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CertData::set_organization(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.organization_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:license.CertData.organization)
}
inline std::string* CertData::mutable_organization() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_organization();
  // @@protoc_insertion_point(field_mutable:license.CertData.organization)
  return _s;
}
inline const std::string& CertData::_internal_organization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.organization_.Get();
}
inline void CertData::_internal_set_organization(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.organization_.Set(value, GetArena());
}
inline std::string* CertData::_internal_mutable_organization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.organization_.Mutable( GetArena());
}
inline std::string* CertData::release_organization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:license.CertData.organization)
  return _impl_.organization_.Release();
}
inline void CertData::set_allocated_organization(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.organization_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.organization_.IsDefault()) {
    _impl_.organization_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:license.CertData.organization)
}

// string organizational_unit = 4;
inline void CertData::clear_organizational_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.organizational_unit_.ClearToEmpty();
}
inline const std::string& CertData::organizational_unit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:license.CertData.organizational_unit)
  return _internal_organizational_unit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CertData::set_organizational_unit(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.organizational_unit_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:license.CertData.organizational_unit)
}
inline std::string* CertData::mutable_organizational_unit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_organizational_unit();
  // @@protoc_insertion_point(field_mutable:license.CertData.organizational_unit)
  return _s;
}
inline const std::string& CertData::_internal_organizational_unit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.organizational_unit_.Get();
}
inline void CertData::_internal_set_organizational_unit(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.organizational_unit_.Set(value, GetArena());
}
inline std::string* CertData::_internal_mutable_organizational_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.organizational_unit_.Mutable( GetArena());
}
inline std::string* CertData::release_organizational_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:license.CertData.organizational_unit)
  return _impl_.organizational_unit_.Release();
}
inline void CertData::set_allocated_organizational_unit(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.organizational_unit_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.organizational_unit_.IsDefault()) {
    _impl_.organizational_unit_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:license.CertData.organizational_unit)
}

// string country = 5;
inline void CertData::clear_country() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.country_.ClearToEmpty();
}
inline const std::string& CertData::country() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:license.CertData.country)
  return _internal_country();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CertData::set_country(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.country_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:license.CertData.country)
}
inline std::string* CertData::mutable_country() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:license.CertData.country)
  return _s;
}
inline const std::string& CertData::_internal_country() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.country_.Get();
}
inline void CertData::_internal_set_country(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.country_.Set(value, GetArena());
}
inline std::string* CertData::_internal_mutable_country() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.country_.Mutable( GetArena());
}
inline std::string* CertData::release_country() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:license.CertData.country)
  return _impl_.country_.Release();
}
inline void CertData::set_allocated_country(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.country_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:license.CertData.country)
}

// string locality = 6;
inline void CertData::clear_locality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.locality_.ClearToEmpty();
}
inline const std::string& CertData::locality() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:license.CertData.locality)
  return _internal_locality();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CertData::set_locality(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.locality_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:license.CertData.locality)
}
inline std::string* CertData::mutable_locality() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_locality();
  // @@protoc_insertion_point(field_mutable:license.CertData.locality)
  return _s;
}
inline const std::string& CertData::_internal_locality() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.locality_.Get();
}
inline void CertData::_internal_set_locality(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.locality_.Set(value, GetArena());
}
inline std::string* CertData::_internal_mutable_locality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.locality_.Mutable( GetArena());
}
inline std::string* CertData::release_locality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:license.CertData.locality)
  return _impl_.locality_.Release();
}
inline void CertData::set_allocated_locality(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.locality_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.locality_.IsDefault()) {
    _impl_.locality_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:license.CertData.locality)
}

// string common_name = 7;
inline void CertData::clear_common_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.common_name_.ClearToEmpty();
}
inline const std::string& CertData::common_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:license.CertData.common_name)
  return _internal_common_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CertData::set_common_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.common_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:license.CertData.common_name)
}
inline std::string* CertData::mutable_common_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_common_name();
  // @@protoc_insertion_point(field_mutable:license.CertData.common_name)
  return _s;
}
inline const std::string& CertData::_internal_common_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.common_name_.Get();
}
inline void CertData::_internal_set_common_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.common_name_.Set(value, GetArena());
}
inline std::string* CertData::_internal_mutable_common_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.common_name_.Mutable( GetArena());
}
inline std::string* CertData::release_common_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:license.CertData.common_name)
  return _impl_.common_name_.Release();
}
inline void CertData::set_allocated_common_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.common_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.common_name_.IsDefault()) {
    _impl_.common_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:license.CertData.common_name)
}

// string subject_serial = 8;
inline void CertData::clear_subject_serial() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subject_serial_.ClearToEmpty();
}
inline const std::string& CertData::subject_serial() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:license.CertData.subject_serial)
  return _internal_subject_serial();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CertData::set_subject_serial(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subject_serial_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:license.CertData.subject_serial)
}
inline std::string* CertData::mutable_subject_serial() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subject_serial();
  // @@protoc_insertion_point(field_mutable:license.CertData.subject_serial)
  return _s;
}
inline const std::string& CertData::_internal_subject_serial() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subject_serial_.Get();
}
inline void CertData::_internal_set_subject_serial(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subject_serial_.Set(value, GetArena());
}
inline std::string* CertData::_internal_mutable_subject_serial() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subject_serial_.Mutable( GetArena());
}
inline std::string* CertData::release_subject_serial() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:license.CertData.subject_serial)
  return _impl_.subject_serial_.Release();
}
inline void CertData::set_allocated_subject_serial(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subject_serial_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subject_serial_.IsDefault()) {
    _impl_.subject_serial_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:license.CertData.subject_serial)
}

// .google.protobuf.Timestamp valid_from = 9;
inline bool CertData::has_valid_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.valid_from_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& CertData::_internal_valid_from() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.valid_from_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& CertData::valid_from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:license.CertData.valid_from)
  return _internal_valid_from();
}
inline void CertData::unsafe_arena_set_allocated_valid_from(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.valid_from_);
  }
  _impl_.valid_from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:license.CertData.valid_from)
}
inline ::google::protobuf::Timestamp* CertData::release_valid_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.valid_from_;
  _impl_.valid_from_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* CertData::unsafe_arena_release_valid_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:license.CertData.valid_from)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.valid_from_;
  _impl_.valid_from_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* CertData::_internal_mutable_valid_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.valid_from_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.valid_from_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.valid_from_;
}
inline ::google::protobuf::Timestamp* CertData::mutable_valid_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_valid_from();
  // @@protoc_insertion_point(field_mutable:license.CertData.valid_from)
  return _msg;
}
inline void CertData::set_allocated_valid_from(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.valid_from_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.valid_from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:license.CertData.valid_from)
}

// .google.protobuf.Timestamp valid_until = 10;
inline bool CertData::has_valid_until() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.valid_until_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& CertData::_internal_valid_until() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.valid_until_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& CertData::valid_until() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:license.CertData.valid_until)
  return _internal_valid_until();
}
inline void CertData::unsafe_arena_set_allocated_valid_until(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.valid_until_);
  }
  _impl_.valid_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:license.CertData.valid_until)
}
inline ::google::protobuf::Timestamp* CertData::release_valid_until() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.valid_until_;
  _impl_.valid_until_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* CertData::unsafe_arena_release_valid_until() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:license.CertData.valid_until)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.valid_until_;
  _impl_.valid_until_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* CertData::_internal_mutable_valid_until() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.valid_until_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.valid_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.valid_until_;
}
inline ::google::protobuf::Timestamp* CertData::mutable_valid_until() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_valid_until();
  // @@protoc_insertion_point(field_mutable:license.CertData.valid_until)
  return _msg;
}
inline void CertData::set_allocated_valid_until(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.valid_until_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.valid_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:license.CertData.valid_until)
}

// repeated string dns_names = 11 [json_name = "DNSNames"];
inline int CertData::_internal_dns_names_size() const {
  return _internal_dns_names().size();
}
inline int CertData::dns_names_size() const {
  return _internal_dns_names_size();
}
inline void CertData::clear_dns_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dns_names_.Clear();
}
inline std::string* CertData::add_dns_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_dns_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:license.CertData.dns_names)
  return _s;
}
inline const std::string& CertData::dns_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:license.CertData.dns_names)
  return _internal_dns_names().Get(index);
}
inline std::string* CertData::mutable_dns_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:license.CertData.dns_names)
  return _internal_mutable_dns_names()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CertData::set_dns_names(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_dns_names()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:license.CertData.dns_names)
}
template <typename Arg_, typename... Args_>
inline void CertData::add_dns_names(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_dns_names(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:license.CertData.dns_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CertData::dns_names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:license.CertData.dns_names)
  return _internal_dns_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CertData::mutable_dns_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:license.CertData.dns_names)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_dns_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CertData::_internal_dns_names() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dns_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CertData::_internal_mutable_dns_names() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.dns_names_;
}

// bool is_ca = 12;
inline void CertData::clear_is_ca() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_ca_ = false;
}
inline bool CertData::is_ca() const {
  // @@protoc_insertion_point(field_get:license.CertData.is_ca)
  return _internal_is_ca();
}
inline void CertData::set_is_ca(bool value) {
  _internal_set_is_ca(value);
  // @@protoc_insertion_point(field_set:license.CertData.is_ca)
}
inline bool CertData::_internal_is_ca() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_ca_;
}
inline void CertData::_internal_set_is_ca(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_ca_ = value;
}

// optional .license.CertData parent_data = 13;
inline bool CertData::has_parent_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.parent_data_ != nullptr);
  return value;
}
inline void CertData::clear_parent_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.parent_data_ != nullptr) _impl_.parent_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::license::CertData& CertData::_internal_parent_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::license::CertData* p = _impl_.parent_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::license::CertData&>(::license::_CertData_default_instance_);
}
inline const ::license::CertData& CertData::parent_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:license.CertData.parent_data)
  return _internal_parent_data();
}
inline void CertData::unsafe_arena_set_allocated_parent_data(::license::CertData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.parent_data_);
  }
  _impl_.parent_data_ = reinterpret_cast<::license::CertData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:license.CertData.parent_data)
}
inline ::license::CertData* CertData::release_parent_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::license::CertData* released = _impl_.parent_data_;
  _impl_.parent_data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::license::CertData* CertData::unsafe_arena_release_parent_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:license.CertData.parent_data)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::license::CertData* temp = _impl_.parent_data_;
  _impl_.parent_data_ = nullptr;
  return temp;
}
inline ::license::CertData* CertData::_internal_mutable_parent_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.parent_data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::license::CertData>(GetArena());
    _impl_.parent_data_ = reinterpret_cast<::license::CertData*>(p);
  }
  return _impl_.parent_data_;
}
inline ::license::CertData* CertData::mutable_parent_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::license::CertData* _msg = _internal_mutable_parent_data();
  // @@protoc_insertion_point(field_mutable:license.CertData.parent_data)
  return _msg;
}
inline void CertData::set_allocated_parent_data(::license::CertData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.parent_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.parent_data_ = reinterpret_cast<::license::CertData*>(value);
  // @@protoc_insertion_point(field_set_allocated:license.CertData.parent_data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace license


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::license::VerifyResult> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::license::VerifyResult>() {
  return ::license::VerifyResult_descriptor();
}
template <>
struct is_proto_enum<::license::CertType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::license::CertType>() {
  return ::license::CertType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // license_2eproto_2epb_2eh
