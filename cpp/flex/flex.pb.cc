// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flex.proto

#include "flex.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_flex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BeeRemoteNode_flex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MockJob_flex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeStats_flex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RemoteStorageTarget_flex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoteStorageTarget_Azure_flex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteStorageTarget_POSIX_flex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteStorageTarget_Policies_flex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteStorageTarget_S3_flex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncJob_flex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Work_flex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Work_Part_flex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Work_Status_flex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WorkRequest_flex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkRequest_Segment_flex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace flex {
class HeartbeatRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartbeatRequest> _instance;
} _HeartbeatRequest_default_instance_;
class HeartbeatResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartbeatResponse> _instance;
} _HeartbeatResponse_default_instance_;
class NodeStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeStats> _instance;
} _NodeStats_default_instance_;
class SubmitWorkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitWorkRequest> _instance;
} _SubmitWorkRequest_default_instance_;
class SubmitWorkResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitWorkResponse> _instance;
} _SubmitWorkResponse_default_instance_;
class UpdateWorkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateWorkRequest> _instance;
} _UpdateWorkRequest_default_instance_;
class UpdateWorkResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateWorkResponse> _instance;
} _UpdateWorkResponse_default_instance_;
class BulkUpdateWorkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkUpdateWorkRequest> _instance;
} _BulkUpdateWorkRequest_default_instance_;
class BulkUpdateWorkResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkUpdateWorkResponse> _instance;
} _BulkUpdateWorkResponse_default_instance_;
class WorkRequest_SegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkRequest_Segment> _instance;
} _WorkRequest_Segment_default_instance_;
class WorkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkRequest> _instance;
  const ::flex::MockJob* mock_;
  const ::flex::SyncJob* sync_;
} _WorkRequest_default_instance_;
class MockJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MockJob> _instance;
} _MockJob_default_instance_;
class SyncJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncJob> _instance;
} _SyncJob_default_instance_;
class Work_StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Work_Status> _instance;
} _Work_Status_default_instance_;
class Work_PartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Work_Part> _instance;
} _Work_Part_default_instance_;
class WorkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Work> _instance;
} _Work_default_instance_;
class UpdateConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateConfigRequest> _instance;
} _UpdateConfigRequest_default_instance_;
class UpdateConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateConfigResponse> _instance;
} _UpdateConfigResponse_default_instance_;
class BeeRemoteNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BeeRemoteNode> _instance;
} _BeeRemoteNode_default_instance_;
class RemoteStorageTarget_PoliciesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteStorageTarget_Policies> _instance;
} _RemoteStorageTarget_Policies_default_instance_;
class RemoteStorageTarget_S3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteStorageTarget_S3> _instance;
} _RemoteStorageTarget_S3_default_instance_;
class RemoteStorageTarget_AzureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteStorageTarget_Azure> _instance;
} _RemoteStorageTarget_Azure_default_instance_;
class RemoteStorageTarget_POSIXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteStorageTarget_POSIX> _instance;
} _RemoteStorageTarget_POSIX_default_instance_;
class RemoteStorageTargetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteStorageTarget> _instance;
  const ::flex::RemoteStorageTarget_S3* s3_;
  const ::flex::RemoteStorageTarget_POSIX* posix_;
  const ::flex::RemoteStorageTarget_Azure* azure_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mock_;
} _RemoteStorageTarget_default_instance_;
}  // namespace flex
static void InitDefaultsscc_info_BeeRemoteNode_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_BeeRemoteNode_default_instance_;
    new (ptr) ::flex::BeeRemoteNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::BeeRemoteNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BeeRemoteNode_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BeeRemoteNode_flex_2eproto}, {}};

static void InitDefaultsscc_info_BulkUpdateWorkRequest_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_BulkUpdateWorkRequest_default_instance_;
    new (ptr) ::flex::BulkUpdateWorkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::BulkUpdateWorkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BulkUpdateWorkRequest_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BulkUpdateWorkRequest_flex_2eproto}, {}};

static void InitDefaultsscc_info_BulkUpdateWorkResponse_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_BulkUpdateWorkResponse_default_instance_;
    new (ptr) ::flex::BulkUpdateWorkResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::BulkUpdateWorkResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BulkUpdateWorkResponse_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BulkUpdateWorkResponse_flex_2eproto}, {}};

static void InitDefaultsscc_info_HeartbeatRequest_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_HeartbeatRequest_default_instance_;
    new (ptr) ::flex::HeartbeatRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::HeartbeatRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartbeatRequest_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeartbeatRequest_flex_2eproto}, {}};

static void InitDefaultsscc_info_HeartbeatResponse_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_HeartbeatResponse_default_instance_;
    new (ptr) ::flex::HeartbeatResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::HeartbeatResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HeartbeatResponse_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HeartbeatResponse_flex_2eproto}, {
      &scc_info_NodeStats_flex_2eproto.base,}};

static void InitDefaultsscc_info_MockJob_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_MockJob_default_instance_;
    new (ptr) ::flex::MockJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::MockJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MockJob_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MockJob_flex_2eproto}, {}};

static void InitDefaultsscc_info_NodeStats_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_NodeStats_default_instance_;
    new (ptr) ::flex::NodeStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::NodeStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeStats_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NodeStats_flex_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_RemoteStorageTarget_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_RemoteStorageTarget_default_instance_;
    new (ptr) ::flex::RemoteStorageTarget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::RemoteStorageTarget::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RemoteStorageTarget_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_RemoteStorageTarget_flex_2eproto}, {
      &scc_info_RemoteStorageTarget_Policies_flex_2eproto.base,
      &scc_info_RemoteStorageTarget_S3_flex_2eproto.base,
      &scc_info_RemoteStorageTarget_POSIX_flex_2eproto.base,
      &scc_info_RemoteStorageTarget_Azure_flex_2eproto.base,}};

static void InitDefaultsscc_info_RemoteStorageTarget_Azure_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_RemoteStorageTarget_Azure_default_instance_;
    new (ptr) ::flex::RemoteStorageTarget_Azure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::RemoteStorageTarget_Azure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoteStorageTarget_Azure_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RemoteStorageTarget_Azure_flex_2eproto}, {
      &scc_info_RemoteStorageTarget_S3_flex_2eproto.base,}};

static void InitDefaultsscc_info_RemoteStorageTarget_POSIX_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_RemoteStorageTarget_POSIX_default_instance_;
    new (ptr) ::flex::RemoteStorageTarget_POSIX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::RemoteStorageTarget_POSIX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteStorageTarget_POSIX_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteStorageTarget_POSIX_flex_2eproto}, {}};

static void InitDefaultsscc_info_RemoteStorageTarget_Policies_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_RemoteStorageTarget_Policies_default_instance_;
    new (ptr) ::flex::RemoteStorageTarget_Policies();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::RemoteStorageTarget_Policies::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteStorageTarget_Policies_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteStorageTarget_Policies_flex_2eproto}, {}};

static void InitDefaultsscc_info_RemoteStorageTarget_S3_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_RemoteStorageTarget_S3_default_instance_;
    new (ptr) ::flex::RemoteStorageTarget_S3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::RemoteStorageTarget_S3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteStorageTarget_S3_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteStorageTarget_S3_flex_2eproto}, {}};

static void InitDefaultsscc_info_SubmitWorkRequest_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_SubmitWorkRequest_default_instance_;
    new (ptr) ::flex::SubmitWorkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::SubmitWorkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmitWorkRequest_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubmitWorkRequest_flex_2eproto}, {
      &scc_info_WorkRequest_flex_2eproto.base,}};

static void InitDefaultsscc_info_SubmitWorkResponse_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_SubmitWorkResponse_default_instance_;
    new (ptr) ::flex::SubmitWorkResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::SubmitWorkResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmitWorkResponse_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubmitWorkResponse_flex_2eproto}, {
      &scc_info_Work_flex_2eproto.base,}};

static void InitDefaultsscc_info_SyncJob_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_SyncJob_default_instance_;
    new (ptr) ::flex::SyncJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::SyncJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncJob_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SyncJob_flex_2eproto}, {}};

static void InitDefaultsscc_info_UpdateConfigRequest_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_UpdateConfigRequest_default_instance_;
    new (ptr) ::flex::UpdateConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::UpdateConfigRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateConfigRequest_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateConfigRequest_flex_2eproto}, {
      &scc_info_BeeRemoteNode_flex_2eproto.base,
      &scc_info_RemoteStorageTarget_flex_2eproto.base,}};

static void InitDefaultsscc_info_UpdateConfigResponse_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_UpdateConfigResponse_default_instance_;
    new (ptr) ::flex::UpdateConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::UpdateConfigResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateConfigResponse_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateConfigResponse_flex_2eproto}, {}};

static void InitDefaultsscc_info_UpdateWorkRequest_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_UpdateWorkRequest_default_instance_;
    new (ptr) ::flex::UpdateWorkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::UpdateWorkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateWorkRequest_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateWorkRequest_flex_2eproto}, {}};

static void InitDefaultsscc_info_UpdateWorkResponse_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_UpdateWorkResponse_default_instance_;
    new (ptr) ::flex::UpdateWorkResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::UpdateWorkResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateWorkResponse_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateWorkResponse_flex_2eproto}, {
      &scc_info_Work_flex_2eproto.base,}};

static void InitDefaultsscc_info_Work_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_Work_default_instance_;
    new (ptr) ::flex::Work();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::Work::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Work_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Work_flex_2eproto}, {
      &scc_info_Work_Status_flex_2eproto.base,
      &scc_info_Work_Part_flex_2eproto.base,}};

static void InitDefaultsscc_info_Work_Part_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_Work_Part_default_instance_;
    new (ptr) ::flex::Work_Part();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::Work_Part::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Work_Part_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Work_Part_flex_2eproto}, {}};

static void InitDefaultsscc_info_Work_Status_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_Work_Status_default_instance_;
    new (ptr) ::flex::Work_Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::Work_Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Work_Status_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Work_Status_flex_2eproto}, {}};

static void InitDefaultsscc_info_WorkRequest_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_WorkRequest_default_instance_;
    new (ptr) ::flex::WorkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::WorkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WorkRequest_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_WorkRequest_flex_2eproto}, {
      &scc_info_WorkRequest_Segment_flex_2eproto.base,
      &scc_info_MockJob_flex_2eproto.base,
      &scc_info_SyncJob_flex_2eproto.base,}};

static void InitDefaultsscc_info_WorkRequest_Segment_flex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flex::_WorkRequest_Segment_default_instance_;
    new (ptr) ::flex::WorkRequest_Segment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flex::WorkRequest_Segment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkRequest_Segment_flex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkRequest_Segment_flex_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flex_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flex_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flex_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_flex_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::HeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::HeartbeatRequest, include_stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::HeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::HeartbeatResponse, is_ready_),
  PROTOBUF_FIELD_OFFSET(::flex::HeartbeatResponse, node_stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::NodeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::NodeStats, timestamp_),
  PROTOBUF_FIELD_OFFSET(::flex::NodeStats, active_requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::SubmitWorkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::SubmitWorkRequest, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::SubmitWorkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::SubmitWorkResponse, work_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::UpdateWorkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::UpdateWorkRequest, job_id_),
  PROTOBUF_FIELD_OFFSET(::flex::UpdateWorkRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::flex::UpdateWorkRequest, new_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::UpdateWorkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::UpdateWorkResponse, work_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::BulkUpdateWorkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::BulkUpdateWorkRequest, new_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::BulkUpdateWorkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::BulkUpdateWorkResponse, success_),
  PROTOBUF_FIELD_OFFSET(::flex::BulkUpdateWorkResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::WorkRequest_Segment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::WorkRequest_Segment, offset_start_),
  PROTOBUF_FIELD_OFFSET(::flex::WorkRequest_Segment, offset_stop_),
  PROTOBUF_FIELD_OFFSET(::flex::WorkRequest_Segment, parts_start_),
  PROTOBUF_FIELD_OFFSET(::flex::WorkRequest_Segment, parts_stop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::WorkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flex::WorkRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::WorkRequest, job_id_),
  PROTOBUF_FIELD_OFFSET(::flex::WorkRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::flex::WorkRequest, external_id_),
  PROTOBUF_FIELD_OFFSET(::flex::WorkRequest, path_),
  PROTOBUF_FIELD_OFFSET(::flex::WorkRequest, segment_),
  PROTOBUF_FIELD_OFFSET(::flex::WorkRequest, remote_storage_target_),
  offsetof(::flex::WorkRequestDefaultTypeInternal, mock_),
  offsetof(::flex::WorkRequestDefaultTypeInternal, sync_),
  PROTOBUF_FIELD_OFFSET(::flex::WorkRequest, Type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::MockJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::MockJob, num_test_segments_),
  PROTOBUF_FIELD_OFFSET(::flex::MockJob, file_size_),
  PROTOBUF_FIELD_OFFSET(::flex::MockJob, external_id_),
  PROTOBUF_FIELD_OFFSET(::flex::MockJob, should_fail_),
  PROTOBUF_FIELD_OFFSET(::flex::MockJob, can_retry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::SyncJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::SyncJob, operation_),
  PROTOBUF_FIELD_OFFSET(::flex::SyncJob, overwrite_),
  PROTOBUF_FIELD_OFFSET(::flex::SyncJob, remote_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::Work_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::Work_Status, state_),
  PROTOBUF_FIELD_OFFSET(::flex::Work_Status, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::Work_Part, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::Work_Part, part_number_),
  PROTOBUF_FIELD_OFFSET(::flex::Work_Part, offset_start_),
  PROTOBUF_FIELD_OFFSET(::flex::Work_Part, offset_stop_),
  PROTOBUF_FIELD_OFFSET(::flex::Work_Part, entity_tag_),
  PROTOBUF_FIELD_OFFSET(::flex::Work_Part, checksum_sha256_),
  PROTOBUF_FIELD_OFFSET(::flex::Work_Part, completed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::Work, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::Work, path_),
  PROTOBUF_FIELD_OFFSET(::flex::Work, job_id_),
  PROTOBUF_FIELD_OFFSET(::flex::Work, request_id_),
  PROTOBUF_FIELD_OFFSET(::flex::Work, status_),
  PROTOBUF_FIELD_OFFSET(::flex::Work, parts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::UpdateConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::UpdateConfigRequest, bee_remote_),
  PROTOBUF_FIELD_OFFSET(::flex::UpdateConfigRequest, rsts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::UpdateConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::UpdateConfigResponse, result_),
  PROTOBUF_FIELD_OFFSET(::flex::UpdateConfigResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::BeeRemoteNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::BeeRemoteNode, id_),
  PROTOBUF_FIELD_OFFSET(::flex::BeeRemoteNode, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget_Policies, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget_Policies, fast_start_max_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget_S3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget_S3, endpoint_url_),
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget_S3, partition_id_),
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget_S3, region_),
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget_S3, bucket_),
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget_S3, access_key_),
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget_S3, secret_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget_Azure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget_Azure, s3_),
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget_Azure, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget_POSIX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget_POSIX, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget, id_),
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget, name_),
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget, policies_),
  offsetof(::flex::RemoteStorageTargetDefaultTypeInternal, s3_),
  offsetof(::flex::RemoteStorageTargetDefaultTypeInternal, posix_),
  offsetof(::flex::RemoteStorageTargetDefaultTypeInternal, azure_),
  offsetof(::flex::RemoteStorageTargetDefaultTypeInternal, mock_),
  PROTOBUF_FIELD_OFFSET(::flex::RemoteStorageTarget, type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flex::HeartbeatRequest)},
  { 6, -1, sizeof(::flex::HeartbeatResponse)},
  { 13, -1, sizeof(::flex::NodeStats)},
  { 20, -1, sizeof(::flex::SubmitWorkRequest)},
  { 26, -1, sizeof(::flex::SubmitWorkResponse)},
  { 32, -1, sizeof(::flex::UpdateWorkRequest)},
  { 40, -1, sizeof(::flex::UpdateWorkResponse)},
  { 46, -1, sizeof(::flex::BulkUpdateWorkRequest)},
  { 52, -1, sizeof(::flex::BulkUpdateWorkResponse)},
  { 59, -1, sizeof(::flex::WorkRequest_Segment)},
  { 68, -1, sizeof(::flex::WorkRequest)},
  { 82, -1, sizeof(::flex::MockJob)},
  { 92, -1, sizeof(::flex::SyncJob)},
  { 100, -1, sizeof(::flex::Work_Status)},
  { 107, -1, sizeof(::flex::Work_Part)},
  { 118, -1, sizeof(::flex::Work)},
  { 128, -1, sizeof(::flex::UpdateConfigRequest)},
  { 135, -1, sizeof(::flex::UpdateConfigResponse)},
  { 142, -1, sizeof(::flex::BeeRemoteNode)},
  { 149, -1, sizeof(::flex::RemoteStorageTarget_Policies)},
  { 155, -1, sizeof(::flex::RemoteStorageTarget_S3)},
  { 166, -1, sizeof(::flex::RemoteStorageTarget_Azure)},
  { 173, -1, sizeof(::flex::RemoteStorageTarget_POSIX)},
  { 179, -1, sizeof(::flex::RemoteStorageTarget)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_HeartbeatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_HeartbeatResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_NodeStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_SubmitWorkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_SubmitWorkResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_UpdateWorkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_UpdateWorkResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_BulkUpdateWorkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_BulkUpdateWorkResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_WorkRequest_Segment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_WorkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_MockJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_SyncJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_Work_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_Work_Part_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_Work_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_UpdateConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_UpdateConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_BeeRemoteNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_RemoteStorageTarget_Policies_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_RemoteStorageTarget_S3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_RemoteStorageTarget_Azure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_RemoteStorageTarget_POSIX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flex::_RemoteStorageTarget_default_instance_),
};

const char descriptor_table_protodef_flex_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nflex.proto\022\004flex\032\037google/protobuf/time"
  "stamp.proto\")\n\020HeartbeatRequest\022\025\n\rinclu"
  "de_stats\030\001 \001(\010\"J\n\021HeartbeatResponse\022\020\n\010i"
  "s_ready\030\001 \001(\010\022#\n\nnode_stats\030\002 \001(\0132\017.flex"
  ".NodeStats\"S\n\tNodeStats\022-\n\ttimestamp\030\001 \001"
  "(\0132\032.google.protobuf.Timestamp\022\027\n\017active"
  "_requests\030\002 \001(\003\"7\n\021SubmitWorkRequest\022\"\n\007"
  "request\030\001 \001(\0132\021.flex.WorkRequest\".\n\022Subm"
  "itWorkResponse\022\030\n\004work\030\001 \001(\0132\n.flex.Work"
  "\"\230\001\n\021UpdateWorkRequest\022\016\n\006job_id\030\001 \001(\t\022\022"
  "\n\nrequest_id\030\002 \001(\t\0223\n\tnew_state\030\003 \001(\0162 ."
  "flex.UpdateWorkRequest.NewState\"*\n\010NewSt"
  "ate\022\017\n\013UNSPECIFIED\020\000\022\r\n\tCANCELLED\020\001\".\n\022U"
  "pdateWorkResponse\022\030\n\004work\030\001 \001(\0132\n.flex.W"
  "ork\"|\n\025BulkUpdateWorkRequest\0227\n\tnew_stat"
  "e\030\001 \001(\0162$.flex.BulkUpdateWorkRequest.New"
  "State\"*\n\010NewState\022\017\n\013UNSPECIFIED\020\000\022\r\n\tUN"
  "CHANGED\020\001\":\n\026BulkUpdateWorkResponse\022\017\n\007s"
  "uccess\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\"\304\002\n\013WorkRe"
  "quest\022\016\n\006job_id\030\001 \001(\t\022\022\n\nrequest_id\030\002 \001("
  "\t\022\023\n\013external_id\030\003 \001(\t\022\014\n\004path\030\004 \001(\t\022*\n\007"
  "segment\030\005 \001(\0132\031.flex.WorkRequest.Segment"
  "\022\035\n\025remote_storage_target\030\006 \001(\t\022\035\n\004mock\030"
  "\n \001(\0132\r.flex.MockJobH\000\022\035\n\004sync\030\013 \001(\0132\r.f"
  "lex.SyncJobH\000\032]\n\007Segment\022\024\n\014offset_start"
  "\030\001 \001(\003\022\023\n\013offset_stop\030\002 \001(\003\022\023\n\013parts_sta"
  "rt\030\003 \001(\005\022\022\n\nparts_stop\030\004 \001(\005B\006\n\004Type\"t\n\007"
  "MockJob\022\031\n\021num_test_segments\030\001 \001(\005\022\021\n\tfi"
  "le_size\030\002 \001(\003\022\023\n\013external_id\030\003 \001(\t\022\023\n\013sh"
  "ould_fail\030\004 \001(\010\022\021\n\tcan_retry\030\005 \001(\010\"\225\001\n\007S"
  "yncJob\022*\n\toperation\030\001 \001(\0162\027.flex.SyncJob"
  ".Operation\022\021\n\toverwrite\030\002 \001(\010\022\023\n\013remote_"
  "path\030\003 \001(\t\"6\n\tOperation\022\017\n\013UNSPECIFIED\020\000"
  "\022\n\n\006UPLOAD\020\001\022\014\n\010DOWNLOAD\020\002\"\306\003\n\004Work\022\014\n\004p"
  "ath\030\001 \001(\t\022\016\n\006job_id\030\002 \001(\t\022\022\n\nrequest_id\030"
  "\003 \001(\t\022!\n\006status\030\004 \001(\0132\021.flex.Work.Status"
  "\022\036\n\005parts\030\005 \003(\0132\017.flex.Work.Part\032:\n\006Stat"
  "us\022\037\n\005state\030\001 \001(\0162\020.flex.Work.State\022\017\n\007m"
  "essage\030\002 \001(\t\032\206\001\n\004Part\022\023\n\013part_number\030\001 \001"
  "(\005\022\024\n\014offset_start\030\002 \001(\003\022\023\n\013offset_stop\030"
  "\003 \001(\003\022\022\n\nentity_tag\030\004 \001(\t\022\027\n\017checksum_sh"
  "a256\030\005 \001(\t\022\021\n\tcompleted\030\006 \001(\010\"\203\001\n\005State\022"
  "\017\n\013UNSPECIFIED\020\000\022\013\n\007UNKNOWN\020\001\022\013\n\007CREATED"
  "\020\002\022\r\n\tSCHEDULED\020\003\022\013\n\007RUNNING\020\004\022\t\n\005ERROR\020"
  "\006\022\n\n\006FAILED\020\007\022\r\n\tCANCELLED\020\010\022\r\n\tCOMPLETE"
  "D\020\t\"g\n\023UpdateConfigRequest\022\'\n\nbee_remote"
  "\030\001 \001(\0132\023.flex.BeeRemoteNode\022\'\n\004rsts\030\002 \003("
  "\0132\031.flex.RemoteStorageTarget\"\234\001\n\024UpdateC"
  "onfigResponse\0221\n\006result\030\001 \001(\0162!.flex.Upd"
  "ateConfigResponse.Result\022\017\n\007message\030\002 \001("
  "\t\"@\n\006Result\022\017\n\013UNSPECIFIED\020\000\022\013\n\007SUCCESS\020"
  "\001\022\013\n\007PARTIAL\020\002\022\013\n\007FAILURE\020\003\",\n\rBeeRemote"
  "Node\022\n\n\002id\030\001 \001(\t\022\017\n\007address\030\002 \001(\t\"\213\004\n\023Re"
  "moteStorageTarget\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 "
  "\001(\t\0224\n\010policies\030\003 \001(\0132\".flex.RemoteStora"
  "geTarget.Policies\022*\n\002s3\030\004 \001(\0132\034.flex.Rem"
  "oteStorageTarget.S3H\000\0220\n\005posix\030\005 \001(\0132\037.f"
  "lex.RemoteStorageTarget.POSIXH\000\0220\n\005azure"
  "\030\006 \001(\0132\037.flex.RemoteStorageTarget.AzureH"
  "\000\022\016\n\004mock\030\007 \001(\tH\000\032\'\n\010Policies\022\033\n\023fast_st"
  "art_max_size\030\001 \001(\003\032x\n\002S3\022\024\n\014endpoint_url"
  "\030\001 \001(\t\022\024\n\014partition_id\030\002 \001(\t\022\016\n\006region\030\003"
  " \001(\t\022\016\n\006bucket\030\004 \001(\t\022\022\n\naccess_key\030\005 \001(\t"
  "\022\022\n\nsecret_key\030\006 \001(\t\032B\n\005Azure\022(\n\002s3\030\001 \001("
  "\0132\034.flex.RemoteStorageTarget.S3\022\017\n\007accou"
  "nt\030\002 \001(\t\032\025\n\005POSIX\022\014\n\004path\030\001 \001(\tB\006\n\004type2"
  "\340\002\n\nWorkerNode\022E\n\014UpdateConfig\022\031.flex.Up"
  "dateConfigRequest\032\032.flex.UpdateConfigRes"
  "ponse\022<\n\tHeartbeat\022\026.flex.HeartbeatReque"
  "st\032\027.flex.HeartbeatResponse\022\?\n\nSubmitWor"
  "k\022\027.flex.SubmitWorkRequest\032\030.flex.Submit"
  "WorkResponse\022\?\n\nUpdateWork\022\027.flex.Update"
  "WorkRequest\032\030.flex.UpdateWorkResponse\022K\n"
  "\016BulkUpdateWork\022\033.flex.BulkUpdateWorkReq"
  "uest\032\034.flex.BulkUpdateWorkResponseB\'Z%gi"
  "thub.com/thinkparq/protobuf/go/flexb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flex_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_flex_2eproto_sccs[24] = {
  &scc_info_BeeRemoteNode_flex_2eproto.base,
  &scc_info_BulkUpdateWorkRequest_flex_2eproto.base,
  &scc_info_BulkUpdateWorkResponse_flex_2eproto.base,
  &scc_info_HeartbeatRequest_flex_2eproto.base,
  &scc_info_HeartbeatResponse_flex_2eproto.base,
  &scc_info_MockJob_flex_2eproto.base,
  &scc_info_NodeStats_flex_2eproto.base,
  &scc_info_RemoteStorageTarget_flex_2eproto.base,
  &scc_info_RemoteStorageTarget_Azure_flex_2eproto.base,
  &scc_info_RemoteStorageTarget_POSIX_flex_2eproto.base,
  &scc_info_RemoteStorageTarget_Policies_flex_2eproto.base,
  &scc_info_RemoteStorageTarget_S3_flex_2eproto.base,
  &scc_info_SubmitWorkRequest_flex_2eproto.base,
  &scc_info_SubmitWorkResponse_flex_2eproto.base,
  &scc_info_SyncJob_flex_2eproto.base,
  &scc_info_UpdateConfigRequest_flex_2eproto.base,
  &scc_info_UpdateConfigResponse_flex_2eproto.base,
  &scc_info_UpdateWorkRequest_flex_2eproto.base,
  &scc_info_UpdateWorkResponse_flex_2eproto.base,
  &scc_info_Work_flex_2eproto.base,
  &scc_info_Work_Part_flex_2eproto.base,
  &scc_info_Work_Status_flex_2eproto.base,
  &scc_info_WorkRequest_flex_2eproto.base,
  &scc_info_WorkRequest_Segment_flex_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flex_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flex_2eproto = {
  false, false, descriptor_table_protodef_flex_2eproto, "flex.proto", 3043,
  &descriptor_table_flex_2eproto_once, descriptor_table_flex_2eproto_sccs, descriptor_table_flex_2eproto_deps, 24, 1,
  schemas, file_default_instances, TableStruct_flex_2eproto::offsets,
  file_level_metadata_flex_2eproto, 24, file_level_enum_descriptors_flex_2eproto, file_level_service_descriptors_flex_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flex_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_flex_2eproto)), true);
namespace flex {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateWorkRequest_NewState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flex_2eproto);
  return file_level_enum_descriptors_flex_2eproto[0];
}
bool UpdateWorkRequest_NewState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UpdateWorkRequest_NewState UpdateWorkRequest::UNSPECIFIED;
constexpr UpdateWorkRequest_NewState UpdateWorkRequest::CANCELLED;
constexpr UpdateWorkRequest_NewState UpdateWorkRequest::NewState_MIN;
constexpr UpdateWorkRequest_NewState UpdateWorkRequest::NewState_MAX;
constexpr int UpdateWorkRequest::NewState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BulkUpdateWorkRequest_NewState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flex_2eproto);
  return file_level_enum_descriptors_flex_2eproto[1];
}
bool BulkUpdateWorkRequest_NewState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BulkUpdateWorkRequest_NewState BulkUpdateWorkRequest::UNSPECIFIED;
constexpr BulkUpdateWorkRequest_NewState BulkUpdateWorkRequest::UNCHANGED;
constexpr BulkUpdateWorkRequest_NewState BulkUpdateWorkRequest::NewState_MIN;
constexpr BulkUpdateWorkRequest_NewState BulkUpdateWorkRequest::NewState_MAX;
constexpr int BulkUpdateWorkRequest::NewState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SyncJob_Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flex_2eproto);
  return file_level_enum_descriptors_flex_2eproto[2];
}
bool SyncJob_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SyncJob_Operation SyncJob::UNSPECIFIED;
constexpr SyncJob_Operation SyncJob::UPLOAD;
constexpr SyncJob_Operation SyncJob::DOWNLOAD;
constexpr SyncJob_Operation SyncJob::Operation_MIN;
constexpr SyncJob_Operation SyncJob::Operation_MAX;
constexpr int SyncJob::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Work_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flex_2eproto);
  return file_level_enum_descriptors_flex_2eproto[3];
}
bool Work_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Work_State Work::UNSPECIFIED;
constexpr Work_State Work::UNKNOWN;
constexpr Work_State Work::CREATED;
constexpr Work_State Work::SCHEDULED;
constexpr Work_State Work::RUNNING;
constexpr Work_State Work::ERROR;
constexpr Work_State Work::FAILED;
constexpr Work_State Work::CANCELLED;
constexpr Work_State Work::COMPLETED;
constexpr Work_State Work::State_MIN;
constexpr Work_State Work::State_MAX;
constexpr int Work::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateConfigResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flex_2eproto);
  return file_level_enum_descriptors_flex_2eproto[4];
}
bool UpdateConfigResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UpdateConfigResponse_Result UpdateConfigResponse::UNSPECIFIED;
constexpr UpdateConfigResponse_Result UpdateConfigResponse::SUCCESS;
constexpr UpdateConfigResponse_Result UpdateConfigResponse::PARTIAL;
constexpr UpdateConfigResponse_Result UpdateConfigResponse::FAILURE;
constexpr UpdateConfigResponse_Result UpdateConfigResponse::Result_MIN;
constexpr UpdateConfigResponse_Result UpdateConfigResponse::Result_MAX;
constexpr int UpdateConfigResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void HeartbeatRequest::InitAsDefaultInstance() {
}
class HeartbeatRequest::_Internal {
 public:
};

HeartbeatRequest::HeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.HeartbeatRequest)
}
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  include_stats_ = from.include_stats_;
  // @@protoc_insertion_point(copy_constructor:flex.HeartbeatRequest)
}

void HeartbeatRequest::SharedCtor() {
  include_stats_ = false;
}

HeartbeatRequest::~HeartbeatRequest() {
  // @@protoc_insertion_point(destructor:flex.HeartbeatRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeartbeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HeartbeatRequest::ArenaDtor(void* object) {
  HeartbeatRequest* _this = reinterpret_cast< HeartbeatRequest* >(object);
  (void)_this;
}
void HeartbeatRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartbeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartbeatRequest& HeartbeatRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartbeatRequest_flex_2eproto.base);
  return *internal_default_instance();
}


void HeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.HeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  include_stats_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool include_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          include_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartbeatRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.HeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool include_stats = 1;
  if (this->include_stats() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_include_stats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.HeartbeatRequest)
  return target;
}

size_t HeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.HeartbeatRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool include_stats = 1;
  if (this->include_stats() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartbeatRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.HeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartbeatRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartbeatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.HeartbeatRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.HeartbeatRequest)
    MergeFrom(*source);
  }
}

void HeartbeatRequest::MergeFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.HeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.include_stats() != 0) {
    _internal_set_include_stats(from._internal_include_stats());
  }
}

void HeartbeatRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.HeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.HeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {
  return true;
}

void HeartbeatRequest::InternalSwap(HeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(include_stats_, other->include_stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeartbeatResponse::InitAsDefaultInstance() {
  ::flex::_HeartbeatResponse_default_instance_._instance.get_mutable()->node_stats_ = const_cast< ::flex::NodeStats*>(
      ::flex::NodeStats::internal_default_instance());
}
class HeartbeatResponse::_Internal {
 public:
  static const ::flex::NodeStats& node_stats(const HeartbeatResponse* msg);
};

const ::flex::NodeStats&
HeartbeatResponse::_Internal::node_stats(const HeartbeatResponse* msg) {
  return *msg->node_stats_;
}
HeartbeatResponse::HeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.HeartbeatResponse)
}
HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node_stats()) {
    node_stats_ = new ::flex::NodeStats(*from.node_stats_);
  } else {
    node_stats_ = nullptr;
  }
  is_ready_ = from.is_ready_;
  // @@protoc_insertion_point(copy_constructor:flex.HeartbeatResponse)
}

void HeartbeatResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeartbeatResponse_flex_2eproto.base);
  ::memset(&node_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ready_) -
      reinterpret_cast<char*>(&node_stats_)) + sizeof(is_ready_));
}

HeartbeatResponse::~HeartbeatResponse() {
  // @@protoc_insertion_point(destructor:flex.HeartbeatResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeartbeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete node_stats_;
}

void HeartbeatResponse::ArenaDtor(void* object) {
  HeartbeatResponse* _this = reinterpret_cast< HeartbeatResponse* >(object);
  (void)_this;
}
void HeartbeatResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartbeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartbeatResponse& HeartbeatResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartbeatResponse_flex_2eproto.base);
  return *internal_default_instance();
}


void HeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.HeartbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && node_stats_ != nullptr) {
    delete node_stats_;
  }
  node_stats_ = nullptr;
  is_ready_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_ready = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flex.NodeStats node_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartbeatResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.HeartbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_ready = 1;
  if (this->is_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_ready(), target);
  }

  // .flex.NodeStats node_stats = 2;
  if (this->has_node_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::node_stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.HeartbeatResponse)
  return target;
}

size_t HeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.HeartbeatResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flex.NodeStats node_stats = 2;
  if (this->has_node_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_stats_);
  }

  // bool is_ready = 1;
  if (this->is_ready() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartbeatResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartbeatResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartbeatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.HeartbeatResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.HeartbeatResponse)
    MergeFrom(*source);
  }
}

void HeartbeatResponse::MergeFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node_stats()) {
    _internal_mutable_node_stats()->::flex::NodeStats::MergeFrom(from._internal_node_stats());
  }
  if (from.is_ready() != 0) {
    _internal_set_is_ready(from._internal_is_ready());
  }
}

void HeartbeatResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {
  return true;
}

void HeartbeatResponse::InternalSwap(HeartbeatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeartbeatResponse, is_ready_)
      + sizeof(HeartbeatResponse::is_ready_)
      - PROTOBUF_FIELD_OFFSET(HeartbeatResponse, node_stats_)>(
          reinterpret_cast<char*>(&node_stats_),
          reinterpret_cast<char*>(&other->node_stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeStats::InitAsDefaultInstance() {
  ::flex::_NodeStats_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class NodeStats::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const NodeStats* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
NodeStats::_Internal::timestamp(const NodeStats* msg) {
  return *msg->timestamp_;
}
void NodeStats::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
NodeStats::NodeStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.NodeStats)
}
NodeStats::NodeStats(const NodeStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  active_requests_ = from.active_requests_;
  // @@protoc_insertion_point(copy_constructor:flex.NodeStats)
}

void NodeStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeStats_flex_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_requests_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(active_requests_));
}

NodeStats::~NodeStats() {
  // @@protoc_insertion_point(destructor:flex.NodeStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void NodeStats::ArenaDtor(void* object) {
  NodeStats* _this = reinterpret_cast< NodeStats* >(object);
  (void)_this;
}
void NodeStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeStats& NodeStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeStats_flex_2eproto.base);
  return *internal_default_instance();
}


void NodeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.NodeStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  active_requests_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 active_requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          active_requests_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.NodeStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // int64 active_requests = 2;
  if (this->active_requests() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_active_requests(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.NodeStats)
  return target;
}

size_t NodeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.NodeStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // int64 active_requests = 2;
  if (this->active_requests() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_active_requests());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.NodeStats)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.NodeStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.NodeStats)
    MergeFrom(*source);
  }
}

void NodeStats::MergeFrom(const NodeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.NodeStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.active_requests() != 0) {
    _internal_set_active_requests(from._internal_active_requests());
  }
}

void NodeStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.NodeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStats::CopyFrom(const NodeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.NodeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStats::IsInitialized() const {
  return true;
}

void NodeStats::InternalSwap(NodeStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeStats, active_requests_)
      + sizeof(NodeStats::active_requests_)
      - PROTOBUF_FIELD_OFFSET(NodeStats, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubmitWorkRequest::InitAsDefaultInstance() {
  ::flex::_SubmitWorkRequest_default_instance_._instance.get_mutable()->request_ = const_cast< ::flex::WorkRequest*>(
      ::flex::WorkRequest::internal_default_instance());
}
class SubmitWorkRequest::_Internal {
 public:
  static const ::flex::WorkRequest& request(const SubmitWorkRequest* msg);
};

const ::flex::WorkRequest&
SubmitWorkRequest::_Internal::request(const SubmitWorkRequest* msg) {
  return *msg->request_;
}
SubmitWorkRequest::SubmitWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.SubmitWorkRequest)
}
SubmitWorkRequest::SubmitWorkRequest(const SubmitWorkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    request_ = new ::flex::WorkRequest(*from.request_);
  } else {
    request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flex.SubmitWorkRequest)
}

void SubmitWorkRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitWorkRequest_flex_2eproto.base);
  request_ = nullptr;
}

SubmitWorkRequest::~SubmitWorkRequest() {
  // @@protoc_insertion_point(destructor:flex.SubmitWorkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitWorkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete request_;
}

void SubmitWorkRequest::ArenaDtor(void* object) {
  SubmitWorkRequest* _this = reinterpret_cast< SubmitWorkRequest* >(object);
  (void)_this;
}
void SubmitWorkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitWorkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitWorkRequest& SubmitWorkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitWorkRequest_flex_2eproto.base);
  return *internal_default_instance();
}


void SubmitWorkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.SubmitWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitWorkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flex.WorkRequest request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitWorkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.SubmitWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flex.WorkRequest request = 1;
  if (this->has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.SubmitWorkRequest)
  return target;
}

size_t SubmitWorkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.SubmitWorkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flex.WorkRequest request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitWorkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.SubmitWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitWorkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitWorkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.SubmitWorkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.SubmitWorkRequest)
    MergeFrom(*source);
  }
}

void SubmitWorkRequest::MergeFrom(const SubmitWorkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.SubmitWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request()) {
    _internal_mutable_request()->::flex::WorkRequest::MergeFrom(from._internal_request());
  }
}

void SubmitWorkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.SubmitWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitWorkRequest::CopyFrom(const SubmitWorkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.SubmitWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitWorkRequest::IsInitialized() const {
  return true;
}

void SubmitWorkRequest::InternalSwap(SubmitWorkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(request_, other->request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitWorkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubmitWorkResponse::InitAsDefaultInstance() {
  ::flex::_SubmitWorkResponse_default_instance_._instance.get_mutable()->work_ = const_cast< ::flex::Work*>(
      ::flex::Work::internal_default_instance());
}
class SubmitWorkResponse::_Internal {
 public:
  static const ::flex::Work& work(const SubmitWorkResponse* msg);
};

const ::flex::Work&
SubmitWorkResponse::_Internal::work(const SubmitWorkResponse* msg) {
  return *msg->work_;
}
SubmitWorkResponse::SubmitWorkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.SubmitWorkResponse)
}
SubmitWorkResponse::SubmitWorkResponse(const SubmitWorkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_work()) {
    work_ = new ::flex::Work(*from.work_);
  } else {
    work_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flex.SubmitWorkResponse)
}

void SubmitWorkResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitWorkResponse_flex_2eproto.base);
  work_ = nullptr;
}

SubmitWorkResponse::~SubmitWorkResponse() {
  // @@protoc_insertion_point(destructor:flex.SubmitWorkResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitWorkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete work_;
}

void SubmitWorkResponse::ArenaDtor(void* object) {
  SubmitWorkResponse* _this = reinterpret_cast< SubmitWorkResponse* >(object);
  (void)_this;
}
void SubmitWorkResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitWorkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitWorkResponse& SubmitWorkResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitWorkResponse_flex_2eproto.base);
  return *internal_default_instance();
}


void SubmitWorkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.SubmitWorkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && work_ != nullptr) {
    delete work_;
  }
  work_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitWorkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flex.Work work = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_work(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitWorkResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.SubmitWorkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flex.Work work = 1;
  if (this->has_work()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::work(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.SubmitWorkResponse)
  return target;
}

size_t SubmitWorkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.SubmitWorkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flex.Work work = 1;
  if (this->has_work()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *work_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitWorkResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.SubmitWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitWorkResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitWorkResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.SubmitWorkResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.SubmitWorkResponse)
    MergeFrom(*source);
  }
}

void SubmitWorkResponse::MergeFrom(const SubmitWorkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.SubmitWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_work()) {
    _internal_mutable_work()->::flex::Work::MergeFrom(from._internal_work());
  }
}

void SubmitWorkResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.SubmitWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitWorkResponse::CopyFrom(const SubmitWorkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.SubmitWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitWorkResponse::IsInitialized() const {
  return true;
}

void SubmitWorkResponse::InternalSwap(SubmitWorkResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(work_, other->work_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitWorkResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateWorkRequest::InitAsDefaultInstance() {
}
class UpdateWorkRequest::_Internal {
 public:
};

UpdateWorkRequest::UpdateWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.UpdateWorkRequest)
}
UpdateWorkRequest::UpdateWorkRequest(const UpdateWorkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_id().empty()) {
    job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_job_id(),
      GetArena());
  }
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_request_id(),
      GetArena());
  }
  new_state_ = from.new_state_;
  // @@protoc_insertion_point(copy_constructor:flex.UpdateWorkRequest)
}

void UpdateWorkRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateWorkRequest_flex_2eproto.base);
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_state_ = 0;
}

UpdateWorkRequest::~UpdateWorkRequest() {
  // @@protoc_insertion_point(destructor:flex.UpdateWorkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateWorkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateWorkRequest::ArenaDtor(void* object) {
  UpdateWorkRequest* _this = reinterpret_cast< UpdateWorkRequest* >(object);
  (void)_this;
}
void UpdateWorkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateWorkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateWorkRequest& UpdateWorkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateWorkRequest_flex_2eproto.base);
  return *internal_default_instance();
}


void UpdateWorkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.UpdateWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  job_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateWorkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.UpdateWorkRequest.job_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.UpdateWorkRequest.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flex.UpdateWorkRequest.NewState new_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_new_state(static_cast<::flex::UpdateWorkRequest_NewState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateWorkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.UpdateWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string job_id = 1;
  if (this->job_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.UpdateWorkRequest.job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job_id(), target);
  }

  // string request_id = 2;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.UpdateWorkRequest.request_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_request_id(), target);
  }

  // .flex.UpdateWorkRequest.NewState new_state = 3;
  if (this->new_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_new_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.UpdateWorkRequest)
  return target;
}

size_t UpdateWorkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.UpdateWorkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string job_id = 1;
  if (this->job_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  // string request_id = 2;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .flex.UpdateWorkRequest.NewState new_state = 3;
  if (this->new_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_new_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateWorkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.UpdateWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateWorkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateWorkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.UpdateWorkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.UpdateWorkRequest)
    MergeFrom(*source);
  }
}

void UpdateWorkRequest::MergeFrom(const UpdateWorkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.UpdateWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.job_id().size() > 0) {
    _internal_set_job_id(from._internal_job_id());
  }
  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.new_state() != 0) {
    _internal_set_new_state(from._internal_new_state());
  }
}

void UpdateWorkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.UpdateWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateWorkRequest::CopyFrom(const UpdateWorkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.UpdateWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateWorkRequest::IsInitialized() const {
  return true;
}

void UpdateWorkRequest::InternalSwap(UpdateWorkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  job_id_.Swap(&other->job_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(new_state_, other->new_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateWorkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateWorkResponse::InitAsDefaultInstance() {
  ::flex::_UpdateWorkResponse_default_instance_._instance.get_mutable()->work_ = const_cast< ::flex::Work*>(
      ::flex::Work::internal_default_instance());
}
class UpdateWorkResponse::_Internal {
 public:
  static const ::flex::Work& work(const UpdateWorkResponse* msg);
};

const ::flex::Work&
UpdateWorkResponse::_Internal::work(const UpdateWorkResponse* msg) {
  return *msg->work_;
}
UpdateWorkResponse::UpdateWorkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.UpdateWorkResponse)
}
UpdateWorkResponse::UpdateWorkResponse(const UpdateWorkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_work()) {
    work_ = new ::flex::Work(*from.work_);
  } else {
    work_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flex.UpdateWorkResponse)
}

void UpdateWorkResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateWorkResponse_flex_2eproto.base);
  work_ = nullptr;
}

UpdateWorkResponse::~UpdateWorkResponse() {
  // @@protoc_insertion_point(destructor:flex.UpdateWorkResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateWorkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete work_;
}

void UpdateWorkResponse::ArenaDtor(void* object) {
  UpdateWorkResponse* _this = reinterpret_cast< UpdateWorkResponse* >(object);
  (void)_this;
}
void UpdateWorkResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateWorkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateWorkResponse& UpdateWorkResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateWorkResponse_flex_2eproto.base);
  return *internal_default_instance();
}


void UpdateWorkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.UpdateWorkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && work_ != nullptr) {
    delete work_;
  }
  work_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateWorkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flex.Work work = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_work(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateWorkResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.UpdateWorkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flex.Work work = 1;
  if (this->has_work()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::work(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.UpdateWorkResponse)
  return target;
}

size_t UpdateWorkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.UpdateWorkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flex.Work work = 1;
  if (this->has_work()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *work_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateWorkResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.UpdateWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateWorkResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateWorkResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.UpdateWorkResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.UpdateWorkResponse)
    MergeFrom(*source);
  }
}

void UpdateWorkResponse::MergeFrom(const UpdateWorkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.UpdateWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_work()) {
    _internal_mutable_work()->::flex::Work::MergeFrom(from._internal_work());
  }
}

void UpdateWorkResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.UpdateWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateWorkResponse::CopyFrom(const UpdateWorkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.UpdateWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateWorkResponse::IsInitialized() const {
  return true;
}

void UpdateWorkResponse::InternalSwap(UpdateWorkResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(work_, other->work_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateWorkResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BulkUpdateWorkRequest::InitAsDefaultInstance() {
}
class BulkUpdateWorkRequest::_Internal {
 public:
};

BulkUpdateWorkRequest::BulkUpdateWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.BulkUpdateWorkRequest)
}
BulkUpdateWorkRequest::BulkUpdateWorkRequest(const BulkUpdateWorkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  new_state_ = from.new_state_;
  // @@protoc_insertion_point(copy_constructor:flex.BulkUpdateWorkRequest)
}

void BulkUpdateWorkRequest::SharedCtor() {
  new_state_ = 0;
}

BulkUpdateWorkRequest::~BulkUpdateWorkRequest() {
  // @@protoc_insertion_point(destructor:flex.BulkUpdateWorkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkUpdateWorkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BulkUpdateWorkRequest::ArenaDtor(void* object) {
  BulkUpdateWorkRequest* _this = reinterpret_cast< BulkUpdateWorkRequest* >(object);
  (void)_this;
}
void BulkUpdateWorkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkUpdateWorkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkUpdateWorkRequest& BulkUpdateWorkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkUpdateWorkRequest_flex_2eproto.base);
  return *internal_default_instance();
}


void BulkUpdateWorkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.BulkUpdateWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkUpdateWorkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flex.BulkUpdateWorkRequest.NewState new_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_new_state(static_cast<::flex::BulkUpdateWorkRequest_NewState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkUpdateWorkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.BulkUpdateWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flex.BulkUpdateWorkRequest.NewState new_state = 1;
  if (this->new_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_new_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.BulkUpdateWorkRequest)
  return target;
}

size_t BulkUpdateWorkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.BulkUpdateWorkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flex.BulkUpdateWorkRequest.NewState new_state = 1;
  if (this->new_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_new_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkUpdateWorkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.BulkUpdateWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkUpdateWorkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkUpdateWorkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.BulkUpdateWorkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.BulkUpdateWorkRequest)
    MergeFrom(*source);
  }
}

void BulkUpdateWorkRequest::MergeFrom(const BulkUpdateWorkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.BulkUpdateWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_state() != 0) {
    _internal_set_new_state(from._internal_new_state());
  }
}

void BulkUpdateWorkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.BulkUpdateWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkUpdateWorkRequest::CopyFrom(const BulkUpdateWorkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.BulkUpdateWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkUpdateWorkRequest::IsInitialized() const {
  return true;
}

void BulkUpdateWorkRequest::InternalSwap(BulkUpdateWorkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(new_state_, other->new_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkUpdateWorkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BulkUpdateWorkResponse::InitAsDefaultInstance() {
}
class BulkUpdateWorkResponse::_Internal {
 public:
};

BulkUpdateWorkResponse::BulkUpdateWorkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.BulkUpdateWorkResponse)
}
BulkUpdateWorkResponse::BulkUpdateWorkResponse(const BulkUpdateWorkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:flex.BulkUpdateWorkResponse)
}

void BulkUpdateWorkResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkUpdateWorkResponse_flex_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

BulkUpdateWorkResponse::~BulkUpdateWorkResponse() {
  // @@protoc_insertion_point(destructor:flex.BulkUpdateWorkResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulkUpdateWorkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BulkUpdateWorkResponse::ArenaDtor(void* object) {
  BulkUpdateWorkResponse* _this = reinterpret_cast< BulkUpdateWorkResponse* >(object);
  (void)_this;
}
void BulkUpdateWorkResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulkUpdateWorkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkUpdateWorkResponse& BulkUpdateWorkResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkUpdateWorkResponse_flex_2eproto.base);
  return *internal_default_instance();
}


void BulkUpdateWorkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.BulkUpdateWorkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkUpdateWorkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.BulkUpdateWorkResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkUpdateWorkResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.BulkUpdateWorkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.BulkUpdateWorkResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.BulkUpdateWorkResponse)
  return target;
}

size_t BulkUpdateWorkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.BulkUpdateWorkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkUpdateWorkResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.BulkUpdateWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkUpdateWorkResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkUpdateWorkResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.BulkUpdateWorkResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.BulkUpdateWorkResponse)
    MergeFrom(*source);
  }
}

void BulkUpdateWorkResponse::MergeFrom(const BulkUpdateWorkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.BulkUpdateWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void BulkUpdateWorkResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.BulkUpdateWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkUpdateWorkResponse::CopyFrom(const BulkUpdateWorkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.BulkUpdateWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkUpdateWorkResponse::IsInitialized() const {
  return true;
}

void BulkUpdateWorkResponse::InternalSwap(BulkUpdateWorkResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkUpdateWorkResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkRequest_Segment::InitAsDefaultInstance() {
}
class WorkRequest_Segment::_Internal {
 public:
};

WorkRequest_Segment::WorkRequest_Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.WorkRequest.Segment)
}
WorkRequest_Segment::WorkRequest_Segment(const WorkRequest_Segment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_start_, &from.offset_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&parts_stop_) -
    reinterpret_cast<char*>(&offset_start_)) + sizeof(parts_stop_));
  // @@protoc_insertion_point(copy_constructor:flex.WorkRequest.Segment)
}

void WorkRequest_Segment::SharedCtor() {
  ::memset(&offset_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parts_stop_) -
      reinterpret_cast<char*>(&offset_start_)) + sizeof(parts_stop_));
}

WorkRequest_Segment::~WorkRequest_Segment() {
  // @@protoc_insertion_point(destructor:flex.WorkRequest.Segment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkRequest_Segment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkRequest_Segment::ArenaDtor(void* object) {
  WorkRequest_Segment* _this = reinterpret_cast< WorkRequest_Segment* >(object);
  (void)_this;
}
void WorkRequest_Segment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkRequest_Segment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkRequest_Segment& WorkRequest_Segment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkRequest_Segment_flex_2eproto.base);
  return *internal_default_instance();
}


void WorkRequest_Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.WorkRequest.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parts_stop_) -
      reinterpret_cast<char*>(&offset_start_)) + sizeof(parts_stop_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkRequest_Segment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 offset_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset_stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parts_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          parts_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parts_stop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          parts_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkRequest_Segment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.WorkRequest.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset_start = 1;
  if (this->offset_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_offset_start(), target);
  }

  // int64 offset_stop = 2;
  if (this->offset_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset_stop(), target);
  }

  // int32 parts_start = 3;
  if (this->parts_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_parts_start(), target);
  }

  // int32 parts_stop = 4;
  if (this->parts_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_parts_stop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.WorkRequest.Segment)
  return target;
}

size_t WorkRequest_Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.WorkRequest.Segment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset_start = 1;
  if (this->offset_start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset_start());
  }

  // int64 offset_stop = 2;
  if (this->offset_stop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset_stop());
  }

  // int32 parts_start = 3;
  if (this->parts_start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parts_start());
  }

  // int32 parts_stop = 4;
  if (this->parts_stop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parts_stop());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkRequest_Segment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.WorkRequest.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkRequest_Segment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkRequest_Segment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.WorkRequest.Segment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.WorkRequest.Segment)
    MergeFrom(*source);
  }
}

void WorkRequest_Segment::MergeFrom(const WorkRequest_Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.WorkRequest.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset_start() != 0) {
    _internal_set_offset_start(from._internal_offset_start());
  }
  if (from.offset_stop() != 0) {
    _internal_set_offset_stop(from._internal_offset_stop());
  }
  if (from.parts_start() != 0) {
    _internal_set_parts_start(from._internal_parts_start());
  }
  if (from.parts_stop() != 0) {
    _internal_set_parts_stop(from._internal_parts_stop());
  }
}

void WorkRequest_Segment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.WorkRequest.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkRequest_Segment::CopyFrom(const WorkRequest_Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.WorkRequest.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkRequest_Segment::IsInitialized() const {
  return true;
}

void WorkRequest_Segment::InternalSwap(WorkRequest_Segment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkRequest_Segment, parts_stop_)
      + sizeof(WorkRequest_Segment::parts_stop_)
      - PROTOBUF_FIELD_OFFSET(WorkRequest_Segment, offset_start_)>(
          reinterpret_cast<char*>(&offset_start_),
          reinterpret_cast<char*>(&other->offset_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkRequest_Segment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkRequest::InitAsDefaultInstance() {
  ::flex::_WorkRequest_default_instance_._instance.get_mutable()->segment_ = const_cast< ::flex::WorkRequest_Segment*>(
      ::flex::WorkRequest_Segment::internal_default_instance());
  ::flex::_WorkRequest_default_instance_.mock_ = const_cast< ::flex::MockJob*>(
      ::flex::MockJob::internal_default_instance());
  ::flex::_WorkRequest_default_instance_.sync_ = const_cast< ::flex::SyncJob*>(
      ::flex::SyncJob::internal_default_instance());
}
class WorkRequest::_Internal {
 public:
  static const ::flex::WorkRequest_Segment& segment(const WorkRequest* msg);
  static const ::flex::MockJob& mock(const WorkRequest* msg);
  static const ::flex::SyncJob& sync(const WorkRequest* msg);
};

const ::flex::WorkRequest_Segment&
WorkRequest::_Internal::segment(const WorkRequest* msg) {
  return *msg->segment_;
}
const ::flex::MockJob&
WorkRequest::_Internal::mock(const WorkRequest* msg) {
  return *msg->Type_.mock_;
}
const ::flex::SyncJob&
WorkRequest::_Internal::sync(const WorkRequest* msg) {
  return *msg->Type_.sync_;
}
void WorkRequest::set_allocated_mock(::flex::MockJob* mock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Type();
  if (mock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mock);
    if (message_arena != submessage_arena) {
      mock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mock, submessage_arena);
    }
    set_has_mock();
    Type_.mock_ = mock;
  }
  // @@protoc_insertion_point(field_set_allocated:flex.WorkRequest.mock)
}
void WorkRequest::set_allocated_sync(::flex::SyncJob* sync) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Type();
  if (sync) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sync);
    if (message_arena != submessage_arena) {
      sync = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync, submessage_arena);
    }
    set_has_sync();
    Type_.sync_ = sync;
  }
  // @@protoc_insertion_point(field_set_allocated:flex.WorkRequest.sync)
}
WorkRequest::WorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.WorkRequest)
}
WorkRequest::WorkRequest(const WorkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_id().empty()) {
    job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_job_id(),
      GetArena());
  }
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_request_id(),
      GetArena());
  }
  external_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_external_id().empty()) {
    external_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_external_id(),
      GetArena());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  remote_storage_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_storage_target().empty()) {
    remote_storage_target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_remote_storage_target(),
      GetArena());
  }
  if (from._internal_has_segment()) {
    segment_ = new ::flex::WorkRequest_Segment(*from.segment_);
  } else {
    segment_ = nullptr;
  }
  clear_has_Type();
  switch (from.Type_case()) {
    case kMock: {
      _internal_mutable_mock()->::flex::MockJob::MergeFrom(from._internal_mock());
      break;
    }
    case kSync: {
      _internal_mutable_sync()->::flex::SyncJob::MergeFrom(from._internal_sync());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flex.WorkRequest)
}

void WorkRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkRequest_flex_2eproto.base);
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  external_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_storage_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  segment_ = nullptr;
  clear_has_Type();
}

WorkRequest::~WorkRequest() {
  // @@protoc_insertion_point(destructor:flex.WorkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  external_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_storage_target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete segment_;
  if (has_Type()) {
    clear_Type();
  }
}

void WorkRequest::ArenaDtor(void* object) {
  WorkRequest* _this = reinterpret_cast< WorkRequest* >(object);
  (void)_this;
}
void WorkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkRequest& WorkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkRequest_flex_2eproto.base);
  return *internal_default_instance();
}


void WorkRequest::clear_Type() {
// @@protoc_insertion_point(one_of_clear_start:flex.WorkRequest)
  switch (Type_case()) {
    case kMock: {
      if (GetArena() == nullptr) {
        delete Type_.mock_;
      }
      break;
    }
    case kSync: {
      if (GetArena() == nullptr) {
        delete Type_.sync_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void WorkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.WorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  job_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  external_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_storage_target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && segment_ != nullptr) {
    delete segment_;
  }
  segment_ = nullptr;
  clear_Type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.WorkRequest.job_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.WorkRequest.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string external_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_external_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.WorkRequest.external_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.WorkRequest.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flex.WorkRequest.Segment segment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_segment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_storage_target = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_remote_storage_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.WorkRequest.remote_storage_target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flex.MockJob mock = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flex.SyncJob sync = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.WorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string job_id = 1;
  if (this->job_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.WorkRequest.job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job_id(), target);
  }

  // string request_id = 2;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.WorkRequest.request_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_request_id(), target);
  }

  // string external_id = 3;
  if (this->external_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_external_id().data(), static_cast<int>(this->_internal_external_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.WorkRequest.external_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_external_id(), target);
  }

  // string path = 4;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.WorkRequest.path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_path(), target);
  }

  // .flex.WorkRequest.Segment segment = 5;
  if (this->has_segment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::segment(this), target, stream);
  }

  // string remote_storage_target = 6;
  if (this->remote_storage_target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_storage_target().data(), static_cast<int>(this->_internal_remote_storage_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.WorkRequest.remote_storage_target");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_remote_storage_target(), target);
  }

  // .flex.MockJob mock = 10;
  if (_internal_has_mock()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::mock(this), target, stream);
  }

  // .flex.SyncJob sync = 11;
  if (_internal_has_sync()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::sync(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.WorkRequest)
  return target;
}

size_t WorkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.WorkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string job_id = 1;
  if (this->job_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  // string request_id = 2;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string external_id = 3;
  if (this->external_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_external_id());
  }

  // string path = 4;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string remote_storage_target = 6;
  if (this->remote_storage_target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_storage_target());
  }

  // .flex.WorkRequest.Segment segment = 5;
  if (this->has_segment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *segment_);
  }

  switch (Type_case()) {
    // .flex.MockJob mock = 10;
    case kMock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.mock_);
      break;
    }
    // .flex.SyncJob sync = 11;
    case kSync: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.sync_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.WorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.WorkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.WorkRequest)
    MergeFrom(*source);
  }
}

void WorkRequest::MergeFrom(const WorkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.WorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.job_id().size() > 0) {
    _internal_set_job_id(from._internal_job_id());
  }
  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.external_id().size() > 0) {
    _internal_set_external_id(from._internal_external_id());
  }
  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.remote_storage_target().size() > 0) {
    _internal_set_remote_storage_target(from._internal_remote_storage_target());
  }
  if (from.has_segment()) {
    _internal_mutable_segment()->::flex::WorkRequest_Segment::MergeFrom(from._internal_segment());
  }
  switch (from.Type_case()) {
    case kMock: {
      _internal_mutable_mock()->::flex::MockJob::MergeFrom(from._internal_mock());
      break;
    }
    case kSync: {
      _internal_mutable_sync()->::flex::SyncJob::MergeFrom(from._internal_sync());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void WorkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.WorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkRequest::CopyFrom(const WorkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.WorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkRequest::IsInitialized() const {
  return true;
}

void WorkRequest::InternalSwap(WorkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  job_id_.Swap(&other->job_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  external_id_.Swap(&other->external_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_storage_target_.Swap(&other->remote_storage_target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(segment_, other->segment_);
  swap(Type_, other->Type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MockJob::InitAsDefaultInstance() {
}
class MockJob::_Internal {
 public:
};

MockJob::MockJob(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.MockJob)
}
MockJob::MockJob(const MockJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  external_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_external_id().empty()) {
    external_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_external_id(),
      GetArena());
  }
  ::memcpy(&file_size_, &from.file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_retry_) -
    reinterpret_cast<char*>(&file_size_)) + sizeof(can_retry_));
  // @@protoc_insertion_point(copy_constructor:flex.MockJob)
}

void MockJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MockJob_flex_2eproto.base);
  external_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_retry_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(can_retry_));
}

MockJob::~MockJob() {
  // @@protoc_insertion_point(destructor:flex.MockJob)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MockJob::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  external_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MockJob::ArenaDtor(void* object) {
  MockJob* _this = reinterpret_cast< MockJob* >(object);
  (void)_this;
}
void MockJob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MockJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MockJob& MockJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MockJob_flex_2eproto.base);
  return *internal_default_instance();
}


void MockJob::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.MockJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  external_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_retry_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(can_retry_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MockJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_test_segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_test_segments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 file_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string external_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_external_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.MockJob.external_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool should_fail = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          should_fail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool can_retry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          can_retry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MockJob::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.MockJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_test_segments = 1;
  if (this->num_test_segments() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_test_segments(), target);
  }

  // int64 file_size = 2;
  if (this->file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_file_size(), target);
  }

  // string external_id = 3;
  if (this->external_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_external_id().data(), static_cast<int>(this->_internal_external_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.MockJob.external_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_external_id(), target);
  }

  // bool should_fail = 4;
  if (this->should_fail() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_should_fail(), target);
  }

  // bool can_retry = 5;
  if (this->can_retry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_can_retry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.MockJob)
  return target;
}

size_t MockJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.MockJob)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string external_id = 3;
  if (this->external_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_external_id());
  }

  // int64 file_size = 2;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_file_size());
  }

  // int32 num_test_segments = 1;
  if (this->num_test_segments() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_test_segments());
  }

  // bool should_fail = 4;
  if (this->should_fail() != 0) {
    total_size += 1 + 1;
  }

  // bool can_retry = 5;
  if (this->can_retry() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MockJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.MockJob)
  GOOGLE_DCHECK_NE(&from, this);
  const MockJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MockJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.MockJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.MockJob)
    MergeFrom(*source);
  }
}

void MockJob::MergeFrom(const MockJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.MockJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.external_id().size() > 0) {
    _internal_set_external_id(from._internal_external_id());
  }
  if (from.file_size() != 0) {
    _internal_set_file_size(from._internal_file_size());
  }
  if (from.num_test_segments() != 0) {
    _internal_set_num_test_segments(from._internal_num_test_segments());
  }
  if (from.should_fail() != 0) {
    _internal_set_should_fail(from._internal_should_fail());
  }
  if (from.can_retry() != 0) {
    _internal_set_can_retry(from._internal_can_retry());
  }
}

void MockJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.MockJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MockJob::CopyFrom(const MockJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.MockJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MockJob::IsInitialized() const {
  return true;
}

void MockJob::InternalSwap(MockJob* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  external_id_.Swap(&other->external_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MockJob, can_retry_)
      + sizeof(MockJob::can_retry_)
      - PROTOBUF_FIELD_OFFSET(MockJob, file_size_)>(
          reinterpret_cast<char*>(&file_size_),
          reinterpret_cast<char*>(&other->file_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MockJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncJob::InitAsDefaultInstance() {
}
class SyncJob::_Internal {
 public:
};

SyncJob::SyncJob(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.SyncJob)
}
SyncJob::SyncJob(const SyncJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_path().empty()) {
    remote_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_remote_path(),
      GetArena());
  }
  ::memcpy(&operation_, &from.operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&overwrite_) -
    reinterpret_cast<char*>(&operation_)) + sizeof(overwrite_));
  // @@protoc_insertion_point(copy_constructor:flex.SyncJob)
}

void SyncJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncJob_flex_2eproto.base);
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overwrite_) -
      reinterpret_cast<char*>(&operation_)) + sizeof(overwrite_));
}

SyncJob::~SyncJob() {
  // @@protoc_insertion_point(destructor:flex.SyncJob)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncJob::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remote_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SyncJob::ArenaDtor(void* object) {
  SyncJob* _this = reinterpret_cast< SyncJob* >(object);
  (void)_this;
}
void SyncJob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncJob& SyncJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncJob_flex_2eproto.base);
  return *internal_default_instance();
}


void SyncJob::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.SyncJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overwrite_) -
      reinterpret_cast<char*>(&operation_)) + sizeof(overwrite_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flex.SyncJob.Operation operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::flex::SyncJob_Operation>(val));
        } else goto handle_unusual;
        continue;
      // bool overwrite = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          overwrite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_remote_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.SyncJob.remote_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncJob::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.SyncJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flex.SyncJob.Operation operation = 1;
  if (this->operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // bool overwrite = 2;
  if (this->overwrite() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_overwrite(), target);
  }

  // string remote_path = 3;
  if (this->remote_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_path().data(), static_cast<int>(this->_internal_remote_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.SyncJob.remote_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_remote_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.SyncJob)
  return target;
}

size_t SyncJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.SyncJob)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_path = 3;
  if (this->remote_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_path());
  }

  // .flex.SyncJob.Operation operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  // bool overwrite = 2;
  if (this->overwrite() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.SyncJob)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.SyncJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.SyncJob)
    MergeFrom(*source);
  }
}

void SyncJob::MergeFrom(const SyncJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.SyncJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_path().size() > 0) {
    _internal_set_remote_path(from._internal_remote_path());
  }
  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
  if (from.overwrite() != 0) {
    _internal_set_overwrite(from._internal_overwrite());
  }
}

void SyncJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.SyncJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncJob::CopyFrom(const SyncJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.SyncJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncJob::IsInitialized() const {
  return true;
}

void SyncJob::InternalSwap(SyncJob* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  remote_path_.Swap(&other->remote_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncJob, overwrite_)
      + sizeof(SyncJob::overwrite_)
      - PROTOBUF_FIELD_OFFSET(SyncJob, operation_)>(
          reinterpret_cast<char*>(&operation_),
          reinterpret_cast<char*>(&other->operation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Work_Status::InitAsDefaultInstance() {
}
class Work_Status::_Internal {
 public:
};

Work_Status::Work_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.Work.Status)
}
Work_Status::Work_Status(const Work_Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:flex.Work.Status)
}

void Work_Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Work_Status_flex_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

Work_Status::~Work_Status() {
  // @@protoc_insertion_point(destructor:flex.Work.Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Work_Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Work_Status::ArenaDtor(void* object) {
  Work_Status* _this = reinterpret_cast< Work_Status* >(object);
  (void)_this;
}
void Work_Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Work_Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Work_Status& Work_Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Work_Status_flex_2eproto.base);
  return *internal_default_instance();
}


void Work_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.Work.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Work_Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flex.Work.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::flex::Work_State>(val));
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.Work.Status.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Work_Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.Work.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flex.Work.State state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.Work.Status.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.Work.Status)
  return target;
}

size_t Work_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.Work.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .flex.Work.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Work_Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.Work.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Work_Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Work_Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.Work.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.Work.Status)
    MergeFrom(*source);
  }
}

void Work_Status::MergeFrom(const Work_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.Work.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void Work_Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.Work.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Work_Status::CopyFrom(const Work_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.Work.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Work_Status::IsInitialized() const {
  return true;
}

void Work_Status::InternalSwap(Work_Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Work_Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Work_Part::InitAsDefaultInstance() {
}
class Work_Part::_Internal {
 public:
};

Work_Part::Work_Part(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.Work.Part)
}
Work_Part::Work_Part(const Work_Part& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entity_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entity_tag().empty()) {
    entity_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_entity_tag(),
      GetArena());
  }
  checksum_sha256_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_checksum_sha256().empty()) {
    checksum_sha256_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_checksum_sha256(),
      GetArena());
  }
  ::memcpy(&offset_start_, &from.offset_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&offset_start_)) + sizeof(completed_));
  // @@protoc_insertion_point(copy_constructor:flex.Work.Part)
}

void Work_Part::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Work_Part_flex_2eproto.base);
  entity_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checksum_sha256_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&offset_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&completed_) -
      reinterpret_cast<char*>(&offset_start_)) + sizeof(completed_));
}

Work_Part::~Work_Part() {
  // @@protoc_insertion_point(destructor:flex.Work.Part)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Work_Part::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  entity_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checksum_sha256_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Work_Part::ArenaDtor(void* object) {
  Work_Part* _this = reinterpret_cast< Work_Part* >(object);
  (void)_this;
}
void Work_Part::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Work_Part::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Work_Part& Work_Part::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Work_Part_flex_2eproto.base);
  return *internal_default_instance();
}


void Work_Part::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.Work.Part)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checksum_sha256_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&offset_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&completed_) -
      reinterpret_cast<char*>(&offset_start_)) + sizeof(completed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Work_Part::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 part_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          part_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset_stop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          offset_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string entity_tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_entity_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.Work.Part.entity_tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string checksum_sha256 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_checksum_sha256();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.Work.Part.checksum_sha256"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool completed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Work_Part::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.Work.Part)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 part_number = 1;
  if (this->part_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_part_number(), target);
  }

  // int64 offset_start = 2;
  if (this->offset_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset_start(), target);
  }

  // int64 offset_stop = 3;
  if (this->offset_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_offset_stop(), target);
  }

  // string entity_tag = 4;
  if (this->entity_tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity_tag().data(), static_cast<int>(this->_internal_entity_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.Work.Part.entity_tag");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_entity_tag(), target);
  }

  // string checksum_sha256 = 5;
  if (this->checksum_sha256().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checksum_sha256().data(), static_cast<int>(this->_internal_checksum_sha256().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.Work.Part.checksum_sha256");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_checksum_sha256(), target);
  }

  // bool completed = 6;
  if (this->completed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.Work.Part)
  return target;
}

size_t Work_Part::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.Work.Part)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_tag = 4;
  if (this->entity_tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_tag());
  }

  // string checksum_sha256 = 5;
  if (this->checksum_sha256().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checksum_sha256());
  }

  // int64 offset_start = 2;
  if (this->offset_start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset_start());
  }

  // int64 offset_stop = 3;
  if (this->offset_stop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset_stop());
  }

  // int32 part_number = 1;
  if (this->part_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_part_number());
  }

  // bool completed = 6;
  if (this->completed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Work_Part::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.Work.Part)
  GOOGLE_DCHECK_NE(&from, this);
  const Work_Part* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Work_Part>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.Work.Part)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.Work.Part)
    MergeFrom(*source);
  }
}

void Work_Part::MergeFrom(const Work_Part& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.Work.Part)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_tag().size() > 0) {
    _internal_set_entity_tag(from._internal_entity_tag());
  }
  if (from.checksum_sha256().size() > 0) {
    _internal_set_checksum_sha256(from._internal_checksum_sha256());
  }
  if (from.offset_start() != 0) {
    _internal_set_offset_start(from._internal_offset_start());
  }
  if (from.offset_stop() != 0) {
    _internal_set_offset_stop(from._internal_offset_stop());
  }
  if (from.part_number() != 0) {
    _internal_set_part_number(from._internal_part_number());
  }
  if (from.completed() != 0) {
    _internal_set_completed(from._internal_completed());
  }
}

void Work_Part::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.Work.Part)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Work_Part::CopyFrom(const Work_Part& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.Work.Part)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Work_Part::IsInitialized() const {
  return true;
}

void Work_Part::InternalSwap(Work_Part* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entity_tag_.Swap(&other->entity_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checksum_sha256_.Swap(&other->checksum_sha256_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Work_Part, completed_)
      + sizeof(Work_Part::completed_)
      - PROTOBUF_FIELD_OFFSET(Work_Part, offset_start_)>(
          reinterpret_cast<char*>(&offset_start_),
          reinterpret_cast<char*>(&other->offset_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Work_Part::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Work::InitAsDefaultInstance() {
  ::flex::_Work_default_instance_._instance.get_mutable()->status_ = const_cast< ::flex::Work_Status*>(
      ::flex::Work_Status::internal_default_instance());
}
class Work::_Internal {
 public:
  static const ::flex::Work_Status& status(const Work* msg);
};

const ::flex::Work_Status&
Work::_Internal::status(const Work* msg) {
  return *msg->status_;
}
Work::Work(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.Work)
}
Work::Work(const Work& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parts_(from.parts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_id().empty()) {
    job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_job_id(),
      GetArena());
  }
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_request_id(),
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::flex::Work_Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flex.Work)
}

void Work::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Work_flex_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

Work::~Work() {
  // @@protoc_insertion_point(destructor:flex.Work)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Work::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void Work::ArenaDtor(void* object) {
  Work* _this = reinterpret_cast< Work* >(object);
  (void)_this;
}
void Work::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Work::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Work& Work::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Work_flex_2eproto.base);
  return *internal_default_instance();
}


void Work::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.Work)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parts_.Clear();
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  job_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Work::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.Work.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string job_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.Work.job_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.Work.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flex.Work.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .flex.Work.Part parts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Work::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.Work)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.Work.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // string job_id = 2;
  if (this->job_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.Work.job_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_job_id(), target);
  }

  // string request_id = 3;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.Work.request_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_request_id(), target);
  }

  // .flex.Work.Status status = 4;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  // repeated .flex.Work.Part parts = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_parts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.Work)
  return target;
}

size_t Work::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.Work)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flex.Work.Part parts = 5;
  total_size += 1UL * this->_internal_parts_size();
  for (const auto& msg : this->parts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string job_id = 2;
  if (this->job_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  // string request_id = 3;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .flex.Work.Status status = 4;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Work::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.Work)
  GOOGLE_DCHECK_NE(&from, this);
  const Work* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Work>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.Work)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.Work)
    MergeFrom(*source);
  }
}

void Work::MergeFrom(const Work& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.Work)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parts_.MergeFrom(from.parts_);
  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.job_id().size() > 0) {
    _internal_set_job_id(from._internal_job_id());
  }
  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::flex::Work_Status::MergeFrom(from._internal_status());
  }
}

void Work::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.Work)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Work::CopyFrom(const Work& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.Work)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Work::IsInitialized() const {
  return true;
}

void Work::InternalSwap(Work* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parts_.InternalSwap(&other->parts_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  job_id_.Swap(&other->job_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Work::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateConfigRequest::InitAsDefaultInstance() {
  ::flex::_UpdateConfigRequest_default_instance_._instance.get_mutable()->bee_remote_ = const_cast< ::flex::BeeRemoteNode*>(
      ::flex::BeeRemoteNode::internal_default_instance());
}
class UpdateConfigRequest::_Internal {
 public:
  static const ::flex::BeeRemoteNode& bee_remote(const UpdateConfigRequest* msg);
};

const ::flex::BeeRemoteNode&
UpdateConfigRequest::_Internal::bee_remote(const UpdateConfigRequest* msg) {
  return *msg->bee_remote_;
}
UpdateConfigRequest::UpdateConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rsts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.UpdateConfigRequest)
}
UpdateConfigRequest::UpdateConfigRequest(const UpdateConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rsts_(from.rsts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bee_remote()) {
    bee_remote_ = new ::flex::BeeRemoteNode(*from.bee_remote_);
  } else {
    bee_remote_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flex.UpdateConfigRequest)
}

void UpdateConfigRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateConfigRequest_flex_2eproto.base);
  bee_remote_ = nullptr;
}

UpdateConfigRequest::~UpdateConfigRequest() {
  // @@protoc_insertion_point(destructor:flex.UpdateConfigRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bee_remote_;
}

void UpdateConfigRequest::ArenaDtor(void* object) {
  UpdateConfigRequest* _this = reinterpret_cast< UpdateConfigRequest* >(object);
  (void)_this;
}
void UpdateConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateConfigRequest& UpdateConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateConfigRequest_flex_2eproto.base);
  return *internal_default_instance();
}


void UpdateConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.UpdateConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rsts_.Clear();
  if (GetArena() == nullptr && bee_remote_ != nullptr) {
    delete bee_remote_;
  }
  bee_remote_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flex.BeeRemoteNode bee_remote = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bee_remote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .flex.RemoteStorageTarget rsts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rsts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateConfigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.UpdateConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flex.BeeRemoteNode bee_remote = 1;
  if (this->has_bee_remote()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bee_remote(this), target, stream);
  }

  // repeated .flex.RemoteStorageTarget rsts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rsts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rsts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.UpdateConfigRequest)
  return target;
}

size_t UpdateConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.UpdateConfigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flex.RemoteStorageTarget rsts = 2;
  total_size += 1UL * this->_internal_rsts_size();
  for (const auto& msg : this->rsts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .flex.BeeRemoteNode bee_remote = 1;
  if (this->has_bee_remote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bee_remote_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.UpdateConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.UpdateConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.UpdateConfigRequest)
    MergeFrom(*source);
  }
}

void UpdateConfigRequest::MergeFrom(const UpdateConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.UpdateConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rsts_.MergeFrom(from.rsts_);
  if (from.has_bee_remote()) {
    _internal_mutable_bee_remote()->::flex::BeeRemoteNode::MergeFrom(from._internal_bee_remote());
  }
}

void UpdateConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.UpdateConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateConfigRequest::CopyFrom(const UpdateConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.UpdateConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateConfigRequest::IsInitialized() const {
  return true;
}

void UpdateConfigRequest::InternalSwap(UpdateConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rsts_.InternalSwap(&other->rsts_);
  swap(bee_remote_, other->bee_remote_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateConfigResponse::InitAsDefaultInstance() {
}
class UpdateConfigResponse::_Internal {
 public:
};

UpdateConfigResponse::UpdateConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.UpdateConfigResponse)
}
UpdateConfigResponse::UpdateConfigResponse(const UpdateConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:flex.UpdateConfigResponse)
}

void UpdateConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateConfigResponse_flex_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

UpdateConfigResponse::~UpdateConfigResponse() {
  // @@protoc_insertion_point(destructor:flex.UpdateConfigResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateConfigResponse::ArenaDtor(void* object) {
  UpdateConfigResponse* _this = reinterpret_cast< UpdateConfigResponse* >(object);
  (void)_this;
}
void UpdateConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateConfigResponse& UpdateConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateConfigResponse_flex_2eproto.base);
  return *internal_default_instance();
}


void UpdateConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.UpdateConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flex.UpdateConfigResponse.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::flex::UpdateConfigResponse_Result>(val));
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.UpdateConfigResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.UpdateConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flex.UpdateConfigResponse.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.UpdateConfigResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.UpdateConfigResponse)
  return target;
}

size_t UpdateConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.UpdateConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .flex.UpdateConfigResponse.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.UpdateConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.UpdateConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.UpdateConfigResponse)
    MergeFrom(*source);
  }
}

void UpdateConfigResponse::MergeFrom(const UpdateConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.UpdateConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void UpdateConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.UpdateConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateConfigResponse::CopyFrom(const UpdateConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.UpdateConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateConfigResponse::IsInitialized() const {
  return true;
}

void UpdateConfigResponse::InternalSwap(UpdateConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BeeRemoteNode::InitAsDefaultInstance() {
}
class BeeRemoteNode::_Internal {
 public:
};

BeeRemoteNode::BeeRemoteNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.BeeRemoteNode)
}
BeeRemoteNode::BeeRemoteNode(const BeeRemoteNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flex.BeeRemoteNode)
}

void BeeRemoteNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BeeRemoteNode_flex_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BeeRemoteNode::~BeeRemoteNode() {
  // @@protoc_insertion_point(destructor:flex.BeeRemoteNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BeeRemoteNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BeeRemoteNode::ArenaDtor(void* object) {
  BeeRemoteNode* _this = reinterpret_cast< BeeRemoteNode* >(object);
  (void)_this;
}
void BeeRemoteNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BeeRemoteNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeeRemoteNode& BeeRemoteNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BeeRemoteNode_flex_2eproto.base);
  return *internal_default_instance();
}


void BeeRemoteNode::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.BeeRemoteNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeeRemoteNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.BeeRemoteNode.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.BeeRemoteNode.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BeeRemoteNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.BeeRemoteNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.BeeRemoteNode.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.BeeRemoteNode.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.BeeRemoteNode)
  return target;
}

size_t BeeRemoteNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.BeeRemoteNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeeRemoteNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.BeeRemoteNode)
  GOOGLE_DCHECK_NE(&from, this);
  const BeeRemoteNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BeeRemoteNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.BeeRemoteNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.BeeRemoteNode)
    MergeFrom(*source);
  }
}

void BeeRemoteNode::MergeFrom(const BeeRemoteNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.BeeRemoteNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
}

void BeeRemoteNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.BeeRemoteNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeeRemoteNode::CopyFrom(const BeeRemoteNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.BeeRemoteNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeeRemoteNode::IsInitialized() const {
  return true;
}

void BeeRemoteNode::InternalSwap(BeeRemoteNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BeeRemoteNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteStorageTarget_Policies::InitAsDefaultInstance() {
}
class RemoteStorageTarget_Policies::_Internal {
 public:
};

RemoteStorageTarget_Policies::RemoteStorageTarget_Policies(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.RemoteStorageTarget.Policies)
}
RemoteStorageTarget_Policies::RemoteStorageTarget_Policies(const RemoteStorageTarget_Policies& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fast_start_max_size_ = from.fast_start_max_size_;
  // @@protoc_insertion_point(copy_constructor:flex.RemoteStorageTarget.Policies)
}

void RemoteStorageTarget_Policies::SharedCtor() {
  fast_start_max_size_ = PROTOBUF_LONGLONG(0);
}

RemoteStorageTarget_Policies::~RemoteStorageTarget_Policies() {
  // @@protoc_insertion_point(destructor:flex.RemoteStorageTarget.Policies)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteStorageTarget_Policies::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoteStorageTarget_Policies::ArenaDtor(void* object) {
  RemoteStorageTarget_Policies* _this = reinterpret_cast< RemoteStorageTarget_Policies* >(object);
  (void)_this;
}
void RemoteStorageTarget_Policies::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteStorageTarget_Policies::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteStorageTarget_Policies& RemoteStorageTarget_Policies::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteStorageTarget_Policies_flex_2eproto.base);
  return *internal_default_instance();
}


void RemoteStorageTarget_Policies::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.RemoteStorageTarget.Policies)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fast_start_max_size_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteStorageTarget_Policies::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 fast_start_max_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fast_start_max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteStorageTarget_Policies::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.RemoteStorageTarget.Policies)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 fast_start_max_size = 1;
  if (this->fast_start_max_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_fast_start_max_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.RemoteStorageTarget.Policies)
  return target;
}

size_t RemoteStorageTarget_Policies::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.RemoteStorageTarget.Policies)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 fast_start_max_size = 1;
  if (this->fast_start_max_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fast_start_max_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteStorageTarget_Policies::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.RemoteStorageTarget.Policies)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteStorageTarget_Policies* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteStorageTarget_Policies>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.RemoteStorageTarget.Policies)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.RemoteStorageTarget.Policies)
    MergeFrom(*source);
  }
}

void RemoteStorageTarget_Policies::MergeFrom(const RemoteStorageTarget_Policies& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.RemoteStorageTarget.Policies)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fast_start_max_size() != 0) {
    _internal_set_fast_start_max_size(from._internal_fast_start_max_size());
  }
}

void RemoteStorageTarget_Policies::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.RemoteStorageTarget.Policies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteStorageTarget_Policies::CopyFrom(const RemoteStorageTarget_Policies& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.RemoteStorageTarget.Policies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteStorageTarget_Policies::IsInitialized() const {
  return true;
}

void RemoteStorageTarget_Policies::InternalSwap(RemoteStorageTarget_Policies* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(fast_start_max_size_, other->fast_start_max_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteStorageTarget_Policies::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteStorageTarget_S3::InitAsDefaultInstance() {
}
class RemoteStorageTarget_S3::_Internal {
 public:
};

RemoteStorageTarget_S3::RemoteStorageTarget_S3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.RemoteStorageTarget.S3)
}
RemoteStorageTarget_S3::RemoteStorageTarget_S3(const RemoteStorageTarget_S3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  endpoint_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endpoint_url().empty()) {
    endpoint_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_endpoint_url(),
      GetArena());
  }
  partition_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partition_id().empty()) {
    partition_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_partition_id(),
      GetArena());
  }
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_region().empty()) {
    region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_region(),
      GetArena());
  }
  bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bucket().empty()) {
    bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bucket(),
      GetArena());
  }
  access_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_key().empty()) {
    access_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_access_key(),
      GetArena());
  }
  secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret_key().empty()) {
    secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_secret_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flex.RemoteStorageTarget.S3)
}

void RemoteStorageTarget_S3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteStorageTarget_S3_flex_2eproto.base);
  endpoint_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoteStorageTarget_S3::~RemoteStorageTarget_S3() {
  // @@protoc_insertion_point(destructor:flex.RemoteStorageTarget.S3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteStorageTarget_S3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  endpoint_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteStorageTarget_S3::ArenaDtor(void* object) {
  RemoteStorageTarget_S3* _this = reinterpret_cast< RemoteStorageTarget_S3* >(object);
  (void)_this;
}
void RemoteStorageTarget_S3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteStorageTarget_S3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteStorageTarget_S3& RemoteStorageTarget_S3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteStorageTarget_S3_flex_2eproto.base);
  return *internal_default_instance();
}


void RemoteStorageTarget_S3::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.RemoteStorageTarget.S3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endpoint_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bucket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  access_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secret_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteStorageTarget_S3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string endpoint_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_endpoint_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.RemoteStorageTarget.S3.endpoint_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partition_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_partition_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.RemoteStorageTarget.S3.partition_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.RemoteStorageTarget.S3.region"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bucket = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_bucket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.RemoteStorageTarget.S3.bucket"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_access_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.RemoteStorageTarget.S3.access_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_secret_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.RemoteStorageTarget.S3.secret_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteStorageTarget_S3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.RemoteStorageTarget.S3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string endpoint_url = 1;
  if (this->endpoint_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint_url().data(), static_cast<int>(this->_internal_endpoint_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.RemoteStorageTarget.S3.endpoint_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_endpoint_url(), target);
  }

  // string partition_id = 2;
  if (this->partition_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition_id().data(), static_cast<int>(this->_internal_partition_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.RemoteStorageTarget.S3.partition_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partition_id(), target);
  }

  // string region = 3;
  if (this->region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.RemoteStorageTarget.S3.region");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_region(), target);
  }

  // string bucket = 4;
  if (this->bucket().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.RemoteStorageTarget.S3.bucket");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_bucket(), target);
  }

  // string access_key = 5;
  if (this->access_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_key().data(), static_cast<int>(this->_internal_access_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.RemoteStorageTarget.S3.access_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_access_key(), target);
  }

  // string secret_key = 6;
  if (this->secret_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret_key().data(), static_cast<int>(this->_internal_secret_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.RemoteStorageTarget.S3.secret_key");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_secret_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.RemoteStorageTarget.S3)
  return target;
}

size_t RemoteStorageTarget_S3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.RemoteStorageTarget.S3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string endpoint_url = 1;
  if (this->endpoint_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint_url());
  }

  // string partition_id = 2;
  if (this->partition_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition_id());
  }

  // string region = 3;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string bucket = 4;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket());
  }

  // string access_key = 5;
  if (this->access_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_key());
  }

  // string secret_key = 6;
  if (this->secret_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteStorageTarget_S3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.RemoteStorageTarget.S3)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteStorageTarget_S3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteStorageTarget_S3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.RemoteStorageTarget.S3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.RemoteStorageTarget.S3)
    MergeFrom(*source);
  }
}

void RemoteStorageTarget_S3::MergeFrom(const RemoteStorageTarget_S3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.RemoteStorageTarget.S3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.endpoint_url().size() > 0) {
    _internal_set_endpoint_url(from._internal_endpoint_url());
  }
  if (from.partition_id().size() > 0) {
    _internal_set_partition_id(from._internal_partition_id());
  }
  if (from.region().size() > 0) {
    _internal_set_region(from._internal_region());
  }
  if (from.bucket().size() > 0) {
    _internal_set_bucket(from._internal_bucket());
  }
  if (from.access_key().size() > 0) {
    _internal_set_access_key(from._internal_access_key());
  }
  if (from.secret_key().size() > 0) {
    _internal_set_secret_key(from._internal_secret_key());
  }
}

void RemoteStorageTarget_S3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.RemoteStorageTarget.S3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteStorageTarget_S3::CopyFrom(const RemoteStorageTarget_S3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.RemoteStorageTarget.S3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteStorageTarget_S3::IsInitialized() const {
  return true;
}

void RemoteStorageTarget_S3::InternalSwap(RemoteStorageTarget_S3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  endpoint_url_.Swap(&other->endpoint_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partition_id_.Swap(&other->partition_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bucket_.Swap(&other->bucket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  access_key_.Swap(&other->access_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secret_key_.Swap(&other->secret_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteStorageTarget_S3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteStorageTarget_Azure::InitAsDefaultInstance() {
  ::flex::_RemoteStorageTarget_Azure_default_instance_._instance.get_mutable()->s3_ = const_cast< ::flex::RemoteStorageTarget_S3*>(
      ::flex::RemoteStorageTarget_S3::internal_default_instance());
}
class RemoteStorageTarget_Azure::_Internal {
 public:
  static const ::flex::RemoteStorageTarget_S3& s3(const RemoteStorageTarget_Azure* msg);
};

const ::flex::RemoteStorageTarget_S3&
RemoteStorageTarget_Azure::_Internal::s3(const RemoteStorageTarget_Azure* msg) {
  return *msg->s3_;
}
RemoteStorageTarget_Azure::RemoteStorageTarget_Azure(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.RemoteStorageTarget.Azure)
}
RemoteStorageTarget_Azure::RemoteStorageTarget_Azure(const RemoteStorageTarget_Azure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_account(),
      GetArena());
  }
  if (from._internal_has_s3()) {
    s3_ = new ::flex::RemoteStorageTarget_S3(*from.s3_);
  } else {
    s3_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flex.RemoteStorageTarget.Azure)
}

void RemoteStorageTarget_Azure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteStorageTarget_Azure_flex_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s3_ = nullptr;
}

RemoteStorageTarget_Azure::~RemoteStorageTarget_Azure() {
  // @@protoc_insertion_point(destructor:flex.RemoteStorageTarget.Azure)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteStorageTarget_Azure::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete s3_;
}

void RemoteStorageTarget_Azure::ArenaDtor(void* object) {
  RemoteStorageTarget_Azure* _this = reinterpret_cast< RemoteStorageTarget_Azure* >(object);
  (void)_this;
}
void RemoteStorageTarget_Azure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteStorageTarget_Azure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteStorageTarget_Azure& RemoteStorageTarget_Azure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteStorageTarget_Azure_flex_2eproto.base);
  return *internal_default_instance();
}


void RemoteStorageTarget_Azure::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.RemoteStorageTarget.Azure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && s3_ != nullptr) {
    delete s3_;
  }
  s3_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteStorageTarget_Azure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flex.RemoteStorageTarget.S3 s3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_s3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.RemoteStorageTarget.Azure.account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteStorageTarget_Azure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.RemoteStorageTarget.Azure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flex.RemoteStorageTarget.S3 s3 = 1;
  if (this->has_s3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::s3(this), target, stream);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.RemoteStorageTarget.Azure.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.RemoteStorageTarget.Azure)
  return target;
}

size_t RemoteStorageTarget_Azure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.RemoteStorageTarget.Azure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // .flex.RemoteStorageTarget.S3 s3 = 1;
  if (this->has_s3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *s3_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteStorageTarget_Azure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.RemoteStorageTarget.Azure)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteStorageTarget_Azure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteStorageTarget_Azure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.RemoteStorageTarget.Azure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.RemoteStorageTarget.Azure)
    MergeFrom(*source);
  }
}

void RemoteStorageTarget_Azure::MergeFrom(const RemoteStorageTarget_Azure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.RemoteStorageTarget.Azure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {
    _internal_set_account(from._internal_account());
  }
  if (from.has_s3()) {
    _internal_mutable_s3()->::flex::RemoteStorageTarget_S3::MergeFrom(from._internal_s3());
  }
}

void RemoteStorageTarget_Azure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.RemoteStorageTarget.Azure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteStorageTarget_Azure::CopyFrom(const RemoteStorageTarget_Azure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.RemoteStorageTarget.Azure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteStorageTarget_Azure::IsInitialized() const {
  return true;
}

void RemoteStorageTarget_Azure::InternalSwap(RemoteStorageTarget_Azure* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(s3_, other->s3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteStorageTarget_Azure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteStorageTarget_POSIX::InitAsDefaultInstance() {
}
class RemoteStorageTarget_POSIX::_Internal {
 public:
};

RemoteStorageTarget_POSIX::RemoteStorageTarget_POSIX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.RemoteStorageTarget.POSIX)
}
RemoteStorageTarget_POSIX::RemoteStorageTarget_POSIX(const RemoteStorageTarget_POSIX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flex.RemoteStorageTarget.POSIX)
}

void RemoteStorageTarget_POSIX::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteStorageTarget_POSIX_flex_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoteStorageTarget_POSIX::~RemoteStorageTarget_POSIX() {
  // @@protoc_insertion_point(destructor:flex.RemoteStorageTarget.POSIX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteStorageTarget_POSIX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteStorageTarget_POSIX::ArenaDtor(void* object) {
  RemoteStorageTarget_POSIX* _this = reinterpret_cast< RemoteStorageTarget_POSIX* >(object);
  (void)_this;
}
void RemoteStorageTarget_POSIX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteStorageTarget_POSIX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteStorageTarget_POSIX& RemoteStorageTarget_POSIX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteStorageTarget_POSIX_flex_2eproto.base);
  return *internal_default_instance();
}


void RemoteStorageTarget_POSIX::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.RemoteStorageTarget.POSIX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteStorageTarget_POSIX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.RemoteStorageTarget.POSIX.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteStorageTarget_POSIX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.RemoteStorageTarget.POSIX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.RemoteStorageTarget.POSIX.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.RemoteStorageTarget.POSIX)
  return target;
}

size_t RemoteStorageTarget_POSIX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.RemoteStorageTarget.POSIX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteStorageTarget_POSIX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.RemoteStorageTarget.POSIX)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteStorageTarget_POSIX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteStorageTarget_POSIX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.RemoteStorageTarget.POSIX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.RemoteStorageTarget.POSIX)
    MergeFrom(*source);
  }
}

void RemoteStorageTarget_POSIX::MergeFrom(const RemoteStorageTarget_POSIX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.RemoteStorageTarget.POSIX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
}

void RemoteStorageTarget_POSIX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.RemoteStorageTarget.POSIX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteStorageTarget_POSIX::CopyFrom(const RemoteStorageTarget_POSIX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.RemoteStorageTarget.POSIX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteStorageTarget_POSIX::IsInitialized() const {
  return true;
}

void RemoteStorageTarget_POSIX::InternalSwap(RemoteStorageTarget_POSIX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteStorageTarget_POSIX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteStorageTarget::InitAsDefaultInstance() {
  ::flex::_RemoteStorageTarget_default_instance_._instance.get_mutable()->policies_ = const_cast< ::flex::RemoteStorageTarget_Policies*>(
      ::flex::RemoteStorageTarget_Policies::internal_default_instance());
  ::flex::_RemoteStorageTarget_default_instance_.s3_ = const_cast< ::flex::RemoteStorageTarget_S3*>(
      ::flex::RemoteStorageTarget_S3::internal_default_instance());
  ::flex::_RemoteStorageTarget_default_instance_.posix_ = const_cast< ::flex::RemoteStorageTarget_POSIX*>(
      ::flex::RemoteStorageTarget_POSIX::internal_default_instance());
  ::flex::_RemoteStorageTarget_default_instance_.azure_ = const_cast< ::flex::RemoteStorageTarget_Azure*>(
      ::flex::RemoteStorageTarget_Azure::internal_default_instance());
  ::flex::_RemoteStorageTarget_default_instance_.mock_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class RemoteStorageTarget::_Internal {
 public:
  static const ::flex::RemoteStorageTarget_Policies& policies(const RemoteStorageTarget* msg);
  static const ::flex::RemoteStorageTarget_S3& s3(const RemoteStorageTarget* msg);
  static const ::flex::RemoteStorageTarget_POSIX& posix(const RemoteStorageTarget* msg);
  static const ::flex::RemoteStorageTarget_Azure& azure(const RemoteStorageTarget* msg);
};

const ::flex::RemoteStorageTarget_Policies&
RemoteStorageTarget::_Internal::policies(const RemoteStorageTarget* msg) {
  return *msg->policies_;
}
const ::flex::RemoteStorageTarget_S3&
RemoteStorageTarget::_Internal::s3(const RemoteStorageTarget* msg) {
  return *msg->type_.s3_;
}
const ::flex::RemoteStorageTarget_POSIX&
RemoteStorageTarget::_Internal::posix(const RemoteStorageTarget* msg) {
  return *msg->type_.posix_;
}
const ::flex::RemoteStorageTarget_Azure&
RemoteStorageTarget::_Internal::azure(const RemoteStorageTarget* msg) {
  return *msg->type_.azure_;
}
void RemoteStorageTarget::set_allocated_s3(::flex::RemoteStorageTarget_S3* s3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (s3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(s3);
    if (message_arena != submessage_arena) {
      s3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s3, submessage_arena);
    }
    set_has_s3();
    type_.s3_ = s3;
  }
  // @@protoc_insertion_point(field_set_allocated:flex.RemoteStorageTarget.s3)
}
void RemoteStorageTarget::set_allocated_posix(::flex::RemoteStorageTarget_POSIX* posix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (posix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(posix);
    if (message_arena != submessage_arena) {
      posix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posix, submessage_arena);
    }
    set_has_posix();
    type_.posix_ = posix;
  }
  // @@protoc_insertion_point(field_set_allocated:flex.RemoteStorageTarget.posix)
}
void RemoteStorageTarget::set_allocated_azure(::flex::RemoteStorageTarget_Azure* azure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (azure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(azure);
    if (message_arena != submessage_arena) {
      azure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, azure, submessage_arena);
    }
    set_has_azure();
    type_.azure_ = azure;
  }
  // @@protoc_insertion_point(field_set_allocated:flex.RemoteStorageTarget.azure)
}
RemoteStorageTarget::RemoteStorageTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flex.RemoteStorageTarget)
}
RemoteStorageTarget::RemoteStorageTarget(const RemoteStorageTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_policies()) {
    policies_ = new ::flex::RemoteStorageTarget_Policies(*from.policies_);
  } else {
    policies_ = nullptr;
  }
  clear_has_type();
  switch (from.type_case()) {
    case kS3: {
      _internal_mutable_s3()->::flex::RemoteStorageTarget_S3::MergeFrom(from._internal_s3());
      break;
    }
    case kPosix: {
      _internal_mutable_posix()->::flex::RemoteStorageTarget_POSIX::MergeFrom(from._internal_posix());
      break;
    }
    case kAzure: {
      _internal_mutable_azure()->::flex::RemoteStorageTarget_Azure::MergeFrom(from._internal_azure());
      break;
    }
    case kMock: {
      _internal_set_mock(from._internal_mock());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flex.RemoteStorageTarget)
}

void RemoteStorageTarget::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteStorageTarget_flex_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policies_ = nullptr;
  clear_has_type();
}

RemoteStorageTarget::~RemoteStorageTarget() {
  // @@protoc_insertion_point(destructor:flex.RemoteStorageTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteStorageTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete policies_;
  if (has_type()) {
    clear_type();
  }
}

void RemoteStorageTarget::ArenaDtor(void* object) {
  RemoteStorageTarget* _this = reinterpret_cast< RemoteStorageTarget* >(object);
  (void)_this;
}
void RemoteStorageTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteStorageTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteStorageTarget& RemoteStorageTarget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteStorageTarget_flex_2eproto.base);
  return *internal_default_instance();
}


void RemoteStorageTarget::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:flex.RemoteStorageTarget)
  switch (type_case()) {
    case kS3: {
      if (GetArena() == nullptr) {
        delete type_.s3_;
      }
      break;
    }
    case kPosix: {
      if (GetArena() == nullptr) {
        delete type_.posix_;
      }
      break;
    }
    case kAzure: {
      if (GetArena() == nullptr) {
        delete type_.azure_;
      }
      break;
    }
    case kMock: {
      type_.mock_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void RemoteStorageTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:flex.RemoteStorageTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && policies_ != nullptr) {
    delete policies_;
  }
  policies_ = nullptr;
  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteStorageTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.RemoteStorageTarget.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.RemoteStorageTarget.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flex.RemoteStorageTarget.Policies policies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_policies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flex.RemoteStorageTarget.S3 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_s3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flex.RemoteStorageTarget.POSIX posix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_posix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flex.RemoteStorageTarget.Azure azure = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_azure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mock = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_mock();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flex.RemoteStorageTarget.mock"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteStorageTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flex.RemoteStorageTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.RemoteStorageTarget.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.RemoteStorageTarget.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .flex.RemoteStorageTarget.Policies policies = 3;
  if (this->has_policies()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::policies(this), target, stream);
  }

  // .flex.RemoteStorageTarget.S3 s3 = 4;
  if (_internal_has_s3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::s3(this), target, stream);
  }

  // .flex.RemoteStorageTarget.POSIX posix = 5;
  if (_internal_has_posix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::posix(this), target, stream);
  }

  // .flex.RemoteStorageTarget.Azure azure = 6;
  if (_internal_has_azure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::azure(this), target, stream);
  }

  // string mock = 7;
  if (_internal_has_mock()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mock().data(), static_cast<int>(this->_internal_mock().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flex.RemoteStorageTarget.mock");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_mock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flex.RemoteStorageTarget)
  return target;
}

size_t RemoteStorageTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flex.RemoteStorageTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .flex.RemoteStorageTarget.Policies policies = 3;
  if (this->has_policies()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policies_);
  }

  switch (type_case()) {
    // .flex.RemoteStorageTarget.S3 s3 = 4;
    case kS3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.s3_);
      break;
    }
    // .flex.RemoteStorageTarget.POSIX posix = 5;
    case kPosix: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.posix_);
      break;
    }
    // .flex.RemoteStorageTarget.Azure azure = 6;
    case kAzure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.azure_);
      break;
    }
    // string mock = 7;
    case kMock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mock());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteStorageTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flex.RemoteStorageTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteStorageTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteStorageTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flex.RemoteStorageTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flex.RemoteStorageTarget)
    MergeFrom(*source);
  }
}

void RemoteStorageTarget::MergeFrom(const RemoteStorageTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flex.RemoteStorageTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_policies()) {
    _internal_mutable_policies()->::flex::RemoteStorageTarget_Policies::MergeFrom(from._internal_policies());
  }
  switch (from.type_case()) {
    case kS3: {
      _internal_mutable_s3()->::flex::RemoteStorageTarget_S3::MergeFrom(from._internal_s3());
      break;
    }
    case kPosix: {
      _internal_mutable_posix()->::flex::RemoteStorageTarget_POSIX::MergeFrom(from._internal_posix());
      break;
    }
    case kAzure: {
      _internal_mutable_azure()->::flex::RemoteStorageTarget_Azure::MergeFrom(from._internal_azure());
      break;
    }
    case kMock: {
      _internal_set_mock(from._internal_mock());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void RemoteStorageTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flex.RemoteStorageTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteStorageTarget::CopyFrom(const RemoteStorageTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flex.RemoteStorageTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteStorageTarget::IsInitialized() const {
  return true;
}

void RemoteStorageTarget::InternalSwap(RemoteStorageTarget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(policies_, other->policies_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteStorageTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace flex
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flex::HeartbeatRequest* Arena::CreateMaybeMessage< ::flex::HeartbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::HeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::HeartbeatResponse* Arena::CreateMaybeMessage< ::flex::HeartbeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::HeartbeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::NodeStats* Arena::CreateMaybeMessage< ::flex::NodeStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::NodeStats >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::SubmitWorkRequest* Arena::CreateMaybeMessage< ::flex::SubmitWorkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::SubmitWorkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::SubmitWorkResponse* Arena::CreateMaybeMessage< ::flex::SubmitWorkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::SubmitWorkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::UpdateWorkRequest* Arena::CreateMaybeMessage< ::flex::UpdateWorkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::UpdateWorkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::UpdateWorkResponse* Arena::CreateMaybeMessage< ::flex::UpdateWorkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::UpdateWorkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::BulkUpdateWorkRequest* Arena::CreateMaybeMessage< ::flex::BulkUpdateWorkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::BulkUpdateWorkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::BulkUpdateWorkResponse* Arena::CreateMaybeMessage< ::flex::BulkUpdateWorkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::BulkUpdateWorkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::WorkRequest_Segment* Arena::CreateMaybeMessage< ::flex::WorkRequest_Segment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::WorkRequest_Segment >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::WorkRequest* Arena::CreateMaybeMessage< ::flex::WorkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::WorkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::MockJob* Arena::CreateMaybeMessage< ::flex::MockJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::MockJob >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::SyncJob* Arena::CreateMaybeMessage< ::flex::SyncJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::SyncJob >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::Work_Status* Arena::CreateMaybeMessage< ::flex::Work_Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::Work_Status >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::Work_Part* Arena::CreateMaybeMessage< ::flex::Work_Part >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::Work_Part >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::Work* Arena::CreateMaybeMessage< ::flex::Work >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::Work >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::UpdateConfigRequest* Arena::CreateMaybeMessage< ::flex::UpdateConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::UpdateConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::UpdateConfigResponse* Arena::CreateMaybeMessage< ::flex::UpdateConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::UpdateConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::BeeRemoteNode* Arena::CreateMaybeMessage< ::flex::BeeRemoteNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::BeeRemoteNode >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::RemoteStorageTarget_Policies* Arena::CreateMaybeMessage< ::flex::RemoteStorageTarget_Policies >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::RemoteStorageTarget_Policies >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::RemoteStorageTarget_S3* Arena::CreateMaybeMessage< ::flex::RemoteStorageTarget_S3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::RemoteStorageTarget_S3 >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::RemoteStorageTarget_Azure* Arena::CreateMaybeMessage< ::flex::RemoteStorageTarget_Azure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::RemoteStorageTarget_Azure >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::RemoteStorageTarget_POSIX* Arena::CreateMaybeMessage< ::flex::RemoteStorageTarget_POSIX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::RemoteStorageTarget_POSIX >(arena);
}
template<> PROTOBUF_NOINLINE ::flex::RemoteStorageTarget* Arena::CreateMaybeMessage< ::flex::RemoteStorageTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flex::RemoteStorageTarget >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
