// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beegfs.proto

#include "beegfs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_beegfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNodeListResp_Node_beegfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beegfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Nic_beegfs_2eproto;
namespace beegfs {
class NicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Nic> _instance;
} _Nic_default_instance_;
class GetNodeListReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNodeListReq> _instance;
} _GetNodeListReq_default_instance_;
class GetNodeListResp_NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNodeListResp_Node> _instance;
} _GetNodeListResp_Node_default_instance_;
class GetNodeListRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNodeListResp> _instance;
} _GetNodeListResp_default_instance_;
class GetNodeInfoReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNodeInfoReq> _instance;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
} _GetNodeInfoReq_default_instance_;
class GetNodeInfoRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNodeInfoResp> _instance;
} _GetNodeInfoResp_default_instance_;
}  // namespace beegfs
static void InitDefaultsscc_info_GetNodeInfoReq_beegfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beegfs::_GetNodeInfoReq_default_instance_;
    new (ptr) ::beegfs::GetNodeInfoReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beegfs::GetNodeInfoReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetNodeInfoReq_beegfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetNodeInfoReq_beegfs_2eproto}, {}};

static void InitDefaultsscc_info_GetNodeInfoResp_beegfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beegfs::_GetNodeInfoResp_default_instance_;
    new (ptr) ::beegfs::GetNodeInfoResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beegfs::GetNodeInfoResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNodeInfoResp_beegfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNodeInfoResp_beegfs_2eproto}, {
      &scc_info_Nic_beegfs_2eproto.base,}};

static void InitDefaultsscc_info_GetNodeListReq_beegfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beegfs::_GetNodeListReq_default_instance_;
    new (ptr) ::beegfs::GetNodeListReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beegfs::GetNodeListReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetNodeListReq_beegfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetNodeListReq_beegfs_2eproto}, {}};

static void InitDefaultsscc_info_GetNodeListResp_beegfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beegfs::_GetNodeListResp_default_instance_;
    new (ptr) ::beegfs::GetNodeListResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beegfs::GetNodeListResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNodeListResp_beegfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNodeListResp_beegfs_2eproto}, {
      &scc_info_GetNodeListResp_Node_beegfs_2eproto.base,}};

static void InitDefaultsscc_info_GetNodeListResp_Node_beegfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beegfs::_GetNodeListResp_Node_default_instance_;
    new (ptr) ::beegfs::GetNodeListResp_Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beegfs::GetNodeListResp_Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNodeListResp_Node_beegfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNodeListResp_Node_beegfs_2eproto}, {
      &scc_info_Nic_beegfs_2eproto.base,}};

static void InitDefaultsscc_info_Nic_beegfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beegfs::_Nic_default_instance_;
    new (ptr) ::beegfs::Nic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beegfs::Nic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Nic_beegfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Nic_beegfs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_beegfs_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_beegfs_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_beegfs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_beegfs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beegfs::Nic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beegfs::Nic, addr_),
  PROTOBUF_FIELD_OFFSET(::beegfs::Nic, name_),
  PROTOBUF_FIELD_OFFSET(::beegfs::Nic, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beegfs::GetNodeListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beegfs::GetNodeListReq, include_nics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beegfs::GetNodeListResp_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beegfs::GetNodeListResp_Node, uid_),
  PROTOBUF_FIELD_OFFSET(::beegfs::GetNodeListResp_Node, node_id_),
  PROTOBUF_FIELD_OFFSET(::beegfs::GetNodeListResp_Node, type_),
  PROTOBUF_FIELD_OFFSET(::beegfs::GetNodeListResp_Node, alias_),
  PROTOBUF_FIELD_OFFSET(::beegfs::GetNodeListResp_Node, beemsg_port_),
  PROTOBUF_FIELD_OFFSET(::beegfs::GetNodeListResp_Node, nics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beegfs::GetNodeListResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beegfs::GetNodeListResp, nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beegfs::GetNodeInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::beegfs::GetNodeInfoReq, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::beegfs::GetNodeInfoReqDefaultTypeInternal, uid_),
  offsetof(::beegfs::GetNodeInfoReqDefaultTypeInternal, alias_),
  PROTOBUF_FIELD_OFFSET(::beegfs::GetNodeInfoReq, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beegfs::GetNodeInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beegfs::GetNodeInfoResp, nics_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::beegfs::Nic)},
  { 8, -1, sizeof(::beegfs::GetNodeListReq)},
  { 14, -1, sizeof(::beegfs::GetNodeListResp_Node)},
  { 25, -1, sizeof(::beegfs::GetNodeListResp)},
  { 31, -1, sizeof(::beegfs::GetNodeInfoReq)},
  { 39, -1, sizeof(::beegfs::GetNodeInfoResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beegfs::_Nic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beegfs::_GetNodeListReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beegfs::_GetNodeListResp_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beegfs::_GetNodeListResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beegfs::_GetNodeInfoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beegfs::_GetNodeInfoResp_default_instance_),
};

const char descriptor_table_protodef_beegfs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014beegfs.proto\022\006beegfs\"j\n\003Nic\022\014\n\004addr\030\001 "
  "\001(\t\022\014\n\004name\030\002 \001(\t\022\036\n\004type\030\003 \001(\0162\020.beegfs"
  ".Nic.Type\"\'\n\004Type\022\014\n\010ETHERNET\020\000\022\007\n\003SDP\020\001"
  "\022\010\n\004RDMA\020\003\"&\n\016GetNodeListReq\022\024\n\014include_"
  "nics\030\001 \001(\010\"\200\002\n\017GetNodeListResp\022+\n\005nodes\030"
  "\001 \003(\0132\034.beegfs.GetNodeListResp.Node\032\277\001\n\004"
  "Node\022\013\n\003uid\030\001 \001(\003\022\017\n\007node_id\030\002 \001(\r\022/\n\004ty"
  "pe\030\003 \001(\0162!.beegfs.GetNodeListResp.Node.T"
  "ype\022\r\n\005alias\030\004 \001(\t\022\023\n\013beemsg_port\030\005 \001(\r\022"
  "\031\n\004nics\030\006 \003(\0132\013.beegfs.Nic\")\n\004Type\022\n\n\006CL"
  "IENT\020\000\022\010\n\004META\020\001\022\013\n\007STORAGE\020\002\"7\n\016GetNode"
  "InfoReq\022\r\n\003uid\030\001 \001(\003H\000\022\017\n\005alias\030\002 \001(\tH\000B"
  "\005\n\003key\",\n\017GetNodeInfoResp\022\031\n\004nics\030\001 \003(\0132"
  "\013.beegfs.Nic2\214\001\n\nManagement\022>\n\013GetNodeLi"
  "st\022\026.beegfs.GetNodeListReq\032\027.beegfs.GetN"
  "odeListResp\022>\n\013GetNodeInfo\022\026.beegfs.GetN"
  "odeInfoReq\032\027.beegfs.GetNodeInfoRespB)Z\'g"
  "ithub.com/thinkparq/protobuf/go/beegfsb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_beegfs_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_beegfs_2eproto_sccs[6] = {
  &scc_info_GetNodeInfoReq_beegfs_2eproto.base,
  &scc_info_GetNodeInfoResp_beegfs_2eproto.base,
  &scc_info_GetNodeListReq_beegfs_2eproto.base,
  &scc_info_GetNodeListResp_beegfs_2eproto.base,
  &scc_info_GetNodeListResp_Node_beegfs_2eproto.base,
  &scc_info_Nic_beegfs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_beegfs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_beegfs_2eproto = {
  false, false, descriptor_table_protodef_beegfs_2eproto, "beegfs.proto", 726,
  &descriptor_table_beegfs_2eproto_once, descriptor_table_beegfs_2eproto_sccs, descriptor_table_beegfs_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_beegfs_2eproto::offsets,
  file_level_metadata_beegfs_2eproto, 6, file_level_enum_descriptors_beegfs_2eproto, file_level_service_descriptors_beegfs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_beegfs_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_beegfs_2eproto)), true);
namespace beegfs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Nic_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_beegfs_2eproto);
  return file_level_enum_descriptors_beegfs_2eproto[0];
}
bool Nic_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Nic_Type Nic::ETHERNET;
constexpr Nic_Type Nic::SDP;
constexpr Nic_Type Nic::RDMA;
constexpr Nic_Type Nic::Type_MIN;
constexpr Nic_Type Nic::Type_MAX;
constexpr int Nic::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetNodeListResp_Node_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_beegfs_2eproto);
  return file_level_enum_descriptors_beegfs_2eproto[1];
}
bool GetNodeListResp_Node_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetNodeListResp_Node_Type GetNodeListResp_Node::CLIENT;
constexpr GetNodeListResp_Node_Type GetNodeListResp_Node::META;
constexpr GetNodeListResp_Node_Type GetNodeListResp_Node::STORAGE;
constexpr GetNodeListResp_Node_Type GetNodeListResp_Node::Type_MIN;
constexpr GetNodeListResp_Node_Type GetNodeListResp_Node::Type_MAX;
constexpr int GetNodeListResp_Node::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Nic::InitAsDefaultInstance() {
}
class Nic::_Internal {
 public:
};

Nic::Nic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beegfs.Nic)
}
Nic::Nic(const Nic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_addr(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:beegfs.Nic)
}

void Nic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Nic_beegfs_2eproto.base);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

Nic::~Nic() {
  // @@protoc_insertion_point(destructor:beegfs.Nic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Nic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Nic::ArenaDtor(void* object) {
  Nic* _this = reinterpret_cast< Nic* >(object);
  (void)_this;
}
void Nic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Nic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Nic& Nic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Nic_beegfs_2eproto.base);
  return *internal_default_instance();
}


void Nic::Clear() {
// @@protoc_insertion_point(message_clear_start:beegfs.Nic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Nic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beegfs.Nic.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beegfs.Nic.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .beegfs.Nic.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::beegfs::Nic_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Nic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beegfs.Nic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beegfs.Nic.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beegfs.Nic.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .beegfs.Nic.Type type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beegfs.Nic)
  return target;
}

size_t Nic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beegfs.Nic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .beegfs.Nic.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Nic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beegfs.Nic)
  GOOGLE_DCHECK_NE(&from, this);
  const Nic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Nic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beegfs.Nic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beegfs.Nic)
    MergeFrom(*source);
  }
}

void Nic::MergeFrom(const Nic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beegfs.Nic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {
    _internal_set_addr(from._internal_addr());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Nic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beegfs.Nic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nic::CopyFrom(const Nic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beegfs.Nic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nic::IsInitialized() const {
  return true;
}

void Nic::InternalSwap(Nic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addr_.Swap(&other->addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Nic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNodeListReq::InitAsDefaultInstance() {
}
class GetNodeListReq::_Internal {
 public:
};

GetNodeListReq::GetNodeListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beegfs.GetNodeListReq)
}
GetNodeListReq::GetNodeListReq(const GetNodeListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  include_nics_ = from.include_nics_;
  // @@protoc_insertion_point(copy_constructor:beegfs.GetNodeListReq)
}

void GetNodeListReq::SharedCtor() {
  include_nics_ = false;
}

GetNodeListReq::~GetNodeListReq() {
  // @@protoc_insertion_point(destructor:beegfs.GetNodeListReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNodeListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetNodeListReq::ArenaDtor(void* object) {
  GetNodeListReq* _this = reinterpret_cast< GetNodeListReq* >(object);
  (void)_this;
}
void GetNodeListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNodeListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNodeListReq& GetNodeListReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNodeListReq_beegfs_2eproto.base);
  return *internal_default_instance();
}


void GetNodeListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:beegfs.GetNodeListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  include_nics_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNodeListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool include_nics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          include_nics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNodeListReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beegfs.GetNodeListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool include_nics = 1;
  if (this->include_nics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_include_nics(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beegfs.GetNodeListReq)
  return target;
}

size_t GetNodeListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beegfs.GetNodeListReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool include_nics = 1;
  if (this->include_nics() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNodeListReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beegfs.GetNodeListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeListReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNodeListReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beegfs.GetNodeListReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beegfs.GetNodeListReq)
    MergeFrom(*source);
  }
}

void GetNodeListReq::MergeFrom(const GetNodeListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beegfs.GetNodeListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.include_nics() != 0) {
    _internal_set_include_nics(from._internal_include_nics());
  }
}

void GetNodeListReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beegfs.GetNodeListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeListReq::CopyFrom(const GetNodeListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beegfs.GetNodeListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeListReq::IsInitialized() const {
  return true;
}

void GetNodeListReq::InternalSwap(GetNodeListReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(include_nics_, other->include_nics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodeListReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNodeListResp_Node::InitAsDefaultInstance() {
}
class GetNodeListResp_Node::_Internal {
 public:
};

GetNodeListResp_Node::GetNodeListResp_Node(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beegfs.GetNodeListResp.Node)
}
GetNodeListResp_Node::GetNodeListResp_Node(const GetNodeListResp_Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nics_(from.nics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_alias(),
      GetArena());
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&beemsg_port_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(beemsg_port_));
  // @@protoc_insertion_point(copy_constructor:beegfs.GetNodeListResp.Node)
}

void GetNodeListResp_Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNodeListResp_Node_beegfs_2eproto.base);
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beemsg_port_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(beemsg_port_));
}

GetNodeListResp_Node::~GetNodeListResp_Node() {
  // @@protoc_insertion_point(destructor:beegfs.GetNodeListResp.Node)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNodeListResp_Node::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetNodeListResp_Node::ArenaDtor(void* object) {
  GetNodeListResp_Node* _this = reinterpret_cast< GetNodeListResp_Node* >(object);
  (void)_this;
}
void GetNodeListResp_Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNodeListResp_Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNodeListResp_Node& GetNodeListResp_Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNodeListResp_Node_beegfs_2eproto.base);
  return *internal_default_instance();
}


void GetNodeListResp_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:beegfs.GetNodeListResp.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nics_.Clear();
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beemsg_port_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(beemsg_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNodeListResp_Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .beegfs.GetNodeListResp.Node.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::beegfs::GetNodeListResp_Node_Type>(val));
        } else goto handle_unusual;
        continue;
      // string alias = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beegfs.GetNodeListResp.Node.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 beemsg_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          beemsg_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .beegfs.Nic nics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNodeListResp_Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beegfs.GetNodeListResp.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uid(), target);
  }

  // uint32 node_id = 2;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_node_id(), target);
  }

  // .beegfs.GetNodeListResp.Node.Type type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string alias = 4;
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beegfs.GetNodeListResp.Node.alias");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_alias(), target);
  }

  // uint32 beemsg_port = 5;
  if (this->beemsg_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_beemsg_port(), target);
  }

  // repeated .beegfs.Nic nics = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_nics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beegfs.GetNodeListResp.Node)
  return target;
}

size_t GetNodeListResp_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beegfs.GetNodeListResp.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .beegfs.Nic nics = 6;
  total_size += 1UL * this->_internal_nics_size();
  for (const auto& msg : this->nics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string alias = 4;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // int64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_uid());
  }

  // uint32 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_node_id());
  }

  // .beegfs.GetNodeListResp.Node.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 beemsg_port = 5;
  if (this->beemsg_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_beemsg_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNodeListResp_Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beegfs.GetNodeListResp.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeListResp_Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNodeListResp_Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beegfs.GetNodeListResp.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beegfs.GetNodeListResp.Node)
    MergeFrom(*source);
  }
}

void GetNodeListResp_Node::MergeFrom(const GetNodeListResp_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beegfs.GetNodeListResp.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nics_.MergeFrom(from.nics_);
  if (from.alias().size() > 0) {
    _internal_set_alias(from._internal_alias());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.beemsg_port() != 0) {
    _internal_set_beemsg_port(from._internal_beemsg_port());
  }
}

void GetNodeListResp_Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beegfs.GetNodeListResp.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeListResp_Node::CopyFrom(const GetNodeListResp_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beegfs.GetNodeListResp.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeListResp_Node::IsInitialized() const {
  return true;
}

void GetNodeListResp_Node::InternalSwap(GetNodeListResp_Node* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nics_.InternalSwap(&other->nics_);
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetNodeListResp_Node, beemsg_port_)
      + sizeof(GetNodeListResp_Node::beemsg_port_)
      - PROTOBUF_FIELD_OFFSET(GetNodeListResp_Node, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodeListResp_Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNodeListResp::InitAsDefaultInstance() {
}
class GetNodeListResp::_Internal {
 public:
};

GetNodeListResp::GetNodeListResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beegfs.GetNodeListResp)
}
GetNodeListResp::GetNodeListResp(const GetNodeListResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:beegfs.GetNodeListResp)
}

void GetNodeListResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNodeListResp_beegfs_2eproto.base);
}

GetNodeListResp::~GetNodeListResp() {
  // @@protoc_insertion_point(destructor:beegfs.GetNodeListResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNodeListResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetNodeListResp::ArenaDtor(void* object) {
  GetNodeListResp* _this = reinterpret_cast< GetNodeListResp* >(object);
  (void)_this;
}
void GetNodeListResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNodeListResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNodeListResp& GetNodeListResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNodeListResp_beegfs_2eproto.base);
  return *internal_default_instance();
}


void GetNodeListResp::Clear() {
// @@protoc_insertion_point(message_clear_start:beegfs.GetNodeListResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNodeListResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .beegfs.GetNodeListResp.Node nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNodeListResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beegfs.GetNodeListResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .beegfs.GetNodeListResp.Node nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beegfs.GetNodeListResp)
  return target;
}

size_t GetNodeListResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beegfs.GetNodeListResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .beegfs.GetNodeListResp.Node nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNodeListResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beegfs.GetNodeListResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeListResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNodeListResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beegfs.GetNodeListResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beegfs.GetNodeListResp)
    MergeFrom(*source);
  }
}

void GetNodeListResp::MergeFrom(const GetNodeListResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beegfs.GetNodeListResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void GetNodeListResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beegfs.GetNodeListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeListResp::CopyFrom(const GetNodeListResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beegfs.GetNodeListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeListResp::IsInitialized() const {
  return true;
}

void GetNodeListResp::InternalSwap(GetNodeListResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodeListResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNodeInfoReq::InitAsDefaultInstance() {
  ::beegfs::_GetNodeInfoReq_default_instance_.uid_ = PROTOBUF_LONGLONG(0);
  ::beegfs::_GetNodeInfoReq_default_instance_.alias_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class GetNodeInfoReq::_Internal {
 public:
};

GetNodeInfoReq::GetNodeInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beegfs.GetNodeInfoReq)
}
GetNodeInfoReq::GetNodeInfoReq(const GetNodeInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_key();
  switch (from.key_case()) {
    case kUid: {
      _internal_set_uid(from._internal_uid());
      break;
    }
    case kAlias: {
      _internal_set_alias(from._internal_alias());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:beegfs.GetNodeInfoReq)
}

void GetNodeInfoReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNodeInfoReq_beegfs_2eproto.base);
  clear_has_key();
}

GetNodeInfoReq::~GetNodeInfoReq() {
  // @@protoc_insertion_point(destructor:beegfs.GetNodeInfoReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNodeInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_key()) {
    clear_key();
  }
}

void GetNodeInfoReq::ArenaDtor(void* object) {
  GetNodeInfoReq* _this = reinterpret_cast< GetNodeInfoReq* >(object);
  (void)_this;
}
void GetNodeInfoReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNodeInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNodeInfoReq& GetNodeInfoReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNodeInfoReq_beegfs_2eproto.base);
  return *internal_default_instance();
}


void GetNodeInfoReq::clear_key() {
// @@protoc_insertion_point(one_of_clear_start:beegfs.GetNodeInfoReq)
  switch (key_case()) {
    case kUid: {
      // No need to clear
      break;
    }
    case kAlias: {
      key_.alias_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KEY_NOT_SET;
}


void GetNodeInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:beegfs.GetNodeInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_key();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNodeInfoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_uid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beegfs.GetNodeInfoReq.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNodeInfoReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beegfs.GetNodeInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uid = 1;
  if (_internal_has_uid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uid(), target);
  }

  // string alias = 2;
  if (_internal_has_alias()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beegfs.GetNodeInfoReq.alias");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beegfs.GetNodeInfoReq)
  return target;
}

size_t GetNodeInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beegfs.GetNodeInfoReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (key_case()) {
    // int64 uid = 1;
    case kUid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_uid());
      break;
    }
    // string alias = 2;
    case kAlias: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_alias());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNodeInfoReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beegfs.GetNodeInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeInfoReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNodeInfoReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beegfs.GetNodeInfoReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beegfs.GetNodeInfoReq)
    MergeFrom(*source);
  }
}

void GetNodeInfoReq::MergeFrom(const GetNodeInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beegfs.GetNodeInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.key_case()) {
    case kUid: {
      _internal_set_uid(from._internal_uid());
      break;
    }
    case kAlias: {
      _internal_set_alias(from._internal_alias());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
}

void GetNodeInfoReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beegfs.GetNodeInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeInfoReq::CopyFrom(const GetNodeInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beegfs.GetNodeInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeInfoReq::IsInitialized() const {
  return true;
}

void GetNodeInfoReq::InternalSwap(GetNodeInfoReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(key_, other->key_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodeInfoReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNodeInfoResp::InitAsDefaultInstance() {
}
class GetNodeInfoResp::_Internal {
 public:
};

GetNodeInfoResp::GetNodeInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beegfs.GetNodeInfoResp)
}
GetNodeInfoResp::GetNodeInfoResp(const GetNodeInfoResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nics_(from.nics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:beegfs.GetNodeInfoResp)
}

void GetNodeInfoResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNodeInfoResp_beegfs_2eproto.base);
}

GetNodeInfoResp::~GetNodeInfoResp() {
  // @@protoc_insertion_point(destructor:beegfs.GetNodeInfoResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNodeInfoResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetNodeInfoResp::ArenaDtor(void* object) {
  GetNodeInfoResp* _this = reinterpret_cast< GetNodeInfoResp* >(object);
  (void)_this;
}
void GetNodeInfoResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNodeInfoResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNodeInfoResp& GetNodeInfoResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNodeInfoResp_beegfs_2eproto.base);
  return *internal_default_instance();
}


void GetNodeInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:beegfs.GetNodeInfoResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nics_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNodeInfoResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .beegfs.Nic nics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNodeInfoResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beegfs.GetNodeInfoResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .beegfs.Nic nics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beegfs.GetNodeInfoResp)
  return target;
}

size_t GetNodeInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beegfs.GetNodeInfoResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .beegfs.Nic nics = 1;
  total_size += 1UL * this->_internal_nics_size();
  for (const auto& msg : this->nics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNodeInfoResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beegfs.GetNodeInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeInfoResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNodeInfoResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beegfs.GetNodeInfoResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beegfs.GetNodeInfoResp)
    MergeFrom(*source);
  }
}

void GetNodeInfoResp::MergeFrom(const GetNodeInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beegfs.GetNodeInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nics_.MergeFrom(from.nics_);
}

void GetNodeInfoResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beegfs.GetNodeInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeInfoResp::CopyFrom(const GetNodeInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beegfs.GetNodeInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeInfoResp::IsInitialized() const {
  return true;
}

void GetNodeInfoResp::InternalSwap(GetNodeInfoResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nics_.InternalSwap(&other->nics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodeInfoResp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace beegfs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::beegfs::Nic* Arena::CreateMaybeMessage< ::beegfs::Nic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beegfs::Nic >(arena);
}
template<> PROTOBUF_NOINLINE ::beegfs::GetNodeListReq* Arena::CreateMaybeMessage< ::beegfs::GetNodeListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beegfs::GetNodeListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::beegfs::GetNodeListResp_Node* Arena::CreateMaybeMessage< ::beegfs::GetNodeListResp_Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beegfs::GetNodeListResp_Node >(arena);
}
template<> PROTOBUF_NOINLINE ::beegfs::GetNodeListResp* Arena::CreateMaybeMessage< ::beegfs::GetNodeListResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beegfs::GetNodeListResp >(arena);
}
template<> PROTOBUF_NOINLINE ::beegfs::GetNodeInfoReq* Arena::CreateMaybeMessage< ::beegfs::GetNodeInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beegfs::GetNodeInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::beegfs::GetNodeInfoResp* Arena::CreateMaybeMessage< ::beegfs::GetNodeInfoResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beegfs::GetNodeInfoResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
