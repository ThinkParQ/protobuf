// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beegfs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_beegfs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_beegfs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_beegfs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_beegfs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_beegfs_2eproto;
namespace beegfs {
class GetNodeListReq;
class GetNodeListReqDefaultTypeInternal;
extern GetNodeListReqDefaultTypeInternal _GetNodeListReq_default_instance_;
class GetNodeListResp;
class GetNodeListRespDefaultTypeInternal;
extern GetNodeListRespDefaultTypeInternal _GetNodeListResp_default_instance_;
class GetNodeListResp_Node;
class GetNodeListResp_NodeDefaultTypeInternal;
extern GetNodeListResp_NodeDefaultTypeInternal _GetNodeListResp_Node_default_instance_;
class Nic;
class NicDefaultTypeInternal;
extern NicDefaultTypeInternal _Nic_default_instance_;
}  // namespace beegfs
PROTOBUF_NAMESPACE_OPEN
template<> ::beegfs::GetNodeListReq* Arena::CreateMaybeMessage<::beegfs::GetNodeListReq>(Arena*);
template<> ::beegfs::GetNodeListResp* Arena::CreateMaybeMessage<::beegfs::GetNodeListResp>(Arena*);
template<> ::beegfs::GetNodeListResp_Node* Arena::CreateMaybeMessage<::beegfs::GetNodeListResp_Node>(Arena*);
template<> ::beegfs::Nic* Arena::CreateMaybeMessage<::beegfs::Nic>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace beegfs {

enum Nic_Type : int {
  Nic_Type_ETHERNET = 0,
  Nic_Type_SDP = 1,
  Nic_Type_RDMA = 3,
  Nic_Type_Nic_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Nic_Type_Nic_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Nic_Type_IsValid(int value);
constexpr Nic_Type Nic_Type_Type_MIN = Nic_Type_ETHERNET;
constexpr Nic_Type Nic_Type_Type_MAX = Nic_Type_RDMA;
constexpr int Nic_Type_Type_ARRAYSIZE = Nic_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Nic_Type_descriptor();
template<typename T>
inline const std::string& Nic_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Nic_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Nic_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Nic_Type_descriptor(), enum_t_value);
}
inline bool Nic_Type_Parse(
    const std::string& name, Nic_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Nic_Type>(
    Nic_Type_descriptor(), name, value);
}
enum GetNodeListResp_Node_Type : int {
  GetNodeListResp_Node_Type_CLIENT = 0,
  GetNodeListResp_Node_Type_META = 1,
  GetNodeListResp_Node_Type_STORAGE = 2,
  GetNodeListResp_Node_Type_MANAGEMENT = 3,
  GetNodeListResp_Node_Type_GetNodeListResp_Node_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetNodeListResp_Node_Type_GetNodeListResp_Node_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetNodeListResp_Node_Type_IsValid(int value);
constexpr GetNodeListResp_Node_Type GetNodeListResp_Node_Type_Type_MIN = GetNodeListResp_Node_Type_CLIENT;
constexpr GetNodeListResp_Node_Type GetNodeListResp_Node_Type_Type_MAX = GetNodeListResp_Node_Type_MANAGEMENT;
constexpr int GetNodeListResp_Node_Type_Type_ARRAYSIZE = GetNodeListResp_Node_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetNodeListResp_Node_Type_descriptor();
template<typename T>
inline const std::string& GetNodeListResp_Node_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetNodeListResp_Node_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetNodeListResp_Node_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetNodeListResp_Node_Type_descriptor(), enum_t_value);
}
inline bool GetNodeListResp_Node_Type_Parse(
    const std::string& name, GetNodeListResp_Node_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetNodeListResp_Node_Type>(
    GetNodeListResp_Node_Type_descriptor(), name, value);
}
// ===================================================================

class Nic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beegfs.Nic) */ {
 public:
  inline Nic() : Nic(nullptr) {};
  virtual ~Nic();

  Nic(const Nic& from);
  Nic(Nic&& from) noexcept
    : Nic() {
    *this = ::std::move(from);
  }

  inline Nic& operator=(const Nic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Nic& operator=(Nic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Nic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Nic* internal_default_instance() {
    return reinterpret_cast<const Nic*>(
               &_Nic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Nic& a, Nic& b) {
    a.Swap(&b);
  }
  inline void Swap(Nic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Nic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Nic* New() const final {
    return CreateMaybeMessage<Nic>(nullptr);
  }

  Nic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Nic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Nic& from);
  void MergeFrom(const Nic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Nic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beegfs.Nic";
  }
  protected:
  explicit Nic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beegfs_2eproto);
    return ::descriptor_table_beegfs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Nic_Type Type;
  static constexpr Type ETHERNET =
    Nic_Type_ETHERNET;
  static constexpr Type SDP =
    Nic_Type_SDP;
  static constexpr Type RDMA =
    Nic_Type_RDMA;
  static inline bool Type_IsValid(int value) {
    return Nic_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Nic_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Nic_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Nic_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Nic_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Nic_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Nic_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string addr = 1;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_addr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_addr(
      std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .beegfs.Nic.Type type = 3;
  void clear_type();
  ::beegfs::Nic_Type type() const;
  void set_type(::beegfs::Nic_Type value);
  private:
  ::beegfs::Nic_Type _internal_type() const;
  void _internal_set_type(::beegfs::Nic_Type value);
  public:

  // @@protoc_insertion_point(class_scope:beegfs.Nic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beegfs_2eproto;
};
// -------------------------------------------------------------------

class GetNodeListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beegfs.GetNodeListReq) */ {
 public:
  inline GetNodeListReq() : GetNodeListReq(nullptr) {};
  virtual ~GetNodeListReq();

  GetNodeListReq(const GetNodeListReq& from);
  GetNodeListReq(GetNodeListReq&& from) noexcept
    : GetNodeListReq() {
    *this = ::std::move(from);
  }

  inline GetNodeListReq& operator=(const GetNodeListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeListReq& operator=(GetNodeListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNodeListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNodeListReq* internal_default_instance() {
    return reinterpret_cast<const GetNodeListReq*>(
               &_GetNodeListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetNodeListReq& a, GetNodeListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNodeListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNodeListReq* New() const final {
    return CreateMaybeMessage<GetNodeListReq>(nullptr);
  }

  GetNodeListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNodeListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNodeListReq& from);
  void MergeFrom(const GetNodeListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beegfs.GetNodeListReq";
  }
  protected:
  explicit GetNodeListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beegfs_2eproto);
    return ::descriptor_table_beegfs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncludeNicsFieldNumber = 1,
  };
  // bool include_nics = 1;
  void clear_include_nics();
  bool include_nics() const;
  void set_include_nics(bool value);
  private:
  bool _internal_include_nics() const;
  void _internal_set_include_nics(bool value);
  public:

  // @@protoc_insertion_point(class_scope:beegfs.GetNodeListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool include_nics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beegfs_2eproto;
};
// -------------------------------------------------------------------

class GetNodeListResp_Node PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beegfs.GetNodeListResp.Node) */ {
 public:
  inline GetNodeListResp_Node() : GetNodeListResp_Node(nullptr) {};
  virtual ~GetNodeListResp_Node();

  GetNodeListResp_Node(const GetNodeListResp_Node& from);
  GetNodeListResp_Node(GetNodeListResp_Node&& from) noexcept
    : GetNodeListResp_Node() {
    *this = ::std::move(from);
  }

  inline GetNodeListResp_Node& operator=(const GetNodeListResp_Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeListResp_Node& operator=(GetNodeListResp_Node&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNodeListResp_Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNodeListResp_Node* internal_default_instance() {
    return reinterpret_cast<const GetNodeListResp_Node*>(
               &_GetNodeListResp_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetNodeListResp_Node& a, GetNodeListResp_Node& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeListResp_Node* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNodeListResp_Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNodeListResp_Node* New() const final {
    return CreateMaybeMessage<GetNodeListResp_Node>(nullptr);
  }

  GetNodeListResp_Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNodeListResp_Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNodeListResp_Node& from);
  void MergeFrom(const GetNodeListResp_Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeListResp_Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beegfs.GetNodeListResp.Node";
  }
  protected:
  explicit GetNodeListResp_Node(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beegfs_2eproto);
    return ::descriptor_table_beegfs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetNodeListResp_Node_Type Type;
  static constexpr Type CLIENT =
    GetNodeListResp_Node_Type_CLIENT;
  static constexpr Type META =
    GetNodeListResp_Node_Type_META;
  static constexpr Type STORAGE =
    GetNodeListResp_Node_Type_STORAGE;
  static constexpr Type MANAGEMENT =
    GetNodeListResp_Node_Type_MANAGEMENT;
  static inline bool Type_IsValid(int value) {
    return GetNodeListResp_Node_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    GetNodeListResp_Node_Type_Type_MIN;
  static constexpr Type Type_MAX =
    GetNodeListResp_Node_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    GetNodeListResp_Node_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return GetNodeListResp_Node_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return GetNodeListResp_Node_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return GetNodeListResp_Node_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNicsFieldNumber = 6,
    kAliasFieldNumber = 4,
    kUidFieldNumber = 1,
    kNodeIdFieldNumber = 2,
    kTypeFieldNumber = 3,
    kBeemsgPortFieldNumber = 5,
  };
  // repeated .beegfs.Nic nics = 6;
  int nics_size() const;
  private:
  int _internal_nics_size() const;
  public:
  void clear_nics();
  ::beegfs::Nic* mutable_nics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::Nic >*
      mutable_nics();
  private:
  const ::beegfs::Nic& _internal_nics(int index) const;
  ::beegfs::Nic* _internal_add_nics();
  public:
  const ::beegfs::Nic& nics(int index) const;
  ::beegfs::Nic* add_nics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::Nic >&
      nics() const;

  // string alias = 4;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_alias();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_alias(
      std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // int64 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 node_id = 2;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .beegfs.GetNodeListResp.Node.Type type = 3;
  void clear_type();
  ::beegfs::GetNodeListResp_Node_Type type() const;
  void set_type(::beegfs::GetNodeListResp_Node_Type value);
  private:
  ::beegfs::GetNodeListResp_Node_Type _internal_type() const;
  void _internal_set_type(::beegfs::GetNodeListResp_Node_Type value);
  public:

  // uint32 beemsg_port = 5;
  void clear_beemsg_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 beemsg_port() const;
  void set_beemsg_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_beemsg_port() const;
  void _internal_set_beemsg_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:beegfs.GetNodeListResp.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::Nic > nics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 beemsg_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beegfs_2eproto;
};
// -------------------------------------------------------------------

class GetNodeListResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beegfs.GetNodeListResp) */ {
 public:
  inline GetNodeListResp() : GetNodeListResp(nullptr) {};
  virtual ~GetNodeListResp();

  GetNodeListResp(const GetNodeListResp& from);
  GetNodeListResp(GetNodeListResp&& from) noexcept
    : GetNodeListResp() {
    *this = ::std::move(from);
  }

  inline GetNodeListResp& operator=(const GetNodeListResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeListResp& operator=(GetNodeListResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNodeListResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNodeListResp* internal_default_instance() {
    return reinterpret_cast<const GetNodeListResp*>(
               &_GetNodeListResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetNodeListResp& a, GetNodeListResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeListResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNodeListResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNodeListResp* New() const final {
    return CreateMaybeMessage<GetNodeListResp>(nullptr);
  }

  GetNodeListResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNodeListResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNodeListResp& from);
  void MergeFrom(const GetNodeListResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeListResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beegfs.GetNodeListResp";
  }
  protected:
  explicit GetNodeListResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beegfs_2eproto);
    return ::descriptor_table_beegfs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetNodeListResp_Node Node;

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kMetaRootNodeUidFieldNumber = 2,
  };
  // repeated .beegfs.GetNodeListResp.Node nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::beegfs::GetNodeListResp_Node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::GetNodeListResp_Node >*
      mutable_nodes();
  private:
  const ::beegfs::GetNodeListResp_Node& _internal_nodes(int index) const;
  ::beegfs::GetNodeListResp_Node* _internal_add_nodes();
  public:
  const ::beegfs::GetNodeListResp_Node& nodes(int index) const;
  ::beegfs::GetNodeListResp_Node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::GetNodeListResp_Node >&
      nodes() const;

  // int64 meta_root_node_uid = 2;
  void clear_meta_root_node_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 meta_root_node_uid() const;
  void set_meta_root_node_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_meta_root_node_uid() const;
  void _internal_set_meta_root_node_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:beegfs.GetNodeListResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::GetNodeListResp_Node > nodes_;
  ::PROTOBUF_NAMESPACE_ID::int64 meta_root_node_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beegfs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Nic

// string addr = 1;
inline void Nic::clear_addr() {
  addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Nic::addr() const {
  // @@protoc_insertion_point(field_get:beegfs.Nic.addr)
  return _internal_addr();
}
inline void Nic::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:beegfs.Nic.addr)
}
inline std::string* Nic::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:beegfs.Nic.addr)
  return _internal_mutable_addr();
}
inline const std::string& Nic::_internal_addr() const {
  return addr_.Get();
}
inline void Nic::_internal_set_addr(const std::string& value) {
  
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Nic::set_addr(std::string&& value) {
  
  addr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beegfs.Nic.addr)
}
inline void Nic::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beegfs.Nic.addr)
}
inline void Nic::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beegfs.Nic.addr)
}
inline std::string* Nic::_internal_mutable_addr() {
  
  return addr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Nic::release_addr() {
  // @@protoc_insertion_point(field_release:beegfs.Nic.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Nic::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beegfs.Nic.addr)
}
inline std::string* Nic::unsafe_arena_release_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beegfs.Nic.addr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return addr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Nic::unsafe_arena_set_allocated_addr(
    std::string* addr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      addr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beegfs.Nic.addr)
}

// string name = 2;
inline void Nic::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Nic::name() const {
  // @@protoc_insertion_point(field_get:beegfs.Nic.name)
  return _internal_name();
}
inline void Nic::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:beegfs.Nic.name)
}
inline std::string* Nic::mutable_name() {
  // @@protoc_insertion_point(field_mutable:beegfs.Nic.name)
  return _internal_mutable_name();
}
inline const std::string& Nic::_internal_name() const {
  return name_.Get();
}
inline void Nic::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Nic::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beegfs.Nic.name)
}
inline void Nic::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beegfs.Nic.name)
}
inline void Nic::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beegfs.Nic.name)
}
inline std::string* Nic::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Nic::release_name() {
  // @@protoc_insertion_point(field_release:beegfs.Nic.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Nic::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beegfs.Nic.name)
}
inline std::string* Nic::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beegfs.Nic.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Nic::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beegfs.Nic.name)
}

// .beegfs.Nic.Type type = 3;
inline void Nic::clear_type() {
  type_ = 0;
}
inline ::beegfs::Nic_Type Nic::_internal_type() const {
  return static_cast< ::beegfs::Nic_Type >(type_);
}
inline ::beegfs::Nic_Type Nic::type() const {
  // @@protoc_insertion_point(field_get:beegfs.Nic.type)
  return _internal_type();
}
inline void Nic::_internal_set_type(::beegfs::Nic_Type value) {
  
  type_ = value;
}
inline void Nic::set_type(::beegfs::Nic_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:beegfs.Nic.type)
}

// -------------------------------------------------------------------

// GetNodeListReq

// bool include_nics = 1;
inline void GetNodeListReq::clear_include_nics() {
  include_nics_ = false;
}
inline bool GetNodeListReq::_internal_include_nics() const {
  return include_nics_;
}
inline bool GetNodeListReq::include_nics() const {
  // @@protoc_insertion_point(field_get:beegfs.GetNodeListReq.include_nics)
  return _internal_include_nics();
}
inline void GetNodeListReq::_internal_set_include_nics(bool value) {
  
  include_nics_ = value;
}
inline void GetNodeListReq::set_include_nics(bool value) {
  _internal_set_include_nics(value);
  // @@protoc_insertion_point(field_set:beegfs.GetNodeListReq.include_nics)
}

// -------------------------------------------------------------------

// GetNodeListResp_Node

// int64 uid = 1;
inline void GetNodeListResp_Node::clear_uid() {
  uid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetNodeListResp_Node::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetNodeListResp_Node::uid() const {
  // @@protoc_insertion_point(field_get:beegfs.GetNodeListResp.Node.uid)
  return _internal_uid();
}
inline void GetNodeListResp_Node::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uid_ = value;
}
inline void GetNodeListResp_Node::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:beegfs.GetNodeListResp.Node.uid)
}

// uint32 node_id = 2;
inline void GetNodeListResp_Node::clear_node_id() {
  node_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetNodeListResp_Node::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetNodeListResp_Node::node_id() const {
  // @@protoc_insertion_point(field_get:beegfs.GetNodeListResp.Node.node_id)
  return _internal_node_id();
}
inline void GetNodeListResp_Node::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node_id_ = value;
}
inline void GetNodeListResp_Node::set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:beegfs.GetNodeListResp.Node.node_id)
}

// .beegfs.GetNodeListResp.Node.Type type = 3;
inline void GetNodeListResp_Node::clear_type() {
  type_ = 0;
}
inline ::beegfs::GetNodeListResp_Node_Type GetNodeListResp_Node::_internal_type() const {
  return static_cast< ::beegfs::GetNodeListResp_Node_Type >(type_);
}
inline ::beegfs::GetNodeListResp_Node_Type GetNodeListResp_Node::type() const {
  // @@protoc_insertion_point(field_get:beegfs.GetNodeListResp.Node.type)
  return _internal_type();
}
inline void GetNodeListResp_Node::_internal_set_type(::beegfs::GetNodeListResp_Node_Type value) {
  
  type_ = value;
}
inline void GetNodeListResp_Node::set_type(::beegfs::GetNodeListResp_Node_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:beegfs.GetNodeListResp.Node.type)
}

// string alias = 4;
inline void GetNodeListResp_Node::clear_alias() {
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetNodeListResp_Node::alias() const {
  // @@protoc_insertion_point(field_get:beegfs.GetNodeListResp.Node.alias)
  return _internal_alias();
}
inline void GetNodeListResp_Node::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:beegfs.GetNodeListResp.Node.alias)
}
inline std::string* GetNodeListResp_Node::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:beegfs.GetNodeListResp.Node.alias)
  return _internal_mutable_alias();
}
inline const std::string& GetNodeListResp_Node::_internal_alias() const {
  return alias_.Get();
}
inline void GetNodeListResp_Node::_internal_set_alias(const std::string& value) {
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetNodeListResp_Node::set_alias(std::string&& value) {
  
  alias_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beegfs.GetNodeListResp.Node.alias)
}
inline void GetNodeListResp_Node::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beegfs.GetNodeListResp.Node.alias)
}
inline void GetNodeListResp_Node::set_alias(const char* value,
    size_t size) {
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beegfs.GetNodeListResp.Node.alias)
}
inline std::string* GetNodeListResp_Node::_internal_mutable_alias() {
  
  return alias_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetNodeListResp_Node::release_alias() {
  // @@protoc_insertion_point(field_release:beegfs.GetNodeListResp.Node.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetNodeListResp_Node::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beegfs.GetNodeListResp.Node.alias)
}
inline std::string* GetNodeListResp_Node::unsafe_arena_release_alias() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beegfs.GetNodeListResp.Node.alias)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return alias_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetNodeListResp_Node::unsafe_arena_set_allocated_alias(
    std::string* alias) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      alias, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beegfs.GetNodeListResp.Node.alias)
}

// uint32 beemsg_port = 5;
inline void GetNodeListResp_Node::clear_beemsg_port() {
  beemsg_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetNodeListResp_Node::_internal_beemsg_port() const {
  return beemsg_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetNodeListResp_Node::beemsg_port() const {
  // @@protoc_insertion_point(field_get:beegfs.GetNodeListResp.Node.beemsg_port)
  return _internal_beemsg_port();
}
inline void GetNodeListResp_Node::_internal_set_beemsg_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  beemsg_port_ = value;
}
inline void GetNodeListResp_Node::set_beemsg_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_beemsg_port(value);
  // @@protoc_insertion_point(field_set:beegfs.GetNodeListResp.Node.beemsg_port)
}

// repeated .beegfs.Nic nics = 6;
inline int GetNodeListResp_Node::_internal_nics_size() const {
  return nics_.size();
}
inline int GetNodeListResp_Node::nics_size() const {
  return _internal_nics_size();
}
inline void GetNodeListResp_Node::clear_nics() {
  nics_.Clear();
}
inline ::beegfs::Nic* GetNodeListResp_Node::mutable_nics(int index) {
  // @@protoc_insertion_point(field_mutable:beegfs.GetNodeListResp.Node.nics)
  return nics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::Nic >*
GetNodeListResp_Node::mutable_nics() {
  // @@protoc_insertion_point(field_mutable_list:beegfs.GetNodeListResp.Node.nics)
  return &nics_;
}
inline const ::beegfs::Nic& GetNodeListResp_Node::_internal_nics(int index) const {
  return nics_.Get(index);
}
inline const ::beegfs::Nic& GetNodeListResp_Node::nics(int index) const {
  // @@protoc_insertion_point(field_get:beegfs.GetNodeListResp.Node.nics)
  return _internal_nics(index);
}
inline ::beegfs::Nic* GetNodeListResp_Node::_internal_add_nics() {
  return nics_.Add();
}
inline ::beegfs::Nic* GetNodeListResp_Node::add_nics() {
  // @@protoc_insertion_point(field_add:beegfs.GetNodeListResp.Node.nics)
  return _internal_add_nics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::Nic >&
GetNodeListResp_Node::nics() const {
  // @@protoc_insertion_point(field_list:beegfs.GetNodeListResp.Node.nics)
  return nics_;
}

// -------------------------------------------------------------------

// GetNodeListResp

// repeated .beegfs.GetNodeListResp.Node nodes = 1;
inline int GetNodeListResp::_internal_nodes_size() const {
  return nodes_.size();
}
inline int GetNodeListResp::nodes_size() const {
  return _internal_nodes_size();
}
inline void GetNodeListResp::clear_nodes() {
  nodes_.Clear();
}
inline ::beegfs::GetNodeListResp_Node* GetNodeListResp::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:beegfs.GetNodeListResp.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::GetNodeListResp_Node >*
GetNodeListResp::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:beegfs.GetNodeListResp.nodes)
  return &nodes_;
}
inline const ::beegfs::GetNodeListResp_Node& GetNodeListResp::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::beegfs::GetNodeListResp_Node& GetNodeListResp::nodes(int index) const {
  // @@protoc_insertion_point(field_get:beegfs.GetNodeListResp.nodes)
  return _internal_nodes(index);
}
inline ::beegfs::GetNodeListResp_Node* GetNodeListResp::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::beegfs::GetNodeListResp_Node* GetNodeListResp::add_nodes() {
  // @@protoc_insertion_point(field_add:beegfs.GetNodeListResp.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::GetNodeListResp_Node >&
GetNodeListResp::nodes() const {
  // @@protoc_insertion_point(field_list:beegfs.GetNodeListResp.nodes)
  return nodes_;
}

// int64 meta_root_node_uid = 2;
inline void GetNodeListResp::clear_meta_root_node_uid() {
  meta_root_node_uid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetNodeListResp::_internal_meta_root_node_uid() const {
  return meta_root_node_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetNodeListResp::meta_root_node_uid() const {
  // @@protoc_insertion_point(field_get:beegfs.GetNodeListResp.meta_root_node_uid)
  return _internal_meta_root_node_uid();
}
inline void GetNodeListResp::_internal_set_meta_root_node_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  meta_root_node_uid_ = value;
}
inline void GetNodeListResp::set_meta_root_node_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_meta_root_node_uid(value);
  // @@protoc_insertion_point(field_set:beegfs.GetNodeListResp.meta_root_node_uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace beegfs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::beegfs::Nic_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::beegfs::Nic_Type>() {
  return ::beegfs::Nic_Type_descriptor();
}
template <> struct is_proto_enum< ::beegfs::GetNodeListResp_Node_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::beegfs::GetNodeListResp_Node_Type>() {
  return ::beegfs::GetNodeListResp_Node_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_beegfs_2eproto
