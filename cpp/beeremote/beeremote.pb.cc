// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beeremote.proto

#include "beeremote.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_beeremote_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetJobsRequest_QueryIdAndPath_beeremote_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beeremote_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Job_beeremote_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beeremote_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Job_Status_beeremote_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beeremote_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JobRequest_beeremote_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beeremote_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_JobResult_beeremote_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beeremote_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobResult_WorkResult_beeremote_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beeremote_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateJobRequest_QueryIdAndPath_beeremote_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flex_2fflex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MockJob_flex_2fflex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flex_2fflex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncJob_flex_2fflex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flex_2fflex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Work_flex_2fflex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flex_2fflex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WorkRequest_flex_2fflex_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace beeremote {
class SubmitJobRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitJobRequest> _instance;
} _SubmitJobRequest_default_instance_;
class SubmitJobResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitJobResponse> _instance;
} _SubmitJobResponse_default_instance_;
class JobRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobRequest> _instance;
  const ::flex::SyncJob* sync_;
  const ::flex::MockJob* mock_;
} _JobRequest_default_instance_;
class Job_StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Job_Status> _instance;
} _Job_Status_default_instance_;
class JobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Job> _instance;
} _Job_default_instance_;
class JobResult_WorkResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobResult_WorkResult> _instance;
} _JobResult_WorkResult_default_instance_;
class JobResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobResult> _instance;
} _JobResult_default_instance_;
class UpdateJobRequest_QueryIdAndPathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateJobRequest_QueryIdAndPath> _instance;
} _UpdateJobRequest_QueryIdAndPath_default_instance_;
class UpdateJobRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateJobRequest> _instance;
  const ::beeremote::UpdateJobRequest_QueryIdAndPath* by_id_and_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr by_exact_path_;
} _UpdateJobRequest_default_instance_;
class UpdateJobResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateJobResponse> _instance;
} _UpdateJobResponse_default_instance_;
class GetJobsRequest_QueryIdAndPathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetJobsRequest_QueryIdAndPath> _instance;
} _GetJobsRequest_QueryIdAndPath_default_instance_;
class GetJobsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetJobsRequest> _instance;
  const ::beeremote::GetJobsRequest_QueryIdAndPath* by_job_id_and_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr by_exact_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr by_path_prefix_;
} _GetJobsRequest_default_instance_;
class GetJobsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetJobsResponse> _instance;
} _GetJobsResponse_default_instance_;
class UpdateWorkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateWorkRequest> _instance;
} _UpdateWorkRequest_default_instance_;
class UpdateWorkResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateWorkResponse> _instance;
} _UpdateWorkResponse_default_instance_;
}  // namespace beeremote
static void InitDefaultsscc_info_GetJobsRequest_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_GetJobsRequest_default_instance_;
    new (ptr) ::beeremote::GetJobsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::GetJobsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetJobsRequest_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetJobsRequest_beeremote_2eproto}, {
      &scc_info_GetJobsRequest_QueryIdAndPath_beeremote_2eproto.base,}};

static void InitDefaultsscc_info_GetJobsRequest_QueryIdAndPath_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_GetJobsRequest_QueryIdAndPath_default_instance_;
    new (ptr) ::beeremote::GetJobsRequest_QueryIdAndPath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::GetJobsRequest_QueryIdAndPath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetJobsRequest_QueryIdAndPath_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetJobsRequest_QueryIdAndPath_beeremote_2eproto}, {}};

static void InitDefaultsscc_info_GetJobsResponse_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_GetJobsResponse_default_instance_;
    new (ptr) ::beeremote::GetJobsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::GetJobsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetJobsResponse_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetJobsResponse_beeremote_2eproto}, {
      &scc_info_JobResult_beeremote_2eproto.base,}};

static void InitDefaultsscc_info_Job_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_Job_default_instance_;
    new (ptr) ::beeremote::Job();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::Job::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Job_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Job_beeremote_2eproto}, {
      &scc_info_JobRequest_beeremote_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Job_Status_beeremote_2eproto.base,}};

static void InitDefaultsscc_info_Job_Status_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_Job_Status_default_instance_;
    new (ptr) ::beeremote::Job_Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::Job_Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Job_Status_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Job_Status_beeremote_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_JobRequest_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_JobRequest_default_instance_;
    new (ptr) ::beeremote::JobRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::JobRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JobRequest_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_JobRequest_beeremote_2eproto}, {
      &scc_info_SyncJob_flex_2fflex_2eproto.base,
      &scc_info_MockJob_flex_2fflex_2eproto.base,}};

static void InitDefaultsscc_info_JobResult_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_JobResult_default_instance_;
    new (ptr) ::beeremote::JobResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::JobResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_JobResult_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_JobResult_beeremote_2eproto}, {
      &scc_info_Job_beeremote_2eproto.base,
      &scc_info_WorkRequest_flex_2fflex_2eproto.base,
      &scc_info_JobResult_WorkResult_beeremote_2eproto.base,}};

static void InitDefaultsscc_info_JobResult_WorkResult_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_JobResult_WorkResult_default_instance_;
    new (ptr) ::beeremote::JobResult_WorkResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::JobResult_WorkResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobResult_WorkResult_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JobResult_WorkResult_beeremote_2eproto}, {
      &scc_info_Work_flex_2fflex_2eproto.base,}};

static void InitDefaultsscc_info_SubmitJobRequest_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_SubmitJobRequest_default_instance_;
    new (ptr) ::beeremote::SubmitJobRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::SubmitJobRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmitJobRequest_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubmitJobRequest_beeremote_2eproto}, {
      &scc_info_JobRequest_beeremote_2eproto.base,}};

static void InitDefaultsscc_info_SubmitJobResponse_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_SubmitJobResponse_default_instance_;
    new (ptr) ::beeremote::SubmitJobResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::SubmitJobResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmitJobResponse_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubmitJobResponse_beeremote_2eproto}, {
      &scc_info_JobResult_beeremote_2eproto.base,}};

static void InitDefaultsscc_info_UpdateJobRequest_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_UpdateJobRequest_default_instance_;
    new (ptr) ::beeremote::UpdateJobRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::UpdateJobRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateJobRequest_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateJobRequest_beeremote_2eproto}, {
      &scc_info_UpdateJobRequest_QueryIdAndPath_beeremote_2eproto.base,}};

static void InitDefaultsscc_info_UpdateJobRequest_QueryIdAndPath_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_UpdateJobRequest_QueryIdAndPath_default_instance_;
    new (ptr) ::beeremote::UpdateJobRequest_QueryIdAndPath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::UpdateJobRequest_QueryIdAndPath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateJobRequest_QueryIdAndPath_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateJobRequest_QueryIdAndPath_beeremote_2eproto}, {}};

static void InitDefaultsscc_info_UpdateJobResponse_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_UpdateJobResponse_default_instance_;
    new (ptr) ::beeremote::UpdateJobResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::UpdateJobResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateJobResponse_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateJobResponse_beeremote_2eproto}, {
      &scc_info_JobResult_beeremote_2eproto.base,}};

static void InitDefaultsscc_info_UpdateWorkRequest_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_UpdateWorkRequest_default_instance_;
    new (ptr) ::beeremote::UpdateWorkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::UpdateWorkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateWorkRequest_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateWorkRequest_beeremote_2eproto}, {
      &scc_info_Work_flex_2fflex_2eproto.base,}};

static void InitDefaultsscc_info_UpdateWorkResponse_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_UpdateWorkResponse_default_instance_;
    new (ptr) ::beeremote::UpdateWorkResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::UpdateWorkResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateWorkResponse_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateWorkResponse_beeremote_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_beeremote_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_beeremote_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_beeremote_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_beeremote_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::SubmitJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beeremote::SubmitJobRequest, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::SubmitJobResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beeremote::SubmitJobResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::JobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::beeremote::JobRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beeremote::JobRequest, path_),
  PROTOBUF_FIELD_OFFSET(::beeremote::JobRequest, name_),
  PROTOBUF_FIELD_OFFSET(::beeremote::JobRequest, priority_),
  PROTOBUF_FIELD_OFFSET(::beeremote::JobRequest, remote_storage_target_),
  offsetof(::beeremote::JobRequestDefaultTypeInternal, sync_),
  offsetof(::beeremote::JobRequestDefaultTypeInternal, mock_),
  PROTOBUF_FIELD_OFFSET(::beeremote::JobRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::Job_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beeremote::Job_Status, state_),
  PROTOBUF_FIELD_OFFSET(::beeremote::Job_Status, message_),
  PROTOBUF_FIELD_OFFSET(::beeremote::Job_Status, updated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::Job, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beeremote::Job, id_),
  PROTOBUF_FIELD_OFFSET(::beeremote::Job, request_),
  PROTOBUF_FIELD_OFFSET(::beeremote::Job, created_),
  PROTOBUF_FIELD_OFFSET(::beeremote::Job, status_),
  PROTOBUF_FIELD_OFFSET(::beeremote::Job, external_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::JobResult_WorkResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beeremote::JobResult_WorkResult, work_),
  PROTOBUF_FIELD_OFFSET(::beeremote::JobResult_WorkResult, assigned_node_),
  PROTOBUF_FIELD_OFFSET(::beeremote::JobResult_WorkResult, assigned_pool_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::JobResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beeremote::JobResult, job_),
  PROTOBUF_FIELD_OFFSET(::beeremote::JobResult, work_requests_),
  PROTOBUF_FIELD_OFFSET(::beeremote::JobResult, work_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::UpdateJobRequest_QueryIdAndPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beeremote::UpdateJobRequest_QueryIdAndPath, job_id_),
  PROTOBUF_FIELD_OFFSET(::beeremote::UpdateJobRequest_QueryIdAndPath, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::UpdateJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::beeremote::UpdateJobRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::beeremote::UpdateJobRequestDefaultTypeInternal, by_id_and_path_),
  offsetof(::beeremote::UpdateJobRequestDefaultTypeInternal, by_exact_path_),
  PROTOBUF_FIELD_OFFSET(::beeremote::UpdateJobRequest, new_state_),
  PROTOBUF_FIELD_OFFSET(::beeremote::UpdateJobRequest, force_update_),
  PROTOBUF_FIELD_OFFSET(::beeremote::UpdateJobRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::UpdateJobResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beeremote::UpdateJobResponse, ok_),
  PROTOBUF_FIELD_OFFSET(::beeremote::UpdateJobResponse, message_),
  PROTOBUF_FIELD_OFFSET(::beeremote::UpdateJobResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::GetJobsRequest_QueryIdAndPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beeremote::GetJobsRequest_QueryIdAndPath, job_id_),
  PROTOBUF_FIELD_OFFSET(::beeremote::GetJobsRequest_QueryIdAndPath, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::GetJobsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::beeremote::GetJobsRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::beeremote::GetJobsRequestDefaultTypeInternal, by_job_id_and_path_),
  offsetof(::beeremote::GetJobsRequestDefaultTypeInternal, by_exact_path_),
  offsetof(::beeremote::GetJobsRequestDefaultTypeInternal, by_path_prefix_),
  PROTOBUF_FIELD_OFFSET(::beeremote::GetJobsRequest, include_work_requests_),
  PROTOBUF_FIELD_OFFSET(::beeremote::GetJobsRequest, include_work_results_),
  PROTOBUF_FIELD_OFFSET(::beeremote::GetJobsRequest, update_work_results_),
  PROTOBUF_FIELD_OFFSET(::beeremote::GetJobsRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::GetJobsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beeremote::GetJobsResponse, path_),
  PROTOBUF_FIELD_OFFSET(::beeremote::GetJobsResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::UpdateWorkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beeremote::UpdateWorkRequest, work_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::UpdateWorkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::beeremote::SubmitJobRequest)},
  { 6, -1, sizeof(::beeremote::SubmitJobResponse)},
  { 12, -1, sizeof(::beeremote::JobRequest)},
  { 24, -1, sizeof(::beeremote::Job_Status)},
  { 32, -1, sizeof(::beeremote::Job)},
  { 42, -1, sizeof(::beeremote::JobResult_WorkResult)},
  { 50, -1, sizeof(::beeremote::JobResult)},
  { 58, -1, sizeof(::beeremote::UpdateJobRequest_QueryIdAndPath)},
  { 65, -1, sizeof(::beeremote::UpdateJobRequest)},
  { 75, -1, sizeof(::beeremote::UpdateJobResponse)},
  { 83, -1, sizeof(::beeremote::GetJobsRequest_QueryIdAndPath)},
  { 90, -1, sizeof(::beeremote::GetJobsRequest)},
  { 102, -1, sizeof(::beeremote::GetJobsResponse)},
  { 109, -1, sizeof(::beeremote::UpdateWorkRequest)},
  { 115, -1, sizeof(::beeremote::UpdateWorkResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_SubmitJobRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_SubmitJobResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_JobRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_Job_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_Job_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_JobResult_WorkResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_JobResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_UpdateJobRequest_QueryIdAndPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_UpdateJobRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_UpdateJobResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_GetJobsRequest_QueryIdAndPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_GetJobsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_GetJobsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_UpdateWorkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_UpdateWorkResponse_default_instance_),
};

const char descriptor_table_protodef_beeremote_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017beeremote.proto\022\tbeeremote\032\017flex/flex."
  "proto\032\037google/protobuf/timestamp.proto\":"
  "\n\020SubmitJobRequest\022&\n\007request\030\001 \001(\0132\025.be"
  "eremote.JobRequest\"9\n\021SubmitJobResponse\022"
  "$\n\006result\030\001 \001(\0132\024.beeremote.JobResult\"\237\001"
  "\n\nJobRequest\022\014\n\004path\030\001 \001(\t\022\014\n\004name\030\002 \001(\t"
  "\022\020\n\010priority\030\003 \001(\005\022\035\n\025remote_storage_tar"
  "get\030\004 \001(\t\022\035\n\004sync\030\n \001(\0132\r.flex.SyncJobH\000"
  "\022\035\n\004mock\030\013 \001(\0132\r.flex.MockJobH\000B\006\n\004type\""
  "\230\003\n\003Job\022\n\n\002id\030\001 \001(\t\022&\n\007request\030\002 \001(\0132\025.b"
  "eeremote.JobRequest\022+\n\007created\030\003 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\022%\n\006status\030\004 \001(\013"
  "2\025.beeremote.Job.Status\022\023\n\013external_id\030\005"
  " \001(\t\032k\n\006Status\022#\n\005state\030\001 \001(\0162\024.beeremot"
  "e.Job.State\022\017\n\007message\030\002 \001(\t\022+\n\007updated\030"
  "\003 \001(\0132\032.google.protobuf.Timestamp\"\206\001\n\005St"
  "ate\022\017\n\013UNSPECIFIED\020\000\022\013\n\007UNKNOWN\020\001\022\016\n\nUNA"
  "SSIGNED\020\002\022\r\n\tSCHEDULED\020\003\022\013\n\007RUNNING\020\004\022\t\n"
  "\005ERROR\020\006\022\n\n\006FAILED\020\007\022\r\n\tCANCELLED\020\010\022\r\n\tC"
  "OMPLETED\020\t\"\337\001\n\tJobResult\022\033\n\003job\030\001 \001(\0132\016."
  "beeremote.Job\022(\n\rwork_requests\030\002 \003(\0132\021.f"
  "lex.WorkRequest\0225\n\014work_results\030\003 \003(\0132\037."
  "beeremote.JobResult.WorkResult\032T\n\nWorkRe"
  "sult\022\030\n\004work\030\001 \001(\0132\n.flex.Work\022\025\n\rassign"
  "ed_node\030\002 \001(\t\022\025\n\rassigned_pool\030\003 \001(\t\"\262\002\n"
  "\020UpdateJobRequest\022D\n\016by_id_and_path\030\001 \001("
  "\0132*.beeremote.UpdateJobRequest.QueryIdAn"
  "dPathH\000\022\027\n\rby_exact_path\030\002 \001(\tH\000\0227\n\tnew_"
  "state\030\003 \001(\0162$.beeremote.UpdateJobRequest"
  ".NewState\022\024\n\014force_update\030\004 \001(\010\032.\n\016Query"
  "IdAndPath\022\016\n\006job_id\030\001 \001(\t\022\014\n\004path\030\002 \001(\t\""
  "7\n\010NewState\022\017\n\013UNSPECIFIED\020\000\022\r\n\tCANCELLE"
  "D\020\001\022\013\n\007DELETED\020\002B\007\n\005query\"W\n\021UpdateJobRe"
  "sponse\022\n\n\002ok\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\022%\n\007r"
  "esults\030\003 \003(\0132\024.beeremote.JobResult\"\236\002\n\016G"
  "etJobsRequest\022F\n\022by_job_id_and_path\030\001 \001("
  "\0132(.beeremote.GetJobsRequest.QueryIdAndP"
  "athH\000\022\027\n\rby_exact_path\030\002 \001(\tH\000\022\030\n\016by_pat"
  "h_prefix\030\003 \001(\tH\000\022\035\n\025include_work_request"
  "s\030\004 \001(\010\022\034\n\024include_work_results\030\005 \001(\010\022\033\n"
  "\023update_work_results\030\006 \001(\010\032.\n\016QueryIdAnd"
  "Path\022\016\n\006job_id\030\001 \001(\t\022\014\n\004path\030\002 \001(\tB\007\n\005qu"
  "ery\"F\n\017GetJobsResponse\022\014\n\004path\030\001 \001(\t\022%\n\007"
  "results\030\002 \003(\0132\024.beeremote.JobResult\"-\n\021U"
  "pdateWorkRequest\022\030\n\004work\030\001 \001(\0132\n.flex.Wo"
  "rk\"\024\n\022UpdateWorkResponse2\252\002\n\tBeeRemote\022F"
  "\n\tSubmitJob\022\033.beeremote.SubmitJobRequest"
  "\032\034.beeremote.SubmitJobResponse\022F\n\tUpdate"
  "Job\022\033.beeremote.UpdateJobRequest\032\034.beere"
  "mote.UpdateJobResponse\022B\n\007GetJobs\022\031.beer"
  "emote.GetJobsRequest\032\032.beeremote.GetJobs"
  "Response0\001\022I\n\nUpdateWork\022\034.beeremote.Upd"
  "ateWorkRequest\032\035.beeremote.UpdateWorkRes"
  "ponseB,Z*github.com/thinkparq/protobuf/g"
  "o/beeremoteb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_beeremote_2eproto_deps[2] = {
  &::descriptor_table_flex_2fflex_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_beeremote_2eproto_sccs[15] = {
  &scc_info_GetJobsRequest_beeremote_2eproto.base,
  &scc_info_GetJobsRequest_QueryIdAndPath_beeremote_2eproto.base,
  &scc_info_GetJobsResponse_beeremote_2eproto.base,
  &scc_info_Job_beeremote_2eproto.base,
  &scc_info_Job_Status_beeremote_2eproto.base,
  &scc_info_JobRequest_beeremote_2eproto.base,
  &scc_info_JobResult_beeremote_2eproto.base,
  &scc_info_JobResult_WorkResult_beeremote_2eproto.base,
  &scc_info_SubmitJobRequest_beeremote_2eproto.base,
  &scc_info_SubmitJobResponse_beeremote_2eproto.base,
  &scc_info_UpdateJobRequest_beeremote_2eproto.base,
  &scc_info_UpdateJobRequest_QueryIdAndPath_beeremote_2eproto.base,
  &scc_info_UpdateJobResponse_beeremote_2eproto.base,
  &scc_info_UpdateWorkRequest_beeremote_2eproto.base,
  &scc_info_UpdateWorkResponse_beeremote_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_beeremote_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_beeremote_2eproto = {
  false, false, descriptor_table_protodef_beeremote_2eproto, "beeremote.proto", 2179,
  &descriptor_table_beeremote_2eproto_once, descriptor_table_beeremote_2eproto_sccs, descriptor_table_beeremote_2eproto_deps, 15, 2,
  schemas, file_default_instances, TableStruct_beeremote_2eproto::offsets,
  file_level_metadata_beeremote_2eproto, 15, file_level_enum_descriptors_beeremote_2eproto, file_level_service_descriptors_beeremote_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_beeremote_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_beeremote_2eproto)), true);
namespace beeremote {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Job_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_beeremote_2eproto);
  return file_level_enum_descriptors_beeremote_2eproto[0];
}
bool Job_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Job_State Job::UNSPECIFIED;
constexpr Job_State Job::UNKNOWN;
constexpr Job_State Job::UNASSIGNED;
constexpr Job_State Job::SCHEDULED;
constexpr Job_State Job::RUNNING;
constexpr Job_State Job::ERROR;
constexpr Job_State Job::FAILED;
constexpr Job_State Job::CANCELLED;
constexpr Job_State Job::COMPLETED;
constexpr Job_State Job::State_MIN;
constexpr Job_State Job::State_MAX;
constexpr int Job::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateJobRequest_NewState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_beeremote_2eproto);
  return file_level_enum_descriptors_beeremote_2eproto[1];
}
bool UpdateJobRequest_NewState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UpdateJobRequest_NewState UpdateJobRequest::UNSPECIFIED;
constexpr UpdateJobRequest_NewState UpdateJobRequest::CANCELLED;
constexpr UpdateJobRequest_NewState UpdateJobRequest::DELETED;
constexpr UpdateJobRequest_NewState UpdateJobRequest::NewState_MIN;
constexpr UpdateJobRequest_NewState UpdateJobRequest::NewState_MAX;
constexpr int UpdateJobRequest::NewState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SubmitJobRequest::InitAsDefaultInstance() {
  ::beeremote::_SubmitJobRequest_default_instance_._instance.get_mutable()->request_ = const_cast< ::beeremote::JobRequest*>(
      ::beeremote::JobRequest::internal_default_instance());
}
class SubmitJobRequest::_Internal {
 public:
  static const ::beeremote::JobRequest& request(const SubmitJobRequest* msg);
};

const ::beeremote::JobRequest&
SubmitJobRequest::_Internal::request(const SubmitJobRequest* msg) {
  return *msg->request_;
}
SubmitJobRequest::SubmitJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.SubmitJobRequest)
}
SubmitJobRequest::SubmitJobRequest(const SubmitJobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    request_ = new ::beeremote::JobRequest(*from.request_);
  } else {
    request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:beeremote.SubmitJobRequest)
}

void SubmitJobRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitJobRequest_beeremote_2eproto.base);
  request_ = nullptr;
}

SubmitJobRequest::~SubmitJobRequest() {
  // @@protoc_insertion_point(destructor:beeremote.SubmitJobRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitJobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete request_;
}

void SubmitJobRequest::ArenaDtor(void* object) {
  SubmitJobRequest* _this = reinterpret_cast< SubmitJobRequest* >(object);
  (void)_this;
}
void SubmitJobRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitJobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitJobRequest& SubmitJobRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitJobRequest_beeremote_2eproto.base);
  return *internal_default_instance();
}


void SubmitJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.SubmitJobRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitJobRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .beeremote.JobRequest request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitJobRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.SubmitJobRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .beeremote.JobRequest request = 1;
  if (this->has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.SubmitJobRequest)
  return target;
}

size_t SubmitJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.SubmitJobRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .beeremote.JobRequest request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitJobRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.SubmitJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitJobRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitJobRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.SubmitJobRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.SubmitJobRequest)
    MergeFrom(*source);
  }
}

void SubmitJobRequest::MergeFrom(const SubmitJobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.SubmitJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request()) {
    _internal_mutable_request()->::beeremote::JobRequest::MergeFrom(from._internal_request());
  }
}

void SubmitJobRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.SubmitJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitJobRequest::CopyFrom(const SubmitJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.SubmitJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitJobRequest::IsInitialized() const {
  return true;
}

void SubmitJobRequest::InternalSwap(SubmitJobRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(request_, other->request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitJobRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubmitJobResponse::InitAsDefaultInstance() {
  ::beeremote::_SubmitJobResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::beeremote::JobResult*>(
      ::beeremote::JobResult::internal_default_instance());
}
class SubmitJobResponse::_Internal {
 public:
  static const ::beeremote::JobResult& result(const SubmitJobResponse* msg);
};

const ::beeremote::JobResult&
SubmitJobResponse::_Internal::result(const SubmitJobResponse* msg) {
  return *msg->result_;
}
SubmitJobResponse::SubmitJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.SubmitJobResponse)
}
SubmitJobResponse::SubmitJobResponse(const SubmitJobResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::beeremote::JobResult(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:beeremote.SubmitJobResponse)
}

void SubmitJobResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitJobResponse_beeremote_2eproto.base);
  result_ = nullptr;
}

SubmitJobResponse::~SubmitJobResponse() {
  // @@protoc_insertion_point(destructor:beeremote.SubmitJobResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitJobResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void SubmitJobResponse::ArenaDtor(void* object) {
  SubmitJobResponse* _this = reinterpret_cast< SubmitJobResponse* >(object);
  (void)_this;
}
void SubmitJobResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitJobResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitJobResponse& SubmitJobResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitJobResponse_beeremote_2eproto.base);
  return *internal_default_instance();
}


void SubmitJobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.SubmitJobResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitJobResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .beeremote.JobResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitJobResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.SubmitJobResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .beeremote.JobResult result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.SubmitJobResponse)
  return target;
}

size_t SubmitJobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.SubmitJobResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .beeremote.JobResult result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitJobResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.SubmitJobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitJobResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitJobResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.SubmitJobResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.SubmitJobResponse)
    MergeFrom(*source);
  }
}

void SubmitJobResponse::MergeFrom(const SubmitJobResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.SubmitJobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::beeremote::JobResult::MergeFrom(from._internal_result());
  }
}

void SubmitJobResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.SubmitJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitJobResponse::CopyFrom(const SubmitJobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.SubmitJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitJobResponse::IsInitialized() const {
  return true;
}

void SubmitJobResponse::InternalSwap(SubmitJobResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitJobResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobRequest::InitAsDefaultInstance() {
  ::beeremote::_JobRequest_default_instance_.sync_ = const_cast< ::flex::SyncJob*>(
      ::flex::SyncJob::internal_default_instance());
  ::beeremote::_JobRequest_default_instance_.mock_ = const_cast< ::flex::MockJob*>(
      ::flex::MockJob::internal_default_instance());
}
class JobRequest::_Internal {
 public:
  static const ::flex::SyncJob& sync(const JobRequest* msg);
  static const ::flex::MockJob& mock(const JobRequest* msg);
};

const ::flex::SyncJob&
JobRequest::_Internal::sync(const JobRequest* msg) {
  return *msg->type_.sync_;
}
const ::flex::MockJob&
JobRequest::_Internal::mock(const JobRequest* msg) {
  return *msg->type_.mock_;
}
void JobRequest::set_allocated_sync(::flex::SyncJob* sync) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (sync) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync)->GetArena();
    if (message_arena != submessage_arena) {
      sync = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync, submessage_arena);
    }
    set_has_sync();
    type_.sync_ = sync;
  }
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobRequest.sync)
}
void JobRequest::clear_sync() {
  if (_internal_has_sync()) {
    if (GetArena() == nullptr) {
      delete type_.sync_;
    }
    clear_has_type();
  }
}
void JobRequest::set_allocated_mock(::flex::MockJob* mock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (mock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mock)->GetArena();
    if (message_arena != submessage_arena) {
      mock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mock, submessage_arena);
    }
    set_has_mock();
    type_.mock_ = mock;
  }
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobRequest.mock)
}
void JobRequest::clear_mock() {
  if (_internal_has_mock()) {
    if (GetArena() == nullptr) {
      delete type_.mock_;
    }
    clear_has_type();
  }
}
JobRequest::JobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.JobRequest)
}
JobRequest::JobRequest(const JobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  remote_storage_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_storage_target().empty()) {
    remote_storage_target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_remote_storage_target(),
      GetArena());
  }
  priority_ = from.priority_;
  clear_has_type();
  switch (from.type_case()) {
    case kSync: {
      _internal_mutable_sync()->::flex::SyncJob::MergeFrom(from._internal_sync());
      break;
    }
    case kMock: {
      _internal_mutable_mock()->::flex::MockJob::MergeFrom(from._internal_mock());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:beeremote.JobRequest)
}

void JobRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobRequest_beeremote_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_storage_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  priority_ = 0;
  clear_has_type();
}

JobRequest::~JobRequest() {
  // @@protoc_insertion_point(destructor:beeremote.JobRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_storage_target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_type()) {
    clear_type();
  }
}

void JobRequest::ArenaDtor(void* object) {
  JobRequest* _this = reinterpret_cast< JobRequest* >(object);
  (void)_this;
}
void JobRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobRequest& JobRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobRequest_beeremote_2eproto.base);
  return *internal_default_instance();
}


void JobRequest::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:beeremote.JobRequest)
  switch (type_case()) {
    case kSync: {
      if (GetArena() == nullptr) {
        delete type_.sync_;
      }
      break;
    }
    case kMock: {
      if (GetArena() == nullptr) {
        delete type_.mock_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void JobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.JobRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_storage_target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  priority_ = 0;
  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.JobRequest.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.JobRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_storage_target = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_remote_storage_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.JobRequest.remote_storage_target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flex.SyncJob sync = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flex.MockJob mock = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_mock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.JobRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.JobRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.JobRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_priority(), target);
  }

  // string remote_storage_target = 4;
  if (this->remote_storage_target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_storage_target().data(), static_cast<int>(this->_internal_remote_storage_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.JobRequest.remote_storage_target");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_remote_storage_target(), target);
  }

  // .flex.SyncJob sync = 10;
  if (_internal_has_sync()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::sync(this), target, stream);
  }

  // .flex.MockJob mock = 11;
  if (_internal_has_mock()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::mock(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.JobRequest)
  return target;
}

size_t JobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.JobRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string remote_storage_target = 4;
  if (this->remote_storage_target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_storage_target());
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority());
  }

  switch (type_case()) {
    // .flex.SyncJob sync = 10;
    case kSync: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.sync_);
      break;
    }
    // .flex.MockJob mock = 11;
    case kMock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.mock_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.JobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JobRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.JobRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.JobRequest)
    MergeFrom(*source);
  }
}

void JobRequest::MergeFrom(const JobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.JobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.remote_storage_target().size() > 0) {
    _internal_set_remote_storage_target(from._internal_remote_storage_target());
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  switch (from.type_case()) {
    case kSync: {
      _internal_mutable_sync()->::flex::SyncJob::MergeFrom(from._internal_sync());
      break;
    }
    case kMock: {
      _internal_mutable_mock()->::flex::MockJob::MergeFrom(from._internal_mock());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void JobRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.JobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobRequest::CopyFrom(const JobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.JobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobRequest::IsInitialized() const {
  return true;
}

void JobRequest::InternalSwap(JobRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_storage_target_.Swap(&other->remote_storage_target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(priority_, other->priority_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Job_Status::InitAsDefaultInstance() {
  ::beeremote::_Job_Status_default_instance_._instance.get_mutable()->updated_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Job_Status::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated(const Job_Status* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Job_Status::_Internal::updated(const Job_Status* msg) {
  return *msg->updated_;
}
void Job_Status::clear_updated() {
  if (GetArena() == nullptr && updated_ != nullptr) {
    delete updated_;
  }
  updated_ = nullptr;
}
Job_Status::Job_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.Job.Status)
}
Job_Status::Job_Status(const Job_Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_updated()) {
    updated_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_);
  } else {
    updated_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:beeremote.Job.Status)
}

void Job_Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Job_Status_beeremote_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&updated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&updated_)) + sizeof(state_));
}

Job_Status::~Job_Status() {
  // @@protoc_insertion_point(destructor:beeremote.Job.Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Job_Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete updated_;
}

void Job_Status::ArenaDtor(void* object) {
  Job_Status* _this = reinterpret_cast< Job_Status* >(object);
  (void)_this;
}
void Job_Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Job_Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Job_Status& Job_Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Job_Status_beeremote_2eproto.base);
  return *internal_default_instance();
}


void Job_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.Job.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && updated_ != nullptr) {
    delete updated_;
  }
  updated_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Job_Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .beeremote.Job.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::beeremote::Job_State>(val));
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.Job.Status.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Job_Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.Job.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .beeremote.Job.State state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.Job.Status.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .google.protobuf.Timestamp updated = 3;
  if (this->has_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::updated(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.Job.Status)
  return target;
}

size_t Job_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.Job.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp updated = 3;
  if (this->has_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_);
  }

  // .beeremote.Job.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Job_Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.Job.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Job_Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Job_Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.Job.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.Job.Status)
    MergeFrom(*source);
  }
}

void Job_Status::MergeFrom(const Job_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.Job.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_updated()) {
    _internal_mutable_updated()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void Job_Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.Job.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Job_Status::CopyFrom(const Job_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.Job.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Job_Status::IsInitialized() const {
  return true;
}

void Job_Status::InternalSwap(Job_Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Job_Status, state_)
      + sizeof(Job_Status::state_)
      - PROTOBUF_FIELD_OFFSET(Job_Status, updated_)>(
          reinterpret_cast<char*>(&updated_),
          reinterpret_cast<char*>(&other->updated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Job_Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Job::InitAsDefaultInstance() {
  ::beeremote::_Job_default_instance_._instance.get_mutable()->request_ = const_cast< ::beeremote::JobRequest*>(
      ::beeremote::JobRequest::internal_default_instance());
  ::beeremote::_Job_default_instance_._instance.get_mutable()->created_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::beeremote::_Job_default_instance_._instance.get_mutable()->status_ = const_cast< ::beeremote::Job_Status*>(
      ::beeremote::Job_Status::internal_default_instance());
}
class Job::_Internal {
 public:
  static const ::beeremote::JobRequest& request(const Job* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created(const Job* msg);
  static const ::beeremote::Job_Status& status(const Job* msg);
};

const ::beeremote::JobRequest&
Job::_Internal::request(const Job* msg) {
  return *msg->request_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Job::_Internal::created(const Job* msg) {
  return *msg->created_;
}
const ::beeremote::Job_Status&
Job::_Internal::status(const Job* msg) {
  return *msg->status_;
}
void Job::clear_created() {
  if (GetArena() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
}
Job::Job(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.Job)
}
Job::Job(const Job& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  external_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_external_id().empty()) {
    external_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_external_id(),
      GetArena());
  }
  if (from._internal_has_request()) {
    request_ = new ::beeremote::JobRequest(*from.request_);
  } else {
    request_ = nullptr;
  }
  if (from._internal_has_created()) {
    created_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_);
  } else {
    created_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::beeremote::Job_Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:beeremote.Job)
}

void Job::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Job_beeremote_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  external_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&request_)) + sizeof(status_));
}

Job::~Job() {
  // @@protoc_insertion_point(destructor:beeremote.Job)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Job::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  external_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete created_;
  if (this != internal_default_instance()) delete status_;
}

void Job::ArenaDtor(void* object) {
  Job* _this = reinterpret_cast< Job* >(object);
  (void)_this;
}
void Job::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Job::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Job& Job::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Job_beeremote_2eproto.base);
  return *internal_default_instance();
}


void Job::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.Job)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  external_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  if (GetArena() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Job::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.Job.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .beeremote.JobRequest request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .beeremote.Job.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string external_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_external_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.Job.external_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Job::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.Job)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.Job.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .beeremote.JobRequest request = 2;
  if (this->has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::request(this), target, stream);
  }

  // .google.protobuf.Timestamp created = 3;
  if (this->has_created()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::created(this), target, stream);
  }

  // .beeremote.Job.Status status = 4;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  // string external_id = 5;
  if (this->external_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_external_id().data(), static_cast<int>(this->_internal_external_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.Job.external_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_external_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.Job)
  return target;
}

size_t Job::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.Job)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string external_id = 5;
  if (this->external_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_external_id());
  }

  // .beeremote.JobRequest request = 2;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  // .google.protobuf.Timestamp created = 3;
  if (this->has_created()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // .beeremote.Job.Status status = 4;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Job::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.Job)
  GOOGLE_DCHECK_NE(&from, this);
  const Job* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Job>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.Job)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.Job)
    MergeFrom(*source);
  }
}

void Job::MergeFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.Job)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.external_id().size() > 0) {
    _internal_set_external_id(from._internal_external_id());
  }
  if (from.has_request()) {
    _internal_mutable_request()->::beeremote::JobRequest::MergeFrom(from._internal_request());
  }
  if (from.has_created()) {
    _internal_mutable_created()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::beeremote::Job_Status::MergeFrom(from._internal_status());
  }
}

void Job::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.Job)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Job::CopyFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.Job)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Job::IsInitialized() const {
  return true;
}

void Job::InternalSwap(Job* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  external_id_.Swap(&other->external_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Job, status_)
      + sizeof(Job::status_)
      - PROTOBUF_FIELD_OFFSET(Job, request_)>(
          reinterpret_cast<char*>(&request_),
          reinterpret_cast<char*>(&other->request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Job::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobResult_WorkResult::InitAsDefaultInstance() {
  ::beeremote::_JobResult_WorkResult_default_instance_._instance.get_mutable()->work_ = const_cast< ::flex::Work*>(
      ::flex::Work::internal_default_instance());
}
class JobResult_WorkResult::_Internal {
 public:
  static const ::flex::Work& work(const JobResult_WorkResult* msg);
};

const ::flex::Work&
JobResult_WorkResult::_Internal::work(const JobResult_WorkResult* msg) {
  return *msg->work_;
}
void JobResult_WorkResult::clear_work() {
  if (GetArena() == nullptr && work_ != nullptr) {
    delete work_;
  }
  work_ = nullptr;
}
JobResult_WorkResult::JobResult_WorkResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.JobResult.WorkResult)
}
JobResult_WorkResult::JobResult_WorkResult(const JobResult_WorkResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  assigned_node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assigned_node().empty()) {
    assigned_node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_assigned_node(),
      GetArena());
  }
  assigned_pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assigned_pool().empty()) {
    assigned_pool_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_assigned_pool(),
      GetArena());
  }
  if (from._internal_has_work()) {
    work_ = new ::flex::Work(*from.work_);
  } else {
    work_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:beeremote.JobResult.WorkResult)
}

void JobResult_WorkResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobResult_WorkResult_beeremote_2eproto.base);
  assigned_node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assigned_pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  work_ = nullptr;
}

JobResult_WorkResult::~JobResult_WorkResult() {
  // @@protoc_insertion_point(destructor:beeremote.JobResult.WorkResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JobResult_WorkResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  assigned_node_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assigned_pool_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete work_;
}

void JobResult_WorkResult::ArenaDtor(void* object) {
  JobResult_WorkResult* _this = reinterpret_cast< JobResult_WorkResult* >(object);
  (void)_this;
}
void JobResult_WorkResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JobResult_WorkResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobResult_WorkResult& JobResult_WorkResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobResult_WorkResult_beeremote_2eproto.base);
  return *internal_default_instance();
}


void JobResult_WorkResult::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.JobResult.WorkResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assigned_node_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  assigned_pool_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && work_ != nullptr) {
    delete work_;
  }
  work_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobResult_WorkResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flex.Work work = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_work(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string assigned_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_assigned_node();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.JobResult.WorkResult.assigned_node"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string assigned_pool = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_assigned_pool();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.JobResult.WorkResult.assigned_pool"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobResult_WorkResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.JobResult.WorkResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flex.Work work = 1;
  if (this->has_work()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::work(this), target, stream);
  }

  // string assigned_node = 2;
  if (this->assigned_node().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assigned_node().data(), static_cast<int>(this->_internal_assigned_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.JobResult.WorkResult.assigned_node");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_assigned_node(), target);
  }

  // string assigned_pool = 3;
  if (this->assigned_pool().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assigned_pool().data(), static_cast<int>(this->_internal_assigned_pool().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.JobResult.WorkResult.assigned_pool");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_assigned_pool(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.JobResult.WorkResult)
  return target;
}

size_t JobResult_WorkResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.JobResult.WorkResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string assigned_node = 2;
  if (this->assigned_node().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assigned_node());
  }

  // string assigned_pool = 3;
  if (this->assigned_pool().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assigned_pool());
  }

  // .flex.Work work = 1;
  if (this->has_work()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *work_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobResult_WorkResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.JobResult.WorkResult)
  GOOGLE_DCHECK_NE(&from, this);
  const JobResult_WorkResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobResult_WorkResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.JobResult.WorkResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.JobResult.WorkResult)
    MergeFrom(*source);
  }
}

void JobResult_WorkResult::MergeFrom(const JobResult_WorkResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.JobResult.WorkResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.assigned_node().size() > 0) {
    _internal_set_assigned_node(from._internal_assigned_node());
  }
  if (from.assigned_pool().size() > 0) {
    _internal_set_assigned_pool(from._internal_assigned_pool());
  }
  if (from.has_work()) {
    _internal_mutable_work()->::flex::Work::MergeFrom(from._internal_work());
  }
}

void JobResult_WorkResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.JobResult.WorkResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobResult_WorkResult::CopyFrom(const JobResult_WorkResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.JobResult.WorkResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobResult_WorkResult::IsInitialized() const {
  return true;
}

void JobResult_WorkResult::InternalSwap(JobResult_WorkResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  assigned_node_.Swap(&other->assigned_node_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  assigned_pool_.Swap(&other->assigned_pool_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(work_, other->work_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobResult_WorkResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobResult::InitAsDefaultInstance() {
  ::beeremote::_JobResult_default_instance_._instance.get_mutable()->job_ = const_cast< ::beeremote::Job*>(
      ::beeremote::Job::internal_default_instance());
}
class JobResult::_Internal {
 public:
  static const ::beeremote::Job& job(const JobResult* msg);
};

const ::beeremote::Job&
JobResult::_Internal::job(const JobResult* msg) {
  return *msg->job_;
}
void JobResult::clear_work_requests() {
  work_requests_.Clear();
}
JobResult::JobResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  work_requests_(arena),
  work_results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.JobResult)
}
JobResult::JobResult(const JobResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      work_requests_(from.work_requests_),
      work_results_(from.work_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_job()) {
    job_ = new ::beeremote::Job(*from.job_);
  } else {
    job_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:beeremote.JobResult)
}

void JobResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobResult_beeremote_2eproto.base);
  job_ = nullptr;
}

JobResult::~JobResult() {
  // @@protoc_insertion_point(destructor:beeremote.JobResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JobResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete job_;
}

void JobResult::ArenaDtor(void* object) {
  JobResult* _this = reinterpret_cast< JobResult* >(object);
  (void)_this;
}
void JobResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JobResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobResult& JobResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobResult_beeremote_2eproto.base);
  return *internal_default_instance();
}


void JobResult::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.JobResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  work_requests_.Clear();
  work_results_.Clear();
  if (GetArena() == nullptr && job_ != nullptr) {
    delete job_;
  }
  job_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .beeremote.Job job = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_job(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .flex.WorkRequest work_requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_work_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .beeremote.JobResult.WorkResult work_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_work_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.JobResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .beeremote.Job job = 1;
  if (this->has_job()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::job(this), target, stream);
  }

  // repeated .flex.WorkRequest work_requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_work_requests(i), target, stream);
  }

  // repeated .beeremote.JobResult.WorkResult work_results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_work_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.JobResult)
  return target;
}

size_t JobResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.JobResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flex.WorkRequest work_requests = 2;
  total_size += 1UL * this->_internal_work_requests_size();
  for (const auto& msg : this->work_requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .beeremote.JobResult.WorkResult work_results = 3;
  total_size += 1UL * this->_internal_work_results_size();
  for (const auto& msg : this->work_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .beeremote.Job job = 1;
  if (this->has_job()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *job_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.JobResult)
  GOOGLE_DCHECK_NE(&from, this);
  const JobResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.JobResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.JobResult)
    MergeFrom(*source);
  }
}

void JobResult::MergeFrom(const JobResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.JobResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  work_requests_.MergeFrom(from.work_requests_);
  work_results_.MergeFrom(from.work_results_);
  if (from.has_job()) {
    _internal_mutable_job()->::beeremote::Job::MergeFrom(from._internal_job());
  }
}

void JobResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.JobResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobResult::CopyFrom(const JobResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.JobResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobResult::IsInitialized() const {
  return true;
}

void JobResult::InternalSwap(JobResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  work_requests_.InternalSwap(&other->work_requests_);
  work_results_.InternalSwap(&other->work_results_);
  swap(job_, other->job_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateJobRequest_QueryIdAndPath::InitAsDefaultInstance() {
}
class UpdateJobRequest_QueryIdAndPath::_Internal {
 public:
};

UpdateJobRequest_QueryIdAndPath::UpdateJobRequest_QueryIdAndPath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.UpdateJobRequest.QueryIdAndPath)
}
UpdateJobRequest_QueryIdAndPath::UpdateJobRequest_QueryIdAndPath(const UpdateJobRequest_QueryIdAndPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_id().empty()) {
    job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_job_id(),
      GetArena());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:beeremote.UpdateJobRequest.QueryIdAndPath)
}

void UpdateJobRequest_QueryIdAndPath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateJobRequest_QueryIdAndPath_beeremote_2eproto.base);
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateJobRequest_QueryIdAndPath::~UpdateJobRequest_QueryIdAndPath() {
  // @@protoc_insertion_point(destructor:beeremote.UpdateJobRequest.QueryIdAndPath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateJobRequest_QueryIdAndPath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateJobRequest_QueryIdAndPath::ArenaDtor(void* object) {
  UpdateJobRequest_QueryIdAndPath* _this = reinterpret_cast< UpdateJobRequest_QueryIdAndPath* >(object);
  (void)_this;
}
void UpdateJobRequest_QueryIdAndPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateJobRequest_QueryIdAndPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateJobRequest_QueryIdAndPath& UpdateJobRequest_QueryIdAndPath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateJobRequest_QueryIdAndPath_beeremote_2eproto.base);
  return *internal_default_instance();
}


void UpdateJobRequest_QueryIdAndPath::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.UpdateJobRequest.QueryIdAndPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  job_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateJobRequest_QueryIdAndPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.UpdateJobRequest.QueryIdAndPath.job_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.UpdateJobRequest.QueryIdAndPath.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateJobRequest_QueryIdAndPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.UpdateJobRequest.QueryIdAndPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string job_id = 1;
  if (this->job_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.UpdateJobRequest.QueryIdAndPath.job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job_id(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.UpdateJobRequest.QueryIdAndPath.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.UpdateJobRequest.QueryIdAndPath)
  return target;
}

size_t UpdateJobRequest_QueryIdAndPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.UpdateJobRequest.QueryIdAndPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string job_id = 1;
  if (this->job_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateJobRequest_QueryIdAndPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.UpdateJobRequest.QueryIdAndPath)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateJobRequest_QueryIdAndPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateJobRequest_QueryIdAndPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.UpdateJobRequest.QueryIdAndPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.UpdateJobRequest.QueryIdAndPath)
    MergeFrom(*source);
  }
}

void UpdateJobRequest_QueryIdAndPath::MergeFrom(const UpdateJobRequest_QueryIdAndPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.UpdateJobRequest.QueryIdAndPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.job_id().size() > 0) {
    _internal_set_job_id(from._internal_job_id());
  }
  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
}

void UpdateJobRequest_QueryIdAndPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.UpdateJobRequest.QueryIdAndPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateJobRequest_QueryIdAndPath::CopyFrom(const UpdateJobRequest_QueryIdAndPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.UpdateJobRequest.QueryIdAndPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateJobRequest_QueryIdAndPath::IsInitialized() const {
  return true;
}

void UpdateJobRequest_QueryIdAndPath::InternalSwap(UpdateJobRequest_QueryIdAndPath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  job_id_.Swap(&other->job_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateJobRequest_QueryIdAndPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateJobRequest::InitAsDefaultInstance() {
  ::beeremote::_UpdateJobRequest_default_instance_.by_id_and_path_ = const_cast< ::beeremote::UpdateJobRequest_QueryIdAndPath*>(
      ::beeremote::UpdateJobRequest_QueryIdAndPath::internal_default_instance());
  ::beeremote::_UpdateJobRequest_default_instance_.by_exact_path_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class UpdateJobRequest::_Internal {
 public:
  static const ::beeremote::UpdateJobRequest_QueryIdAndPath& by_id_and_path(const UpdateJobRequest* msg);
};

const ::beeremote::UpdateJobRequest_QueryIdAndPath&
UpdateJobRequest::_Internal::by_id_and_path(const UpdateJobRequest* msg) {
  return *msg->query_.by_id_and_path_;
}
void UpdateJobRequest::set_allocated_by_id_and_path(::beeremote::UpdateJobRequest_QueryIdAndPath* by_id_and_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_query();
  if (by_id_and_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(by_id_and_path);
    if (message_arena != submessage_arena) {
      by_id_and_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, by_id_and_path, submessage_arena);
    }
    set_has_by_id_and_path();
    query_.by_id_and_path_ = by_id_and_path;
  }
  // @@protoc_insertion_point(field_set_allocated:beeremote.UpdateJobRequest.by_id_and_path)
}
UpdateJobRequest::UpdateJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.UpdateJobRequest)
}
UpdateJobRequest::UpdateJobRequest(const UpdateJobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&new_state_, &from.new_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_update_) -
    reinterpret_cast<char*>(&new_state_)) + sizeof(force_update_));
  clear_has_query();
  switch (from.query_case()) {
    case kByIdAndPath: {
      _internal_mutable_by_id_and_path()->::beeremote::UpdateJobRequest_QueryIdAndPath::MergeFrom(from._internal_by_id_and_path());
      break;
    }
    case kByExactPath: {
      _internal_set_by_exact_path(from._internal_by_exact_path());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:beeremote.UpdateJobRequest)
}

void UpdateJobRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateJobRequest_beeremote_2eproto.base);
  ::memset(&new_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_update_) -
      reinterpret_cast<char*>(&new_state_)) + sizeof(force_update_));
  clear_has_query();
}

UpdateJobRequest::~UpdateJobRequest() {
  // @@protoc_insertion_point(destructor:beeremote.UpdateJobRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateJobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_query()) {
    clear_query();
  }
}

void UpdateJobRequest::ArenaDtor(void* object) {
  UpdateJobRequest* _this = reinterpret_cast< UpdateJobRequest* >(object);
  (void)_this;
}
void UpdateJobRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateJobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateJobRequest& UpdateJobRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateJobRequest_beeremote_2eproto.base);
  return *internal_default_instance();
}


void UpdateJobRequest::clear_query() {
// @@protoc_insertion_point(one_of_clear_start:beeremote.UpdateJobRequest)
  switch (query_case()) {
    case kByIdAndPath: {
      if (GetArena() == nullptr) {
        delete query_.by_id_and_path_;
      }
      break;
    }
    case kByExactPath: {
      query_.by_exact_path_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = QUERY_NOT_SET;
}


void UpdateJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.UpdateJobRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&new_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_update_) -
      reinterpret_cast<char*>(&new_state_)) + sizeof(force_update_));
  clear_query();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateJobRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .beeremote.UpdateJobRequest.QueryIdAndPath by_id_and_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_by_id_and_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string by_exact_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_by_exact_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.UpdateJobRequest.by_exact_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .beeremote.UpdateJobRequest.NewState new_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_new_state(static_cast<::beeremote::UpdateJobRequest_NewState>(val));
        } else goto handle_unusual;
        continue;
      // bool force_update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          force_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateJobRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.UpdateJobRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .beeremote.UpdateJobRequest.QueryIdAndPath by_id_and_path = 1;
  if (_internal_has_by_id_and_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::by_id_and_path(this), target, stream);
  }

  // string by_exact_path = 2;
  if (_internal_has_by_exact_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_by_exact_path().data(), static_cast<int>(this->_internal_by_exact_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.UpdateJobRequest.by_exact_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_by_exact_path(), target);
  }

  // .beeremote.UpdateJobRequest.NewState new_state = 3;
  if (this->new_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_new_state(), target);
  }

  // bool force_update = 4;
  if (this->force_update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_force_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.UpdateJobRequest)
  return target;
}

size_t UpdateJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.UpdateJobRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .beeremote.UpdateJobRequest.NewState new_state = 3;
  if (this->new_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_new_state());
  }

  // bool force_update = 4;
  if (this->force_update() != 0) {
    total_size += 1 + 1;
  }

  switch (query_case()) {
    // .beeremote.UpdateJobRequest.QueryIdAndPath by_id_and_path = 1;
    case kByIdAndPath: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.by_id_and_path_);
      break;
    }
    // string by_exact_path = 2;
    case kByExactPath: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_by_exact_path());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateJobRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.UpdateJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateJobRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateJobRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.UpdateJobRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.UpdateJobRequest)
    MergeFrom(*source);
  }
}

void UpdateJobRequest::MergeFrom(const UpdateJobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.UpdateJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_state() != 0) {
    _internal_set_new_state(from._internal_new_state());
  }
  if (from.force_update() != 0) {
    _internal_set_force_update(from._internal_force_update());
  }
  switch (from.query_case()) {
    case kByIdAndPath: {
      _internal_mutable_by_id_and_path()->::beeremote::UpdateJobRequest_QueryIdAndPath::MergeFrom(from._internal_by_id_and_path());
      break;
    }
    case kByExactPath: {
      _internal_set_by_exact_path(from._internal_by_exact_path());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
}

void UpdateJobRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.UpdateJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateJobRequest::CopyFrom(const UpdateJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.UpdateJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateJobRequest::IsInitialized() const {
  return true;
}

void UpdateJobRequest::InternalSwap(UpdateJobRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateJobRequest, force_update_)
      + sizeof(UpdateJobRequest::force_update_)
      - PROTOBUF_FIELD_OFFSET(UpdateJobRequest, new_state_)>(
          reinterpret_cast<char*>(&new_state_),
          reinterpret_cast<char*>(&other->new_state_));
  swap(query_, other->query_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateJobRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateJobResponse::InitAsDefaultInstance() {
}
class UpdateJobResponse::_Internal {
 public:
};

UpdateJobResponse::UpdateJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.UpdateJobResponse)
}
UpdateJobResponse::UpdateJobResponse(const UpdateJobResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:beeremote.UpdateJobResponse)
}

void UpdateJobResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateJobResponse_beeremote_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ok_ = false;
}

UpdateJobResponse::~UpdateJobResponse() {
  // @@protoc_insertion_point(destructor:beeremote.UpdateJobResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateJobResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateJobResponse::ArenaDtor(void* object) {
  UpdateJobResponse* _this = reinterpret_cast< UpdateJobResponse* >(object);
  (void)_this;
}
void UpdateJobResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateJobResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateJobResponse& UpdateJobResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateJobResponse_beeremote_2eproto.base);
  return *internal_default_instance();
}


void UpdateJobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.UpdateJobResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateJobResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.UpdateJobResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .beeremote.JobResult results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateJobResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.UpdateJobResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.UpdateJobResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // repeated .beeremote.JobResult results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.UpdateJobResponse)
  return target;
}

size_t UpdateJobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.UpdateJobResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .beeremote.JobResult results = 3;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateJobResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.UpdateJobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateJobResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateJobResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.UpdateJobResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.UpdateJobResponse)
    MergeFrom(*source);
  }
}

void UpdateJobResponse::MergeFrom(const UpdateJobResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.UpdateJobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
}

void UpdateJobResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.UpdateJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateJobResponse::CopyFrom(const UpdateJobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.UpdateJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateJobResponse::IsInitialized() const {
  return true;
}

void UpdateJobResponse::InternalSwap(UpdateJobResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ok_, other->ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateJobResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetJobsRequest_QueryIdAndPath::InitAsDefaultInstance() {
}
class GetJobsRequest_QueryIdAndPath::_Internal {
 public:
};

GetJobsRequest_QueryIdAndPath::GetJobsRequest_QueryIdAndPath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.GetJobsRequest.QueryIdAndPath)
}
GetJobsRequest_QueryIdAndPath::GetJobsRequest_QueryIdAndPath(const GetJobsRequest_QueryIdAndPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_id().empty()) {
    job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_job_id(),
      GetArena());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:beeremote.GetJobsRequest.QueryIdAndPath)
}

void GetJobsRequest_QueryIdAndPath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetJobsRequest_QueryIdAndPath_beeremote_2eproto.base);
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetJobsRequest_QueryIdAndPath::~GetJobsRequest_QueryIdAndPath() {
  // @@protoc_insertion_point(destructor:beeremote.GetJobsRequest.QueryIdAndPath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetJobsRequest_QueryIdAndPath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetJobsRequest_QueryIdAndPath::ArenaDtor(void* object) {
  GetJobsRequest_QueryIdAndPath* _this = reinterpret_cast< GetJobsRequest_QueryIdAndPath* >(object);
  (void)_this;
}
void GetJobsRequest_QueryIdAndPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetJobsRequest_QueryIdAndPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetJobsRequest_QueryIdAndPath& GetJobsRequest_QueryIdAndPath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetJobsRequest_QueryIdAndPath_beeremote_2eproto.base);
  return *internal_default_instance();
}


void GetJobsRequest_QueryIdAndPath::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.GetJobsRequest.QueryIdAndPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  job_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetJobsRequest_QueryIdAndPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.GetJobsRequest.QueryIdAndPath.job_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.GetJobsRequest.QueryIdAndPath.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetJobsRequest_QueryIdAndPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.GetJobsRequest.QueryIdAndPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string job_id = 1;
  if (this->job_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.GetJobsRequest.QueryIdAndPath.job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job_id(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.GetJobsRequest.QueryIdAndPath.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.GetJobsRequest.QueryIdAndPath)
  return target;
}

size_t GetJobsRequest_QueryIdAndPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.GetJobsRequest.QueryIdAndPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string job_id = 1;
  if (this->job_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetJobsRequest_QueryIdAndPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.GetJobsRequest.QueryIdAndPath)
  GOOGLE_DCHECK_NE(&from, this);
  const GetJobsRequest_QueryIdAndPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetJobsRequest_QueryIdAndPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.GetJobsRequest.QueryIdAndPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.GetJobsRequest.QueryIdAndPath)
    MergeFrom(*source);
  }
}

void GetJobsRequest_QueryIdAndPath::MergeFrom(const GetJobsRequest_QueryIdAndPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.GetJobsRequest.QueryIdAndPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.job_id().size() > 0) {
    _internal_set_job_id(from._internal_job_id());
  }
  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
}

void GetJobsRequest_QueryIdAndPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.GetJobsRequest.QueryIdAndPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetJobsRequest_QueryIdAndPath::CopyFrom(const GetJobsRequest_QueryIdAndPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.GetJobsRequest.QueryIdAndPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetJobsRequest_QueryIdAndPath::IsInitialized() const {
  return true;
}

void GetJobsRequest_QueryIdAndPath::InternalSwap(GetJobsRequest_QueryIdAndPath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  job_id_.Swap(&other->job_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetJobsRequest_QueryIdAndPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetJobsRequest::InitAsDefaultInstance() {
  ::beeremote::_GetJobsRequest_default_instance_.by_job_id_and_path_ = const_cast< ::beeremote::GetJobsRequest_QueryIdAndPath*>(
      ::beeremote::GetJobsRequest_QueryIdAndPath::internal_default_instance());
  ::beeremote::_GetJobsRequest_default_instance_.by_exact_path_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::beeremote::_GetJobsRequest_default_instance_.by_path_prefix_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class GetJobsRequest::_Internal {
 public:
  static const ::beeremote::GetJobsRequest_QueryIdAndPath& by_job_id_and_path(const GetJobsRequest* msg);
};

const ::beeremote::GetJobsRequest_QueryIdAndPath&
GetJobsRequest::_Internal::by_job_id_and_path(const GetJobsRequest* msg) {
  return *msg->query_.by_job_id_and_path_;
}
void GetJobsRequest::set_allocated_by_job_id_and_path(::beeremote::GetJobsRequest_QueryIdAndPath* by_job_id_and_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_query();
  if (by_job_id_and_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(by_job_id_and_path);
    if (message_arena != submessage_arena) {
      by_job_id_and_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, by_job_id_and_path, submessage_arena);
    }
    set_has_by_job_id_and_path();
    query_.by_job_id_and_path_ = by_job_id_and_path;
  }
  // @@protoc_insertion_point(field_set_allocated:beeremote.GetJobsRequest.by_job_id_and_path)
}
GetJobsRequest::GetJobsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.GetJobsRequest)
}
GetJobsRequest::GetJobsRequest(const GetJobsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&include_work_requests_, &from.include_work_requests_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_work_results_) -
    reinterpret_cast<char*>(&include_work_requests_)) + sizeof(update_work_results_));
  clear_has_query();
  switch (from.query_case()) {
    case kByJobIdAndPath: {
      _internal_mutable_by_job_id_and_path()->::beeremote::GetJobsRequest_QueryIdAndPath::MergeFrom(from._internal_by_job_id_and_path());
      break;
    }
    case kByExactPath: {
      _internal_set_by_exact_path(from._internal_by_exact_path());
      break;
    }
    case kByPathPrefix: {
      _internal_set_by_path_prefix(from._internal_by_path_prefix());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:beeremote.GetJobsRequest)
}

void GetJobsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetJobsRequest_beeremote_2eproto.base);
  ::memset(&include_work_requests_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_work_results_) -
      reinterpret_cast<char*>(&include_work_requests_)) + sizeof(update_work_results_));
  clear_has_query();
}

GetJobsRequest::~GetJobsRequest() {
  // @@protoc_insertion_point(destructor:beeremote.GetJobsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetJobsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_query()) {
    clear_query();
  }
}

void GetJobsRequest::ArenaDtor(void* object) {
  GetJobsRequest* _this = reinterpret_cast< GetJobsRequest* >(object);
  (void)_this;
}
void GetJobsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetJobsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetJobsRequest& GetJobsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetJobsRequest_beeremote_2eproto.base);
  return *internal_default_instance();
}


void GetJobsRequest::clear_query() {
// @@protoc_insertion_point(one_of_clear_start:beeremote.GetJobsRequest)
  switch (query_case()) {
    case kByJobIdAndPath: {
      if (GetArena() == nullptr) {
        delete query_.by_job_id_and_path_;
      }
      break;
    }
    case kByExactPath: {
      query_.by_exact_path_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kByPathPrefix: {
      query_.by_path_prefix_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = QUERY_NOT_SET;
}


void GetJobsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.GetJobsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&include_work_requests_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_work_results_) -
      reinterpret_cast<char*>(&include_work_requests_)) + sizeof(update_work_results_));
  clear_query();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetJobsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .beeremote.GetJobsRequest.QueryIdAndPath by_job_id_and_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_by_job_id_and_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string by_exact_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_by_exact_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.GetJobsRequest.by_exact_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string by_path_prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_by_path_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.GetJobsRequest.by_path_prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_work_requests = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          include_work_requests_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_work_results = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          include_work_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_work_results = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          update_work_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetJobsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.GetJobsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .beeremote.GetJobsRequest.QueryIdAndPath by_job_id_and_path = 1;
  if (_internal_has_by_job_id_and_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::by_job_id_and_path(this), target, stream);
  }

  // string by_exact_path = 2;
  if (_internal_has_by_exact_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_by_exact_path().data(), static_cast<int>(this->_internal_by_exact_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.GetJobsRequest.by_exact_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_by_exact_path(), target);
  }

  // string by_path_prefix = 3;
  if (_internal_has_by_path_prefix()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_by_path_prefix().data(), static_cast<int>(this->_internal_by_path_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.GetJobsRequest.by_path_prefix");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_by_path_prefix(), target);
  }

  // bool include_work_requests = 4;
  if (this->include_work_requests() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_include_work_requests(), target);
  }

  // bool include_work_results = 5;
  if (this->include_work_results() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_include_work_results(), target);
  }

  // bool update_work_results = 6;
  if (this->update_work_results() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_update_work_results(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.GetJobsRequest)
  return target;
}

size_t GetJobsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.GetJobsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool include_work_requests = 4;
  if (this->include_work_requests() != 0) {
    total_size += 1 + 1;
  }

  // bool include_work_results = 5;
  if (this->include_work_results() != 0) {
    total_size += 1 + 1;
  }

  // bool update_work_results = 6;
  if (this->update_work_results() != 0) {
    total_size += 1 + 1;
  }

  switch (query_case()) {
    // .beeremote.GetJobsRequest.QueryIdAndPath by_job_id_and_path = 1;
    case kByJobIdAndPath: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.by_job_id_and_path_);
      break;
    }
    // string by_exact_path = 2;
    case kByExactPath: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_by_exact_path());
      break;
    }
    // string by_path_prefix = 3;
    case kByPathPrefix: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_by_path_prefix());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetJobsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.GetJobsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetJobsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetJobsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.GetJobsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.GetJobsRequest)
    MergeFrom(*source);
  }
}

void GetJobsRequest::MergeFrom(const GetJobsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.GetJobsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.include_work_requests() != 0) {
    _internal_set_include_work_requests(from._internal_include_work_requests());
  }
  if (from.include_work_results() != 0) {
    _internal_set_include_work_results(from._internal_include_work_results());
  }
  if (from.update_work_results() != 0) {
    _internal_set_update_work_results(from._internal_update_work_results());
  }
  switch (from.query_case()) {
    case kByJobIdAndPath: {
      _internal_mutable_by_job_id_and_path()->::beeremote::GetJobsRequest_QueryIdAndPath::MergeFrom(from._internal_by_job_id_and_path());
      break;
    }
    case kByExactPath: {
      _internal_set_by_exact_path(from._internal_by_exact_path());
      break;
    }
    case kByPathPrefix: {
      _internal_set_by_path_prefix(from._internal_by_path_prefix());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
}

void GetJobsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.GetJobsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetJobsRequest::CopyFrom(const GetJobsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.GetJobsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetJobsRequest::IsInitialized() const {
  return true;
}

void GetJobsRequest::InternalSwap(GetJobsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetJobsRequest, update_work_results_)
      + sizeof(GetJobsRequest::update_work_results_)
      - PROTOBUF_FIELD_OFFSET(GetJobsRequest, include_work_requests_)>(
          reinterpret_cast<char*>(&include_work_requests_),
          reinterpret_cast<char*>(&other->include_work_requests_));
  swap(query_, other->query_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetJobsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetJobsResponse::InitAsDefaultInstance() {
}
class GetJobsResponse::_Internal {
 public:
};

GetJobsResponse::GetJobsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.GetJobsResponse)
}
GetJobsResponse::GetJobsResponse(const GetJobsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:beeremote.GetJobsResponse)
}

void GetJobsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetJobsResponse_beeremote_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetJobsResponse::~GetJobsResponse() {
  // @@protoc_insertion_point(destructor:beeremote.GetJobsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetJobsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetJobsResponse::ArenaDtor(void* object) {
  GetJobsResponse* _this = reinterpret_cast< GetJobsResponse* >(object);
  (void)_this;
}
void GetJobsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetJobsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetJobsResponse& GetJobsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetJobsResponse_beeremote_2eproto.base);
  return *internal_default_instance();
}


void GetJobsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.GetJobsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetJobsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.GetJobsResponse.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .beeremote.JobResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetJobsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.GetJobsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.GetJobsResponse.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // repeated .beeremote.JobResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.GetJobsResponse)
  return target;
}

size_t GetJobsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.GetJobsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .beeremote.JobResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetJobsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.GetJobsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetJobsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetJobsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.GetJobsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.GetJobsResponse)
    MergeFrom(*source);
  }
}

void GetJobsResponse::MergeFrom(const GetJobsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.GetJobsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
}

void GetJobsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.GetJobsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetJobsResponse::CopyFrom(const GetJobsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.GetJobsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetJobsResponse::IsInitialized() const {
  return true;
}

void GetJobsResponse::InternalSwap(GetJobsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetJobsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateWorkRequest::InitAsDefaultInstance() {
  ::beeremote::_UpdateWorkRequest_default_instance_._instance.get_mutable()->work_ = const_cast< ::flex::Work*>(
      ::flex::Work::internal_default_instance());
}
class UpdateWorkRequest::_Internal {
 public:
  static const ::flex::Work& work(const UpdateWorkRequest* msg);
};

const ::flex::Work&
UpdateWorkRequest::_Internal::work(const UpdateWorkRequest* msg) {
  return *msg->work_;
}
void UpdateWorkRequest::clear_work() {
  if (GetArena() == nullptr && work_ != nullptr) {
    delete work_;
  }
  work_ = nullptr;
}
UpdateWorkRequest::UpdateWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.UpdateWorkRequest)
}
UpdateWorkRequest::UpdateWorkRequest(const UpdateWorkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_work()) {
    work_ = new ::flex::Work(*from.work_);
  } else {
    work_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:beeremote.UpdateWorkRequest)
}

void UpdateWorkRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateWorkRequest_beeremote_2eproto.base);
  work_ = nullptr;
}

UpdateWorkRequest::~UpdateWorkRequest() {
  // @@protoc_insertion_point(destructor:beeremote.UpdateWorkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateWorkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete work_;
}

void UpdateWorkRequest::ArenaDtor(void* object) {
  UpdateWorkRequest* _this = reinterpret_cast< UpdateWorkRequest* >(object);
  (void)_this;
}
void UpdateWorkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateWorkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateWorkRequest& UpdateWorkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateWorkRequest_beeremote_2eproto.base);
  return *internal_default_instance();
}


void UpdateWorkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.UpdateWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && work_ != nullptr) {
    delete work_;
  }
  work_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateWorkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flex.Work work = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_work(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateWorkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.UpdateWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flex.Work work = 1;
  if (this->has_work()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::work(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.UpdateWorkRequest)
  return target;
}

size_t UpdateWorkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.UpdateWorkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flex.Work work = 1;
  if (this->has_work()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *work_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateWorkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.UpdateWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateWorkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateWorkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.UpdateWorkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.UpdateWorkRequest)
    MergeFrom(*source);
  }
}

void UpdateWorkRequest::MergeFrom(const UpdateWorkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.UpdateWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_work()) {
    _internal_mutable_work()->::flex::Work::MergeFrom(from._internal_work());
  }
}

void UpdateWorkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.UpdateWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateWorkRequest::CopyFrom(const UpdateWorkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.UpdateWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateWorkRequest::IsInitialized() const {
  return true;
}

void UpdateWorkRequest::InternalSwap(UpdateWorkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(work_, other->work_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateWorkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateWorkResponse::InitAsDefaultInstance() {
}
class UpdateWorkResponse::_Internal {
 public:
};

UpdateWorkResponse::UpdateWorkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.UpdateWorkResponse)
}
UpdateWorkResponse::UpdateWorkResponse(const UpdateWorkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:beeremote.UpdateWorkResponse)
}

void UpdateWorkResponse::SharedCtor() {
}

UpdateWorkResponse::~UpdateWorkResponse() {
  // @@protoc_insertion_point(destructor:beeremote.UpdateWorkResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateWorkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateWorkResponse::ArenaDtor(void* object) {
  UpdateWorkResponse* _this = reinterpret_cast< UpdateWorkResponse* >(object);
  (void)_this;
}
void UpdateWorkResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateWorkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateWorkResponse& UpdateWorkResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateWorkResponse_beeremote_2eproto.base);
  return *internal_default_instance();
}


void UpdateWorkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.UpdateWorkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateWorkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateWorkResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.UpdateWorkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.UpdateWorkResponse)
  return target;
}

size_t UpdateWorkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.UpdateWorkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateWorkResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.UpdateWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateWorkResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateWorkResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.UpdateWorkResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.UpdateWorkResponse)
    MergeFrom(*source);
  }
}

void UpdateWorkResponse::MergeFrom(const UpdateWorkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.UpdateWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateWorkResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.UpdateWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateWorkResponse::CopyFrom(const UpdateWorkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.UpdateWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateWorkResponse::IsInitialized() const {
  return true;
}

void UpdateWorkResponse::InternalSwap(UpdateWorkResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateWorkResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace beeremote
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::beeremote::SubmitJobRequest* Arena::CreateMaybeMessage< ::beeremote::SubmitJobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::SubmitJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::SubmitJobResponse* Arena::CreateMaybeMessage< ::beeremote::SubmitJobResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::SubmitJobResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::JobRequest* Arena::CreateMaybeMessage< ::beeremote::JobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::JobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::Job_Status* Arena::CreateMaybeMessage< ::beeremote::Job_Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::Job_Status >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::Job* Arena::CreateMaybeMessage< ::beeremote::Job >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::Job >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::JobResult_WorkResult* Arena::CreateMaybeMessage< ::beeremote::JobResult_WorkResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::JobResult_WorkResult >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::JobResult* Arena::CreateMaybeMessage< ::beeremote::JobResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::JobResult >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::UpdateJobRequest_QueryIdAndPath* Arena::CreateMaybeMessage< ::beeremote::UpdateJobRequest_QueryIdAndPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::UpdateJobRequest_QueryIdAndPath >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::UpdateJobRequest* Arena::CreateMaybeMessage< ::beeremote::UpdateJobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::UpdateJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::UpdateJobResponse* Arena::CreateMaybeMessage< ::beeremote::UpdateJobResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::UpdateJobResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::GetJobsRequest_QueryIdAndPath* Arena::CreateMaybeMessage< ::beeremote::GetJobsRequest_QueryIdAndPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::GetJobsRequest_QueryIdAndPath >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::GetJobsRequest* Arena::CreateMaybeMessage< ::beeremote::GetJobsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::GetJobsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::GetJobsResponse* Arena::CreateMaybeMessage< ::beeremote::GetJobsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::GetJobsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::UpdateWorkRequest* Arena::CreateMaybeMessage< ::beeremote::UpdateWorkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::UpdateWorkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::UpdateWorkResponse* Arena::CreateMaybeMessage< ::beeremote::UpdateWorkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::UpdateWorkResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
