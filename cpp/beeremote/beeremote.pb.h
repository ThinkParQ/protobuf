// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beeremote.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_beeremote_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_beeremote_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flex/flex.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_beeremote_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_beeremote_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_beeremote_2eproto;
namespace beeremote {
class GetJobsRequest;
class GetJobsRequestDefaultTypeInternal;
extern GetJobsRequestDefaultTypeInternal _GetJobsRequest_default_instance_;
class GetJobsRequest_QueryIdAndPath;
class GetJobsRequest_QueryIdAndPathDefaultTypeInternal;
extern GetJobsRequest_QueryIdAndPathDefaultTypeInternal _GetJobsRequest_QueryIdAndPath_default_instance_;
class GetJobsResponse;
class GetJobsResponseDefaultTypeInternal;
extern GetJobsResponseDefaultTypeInternal _GetJobsResponse_default_instance_;
class Job;
class JobDefaultTypeInternal;
extern JobDefaultTypeInternal _Job_default_instance_;
class JobRequest;
class JobRequestDefaultTypeInternal;
extern JobRequestDefaultTypeInternal _JobRequest_default_instance_;
class JobResult;
class JobResultDefaultTypeInternal;
extern JobResultDefaultTypeInternal _JobResult_default_instance_;
class JobResult_WorkResult;
class JobResult_WorkResultDefaultTypeInternal;
extern JobResult_WorkResultDefaultTypeInternal _JobResult_WorkResult_default_instance_;
class Job_Status;
class Job_StatusDefaultTypeInternal;
extern Job_StatusDefaultTypeInternal _Job_Status_default_instance_;
class SubmitJobRequest;
class SubmitJobRequestDefaultTypeInternal;
extern SubmitJobRequestDefaultTypeInternal _SubmitJobRequest_default_instance_;
class SubmitJobResponse;
class SubmitJobResponseDefaultTypeInternal;
extern SubmitJobResponseDefaultTypeInternal _SubmitJobResponse_default_instance_;
class UpdateJobRequest;
class UpdateJobRequestDefaultTypeInternal;
extern UpdateJobRequestDefaultTypeInternal _UpdateJobRequest_default_instance_;
class UpdateJobRequest_QueryIdAndPath;
class UpdateJobRequest_QueryIdAndPathDefaultTypeInternal;
extern UpdateJobRequest_QueryIdAndPathDefaultTypeInternal _UpdateJobRequest_QueryIdAndPath_default_instance_;
class UpdateJobResponse;
class UpdateJobResponseDefaultTypeInternal;
extern UpdateJobResponseDefaultTypeInternal _UpdateJobResponse_default_instance_;
class UpdateWorkRequest;
class UpdateWorkRequestDefaultTypeInternal;
extern UpdateWorkRequestDefaultTypeInternal _UpdateWorkRequest_default_instance_;
class UpdateWorkResponse;
class UpdateWorkResponseDefaultTypeInternal;
extern UpdateWorkResponseDefaultTypeInternal _UpdateWorkResponse_default_instance_;
}  // namespace beeremote
PROTOBUF_NAMESPACE_OPEN
template<> ::beeremote::GetJobsRequest* Arena::CreateMaybeMessage<::beeremote::GetJobsRequest>(Arena*);
template<> ::beeremote::GetJobsRequest_QueryIdAndPath* Arena::CreateMaybeMessage<::beeremote::GetJobsRequest_QueryIdAndPath>(Arena*);
template<> ::beeremote::GetJobsResponse* Arena::CreateMaybeMessage<::beeremote::GetJobsResponse>(Arena*);
template<> ::beeremote::Job* Arena::CreateMaybeMessage<::beeremote::Job>(Arena*);
template<> ::beeremote::JobRequest* Arena::CreateMaybeMessage<::beeremote::JobRequest>(Arena*);
template<> ::beeremote::JobResult* Arena::CreateMaybeMessage<::beeremote::JobResult>(Arena*);
template<> ::beeremote::JobResult_WorkResult* Arena::CreateMaybeMessage<::beeremote::JobResult_WorkResult>(Arena*);
template<> ::beeremote::Job_Status* Arena::CreateMaybeMessage<::beeremote::Job_Status>(Arena*);
template<> ::beeremote::SubmitJobRequest* Arena::CreateMaybeMessage<::beeremote::SubmitJobRequest>(Arena*);
template<> ::beeremote::SubmitJobResponse* Arena::CreateMaybeMessage<::beeremote::SubmitJobResponse>(Arena*);
template<> ::beeremote::UpdateJobRequest* Arena::CreateMaybeMessage<::beeremote::UpdateJobRequest>(Arena*);
template<> ::beeremote::UpdateJobRequest_QueryIdAndPath* Arena::CreateMaybeMessage<::beeremote::UpdateJobRequest_QueryIdAndPath>(Arena*);
template<> ::beeremote::UpdateJobResponse* Arena::CreateMaybeMessage<::beeremote::UpdateJobResponse>(Arena*);
template<> ::beeremote::UpdateWorkRequest* Arena::CreateMaybeMessage<::beeremote::UpdateWorkRequest>(Arena*);
template<> ::beeremote::UpdateWorkResponse* Arena::CreateMaybeMessage<::beeremote::UpdateWorkResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace beeremote {

enum Job_State : int {
  Job_State_UNSPECIFIED = 0,
  Job_State_UNKNOWN = 1,
  Job_State_UNASSIGNED = 2,
  Job_State_SCHEDULED = 3,
  Job_State_RUNNING = 4,
  Job_State_ERROR = 6,
  Job_State_FAILED = 7,
  Job_State_CANCELLED = 8,
  Job_State_COMPLETED = 9,
  Job_State_Job_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Job_State_Job_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Job_State_IsValid(int value);
constexpr Job_State Job_State_State_MIN = Job_State_UNSPECIFIED;
constexpr Job_State Job_State_State_MAX = Job_State_COMPLETED;
constexpr int Job_State_State_ARRAYSIZE = Job_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Job_State_descriptor();
template<typename T>
inline const std::string& Job_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Job_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Job_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Job_State_descriptor(), enum_t_value);
}
inline bool Job_State_Parse(
    const std::string& name, Job_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Job_State>(
    Job_State_descriptor(), name, value);
}
enum UpdateJobRequest_NewState : int {
  UpdateJobRequest_NewState_UNSPECIFIED = 0,
  UpdateJobRequest_NewState_CANCELLED = 1,
  UpdateJobRequest_NewState_DELETED = 2,
  UpdateJobRequest_NewState_UpdateJobRequest_NewState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UpdateJobRequest_NewState_UpdateJobRequest_NewState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UpdateJobRequest_NewState_IsValid(int value);
constexpr UpdateJobRequest_NewState UpdateJobRequest_NewState_NewState_MIN = UpdateJobRequest_NewState_UNSPECIFIED;
constexpr UpdateJobRequest_NewState UpdateJobRequest_NewState_NewState_MAX = UpdateJobRequest_NewState_DELETED;
constexpr int UpdateJobRequest_NewState_NewState_ARRAYSIZE = UpdateJobRequest_NewState_NewState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateJobRequest_NewState_descriptor();
template<typename T>
inline const std::string& UpdateJobRequest_NewState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateJobRequest_NewState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateJobRequest_NewState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdateJobRequest_NewState_descriptor(), enum_t_value);
}
inline bool UpdateJobRequest_NewState_Parse(
    const std::string& name, UpdateJobRequest_NewState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateJobRequest_NewState>(
    UpdateJobRequest_NewState_descriptor(), name, value);
}
// ===================================================================

class SubmitJobRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.SubmitJobRequest) */ {
 public:
  inline SubmitJobRequest() : SubmitJobRequest(nullptr) {};
  virtual ~SubmitJobRequest();

  SubmitJobRequest(const SubmitJobRequest& from);
  SubmitJobRequest(SubmitJobRequest&& from) noexcept
    : SubmitJobRequest() {
    *this = ::std::move(from);
  }

  inline SubmitJobRequest& operator=(const SubmitJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitJobRequest& operator=(SubmitJobRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmitJobRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitJobRequest*>(
               &_SubmitJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubmitJobRequest& a, SubmitJobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitJobRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitJobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitJobRequest* New() const final {
    return CreateMaybeMessage<SubmitJobRequest>(nullptr);
  }

  SubmitJobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitJobRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitJobRequest& from);
  void MergeFrom(const SubmitJobRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitJobRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.SubmitJobRequest";
  }
  protected:
  explicit SubmitJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // .beeremote.JobRequest request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::beeremote::JobRequest& request() const;
  ::beeremote::JobRequest* release_request();
  ::beeremote::JobRequest* mutable_request();
  void set_allocated_request(::beeremote::JobRequest* request);
  private:
  const ::beeremote::JobRequest& _internal_request() const;
  ::beeremote::JobRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::beeremote::JobRequest* request);
  ::beeremote::JobRequest* unsafe_arena_release_request();

  // @@protoc_insertion_point(class_scope:beeremote.SubmitJobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::beeremote::JobRequest* request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class SubmitJobResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.SubmitJobResponse) */ {
 public:
  inline SubmitJobResponse() : SubmitJobResponse(nullptr) {};
  virtual ~SubmitJobResponse();

  SubmitJobResponse(const SubmitJobResponse& from);
  SubmitJobResponse(SubmitJobResponse&& from) noexcept
    : SubmitJobResponse() {
    *this = ::std::move(from);
  }

  inline SubmitJobResponse& operator=(const SubmitJobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitJobResponse& operator=(SubmitJobResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitJobResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmitJobResponse* internal_default_instance() {
    return reinterpret_cast<const SubmitJobResponse*>(
               &_SubmitJobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SubmitJobResponse& a, SubmitJobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitJobResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitJobResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitJobResponse* New() const final {
    return CreateMaybeMessage<SubmitJobResponse>(nullptr);
  }

  SubmitJobResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitJobResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitJobResponse& from);
  void MergeFrom(const SubmitJobResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitJobResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.SubmitJobResponse";
  }
  protected:
  explicit SubmitJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .beeremote.JobResult result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::beeremote::JobResult& result() const;
  ::beeremote::JobResult* release_result();
  ::beeremote::JobResult* mutable_result();
  void set_allocated_result(::beeremote::JobResult* result);
  private:
  const ::beeremote::JobResult& _internal_result() const;
  ::beeremote::JobResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::beeremote::JobResult* result);
  ::beeremote::JobResult* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:beeremote.SubmitJobResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::beeremote::JobResult* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class JobRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.JobRequest) */ {
 public:
  inline JobRequest() : JobRequest(nullptr) {};
  virtual ~JobRequest();

  JobRequest(const JobRequest& from);
  JobRequest(JobRequest&& from) noexcept
    : JobRequest() {
    *this = ::std::move(from);
  }

  inline JobRequest& operator=(const JobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobRequest& operator=(JobRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobRequest& default_instance();

  enum TypeCase {
    kSync = 10,
    kMock = 11,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobRequest* internal_default_instance() {
    return reinterpret_cast<const JobRequest*>(
               &_JobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JobRequest& a, JobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JobRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobRequest* New() const final {
    return CreateMaybeMessage<JobRequest>(nullptr);
  }

  JobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobRequest& from);
  void MergeFrom(const JobRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.JobRequest";
  }
  protected:
  explicit JobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kNameFieldNumber = 2,
    kRemoteStorageTargetFieldNumber = 4,
    kPriorityFieldNumber = 3,
    kSyncFieldNumber = 10,
    kMockFieldNumber = 11,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string remote_storage_target = 4;
  void clear_remote_storage_target();
  const std::string& remote_storage_target() const;
  void set_remote_storage_target(const std::string& value);
  void set_remote_storage_target(std::string&& value);
  void set_remote_storage_target(const char* value);
  void set_remote_storage_target(const char* value, size_t size);
  std::string* mutable_remote_storage_target();
  std::string* release_remote_storage_target();
  void set_allocated_remote_storage_target(std::string* remote_storage_target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_remote_storage_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_remote_storage_target(
      std::string* remote_storage_target);
  private:
  const std::string& _internal_remote_storage_target() const;
  void _internal_set_remote_storage_target(const std::string& value);
  std::string* _internal_mutable_remote_storage_target();
  public:

  // int32 priority = 3;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .flex.SyncJob sync = 10;
  bool has_sync() const;
  private:
  bool _internal_has_sync() const;
  public:
  void clear_sync();
  const ::flex::SyncJob& sync() const;
  ::flex::SyncJob* release_sync();
  ::flex::SyncJob* mutable_sync();
  void set_allocated_sync(::flex::SyncJob* sync);
  private:
  const ::flex::SyncJob& _internal_sync() const;
  ::flex::SyncJob* _internal_mutable_sync();
  public:
  void unsafe_arena_set_allocated_sync(
      ::flex::SyncJob* sync);
  ::flex::SyncJob* unsafe_arena_release_sync();

  // .flex.MockJob mock = 11;
  bool has_mock() const;
  private:
  bool _internal_has_mock() const;
  public:
  void clear_mock();
  const ::flex::MockJob& mock() const;
  ::flex::MockJob* release_mock();
  ::flex::MockJob* mutable_mock();
  void set_allocated_mock(::flex::MockJob* mock);
  private:
  const ::flex::MockJob& _internal_mock() const;
  ::flex::MockJob* _internal_mutable_mock();
  public:
  void unsafe_arena_set_allocated_mock(
      ::flex::MockJob* mock);
  ::flex::MockJob* unsafe_arena_release_mock();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:beeremote.JobRequest)
 private:
  class _Internal;
  void set_has_sync();
  void set_has_mock();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_storage_target_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  union TypeUnion {
    TypeUnion() {}
    ::flex::SyncJob* sync_;
    ::flex::MockJob* mock_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class Job_Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.Job.Status) */ {
 public:
  inline Job_Status() : Job_Status(nullptr) {};
  virtual ~Job_Status();

  Job_Status(const Job_Status& from);
  Job_Status(Job_Status&& from) noexcept
    : Job_Status() {
    *this = ::std::move(from);
  }

  inline Job_Status& operator=(const Job_Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Job_Status& operator=(Job_Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Job_Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Job_Status* internal_default_instance() {
    return reinterpret_cast<const Job_Status*>(
               &_Job_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Job_Status& a, Job_Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Job_Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Job_Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Job_Status* New() const final {
    return CreateMaybeMessage<Job_Status>(nullptr);
  }

  Job_Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Job_Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Job_Status& from);
  void MergeFrom(const Job_Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Job_Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.Job.Status";
  }
  protected:
  explicit Job_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kUpdatedFieldNumber = 3,
    kStateFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .google.protobuf.Timestamp updated = 3;
  bool has_updated() const;
  private:
  bool _internal_has_updated() const;
  public:
  void clear_updated();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated();
  void set_allocated_updated(PROTOBUF_NAMESPACE_ID::Timestamp* updated);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated();
  public:
  void unsafe_arena_set_allocated_updated(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated();

  // .beeremote.Job.State state = 1;
  void clear_state();
  ::beeremote::Job_State state() const;
  void set_state(::beeremote::Job_State value);
  private:
  ::beeremote::Job_State _internal_state() const;
  void _internal_set_state(::beeremote::Job_State value);
  public:

  // @@protoc_insertion_point(class_scope:beeremote.Job.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class Job PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.Job) */ {
 public:
  inline Job() : Job(nullptr) {};
  virtual ~Job();

  Job(const Job& from);
  Job(Job&& from) noexcept
    : Job() {
    *this = ::std::move(from);
  }

  inline Job& operator=(const Job& from) {
    CopyFrom(from);
    return *this;
  }
  inline Job& operator=(Job&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Job& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Job* internal_default_instance() {
    return reinterpret_cast<const Job*>(
               &_Job_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Job& a, Job& b) {
    a.Swap(&b);
  }
  inline void Swap(Job* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Job* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Job* New() const final {
    return CreateMaybeMessage<Job>(nullptr);
  }

  Job* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Job>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Job& from);
  void MergeFrom(const Job& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Job* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.Job";
  }
  protected:
  explicit Job(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Job_Status Status;

  typedef Job_State State;
  static constexpr State UNSPECIFIED =
    Job_State_UNSPECIFIED;
  static constexpr State UNKNOWN =
    Job_State_UNKNOWN;
  static constexpr State UNASSIGNED =
    Job_State_UNASSIGNED;
  static constexpr State SCHEDULED =
    Job_State_SCHEDULED;
  static constexpr State RUNNING =
    Job_State_RUNNING;
  static constexpr State ERROR =
    Job_State_ERROR;
  static constexpr State FAILED =
    Job_State_FAILED;
  static constexpr State CANCELLED =
    Job_State_CANCELLED;
  static constexpr State COMPLETED =
    Job_State_COMPLETED;
  static inline bool State_IsValid(int value) {
    return Job_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Job_State_State_MIN;
  static constexpr State State_MAX =
    Job_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Job_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Job_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Job_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return Job_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kExternalIdFieldNumber = 5,
    kRequestFieldNumber = 2,
    kCreatedFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string external_id = 5;
  void clear_external_id();
  const std::string& external_id() const;
  void set_external_id(const std::string& value);
  void set_external_id(std::string&& value);
  void set_external_id(const char* value);
  void set_external_id(const char* value, size_t size);
  std::string* mutable_external_id();
  std::string* release_external_id();
  void set_allocated_external_id(std::string* external_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_external_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_external_id(
      std::string* external_id);
  private:
  const std::string& _internal_external_id() const;
  void _internal_set_external_id(const std::string& value);
  std::string* _internal_mutable_external_id();
  public:

  // .beeremote.JobRequest request = 2;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::beeremote::JobRequest& request() const;
  ::beeremote::JobRequest* release_request();
  ::beeremote::JobRequest* mutable_request();
  void set_allocated_request(::beeremote::JobRequest* request);
  private:
  const ::beeremote::JobRequest& _internal_request() const;
  ::beeremote::JobRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::beeremote::JobRequest* request);
  ::beeremote::JobRequest* unsafe_arena_release_request();

  // .google.protobuf.Timestamp created = 3;
  bool has_created() const;
  private:
  bool _internal_has_created() const;
  public:
  void clear_created();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created();
  void set_allocated_created(PROTOBUF_NAMESPACE_ID::Timestamp* created);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created();
  public:
  void unsafe_arena_set_allocated_created(
      PROTOBUF_NAMESPACE_ID::Timestamp* created);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created();

  // .beeremote.Job.Status status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::beeremote::Job_Status& status() const;
  ::beeremote::Job_Status* release_status();
  ::beeremote::Job_Status* mutable_status();
  void set_allocated_status(::beeremote::Job_Status* status);
  private:
  const ::beeremote::Job_Status& _internal_status() const;
  ::beeremote::Job_Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::beeremote::Job_Status* status);
  ::beeremote::Job_Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:beeremote.Job)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr external_id_;
  ::beeremote::JobRequest* request_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_;
  ::beeremote::Job_Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class JobResult_WorkResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.JobResult.WorkResult) */ {
 public:
  inline JobResult_WorkResult() : JobResult_WorkResult(nullptr) {};
  virtual ~JobResult_WorkResult();

  JobResult_WorkResult(const JobResult_WorkResult& from);
  JobResult_WorkResult(JobResult_WorkResult&& from) noexcept
    : JobResult_WorkResult() {
    *this = ::std::move(from);
  }

  inline JobResult_WorkResult& operator=(const JobResult_WorkResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobResult_WorkResult& operator=(JobResult_WorkResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobResult_WorkResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobResult_WorkResult* internal_default_instance() {
    return reinterpret_cast<const JobResult_WorkResult*>(
               &_JobResult_WorkResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(JobResult_WorkResult& a, JobResult_WorkResult& b) {
    a.Swap(&b);
  }
  inline void Swap(JobResult_WorkResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobResult_WorkResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobResult_WorkResult* New() const final {
    return CreateMaybeMessage<JobResult_WorkResult>(nullptr);
  }

  JobResult_WorkResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobResult_WorkResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobResult_WorkResult& from);
  void MergeFrom(const JobResult_WorkResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobResult_WorkResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.JobResult.WorkResult";
  }
  protected:
  explicit JobResult_WorkResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignedNodeFieldNumber = 2,
    kAssignedPoolFieldNumber = 3,
    kWorkFieldNumber = 1,
  };
  // string assigned_node = 2;
  void clear_assigned_node();
  const std::string& assigned_node() const;
  void set_assigned_node(const std::string& value);
  void set_assigned_node(std::string&& value);
  void set_assigned_node(const char* value);
  void set_assigned_node(const char* value, size_t size);
  std::string* mutable_assigned_node();
  std::string* release_assigned_node();
  void set_allocated_assigned_node(std::string* assigned_node);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_assigned_node();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_assigned_node(
      std::string* assigned_node);
  private:
  const std::string& _internal_assigned_node() const;
  void _internal_set_assigned_node(const std::string& value);
  std::string* _internal_mutable_assigned_node();
  public:

  // string assigned_pool = 3;
  void clear_assigned_pool();
  const std::string& assigned_pool() const;
  void set_assigned_pool(const std::string& value);
  void set_assigned_pool(std::string&& value);
  void set_assigned_pool(const char* value);
  void set_assigned_pool(const char* value, size_t size);
  std::string* mutable_assigned_pool();
  std::string* release_assigned_pool();
  void set_allocated_assigned_pool(std::string* assigned_pool);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_assigned_pool();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_assigned_pool(
      std::string* assigned_pool);
  private:
  const std::string& _internal_assigned_pool() const;
  void _internal_set_assigned_pool(const std::string& value);
  std::string* _internal_mutable_assigned_pool();
  public:

  // .flex.Work work = 1;
  bool has_work() const;
  private:
  bool _internal_has_work() const;
  public:
  void clear_work();
  const ::flex::Work& work() const;
  ::flex::Work* release_work();
  ::flex::Work* mutable_work();
  void set_allocated_work(::flex::Work* work);
  private:
  const ::flex::Work& _internal_work() const;
  ::flex::Work* _internal_mutable_work();
  public:
  void unsafe_arena_set_allocated_work(
      ::flex::Work* work);
  ::flex::Work* unsafe_arena_release_work();

  // @@protoc_insertion_point(class_scope:beeremote.JobResult.WorkResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assigned_node_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assigned_pool_;
  ::flex::Work* work_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class JobResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.JobResult) */ {
 public:
  inline JobResult() : JobResult(nullptr) {};
  virtual ~JobResult();

  JobResult(const JobResult& from);
  JobResult(JobResult&& from) noexcept
    : JobResult() {
    *this = ::std::move(from);
  }

  inline JobResult& operator=(const JobResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobResult& operator=(JobResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobResult* internal_default_instance() {
    return reinterpret_cast<const JobResult*>(
               &_JobResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(JobResult& a, JobResult& b) {
    a.Swap(&b);
  }
  inline void Swap(JobResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobResult* New() const final {
    return CreateMaybeMessage<JobResult>(nullptr);
  }

  JobResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobResult& from);
  void MergeFrom(const JobResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.JobResult";
  }
  protected:
  explicit JobResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef JobResult_WorkResult WorkResult;

  // accessors -------------------------------------------------------

  enum : int {
    kWorkRequestsFieldNumber = 2,
    kWorkResultsFieldNumber = 3,
    kJobFieldNumber = 1,
  };
  // repeated .flex.WorkRequest work_requests = 2;
  int work_requests_size() const;
  private:
  int _internal_work_requests_size() const;
  public:
  void clear_work_requests();
  ::flex::WorkRequest* mutable_work_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flex::WorkRequest >*
      mutable_work_requests();
  private:
  const ::flex::WorkRequest& _internal_work_requests(int index) const;
  ::flex::WorkRequest* _internal_add_work_requests();
  public:
  const ::flex::WorkRequest& work_requests(int index) const;
  ::flex::WorkRequest* add_work_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flex::WorkRequest >&
      work_requests() const;

  // repeated .beeremote.JobResult.WorkResult work_results = 3;
  int work_results_size() const;
  private:
  int _internal_work_results_size() const;
  public:
  void clear_work_results();
  ::beeremote::JobResult_WorkResult* mutable_work_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResult_WorkResult >*
      mutable_work_results();
  private:
  const ::beeremote::JobResult_WorkResult& _internal_work_results(int index) const;
  ::beeremote::JobResult_WorkResult* _internal_add_work_results();
  public:
  const ::beeremote::JobResult_WorkResult& work_results(int index) const;
  ::beeremote::JobResult_WorkResult* add_work_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResult_WorkResult >&
      work_results() const;

  // .beeremote.Job job = 1;
  bool has_job() const;
  private:
  bool _internal_has_job() const;
  public:
  void clear_job();
  const ::beeremote::Job& job() const;
  ::beeremote::Job* release_job();
  ::beeremote::Job* mutable_job();
  void set_allocated_job(::beeremote::Job* job);
  private:
  const ::beeremote::Job& _internal_job() const;
  ::beeremote::Job* _internal_mutable_job();
  public:
  void unsafe_arena_set_allocated_job(
      ::beeremote::Job* job);
  ::beeremote::Job* unsafe_arena_release_job();

  // @@protoc_insertion_point(class_scope:beeremote.JobResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flex::WorkRequest > work_requests_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResult_WorkResult > work_results_;
  ::beeremote::Job* job_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class UpdateJobRequest_QueryIdAndPath PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.UpdateJobRequest.QueryIdAndPath) */ {
 public:
  inline UpdateJobRequest_QueryIdAndPath() : UpdateJobRequest_QueryIdAndPath(nullptr) {};
  virtual ~UpdateJobRequest_QueryIdAndPath();

  UpdateJobRequest_QueryIdAndPath(const UpdateJobRequest_QueryIdAndPath& from);
  UpdateJobRequest_QueryIdAndPath(UpdateJobRequest_QueryIdAndPath&& from) noexcept
    : UpdateJobRequest_QueryIdAndPath() {
    *this = ::std::move(from);
  }

  inline UpdateJobRequest_QueryIdAndPath& operator=(const UpdateJobRequest_QueryIdAndPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateJobRequest_QueryIdAndPath& operator=(UpdateJobRequest_QueryIdAndPath&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateJobRequest_QueryIdAndPath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateJobRequest_QueryIdAndPath* internal_default_instance() {
    return reinterpret_cast<const UpdateJobRequest_QueryIdAndPath*>(
               &_UpdateJobRequest_QueryIdAndPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateJobRequest_QueryIdAndPath& a, UpdateJobRequest_QueryIdAndPath& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateJobRequest_QueryIdAndPath* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateJobRequest_QueryIdAndPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateJobRequest_QueryIdAndPath* New() const final {
    return CreateMaybeMessage<UpdateJobRequest_QueryIdAndPath>(nullptr);
  }

  UpdateJobRequest_QueryIdAndPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateJobRequest_QueryIdAndPath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateJobRequest_QueryIdAndPath& from);
  void MergeFrom(const UpdateJobRequest_QueryIdAndPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateJobRequest_QueryIdAndPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.UpdateJobRequest.QueryIdAndPath";
  }
  protected:
  explicit UpdateJobRequest_QueryIdAndPath(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobIdFieldNumber = 1,
    kPathFieldNumber = 2,
  };
  // string job_id = 1;
  void clear_job_id();
  const std::string& job_id() const;
  void set_job_id(const std::string& value);
  void set_job_id(std::string&& value);
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  std::string* mutable_job_id();
  std::string* release_job_id();
  void set_allocated_job_id(std::string* job_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_job_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_job_id(
      std::string* job_id);
  private:
  const std::string& _internal_job_id() const;
  void _internal_set_job_id(const std::string& value);
  std::string* _internal_mutable_job_id();
  public:

  // string path = 2;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:beeremote.UpdateJobRequest.QueryIdAndPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class UpdateJobRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.UpdateJobRequest) */ {
 public:
  inline UpdateJobRequest() : UpdateJobRequest(nullptr) {};
  virtual ~UpdateJobRequest();

  UpdateJobRequest(const UpdateJobRequest& from);
  UpdateJobRequest(UpdateJobRequest&& from) noexcept
    : UpdateJobRequest() {
    *this = ::std::move(from);
  }

  inline UpdateJobRequest& operator=(const UpdateJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateJobRequest& operator=(UpdateJobRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateJobRequest& default_instance();

  enum QueryCase {
    kByIdAndPath = 1,
    kByExactPath = 2,
    QUERY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateJobRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateJobRequest*>(
               &_UpdateJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateJobRequest& a, UpdateJobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateJobRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateJobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateJobRequest* New() const final {
    return CreateMaybeMessage<UpdateJobRequest>(nullptr);
  }

  UpdateJobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateJobRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateJobRequest& from);
  void MergeFrom(const UpdateJobRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateJobRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.UpdateJobRequest";
  }
  protected:
  explicit UpdateJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateJobRequest_QueryIdAndPath QueryIdAndPath;

  typedef UpdateJobRequest_NewState NewState;
  static constexpr NewState UNSPECIFIED =
    UpdateJobRequest_NewState_UNSPECIFIED;
  static constexpr NewState CANCELLED =
    UpdateJobRequest_NewState_CANCELLED;
  static constexpr NewState DELETED =
    UpdateJobRequest_NewState_DELETED;
  static inline bool NewState_IsValid(int value) {
    return UpdateJobRequest_NewState_IsValid(value);
  }
  static constexpr NewState NewState_MIN =
    UpdateJobRequest_NewState_NewState_MIN;
  static constexpr NewState NewState_MAX =
    UpdateJobRequest_NewState_NewState_MAX;
  static constexpr int NewState_ARRAYSIZE =
    UpdateJobRequest_NewState_NewState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NewState_descriptor() {
    return UpdateJobRequest_NewState_descriptor();
  }
  template<typename T>
  static inline const std::string& NewState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NewState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NewState_Name.");
    return UpdateJobRequest_NewState_Name(enum_t_value);
  }
  static inline bool NewState_Parse(const std::string& name,
      NewState* value) {
    return UpdateJobRequest_NewState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNewStateFieldNumber = 3,
    kForceUpdateFieldNumber = 4,
    kByIdAndPathFieldNumber = 1,
    kByExactPathFieldNumber = 2,
  };
  // .beeremote.UpdateJobRequest.NewState new_state = 3;
  void clear_new_state();
  ::beeremote::UpdateJobRequest_NewState new_state() const;
  void set_new_state(::beeremote::UpdateJobRequest_NewState value);
  private:
  ::beeremote::UpdateJobRequest_NewState _internal_new_state() const;
  void _internal_set_new_state(::beeremote::UpdateJobRequest_NewState value);
  public:

  // bool force_update = 4;
  void clear_force_update();
  bool force_update() const;
  void set_force_update(bool value);
  private:
  bool _internal_force_update() const;
  void _internal_set_force_update(bool value);
  public:

  // .beeremote.UpdateJobRequest.QueryIdAndPath by_id_and_path = 1;
  bool has_by_id_and_path() const;
  private:
  bool _internal_has_by_id_and_path() const;
  public:
  void clear_by_id_and_path();
  const ::beeremote::UpdateJobRequest_QueryIdAndPath& by_id_and_path() const;
  ::beeremote::UpdateJobRequest_QueryIdAndPath* release_by_id_and_path();
  ::beeremote::UpdateJobRequest_QueryIdAndPath* mutable_by_id_and_path();
  void set_allocated_by_id_and_path(::beeremote::UpdateJobRequest_QueryIdAndPath* by_id_and_path);
  private:
  const ::beeremote::UpdateJobRequest_QueryIdAndPath& _internal_by_id_and_path() const;
  ::beeremote::UpdateJobRequest_QueryIdAndPath* _internal_mutable_by_id_and_path();
  public:
  void unsafe_arena_set_allocated_by_id_and_path(
      ::beeremote::UpdateJobRequest_QueryIdAndPath* by_id_and_path);
  ::beeremote::UpdateJobRequest_QueryIdAndPath* unsafe_arena_release_by_id_and_path();

  // string by_exact_path = 2;
  private:
  bool _internal_has_by_exact_path() const;
  public:
  void clear_by_exact_path();
  const std::string& by_exact_path() const;
  void set_by_exact_path(const std::string& value);
  void set_by_exact_path(std::string&& value);
  void set_by_exact_path(const char* value);
  void set_by_exact_path(const char* value, size_t size);
  std::string* mutable_by_exact_path();
  std::string* release_by_exact_path();
  void set_allocated_by_exact_path(std::string* by_exact_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_by_exact_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_by_exact_path(
      std::string* by_exact_path);
  private:
  const std::string& _internal_by_exact_path() const;
  void _internal_set_by_exact_path(const std::string& value);
  std::string* _internal_mutable_by_exact_path();
  public:

  void clear_query();
  QueryCase query_case() const;
  // @@protoc_insertion_point(class_scope:beeremote.UpdateJobRequest)
 private:
  class _Internal;
  void set_has_by_id_and_path();
  void set_has_by_exact_path();

  inline bool has_query() const;
  inline void clear_has_query();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int new_state_;
  bool force_update_;
  union QueryUnion {
    QueryUnion() {}
    ::beeremote::UpdateJobRequest_QueryIdAndPath* by_id_and_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr by_exact_path_;
  } query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class UpdateJobResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.UpdateJobResponse) */ {
 public:
  inline UpdateJobResponse() : UpdateJobResponse(nullptr) {};
  virtual ~UpdateJobResponse();

  UpdateJobResponse(const UpdateJobResponse& from);
  UpdateJobResponse(UpdateJobResponse&& from) noexcept
    : UpdateJobResponse() {
    *this = ::std::move(from);
  }

  inline UpdateJobResponse& operator=(const UpdateJobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateJobResponse& operator=(UpdateJobResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateJobResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateJobResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateJobResponse*>(
               &_UpdateJobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateJobResponse& a, UpdateJobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateJobResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateJobResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateJobResponse* New() const final {
    return CreateMaybeMessage<UpdateJobResponse>(nullptr);
  }

  UpdateJobResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateJobResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateJobResponse& from);
  void MergeFrom(const UpdateJobResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateJobResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.UpdateJobResponse";
  }
  protected:
  explicit UpdateJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 3,
    kMessageFieldNumber = 2,
    kOkFieldNumber = 1,
  };
  // repeated .beeremote.JobResult results = 3;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::beeremote::JobResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResult >*
      mutable_results();
  private:
  const ::beeremote::JobResult& _internal_results(int index) const;
  ::beeremote::JobResult* _internal_add_results();
  public:
  const ::beeremote::JobResult& results(int index) const;
  ::beeremote::JobResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResult >&
      results() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:beeremote.UpdateJobResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResult > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class GetJobsRequest_QueryIdAndPath PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.GetJobsRequest.QueryIdAndPath) */ {
 public:
  inline GetJobsRequest_QueryIdAndPath() : GetJobsRequest_QueryIdAndPath(nullptr) {};
  virtual ~GetJobsRequest_QueryIdAndPath();

  GetJobsRequest_QueryIdAndPath(const GetJobsRequest_QueryIdAndPath& from);
  GetJobsRequest_QueryIdAndPath(GetJobsRequest_QueryIdAndPath&& from) noexcept
    : GetJobsRequest_QueryIdAndPath() {
    *this = ::std::move(from);
  }

  inline GetJobsRequest_QueryIdAndPath& operator=(const GetJobsRequest_QueryIdAndPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetJobsRequest_QueryIdAndPath& operator=(GetJobsRequest_QueryIdAndPath&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetJobsRequest_QueryIdAndPath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetJobsRequest_QueryIdAndPath* internal_default_instance() {
    return reinterpret_cast<const GetJobsRequest_QueryIdAndPath*>(
               &_GetJobsRequest_QueryIdAndPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetJobsRequest_QueryIdAndPath& a, GetJobsRequest_QueryIdAndPath& b) {
    a.Swap(&b);
  }
  inline void Swap(GetJobsRequest_QueryIdAndPath* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetJobsRequest_QueryIdAndPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetJobsRequest_QueryIdAndPath* New() const final {
    return CreateMaybeMessage<GetJobsRequest_QueryIdAndPath>(nullptr);
  }

  GetJobsRequest_QueryIdAndPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetJobsRequest_QueryIdAndPath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetJobsRequest_QueryIdAndPath& from);
  void MergeFrom(const GetJobsRequest_QueryIdAndPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJobsRequest_QueryIdAndPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.GetJobsRequest.QueryIdAndPath";
  }
  protected:
  explicit GetJobsRequest_QueryIdAndPath(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobIdFieldNumber = 1,
    kPathFieldNumber = 2,
  };
  // string job_id = 1;
  void clear_job_id();
  const std::string& job_id() const;
  void set_job_id(const std::string& value);
  void set_job_id(std::string&& value);
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  std::string* mutable_job_id();
  std::string* release_job_id();
  void set_allocated_job_id(std::string* job_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_job_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_job_id(
      std::string* job_id);
  private:
  const std::string& _internal_job_id() const;
  void _internal_set_job_id(const std::string& value);
  std::string* _internal_mutable_job_id();
  public:

  // string path = 2;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:beeremote.GetJobsRequest.QueryIdAndPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class GetJobsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.GetJobsRequest) */ {
 public:
  inline GetJobsRequest() : GetJobsRequest(nullptr) {};
  virtual ~GetJobsRequest();

  GetJobsRequest(const GetJobsRequest& from);
  GetJobsRequest(GetJobsRequest&& from) noexcept
    : GetJobsRequest() {
    *this = ::std::move(from);
  }

  inline GetJobsRequest& operator=(const GetJobsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetJobsRequest& operator=(GetJobsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetJobsRequest& default_instance();

  enum QueryCase {
    kByJobIdAndPath = 1,
    kByExactPath = 2,
    kByPathPrefix = 3,
    QUERY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetJobsRequest* internal_default_instance() {
    return reinterpret_cast<const GetJobsRequest*>(
               &_GetJobsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetJobsRequest& a, GetJobsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetJobsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetJobsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetJobsRequest* New() const final {
    return CreateMaybeMessage<GetJobsRequest>(nullptr);
  }

  GetJobsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetJobsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetJobsRequest& from);
  void MergeFrom(const GetJobsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJobsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.GetJobsRequest";
  }
  protected:
  explicit GetJobsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetJobsRequest_QueryIdAndPath QueryIdAndPath;

  // accessors -------------------------------------------------------

  enum : int {
    kIncludeWorkRequestsFieldNumber = 4,
    kIncludeWorkResultsFieldNumber = 5,
    kUpdateWorkResultsFieldNumber = 6,
    kByJobIdAndPathFieldNumber = 1,
    kByExactPathFieldNumber = 2,
    kByPathPrefixFieldNumber = 3,
  };
  // bool include_work_requests = 4;
  void clear_include_work_requests();
  bool include_work_requests() const;
  void set_include_work_requests(bool value);
  private:
  bool _internal_include_work_requests() const;
  void _internal_set_include_work_requests(bool value);
  public:

  // bool include_work_results = 5;
  void clear_include_work_results();
  bool include_work_results() const;
  void set_include_work_results(bool value);
  private:
  bool _internal_include_work_results() const;
  void _internal_set_include_work_results(bool value);
  public:

  // bool update_work_results = 6;
  void clear_update_work_results();
  bool update_work_results() const;
  void set_update_work_results(bool value);
  private:
  bool _internal_update_work_results() const;
  void _internal_set_update_work_results(bool value);
  public:

  // .beeremote.GetJobsRequest.QueryIdAndPath by_job_id_and_path = 1;
  bool has_by_job_id_and_path() const;
  private:
  bool _internal_has_by_job_id_and_path() const;
  public:
  void clear_by_job_id_and_path();
  const ::beeremote::GetJobsRequest_QueryIdAndPath& by_job_id_and_path() const;
  ::beeremote::GetJobsRequest_QueryIdAndPath* release_by_job_id_and_path();
  ::beeremote::GetJobsRequest_QueryIdAndPath* mutable_by_job_id_and_path();
  void set_allocated_by_job_id_and_path(::beeremote::GetJobsRequest_QueryIdAndPath* by_job_id_and_path);
  private:
  const ::beeremote::GetJobsRequest_QueryIdAndPath& _internal_by_job_id_and_path() const;
  ::beeremote::GetJobsRequest_QueryIdAndPath* _internal_mutable_by_job_id_and_path();
  public:
  void unsafe_arena_set_allocated_by_job_id_and_path(
      ::beeremote::GetJobsRequest_QueryIdAndPath* by_job_id_and_path);
  ::beeremote::GetJobsRequest_QueryIdAndPath* unsafe_arena_release_by_job_id_and_path();

  // string by_exact_path = 2;
  private:
  bool _internal_has_by_exact_path() const;
  public:
  void clear_by_exact_path();
  const std::string& by_exact_path() const;
  void set_by_exact_path(const std::string& value);
  void set_by_exact_path(std::string&& value);
  void set_by_exact_path(const char* value);
  void set_by_exact_path(const char* value, size_t size);
  std::string* mutable_by_exact_path();
  std::string* release_by_exact_path();
  void set_allocated_by_exact_path(std::string* by_exact_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_by_exact_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_by_exact_path(
      std::string* by_exact_path);
  private:
  const std::string& _internal_by_exact_path() const;
  void _internal_set_by_exact_path(const std::string& value);
  std::string* _internal_mutable_by_exact_path();
  public:

  // string by_path_prefix = 3;
  private:
  bool _internal_has_by_path_prefix() const;
  public:
  void clear_by_path_prefix();
  const std::string& by_path_prefix() const;
  void set_by_path_prefix(const std::string& value);
  void set_by_path_prefix(std::string&& value);
  void set_by_path_prefix(const char* value);
  void set_by_path_prefix(const char* value, size_t size);
  std::string* mutable_by_path_prefix();
  std::string* release_by_path_prefix();
  void set_allocated_by_path_prefix(std::string* by_path_prefix);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_by_path_prefix();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_by_path_prefix(
      std::string* by_path_prefix);
  private:
  const std::string& _internal_by_path_prefix() const;
  void _internal_set_by_path_prefix(const std::string& value);
  std::string* _internal_mutable_by_path_prefix();
  public:

  void clear_query();
  QueryCase query_case() const;
  // @@protoc_insertion_point(class_scope:beeremote.GetJobsRequest)
 private:
  class _Internal;
  void set_has_by_job_id_and_path();
  void set_has_by_exact_path();
  void set_has_by_path_prefix();

  inline bool has_query() const;
  inline void clear_has_query();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool include_work_requests_;
  bool include_work_results_;
  bool update_work_results_;
  union QueryUnion {
    QueryUnion() {}
    ::beeremote::GetJobsRequest_QueryIdAndPath* by_job_id_and_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr by_exact_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr by_path_prefix_;
  } query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class GetJobsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.GetJobsResponse) */ {
 public:
  inline GetJobsResponse() : GetJobsResponse(nullptr) {};
  virtual ~GetJobsResponse();

  GetJobsResponse(const GetJobsResponse& from);
  GetJobsResponse(GetJobsResponse&& from) noexcept
    : GetJobsResponse() {
    *this = ::std::move(from);
  }

  inline GetJobsResponse& operator=(const GetJobsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetJobsResponse& operator=(GetJobsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetJobsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetJobsResponse* internal_default_instance() {
    return reinterpret_cast<const GetJobsResponse*>(
               &_GetJobsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetJobsResponse& a, GetJobsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetJobsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetJobsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetJobsResponse* New() const final {
    return CreateMaybeMessage<GetJobsResponse>(nullptr);
  }

  GetJobsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetJobsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetJobsResponse& from);
  void MergeFrom(const GetJobsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJobsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.GetJobsResponse";
  }
  protected:
  explicit GetJobsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kPathFieldNumber = 1,
  };
  // repeated .beeremote.JobResult results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::beeremote::JobResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResult >*
      mutable_results();
  private:
  const ::beeremote::JobResult& _internal_results(int index) const;
  ::beeremote::JobResult* _internal_add_results();
  public:
  const ::beeremote::JobResult& results(int index) const;
  ::beeremote::JobResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResult >&
      results() const;

  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:beeremote.GetJobsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResult > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class UpdateWorkRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.UpdateWorkRequest) */ {
 public:
  inline UpdateWorkRequest() : UpdateWorkRequest(nullptr) {};
  virtual ~UpdateWorkRequest();

  UpdateWorkRequest(const UpdateWorkRequest& from);
  UpdateWorkRequest(UpdateWorkRequest&& from) noexcept
    : UpdateWorkRequest() {
    *this = ::std::move(from);
  }

  inline UpdateWorkRequest& operator=(const UpdateWorkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateWorkRequest& operator=(UpdateWorkRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateWorkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateWorkRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateWorkRequest*>(
               &_UpdateWorkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UpdateWorkRequest& a, UpdateWorkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateWorkRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateWorkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateWorkRequest* New() const final {
    return CreateMaybeMessage<UpdateWorkRequest>(nullptr);
  }

  UpdateWorkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateWorkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateWorkRequest& from);
  void MergeFrom(const UpdateWorkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateWorkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.UpdateWorkRequest";
  }
  protected:
  explicit UpdateWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkFieldNumber = 1,
  };
  // .flex.Work work = 1;
  bool has_work() const;
  private:
  bool _internal_has_work() const;
  public:
  void clear_work();
  const ::flex::Work& work() const;
  ::flex::Work* release_work();
  ::flex::Work* mutable_work();
  void set_allocated_work(::flex::Work* work);
  private:
  const ::flex::Work& _internal_work() const;
  ::flex::Work* _internal_mutable_work();
  public:
  void unsafe_arena_set_allocated_work(
      ::flex::Work* work);
  ::flex::Work* unsafe_arena_release_work();

  // @@protoc_insertion_point(class_scope:beeremote.UpdateWorkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flex::Work* work_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class UpdateWorkResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.UpdateWorkResponse) */ {
 public:
  inline UpdateWorkResponse() : UpdateWorkResponse(nullptr) {};
  virtual ~UpdateWorkResponse();

  UpdateWorkResponse(const UpdateWorkResponse& from);
  UpdateWorkResponse(UpdateWorkResponse&& from) noexcept
    : UpdateWorkResponse() {
    *this = ::std::move(from);
  }

  inline UpdateWorkResponse& operator=(const UpdateWorkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateWorkResponse& operator=(UpdateWorkResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateWorkResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateWorkResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateWorkResponse*>(
               &_UpdateWorkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UpdateWorkResponse& a, UpdateWorkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateWorkResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateWorkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateWorkResponse* New() const final {
    return CreateMaybeMessage<UpdateWorkResponse>(nullptr);
  }

  UpdateWorkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateWorkResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateWorkResponse& from);
  void MergeFrom(const UpdateWorkResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateWorkResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.UpdateWorkResponse";
  }
  protected:
  explicit UpdateWorkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:beeremote.UpdateWorkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beeremote_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubmitJobRequest

// .beeremote.JobRequest request = 1;
inline bool SubmitJobRequest::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool SubmitJobRequest::has_request() const {
  return _internal_has_request();
}
inline void SubmitJobRequest::clear_request() {
  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::beeremote::JobRequest& SubmitJobRequest::_internal_request() const {
  const ::beeremote::JobRequest* p = request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::beeremote::JobRequest*>(
      &::beeremote::_JobRequest_default_instance_);
}
inline const ::beeremote::JobRequest& SubmitJobRequest::request() const {
  // @@protoc_insertion_point(field_get:beeremote.SubmitJobRequest.request)
  return _internal_request();
}
inline void SubmitJobRequest::unsafe_arena_set_allocated_request(
    ::beeremote::JobRequest* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.SubmitJobRequest.request)
}
inline ::beeremote::JobRequest* SubmitJobRequest::release_request() {
  auto temp = unsafe_arena_release_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::beeremote::JobRequest* SubmitJobRequest::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:beeremote.SubmitJobRequest.request)
  
  ::beeremote::JobRequest* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::beeremote::JobRequest* SubmitJobRequest::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::beeremote::JobRequest>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::beeremote::JobRequest* SubmitJobRequest::mutable_request() {
  // @@protoc_insertion_point(field_mutable:beeremote.SubmitJobRequest.request)
  return _internal_mutable_request();
}
inline void SubmitJobRequest::set_allocated_request(::beeremote::JobRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:beeremote.SubmitJobRequest.request)
}

// -------------------------------------------------------------------

// SubmitJobResponse

// .beeremote.JobResult result = 1;
inline bool SubmitJobResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SubmitJobResponse::has_result() const {
  return _internal_has_result();
}
inline void SubmitJobResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::beeremote::JobResult& SubmitJobResponse::_internal_result() const {
  const ::beeremote::JobResult* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::beeremote::JobResult*>(
      &::beeremote::_JobResult_default_instance_);
}
inline const ::beeremote::JobResult& SubmitJobResponse::result() const {
  // @@protoc_insertion_point(field_get:beeremote.SubmitJobResponse.result)
  return _internal_result();
}
inline void SubmitJobResponse::unsafe_arena_set_allocated_result(
    ::beeremote::JobResult* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.SubmitJobResponse.result)
}
inline ::beeremote::JobResult* SubmitJobResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::beeremote::JobResult* SubmitJobResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:beeremote.SubmitJobResponse.result)
  
  ::beeremote::JobResult* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::beeremote::JobResult* SubmitJobResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::beeremote::JobResult>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::beeremote::JobResult* SubmitJobResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:beeremote.SubmitJobResponse.result)
  return _internal_mutable_result();
}
inline void SubmitJobResponse::set_allocated_result(::beeremote::JobResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:beeremote.SubmitJobResponse.result)
}

// -------------------------------------------------------------------

// JobRequest

// string path = 1;
inline void JobRequest::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobRequest::path() const {
  // @@protoc_insertion_point(field_get:beeremote.JobRequest.path)
  return _internal_path();
}
inline void JobRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:beeremote.JobRequest.path)
}
inline std::string* JobRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:beeremote.JobRequest.path)
  return _internal_mutable_path();
}
inline const std::string& JobRequest::_internal_path() const {
  return path_.Get();
}
inline void JobRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobRequest::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.JobRequest.path)
}
inline void JobRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.JobRequest.path)
}
inline void JobRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.JobRequest.path)
}
inline std::string* JobRequest::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobRequest::release_path() {
  // @@protoc_insertion_point(field_release:beeremote.JobRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobRequest.path)
}
inline std::string* JobRequest::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.JobRequest.path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JobRequest::unsafe_arena_set_allocated_path(
    std::string* path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path != nullptr) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.JobRequest.path)
}

// string name = 2;
inline void JobRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobRequest::name() const {
  // @@protoc_insertion_point(field_get:beeremote.JobRequest.name)
  return _internal_name();
}
inline void JobRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:beeremote.JobRequest.name)
}
inline std::string* JobRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:beeremote.JobRequest.name)
  return _internal_mutable_name();
}
inline const std::string& JobRequest::_internal_name() const {
  return name_.Get();
}
inline void JobRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.JobRequest.name)
}
inline void JobRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.JobRequest.name)
}
inline void JobRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.JobRequest.name)
}
inline std::string* JobRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobRequest::release_name() {
  // @@protoc_insertion_point(field_release:beeremote.JobRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobRequest.name)
}
inline std::string* JobRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.JobRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JobRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.JobRequest.name)
}

// int32 priority = 3;
inline void JobRequest::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobRequest::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobRequest::priority() const {
  // @@protoc_insertion_point(field_get:beeremote.JobRequest.priority)
  return _internal_priority();
}
inline void JobRequest::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void JobRequest::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:beeremote.JobRequest.priority)
}

// string remote_storage_target = 4;
inline void JobRequest::clear_remote_storage_target() {
  remote_storage_target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobRequest::remote_storage_target() const {
  // @@protoc_insertion_point(field_get:beeremote.JobRequest.remote_storage_target)
  return _internal_remote_storage_target();
}
inline void JobRequest::set_remote_storage_target(const std::string& value) {
  _internal_set_remote_storage_target(value);
  // @@protoc_insertion_point(field_set:beeremote.JobRequest.remote_storage_target)
}
inline std::string* JobRequest::mutable_remote_storage_target() {
  // @@protoc_insertion_point(field_mutable:beeremote.JobRequest.remote_storage_target)
  return _internal_mutable_remote_storage_target();
}
inline const std::string& JobRequest::_internal_remote_storage_target() const {
  return remote_storage_target_.Get();
}
inline void JobRequest::_internal_set_remote_storage_target(const std::string& value) {
  
  remote_storage_target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobRequest::set_remote_storage_target(std::string&& value) {
  
  remote_storage_target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.JobRequest.remote_storage_target)
}
inline void JobRequest::set_remote_storage_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_storage_target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.JobRequest.remote_storage_target)
}
inline void JobRequest::set_remote_storage_target(const char* value,
    size_t size) {
  
  remote_storage_target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.JobRequest.remote_storage_target)
}
inline std::string* JobRequest::_internal_mutable_remote_storage_target() {
  
  return remote_storage_target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobRequest::release_remote_storage_target() {
  // @@protoc_insertion_point(field_release:beeremote.JobRequest.remote_storage_target)
  return remote_storage_target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobRequest::set_allocated_remote_storage_target(std::string* remote_storage_target) {
  if (remote_storage_target != nullptr) {
    
  } else {
    
  }
  remote_storage_target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_storage_target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobRequest.remote_storage_target)
}
inline std::string* JobRequest::unsafe_arena_release_remote_storage_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.JobRequest.remote_storage_target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return remote_storage_target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JobRequest::unsafe_arena_set_allocated_remote_storage_target(
    std::string* remote_storage_target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (remote_storage_target != nullptr) {
    
  } else {
    
  }
  remote_storage_target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      remote_storage_target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.JobRequest.remote_storage_target)
}

// .flex.SyncJob sync = 10;
inline bool JobRequest::_internal_has_sync() const {
  return type_case() == kSync;
}
inline bool JobRequest::has_sync() const {
  return _internal_has_sync();
}
inline void JobRequest::set_has_sync() {
  _oneof_case_[0] = kSync;
}
inline ::flex::SyncJob* JobRequest::release_sync() {
  // @@protoc_insertion_point(field_release:beeremote.JobRequest.sync)
  if (_internal_has_sync()) {
    clear_has_type();
      ::flex::SyncJob* temp = type_.sync_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.sync_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flex::SyncJob& JobRequest::_internal_sync() const {
  return _internal_has_sync()
      ? *type_.sync_
      : *reinterpret_cast< ::flex::SyncJob*>(&::flex::_SyncJob_default_instance_);
}
inline const ::flex::SyncJob& JobRequest::sync() const {
  // @@protoc_insertion_point(field_get:beeremote.JobRequest.sync)
  return _internal_sync();
}
inline ::flex::SyncJob* JobRequest::unsafe_arena_release_sync() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.JobRequest.sync)
  if (_internal_has_sync()) {
    clear_has_type();
    ::flex::SyncJob* temp = type_.sync_;
    type_.sync_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JobRequest::unsafe_arena_set_allocated_sync(::flex::SyncJob* sync) {
  clear_type();
  if (sync) {
    set_has_sync();
    type_.sync_ = sync;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.JobRequest.sync)
}
inline ::flex::SyncJob* JobRequest::_internal_mutable_sync() {
  if (!_internal_has_sync()) {
    clear_type();
    set_has_sync();
    type_.sync_ = CreateMaybeMessage< ::flex::SyncJob >(GetArena());
  }
  return type_.sync_;
}
inline ::flex::SyncJob* JobRequest::mutable_sync() {
  // @@protoc_insertion_point(field_mutable:beeremote.JobRequest.sync)
  return _internal_mutable_sync();
}

// .flex.MockJob mock = 11;
inline bool JobRequest::_internal_has_mock() const {
  return type_case() == kMock;
}
inline bool JobRequest::has_mock() const {
  return _internal_has_mock();
}
inline void JobRequest::set_has_mock() {
  _oneof_case_[0] = kMock;
}
inline ::flex::MockJob* JobRequest::release_mock() {
  // @@protoc_insertion_point(field_release:beeremote.JobRequest.mock)
  if (_internal_has_mock()) {
    clear_has_type();
      ::flex::MockJob* temp = type_.mock_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.mock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flex::MockJob& JobRequest::_internal_mock() const {
  return _internal_has_mock()
      ? *type_.mock_
      : *reinterpret_cast< ::flex::MockJob*>(&::flex::_MockJob_default_instance_);
}
inline const ::flex::MockJob& JobRequest::mock() const {
  // @@protoc_insertion_point(field_get:beeremote.JobRequest.mock)
  return _internal_mock();
}
inline ::flex::MockJob* JobRequest::unsafe_arena_release_mock() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.JobRequest.mock)
  if (_internal_has_mock()) {
    clear_has_type();
    ::flex::MockJob* temp = type_.mock_;
    type_.mock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JobRequest::unsafe_arena_set_allocated_mock(::flex::MockJob* mock) {
  clear_type();
  if (mock) {
    set_has_mock();
    type_.mock_ = mock;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.JobRequest.mock)
}
inline ::flex::MockJob* JobRequest::_internal_mutable_mock() {
  if (!_internal_has_mock()) {
    clear_type();
    set_has_mock();
    type_.mock_ = CreateMaybeMessage< ::flex::MockJob >(GetArena());
  }
  return type_.mock_;
}
inline ::flex::MockJob* JobRequest::mutable_mock() {
  // @@protoc_insertion_point(field_mutable:beeremote.JobRequest.mock)
  return _internal_mutable_mock();
}

inline bool JobRequest::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void JobRequest::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline JobRequest::TypeCase JobRequest::type_case() const {
  return JobRequest::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Job_Status

// .beeremote.Job.State state = 1;
inline void Job_Status::clear_state() {
  state_ = 0;
}
inline ::beeremote::Job_State Job_Status::_internal_state() const {
  return static_cast< ::beeremote::Job_State >(state_);
}
inline ::beeremote::Job_State Job_Status::state() const {
  // @@protoc_insertion_point(field_get:beeremote.Job.Status.state)
  return _internal_state();
}
inline void Job_Status::_internal_set_state(::beeremote::Job_State value) {
  
  state_ = value;
}
inline void Job_Status::set_state(::beeremote::Job_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:beeremote.Job.Status.state)
}

// string message = 2;
inline void Job_Status::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Job_Status::message() const {
  // @@protoc_insertion_point(field_get:beeremote.Job.Status.message)
  return _internal_message();
}
inline void Job_Status::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:beeremote.Job.Status.message)
}
inline std::string* Job_Status::mutable_message() {
  // @@protoc_insertion_point(field_mutable:beeremote.Job.Status.message)
  return _internal_mutable_message();
}
inline const std::string& Job_Status::_internal_message() const {
  return message_.Get();
}
inline void Job_Status::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Job_Status::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.Job.Status.message)
}
inline void Job_Status::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.Job.Status.message)
}
inline void Job_Status::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.Job.Status.message)
}
inline std::string* Job_Status::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Job_Status::release_message() {
  // @@protoc_insertion_point(field_release:beeremote.Job.Status.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Job_Status::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beeremote.Job.Status.message)
}
inline std::string* Job_Status::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.Job.Status.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Job_Status::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.Job.Status.message)
}

// .google.protobuf.Timestamp updated = 3;
inline bool Job_Status::_internal_has_updated() const {
  return this != internal_default_instance() && updated_ != nullptr;
}
inline bool Job_Status::has_updated() const {
  return _internal_has_updated();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Job_Status::_internal_updated() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Job_Status::updated() const {
  // @@protoc_insertion_point(field_get:beeremote.Job.Status.updated)
  return _internal_updated();
}
inline void Job_Status::unsafe_arena_set_allocated_updated(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_);
  }
  updated_ = updated;
  if (updated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.Job.Status.updated)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Job_Status::release_updated() {
  auto temp = unsafe_arena_release_updated();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Job_Status::unsafe_arena_release_updated() {
  // @@protoc_insertion_point(field_release:beeremote.Job.Status.updated)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_;
  updated_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Job_Status::_internal_mutable_updated() {
  
  if (updated_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_ = p;
  }
  return updated_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Job_Status::mutable_updated() {
  // @@protoc_insertion_point(field_mutable:beeremote.Job.Status.updated)
  return _internal_mutable_updated();
}
inline void Job_Status::set_allocated_updated(PROTOBUF_NAMESPACE_ID::Timestamp* updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_);
  }
  if (updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated)->GetArena();
    if (message_arena != submessage_arena) {
      updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated, submessage_arena);
    }
    
  } else {
    
  }
  updated_ = updated;
  // @@protoc_insertion_point(field_set_allocated:beeremote.Job.Status.updated)
}

// -------------------------------------------------------------------

// Job

// string id = 1;
inline void Job::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Job::id() const {
  // @@protoc_insertion_point(field_get:beeremote.Job.id)
  return _internal_id();
}
inline void Job::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:beeremote.Job.id)
}
inline std::string* Job::mutable_id() {
  // @@protoc_insertion_point(field_mutable:beeremote.Job.id)
  return _internal_mutable_id();
}
inline const std::string& Job::_internal_id() const {
  return id_.Get();
}
inline void Job::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Job::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.Job.id)
}
inline void Job::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.Job.id)
}
inline void Job::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.Job.id)
}
inline std::string* Job::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Job::release_id() {
  // @@protoc_insertion_point(field_release:beeremote.Job.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Job::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beeremote.Job.id)
}
inline std::string* Job::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.Job.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Job::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.Job.id)
}

// .beeremote.JobRequest request = 2;
inline bool Job::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool Job::has_request() const {
  return _internal_has_request();
}
inline void Job::clear_request() {
  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::beeremote::JobRequest& Job::_internal_request() const {
  const ::beeremote::JobRequest* p = request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::beeremote::JobRequest*>(
      &::beeremote::_JobRequest_default_instance_);
}
inline const ::beeremote::JobRequest& Job::request() const {
  // @@protoc_insertion_point(field_get:beeremote.Job.request)
  return _internal_request();
}
inline void Job::unsafe_arena_set_allocated_request(
    ::beeremote::JobRequest* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.Job.request)
}
inline ::beeremote::JobRequest* Job::release_request() {
  auto temp = unsafe_arena_release_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::beeremote::JobRequest* Job::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:beeremote.Job.request)
  
  ::beeremote::JobRequest* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::beeremote::JobRequest* Job::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::beeremote::JobRequest>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::beeremote::JobRequest* Job::mutable_request() {
  // @@protoc_insertion_point(field_mutable:beeremote.Job.request)
  return _internal_mutable_request();
}
inline void Job::set_allocated_request(::beeremote::JobRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:beeremote.Job.request)
}

// .google.protobuf.Timestamp created = 3;
inline bool Job::_internal_has_created() const {
  return this != internal_default_instance() && created_ != nullptr;
}
inline bool Job::has_created() const {
  return _internal_has_created();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Job::_internal_created() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Job::created() const {
  // @@protoc_insertion_point(field_get:beeremote.Job.created)
  return _internal_created();
}
inline void Job::unsafe_arena_set_allocated_created(
    PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  created_ = created;
  if (created) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.Job.created)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Job::release_created() {
  auto temp = unsafe_arena_release_created();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Job::unsafe_arena_release_created() {
  // @@protoc_insertion_point(field_release:beeremote.Job.created)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_;
  created_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Job::_internal_mutable_created() {
  
  if (created_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_ = p;
  }
  return created_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Job::mutable_created() {
  // @@protoc_insertion_point(field_mutable:beeremote.Job.created)
  return _internal_mutable_created();
}
inline void Job::set_allocated_created(PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  if (created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created)->GetArena();
    if (message_arena != submessage_arena) {
      created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created, submessage_arena);
    }
    
  } else {
    
  }
  created_ = created;
  // @@protoc_insertion_point(field_set_allocated:beeremote.Job.created)
}

// .beeremote.Job.Status status = 4;
inline bool Job::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Job::has_status() const {
  return _internal_has_status();
}
inline void Job::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::beeremote::Job_Status& Job::_internal_status() const {
  const ::beeremote::Job_Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::beeremote::Job_Status*>(
      &::beeremote::_Job_Status_default_instance_);
}
inline const ::beeremote::Job_Status& Job::status() const {
  // @@protoc_insertion_point(field_get:beeremote.Job.status)
  return _internal_status();
}
inline void Job::unsafe_arena_set_allocated_status(
    ::beeremote::Job_Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.Job.status)
}
inline ::beeremote::Job_Status* Job::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::beeremote::Job_Status* Job::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:beeremote.Job.status)
  
  ::beeremote::Job_Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::beeremote::Job_Status* Job::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::beeremote::Job_Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::beeremote::Job_Status* Job::mutable_status() {
  // @@protoc_insertion_point(field_mutable:beeremote.Job.status)
  return _internal_mutable_status();
}
inline void Job::set_allocated_status(::beeremote::Job_Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:beeremote.Job.status)
}

// string external_id = 5;
inline void Job::clear_external_id() {
  external_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Job::external_id() const {
  // @@protoc_insertion_point(field_get:beeremote.Job.external_id)
  return _internal_external_id();
}
inline void Job::set_external_id(const std::string& value) {
  _internal_set_external_id(value);
  // @@protoc_insertion_point(field_set:beeremote.Job.external_id)
}
inline std::string* Job::mutable_external_id() {
  // @@protoc_insertion_point(field_mutable:beeremote.Job.external_id)
  return _internal_mutable_external_id();
}
inline const std::string& Job::_internal_external_id() const {
  return external_id_.Get();
}
inline void Job::_internal_set_external_id(const std::string& value) {
  
  external_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Job::set_external_id(std::string&& value) {
  
  external_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.Job.external_id)
}
inline void Job::set_external_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  external_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.Job.external_id)
}
inline void Job::set_external_id(const char* value,
    size_t size) {
  
  external_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.Job.external_id)
}
inline std::string* Job::_internal_mutable_external_id() {
  
  return external_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Job::release_external_id() {
  // @@protoc_insertion_point(field_release:beeremote.Job.external_id)
  return external_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Job::set_allocated_external_id(std::string* external_id) {
  if (external_id != nullptr) {
    
  } else {
    
  }
  external_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), external_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beeremote.Job.external_id)
}
inline std::string* Job::unsafe_arena_release_external_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.Job.external_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return external_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Job::unsafe_arena_set_allocated_external_id(
    std::string* external_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (external_id != nullptr) {
    
  } else {
    
  }
  external_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      external_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.Job.external_id)
}

// -------------------------------------------------------------------

// JobResult_WorkResult

// .flex.Work work = 1;
inline bool JobResult_WorkResult::_internal_has_work() const {
  return this != internal_default_instance() && work_ != nullptr;
}
inline bool JobResult_WorkResult::has_work() const {
  return _internal_has_work();
}
inline const ::flex::Work& JobResult_WorkResult::_internal_work() const {
  const ::flex::Work* p = work_;
  return p != nullptr ? *p : *reinterpret_cast<const ::flex::Work*>(
      &::flex::_Work_default_instance_);
}
inline const ::flex::Work& JobResult_WorkResult::work() const {
  // @@protoc_insertion_point(field_get:beeremote.JobResult.WorkResult.work)
  return _internal_work();
}
inline void JobResult_WorkResult::unsafe_arena_set_allocated_work(
    ::flex::Work* work) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_);
  }
  work_ = work;
  if (work) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.JobResult.WorkResult.work)
}
inline ::flex::Work* JobResult_WorkResult::release_work() {
  auto temp = unsafe_arena_release_work();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::flex::Work* JobResult_WorkResult::unsafe_arena_release_work() {
  // @@protoc_insertion_point(field_release:beeremote.JobResult.WorkResult.work)
  
  ::flex::Work* temp = work_;
  work_ = nullptr;
  return temp;
}
inline ::flex::Work* JobResult_WorkResult::_internal_mutable_work() {
  
  if (work_ == nullptr) {
    auto* p = CreateMaybeMessage<::flex::Work>(GetArena());
    work_ = p;
  }
  return work_;
}
inline ::flex::Work* JobResult_WorkResult::mutable_work() {
  // @@protoc_insertion_point(field_mutable:beeremote.JobResult.WorkResult.work)
  return _internal_mutable_work();
}
inline void JobResult_WorkResult::set_allocated_work(::flex::Work* work) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_);
  }
  if (work) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work)->GetArena();
    if (message_arena != submessage_arena) {
      work = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work, submessage_arena);
    }
    
  } else {
    
  }
  work_ = work;
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobResult.WorkResult.work)
}

// string assigned_node = 2;
inline void JobResult_WorkResult::clear_assigned_node() {
  assigned_node_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobResult_WorkResult::assigned_node() const {
  // @@protoc_insertion_point(field_get:beeremote.JobResult.WorkResult.assigned_node)
  return _internal_assigned_node();
}
inline void JobResult_WorkResult::set_assigned_node(const std::string& value) {
  _internal_set_assigned_node(value);
  // @@protoc_insertion_point(field_set:beeremote.JobResult.WorkResult.assigned_node)
}
inline std::string* JobResult_WorkResult::mutable_assigned_node() {
  // @@protoc_insertion_point(field_mutable:beeremote.JobResult.WorkResult.assigned_node)
  return _internal_mutable_assigned_node();
}
inline const std::string& JobResult_WorkResult::_internal_assigned_node() const {
  return assigned_node_.Get();
}
inline void JobResult_WorkResult::_internal_set_assigned_node(const std::string& value) {
  
  assigned_node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobResult_WorkResult::set_assigned_node(std::string&& value) {
  
  assigned_node_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.JobResult.WorkResult.assigned_node)
}
inline void JobResult_WorkResult::set_assigned_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assigned_node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.JobResult.WorkResult.assigned_node)
}
inline void JobResult_WorkResult::set_assigned_node(const char* value,
    size_t size) {
  
  assigned_node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.JobResult.WorkResult.assigned_node)
}
inline std::string* JobResult_WorkResult::_internal_mutable_assigned_node() {
  
  return assigned_node_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobResult_WorkResult::release_assigned_node() {
  // @@protoc_insertion_point(field_release:beeremote.JobResult.WorkResult.assigned_node)
  return assigned_node_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobResult_WorkResult::set_allocated_assigned_node(std::string* assigned_node) {
  if (assigned_node != nullptr) {
    
  } else {
    
  }
  assigned_node_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assigned_node,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobResult.WorkResult.assigned_node)
}
inline std::string* JobResult_WorkResult::unsafe_arena_release_assigned_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.JobResult.WorkResult.assigned_node)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return assigned_node_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JobResult_WorkResult::unsafe_arena_set_allocated_assigned_node(
    std::string* assigned_node) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (assigned_node != nullptr) {
    
  } else {
    
  }
  assigned_node_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      assigned_node, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.JobResult.WorkResult.assigned_node)
}

// string assigned_pool = 3;
inline void JobResult_WorkResult::clear_assigned_pool() {
  assigned_pool_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobResult_WorkResult::assigned_pool() const {
  // @@protoc_insertion_point(field_get:beeremote.JobResult.WorkResult.assigned_pool)
  return _internal_assigned_pool();
}
inline void JobResult_WorkResult::set_assigned_pool(const std::string& value) {
  _internal_set_assigned_pool(value);
  // @@protoc_insertion_point(field_set:beeremote.JobResult.WorkResult.assigned_pool)
}
inline std::string* JobResult_WorkResult::mutable_assigned_pool() {
  // @@protoc_insertion_point(field_mutable:beeremote.JobResult.WorkResult.assigned_pool)
  return _internal_mutable_assigned_pool();
}
inline const std::string& JobResult_WorkResult::_internal_assigned_pool() const {
  return assigned_pool_.Get();
}
inline void JobResult_WorkResult::_internal_set_assigned_pool(const std::string& value) {
  
  assigned_pool_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobResult_WorkResult::set_assigned_pool(std::string&& value) {
  
  assigned_pool_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.JobResult.WorkResult.assigned_pool)
}
inline void JobResult_WorkResult::set_assigned_pool(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assigned_pool_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.JobResult.WorkResult.assigned_pool)
}
inline void JobResult_WorkResult::set_assigned_pool(const char* value,
    size_t size) {
  
  assigned_pool_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.JobResult.WorkResult.assigned_pool)
}
inline std::string* JobResult_WorkResult::_internal_mutable_assigned_pool() {
  
  return assigned_pool_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobResult_WorkResult::release_assigned_pool() {
  // @@protoc_insertion_point(field_release:beeremote.JobResult.WorkResult.assigned_pool)
  return assigned_pool_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobResult_WorkResult::set_allocated_assigned_pool(std::string* assigned_pool) {
  if (assigned_pool != nullptr) {
    
  } else {
    
  }
  assigned_pool_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assigned_pool,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobResult.WorkResult.assigned_pool)
}
inline std::string* JobResult_WorkResult::unsafe_arena_release_assigned_pool() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.JobResult.WorkResult.assigned_pool)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return assigned_pool_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JobResult_WorkResult::unsafe_arena_set_allocated_assigned_pool(
    std::string* assigned_pool) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (assigned_pool != nullptr) {
    
  } else {
    
  }
  assigned_pool_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      assigned_pool, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.JobResult.WorkResult.assigned_pool)
}

// -------------------------------------------------------------------

// JobResult

// .beeremote.Job job = 1;
inline bool JobResult::_internal_has_job() const {
  return this != internal_default_instance() && job_ != nullptr;
}
inline bool JobResult::has_job() const {
  return _internal_has_job();
}
inline void JobResult::clear_job() {
  if (GetArena() == nullptr && job_ != nullptr) {
    delete job_;
  }
  job_ = nullptr;
}
inline const ::beeremote::Job& JobResult::_internal_job() const {
  const ::beeremote::Job* p = job_;
  return p != nullptr ? *p : *reinterpret_cast<const ::beeremote::Job*>(
      &::beeremote::_Job_default_instance_);
}
inline const ::beeremote::Job& JobResult::job() const {
  // @@protoc_insertion_point(field_get:beeremote.JobResult.job)
  return _internal_job();
}
inline void JobResult::unsafe_arena_set_allocated_job(
    ::beeremote::Job* job) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(job_);
  }
  job_ = job;
  if (job) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.JobResult.job)
}
inline ::beeremote::Job* JobResult::release_job() {
  auto temp = unsafe_arena_release_job();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::beeremote::Job* JobResult::unsafe_arena_release_job() {
  // @@protoc_insertion_point(field_release:beeremote.JobResult.job)
  
  ::beeremote::Job* temp = job_;
  job_ = nullptr;
  return temp;
}
inline ::beeremote::Job* JobResult::_internal_mutable_job() {
  
  if (job_ == nullptr) {
    auto* p = CreateMaybeMessage<::beeremote::Job>(GetArena());
    job_ = p;
  }
  return job_;
}
inline ::beeremote::Job* JobResult::mutable_job() {
  // @@protoc_insertion_point(field_mutable:beeremote.JobResult.job)
  return _internal_mutable_job();
}
inline void JobResult::set_allocated_job(::beeremote::Job* job) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete job_;
  }
  if (job) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(job);
    if (message_arena != submessage_arena) {
      job = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job, submessage_arena);
    }
    
  } else {
    
  }
  job_ = job;
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobResult.job)
}

// repeated .flex.WorkRequest work_requests = 2;
inline int JobResult::_internal_work_requests_size() const {
  return work_requests_.size();
}
inline int JobResult::work_requests_size() const {
  return _internal_work_requests_size();
}
inline ::flex::WorkRequest* JobResult::mutable_work_requests(int index) {
  // @@protoc_insertion_point(field_mutable:beeremote.JobResult.work_requests)
  return work_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flex::WorkRequest >*
JobResult::mutable_work_requests() {
  // @@protoc_insertion_point(field_mutable_list:beeremote.JobResult.work_requests)
  return &work_requests_;
}
inline const ::flex::WorkRequest& JobResult::_internal_work_requests(int index) const {
  return work_requests_.Get(index);
}
inline const ::flex::WorkRequest& JobResult::work_requests(int index) const {
  // @@protoc_insertion_point(field_get:beeremote.JobResult.work_requests)
  return _internal_work_requests(index);
}
inline ::flex::WorkRequest* JobResult::_internal_add_work_requests() {
  return work_requests_.Add();
}
inline ::flex::WorkRequest* JobResult::add_work_requests() {
  // @@protoc_insertion_point(field_add:beeremote.JobResult.work_requests)
  return _internal_add_work_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flex::WorkRequest >&
JobResult::work_requests() const {
  // @@protoc_insertion_point(field_list:beeremote.JobResult.work_requests)
  return work_requests_;
}

// repeated .beeremote.JobResult.WorkResult work_results = 3;
inline int JobResult::_internal_work_results_size() const {
  return work_results_.size();
}
inline int JobResult::work_results_size() const {
  return _internal_work_results_size();
}
inline void JobResult::clear_work_results() {
  work_results_.Clear();
}
inline ::beeremote::JobResult_WorkResult* JobResult::mutable_work_results(int index) {
  // @@protoc_insertion_point(field_mutable:beeremote.JobResult.work_results)
  return work_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResult_WorkResult >*
JobResult::mutable_work_results() {
  // @@protoc_insertion_point(field_mutable_list:beeremote.JobResult.work_results)
  return &work_results_;
}
inline const ::beeremote::JobResult_WorkResult& JobResult::_internal_work_results(int index) const {
  return work_results_.Get(index);
}
inline const ::beeremote::JobResult_WorkResult& JobResult::work_results(int index) const {
  // @@protoc_insertion_point(field_get:beeremote.JobResult.work_results)
  return _internal_work_results(index);
}
inline ::beeremote::JobResult_WorkResult* JobResult::_internal_add_work_results() {
  return work_results_.Add();
}
inline ::beeremote::JobResult_WorkResult* JobResult::add_work_results() {
  // @@protoc_insertion_point(field_add:beeremote.JobResult.work_results)
  return _internal_add_work_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResult_WorkResult >&
JobResult::work_results() const {
  // @@protoc_insertion_point(field_list:beeremote.JobResult.work_results)
  return work_results_;
}

// -------------------------------------------------------------------

// UpdateJobRequest_QueryIdAndPath

// string job_id = 1;
inline void UpdateJobRequest_QueryIdAndPath::clear_job_id() {
  job_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateJobRequest_QueryIdAndPath::job_id() const {
  // @@protoc_insertion_point(field_get:beeremote.UpdateJobRequest.QueryIdAndPath.job_id)
  return _internal_job_id();
}
inline void UpdateJobRequest_QueryIdAndPath::set_job_id(const std::string& value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:beeremote.UpdateJobRequest.QueryIdAndPath.job_id)
}
inline std::string* UpdateJobRequest_QueryIdAndPath::mutable_job_id() {
  // @@protoc_insertion_point(field_mutable:beeremote.UpdateJobRequest.QueryIdAndPath.job_id)
  return _internal_mutable_job_id();
}
inline const std::string& UpdateJobRequest_QueryIdAndPath::_internal_job_id() const {
  return job_id_.Get();
}
inline void UpdateJobRequest_QueryIdAndPath::_internal_set_job_id(const std::string& value) {
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateJobRequest_QueryIdAndPath::set_job_id(std::string&& value) {
  
  job_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.UpdateJobRequest.QueryIdAndPath.job_id)
}
inline void UpdateJobRequest_QueryIdAndPath::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.UpdateJobRequest.QueryIdAndPath.job_id)
}
inline void UpdateJobRequest_QueryIdAndPath::set_job_id(const char* value,
    size_t size) {
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.UpdateJobRequest.QueryIdAndPath.job_id)
}
inline std::string* UpdateJobRequest_QueryIdAndPath::_internal_mutable_job_id() {
  
  return job_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateJobRequest_QueryIdAndPath::release_job_id() {
  // @@protoc_insertion_point(field_release:beeremote.UpdateJobRequest.QueryIdAndPath.job_id)
  return job_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateJobRequest_QueryIdAndPath::set_allocated_job_id(std::string* job_id) {
  if (job_id != nullptr) {
    
  } else {
    
  }
  job_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beeremote.UpdateJobRequest.QueryIdAndPath.job_id)
}
inline std::string* UpdateJobRequest_QueryIdAndPath::unsafe_arena_release_job_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.UpdateJobRequest.QueryIdAndPath.job_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return job_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateJobRequest_QueryIdAndPath::unsafe_arena_set_allocated_job_id(
    std::string* job_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (job_id != nullptr) {
    
  } else {
    
  }
  job_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      job_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.UpdateJobRequest.QueryIdAndPath.job_id)
}

// string path = 2;
inline void UpdateJobRequest_QueryIdAndPath::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateJobRequest_QueryIdAndPath::path() const {
  // @@protoc_insertion_point(field_get:beeremote.UpdateJobRequest.QueryIdAndPath.path)
  return _internal_path();
}
inline void UpdateJobRequest_QueryIdAndPath::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:beeremote.UpdateJobRequest.QueryIdAndPath.path)
}
inline std::string* UpdateJobRequest_QueryIdAndPath::mutable_path() {
  // @@protoc_insertion_point(field_mutable:beeremote.UpdateJobRequest.QueryIdAndPath.path)
  return _internal_mutable_path();
}
inline const std::string& UpdateJobRequest_QueryIdAndPath::_internal_path() const {
  return path_.Get();
}
inline void UpdateJobRequest_QueryIdAndPath::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateJobRequest_QueryIdAndPath::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.UpdateJobRequest.QueryIdAndPath.path)
}
inline void UpdateJobRequest_QueryIdAndPath::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.UpdateJobRequest.QueryIdAndPath.path)
}
inline void UpdateJobRequest_QueryIdAndPath::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.UpdateJobRequest.QueryIdAndPath.path)
}
inline std::string* UpdateJobRequest_QueryIdAndPath::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateJobRequest_QueryIdAndPath::release_path() {
  // @@protoc_insertion_point(field_release:beeremote.UpdateJobRequest.QueryIdAndPath.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateJobRequest_QueryIdAndPath::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beeremote.UpdateJobRequest.QueryIdAndPath.path)
}
inline std::string* UpdateJobRequest_QueryIdAndPath::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.UpdateJobRequest.QueryIdAndPath.path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateJobRequest_QueryIdAndPath::unsafe_arena_set_allocated_path(
    std::string* path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path != nullptr) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.UpdateJobRequest.QueryIdAndPath.path)
}

// -------------------------------------------------------------------

// UpdateJobRequest

// .beeremote.UpdateJobRequest.QueryIdAndPath by_id_and_path = 1;
inline bool UpdateJobRequest::_internal_has_by_id_and_path() const {
  return query_case() == kByIdAndPath;
}
inline bool UpdateJobRequest::has_by_id_and_path() const {
  return _internal_has_by_id_and_path();
}
inline void UpdateJobRequest::set_has_by_id_and_path() {
  _oneof_case_[0] = kByIdAndPath;
}
inline void UpdateJobRequest::clear_by_id_and_path() {
  if (_internal_has_by_id_and_path()) {
    if (GetArena() == nullptr) {
      delete query_.by_id_and_path_;
    }
    clear_has_query();
  }
}
inline ::beeremote::UpdateJobRequest_QueryIdAndPath* UpdateJobRequest::release_by_id_and_path() {
  // @@protoc_insertion_point(field_release:beeremote.UpdateJobRequest.by_id_and_path)
  if (_internal_has_by_id_and_path()) {
    clear_has_query();
      ::beeremote::UpdateJobRequest_QueryIdAndPath* temp = query_.by_id_and_path_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    query_.by_id_and_path_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::beeremote::UpdateJobRequest_QueryIdAndPath& UpdateJobRequest::_internal_by_id_and_path() const {
  return _internal_has_by_id_and_path()
      ? *query_.by_id_and_path_
      : *reinterpret_cast< ::beeremote::UpdateJobRequest_QueryIdAndPath*>(&::beeremote::_UpdateJobRequest_QueryIdAndPath_default_instance_);
}
inline const ::beeremote::UpdateJobRequest_QueryIdAndPath& UpdateJobRequest::by_id_and_path() const {
  // @@protoc_insertion_point(field_get:beeremote.UpdateJobRequest.by_id_and_path)
  return _internal_by_id_and_path();
}
inline ::beeremote::UpdateJobRequest_QueryIdAndPath* UpdateJobRequest::unsafe_arena_release_by_id_and_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.UpdateJobRequest.by_id_and_path)
  if (_internal_has_by_id_and_path()) {
    clear_has_query();
    ::beeremote::UpdateJobRequest_QueryIdAndPath* temp = query_.by_id_and_path_;
    query_.by_id_and_path_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateJobRequest::unsafe_arena_set_allocated_by_id_and_path(::beeremote::UpdateJobRequest_QueryIdAndPath* by_id_and_path) {
  clear_query();
  if (by_id_and_path) {
    set_has_by_id_and_path();
    query_.by_id_and_path_ = by_id_and_path;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.UpdateJobRequest.by_id_and_path)
}
inline ::beeremote::UpdateJobRequest_QueryIdAndPath* UpdateJobRequest::_internal_mutable_by_id_and_path() {
  if (!_internal_has_by_id_and_path()) {
    clear_query();
    set_has_by_id_and_path();
    query_.by_id_and_path_ = CreateMaybeMessage< ::beeremote::UpdateJobRequest_QueryIdAndPath >(GetArena());
  }
  return query_.by_id_and_path_;
}
inline ::beeremote::UpdateJobRequest_QueryIdAndPath* UpdateJobRequest::mutable_by_id_and_path() {
  // @@protoc_insertion_point(field_mutable:beeremote.UpdateJobRequest.by_id_and_path)
  return _internal_mutable_by_id_and_path();
}

// string by_exact_path = 2;
inline bool UpdateJobRequest::_internal_has_by_exact_path() const {
  return query_case() == kByExactPath;
}
inline void UpdateJobRequest::set_has_by_exact_path() {
  _oneof_case_[0] = kByExactPath;
}
inline void UpdateJobRequest::clear_by_exact_path() {
  if (_internal_has_by_exact_path()) {
    query_.by_exact_path_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_query();
  }
}
inline const std::string& UpdateJobRequest::by_exact_path() const {
  // @@protoc_insertion_point(field_get:beeremote.UpdateJobRequest.by_exact_path)
  return _internal_by_exact_path();
}
inline void UpdateJobRequest::set_by_exact_path(const std::string& value) {
  _internal_set_by_exact_path(value);
  // @@protoc_insertion_point(field_set:beeremote.UpdateJobRequest.by_exact_path)
}
inline std::string* UpdateJobRequest::mutable_by_exact_path() {
  // @@protoc_insertion_point(field_mutable:beeremote.UpdateJobRequest.by_exact_path)
  return _internal_mutable_by_exact_path();
}
inline const std::string& UpdateJobRequest::_internal_by_exact_path() const {
  if (_internal_has_by_exact_path()) {
    return query_.by_exact_path_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UpdateJobRequest::_internal_set_by_exact_path(const std::string& value) {
  if (!_internal_has_by_exact_path()) {
    clear_query();
    set_has_by_exact_path();
    query_.by_exact_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  query_.by_exact_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateJobRequest::set_by_exact_path(std::string&& value) {
  // @@protoc_insertion_point(field_set:beeremote.UpdateJobRequest.by_exact_path)
  if (!_internal_has_by_exact_path()) {
    clear_query();
    set_has_by_exact_path();
    query_.by_exact_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  query_.by_exact_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.UpdateJobRequest.by_exact_path)
}
inline void UpdateJobRequest::set_by_exact_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_by_exact_path()) {
    clear_query();
    set_has_by_exact_path();
    query_.by_exact_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  query_.by_exact_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.UpdateJobRequest.by_exact_path)
}
inline void UpdateJobRequest::set_by_exact_path(const char* value,
                             size_t size) {
  if (!_internal_has_by_exact_path()) {
    clear_query();
    set_has_by_exact_path();
    query_.by_exact_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  query_.by_exact_path_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.UpdateJobRequest.by_exact_path)
}
inline std::string* UpdateJobRequest::_internal_mutable_by_exact_path() {
  if (!_internal_has_by_exact_path()) {
    clear_query();
    set_has_by_exact_path();
    query_.by_exact_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return query_.by_exact_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateJobRequest::release_by_exact_path() {
  // @@protoc_insertion_point(field_release:beeremote.UpdateJobRequest.by_exact_path)
  if (_internal_has_by_exact_path()) {
    clear_has_query();
    return query_.by_exact_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void UpdateJobRequest::set_allocated_by_exact_path(std::string* by_exact_path) {
  if (has_query()) {
    clear_query();
  }
  if (by_exact_path != nullptr) {
    set_has_by_exact_path();
    query_.by_exact_path_.UnsafeSetDefault(by_exact_path);
  }
  // @@protoc_insertion_point(field_set_allocated:beeremote.UpdateJobRequest.by_exact_path)
}
inline std::string* UpdateJobRequest::unsafe_arena_release_by_exact_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.UpdateJobRequest.by_exact_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_by_exact_path()) {
    clear_has_query();
    return query_.by_exact_path_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void UpdateJobRequest::unsafe_arena_set_allocated_by_exact_path(std::string* by_exact_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_by_exact_path()) {
    query_.by_exact_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_query();
  if (by_exact_path) {
    set_has_by_exact_path();
    query_.by_exact_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), by_exact_path, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.UpdateJobRequest.by_exact_path)
}

// .beeremote.UpdateJobRequest.NewState new_state = 3;
inline void UpdateJobRequest::clear_new_state() {
  new_state_ = 0;
}
inline ::beeremote::UpdateJobRequest_NewState UpdateJobRequest::_internal_new_state() const {
  return static_cast< ::beeremote::UpdateJobRequest_NewState >(new_state_);
}
inline ::beeremote::UpdateJobRequest_NewState UpdateJobRequest::new_state() const {
  // @@protoc_insertion_point(field_get:beeremote.UpdateJobRequest.new_state)
  return _internal_new_state();
}
inline void UpdateJobRequest::_internal_set_new_state(::beeremote::UpdateJobRequest_NewState value) {
  
  new_state_ = value;
}
inline void UpdateJobRequest::set_new_state(::beeremote::UpdateJobRequest_NewState value) {
  _internal_set_new_state(value);
  // @@protoc_insertion_point(field_set:beeremote.UpdateJobRequest.new_state)
}

// bool force_update = 4;
inline void UpdateJobRequest::clear_force_update() {
  force_update_ = false;
}
inline bool UpdateJobRequest::_internal_force_update() const {
  return force_update_;
}
inline bool UpdateJobRequest::force_update() const {
  // @@protoc_insertion_point(field_get:beeremote.UpdateJobRequest.force_update)
  return _internal_force_update();
}
inline void UpdateJobRequest::_internal_set_force_update(bool value) {
  
  force_update_ = value;
}
inline void UpdateJobRequest::set_force_update(bool value) {
  _internal_set_force_update(value);
  // @@protoc_insertion_point(field_set:beeremote.UpdateJobRequest.force_update)
}

inline bool UpdateJobRequest::has_query() const {
  return query_case() != QUERY_NOT_SET;
}
inline void UpdateJobRequest::clear_has_query() {
  _oneof_case_[0] = QUERY_NOT_SET;
}
inline UpdateJobRequest::QueryCase UpdateJobRequest::query_case() const {
  return UpdateJobRequest::QueryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UpdateJobResponse

// bool ok = 1;
inline void UpdateJobResponse::clear_ok() {
  ok_ = false;
}
inline bool UpdateJobResponse::_internal_ok() const {
  return ok_;
}
inline bool UpdateJobResponse::ok() const {
  // @@protoc_insertion_point(field_get:beeremote.UpdateJobResponse.ok)
  return _internal_ok();
}
inline void UpdateJobResponse::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void UpdateJobResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:beeremote.UpdateJobResponse.ok)
}

// string message = 2;
inline void UpdateJobResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateJobResponse::message() const {
  // @@protoc_insertion_point(field_get:beeremote.UpdateJobResponse.message)
  return _internal_message();
}
inline void UpdateJobResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:beeremote.UpdateJobResponse.message)
}
inline std::string* UpdateJobResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:beeremote.UpdateJobResponse.message)
  return _internal_mutable_message();
}
inline const std::string& UpdateJobResponse::_internal_message() const {
  return message_.Get();
}
inline void UpdateJobResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateJobResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.UpdateJobResponse.message)
}
inline void UpdateJobResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.UpdateJobResponse.message)
}
inline void UpdateJobResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.UpdateJobResponse.message)
}
inline std::string* UpdateJobResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateJobResponse::release_message() {
  // @@protoc_insertion_point(field_release:beeremote.UpdateJobResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateJobResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beeremote.UpdateJobResponse.message)
}
inline std::string* UpdateJobResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.UpdateJobResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateJobResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.UpdateJobResponse.message)
}

// repeated .beeremote.JobResult results = 3;
inline int UpdateJobResponse::_internal_results_size() const {
  return results_.size();
}
inline int UpdateJobResponse::results_size() const {
  return _internal_results_size();
}
inline void UpdateJobResponse::clear_results() {
  results_.Clear();
}
inline ::beeremote::JobResult* UpdateJobResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:beeremote.UpdateJobResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResult >*
UpdateJobResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:beeremote.UpdateJobResponse.results)
  return &results_;
}
inline const ::beeremote::JobResult& UpdateJobResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::beeremote::JobResult& UpdateJobResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:beeremote.UpdateJobResponse.results)
  return _internal_results(index);
}
inline ::beeremote::JobResult* UpdateJobResponse::_internal_add_results() {
  return results_.Add();
}
inline ::beeremote::JobResult* UpdateJobResponse::add_results() {
  // @@protoc_insertion_point(field_add:beeremote.UpdateJobResponse.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResult >&
UpdateJobResponse::results() const {
  // @@protoc_insertion_point(field_list:beeremote.UpdateJobResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// GetJobsRequest_QueryIdAndPath

// string job_id = 1;
inline void GetJobsRequest_QueryIdAndPath::clear_job_id() {
  job_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetJobsRequest_QueryIdAndPath::job_id() const {
  // @@protoc_insertion_point(field_get:beeremote.GetJobsRequest.QueryIdAndPath.job_id)
  return _internal_job_id();
}
inline void GetJobsRequest_QueryIdAndPath::set_job_id(const std::string& value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:beeremote.GetJobsRequest.QueryIdAndPath.job_id)
}
inline std::string* GetJobsRequest_QueryIdAndPath::mutable_job_id() {
  // @@protoc_insertion_point(field_mutable:beeremote.GetJobsRequest.QueryIdAndPath.job_id)
  return _internal_mutable_job_id();
}
inline const std::string& GetJobsRequest_QueryIdAndPath::_internal_job_id() const {
  return job_id_.Get();
}
inline void GetJobsRequest_QueryIdAndPath::_internal_set_job_id(const std::string& value) {
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetJobsRequest_QueryIdAndPath::set_job_id(std::string&& value) {
  
  job_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.GetJobsRequest.QueryIdAndPath.job_id)
}
inline void GetJobsRequest_QueryIdAndPath::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.GetJobsRequest.QueryIdAndPath.job_id)
}
inline void GetJobsRequest_QueryIdAndPath::set_job_id(const char* value,
    size_t size) {
  
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.GetJobsRequest.QueryIdAndPath.job_id)
}
inline std::string* GetJobsRequest_QueryIdAndPath::_internal_mutable_job_id() {
  
  return job_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetJobsRequest_QueryIdAndPath::release_job_id() {
  // @@protoc_insertion_point(field_release:beeremote.GetJobsRequest.QueryIdAndPath.job_id)
  return job_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetJobsRequest_QueryIdAndPath::set_allocated_job_id(std::string* job_id) {
  if (job_id != nullptr) {
    
  } else {
    
  }
  job_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beeremote.GetJobsRequest.QueryIdAndPath.job_id)
}
inline std::string* GetJobsRequest_QueryIdAndPath::unsafe_arena_release_job_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.GetJobsRequest.QueryIdAndPath.job_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return job_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetJobsRequest_QueryIdAndPath::unsafe_arena_set_allocated_job_id(
    std::string* job_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (job_id != nullptr) {
    
  } else {
    
  }
  job_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      job_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.GetJobsRequest.QueryIdAndPath.job_id)
}

// string path = 2;
inline void GetJobsRequest_QueryIdAndPath::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetJobsRequest_QueryIdAndPath::path() const {
  // @@protoc_insertion_point(field_get:beeremote.GetJobsRequest.QueryIdAndPath.path)
  return _internal_path();
}
inline void GetJobsRequest_QueryIdAndPath::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:beeremote.GetJobsRequest.QueryIdAndPath.path)
}
inline std::string* GetJobsRequest_QueryIdAndPath::mutable_path() {
  // @@protoc_insertion_point(field_mutable:beeremote.GetJobsRequest.QueryIdAndPath.path)
  return _internal_mutable_path();
}
inline const std::string& GetJobsRequest_QueryIdAndPath::_internal_path() const {
  return path_.Get();
}
inline void GetJobsRequest_QueryIdAndPath::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetJobsRequest_QueryIdAndPath::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.GetJobsRequest.QueryIdAndPath.path)
}
inline void GetJobsRequest_QueryIdAndPath::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.GetJobsRequest.QueryIdAndPath.path)
}
inline void GetJobsRequest_QueryIdAndPath::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.GetJobsRequest.QueryIdAndPath.path)
}
inline std::string* GetJobsRequest_QueryIdAndPath::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetJobsRequest_QueryIdAndPath::release_path() {
  // @@protoc_insertion_point(field_release:beeremote.GetJobsRequest.QueryIdAndPath.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetJobsRequest_QueryIdAndPath::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beeremote.GetJobsRequest.QueryIdAndPath.path)
}
inline std::string* GetJobsRequest_QueryIdAndPath::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.GetJobsRequest.QueryIdAndPath.path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetJobsRequest_QueryIdAndPath::unsafe_arena_set_allocated_path(
    std::string* path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path != nullptr) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.GetJobsRequest.QueryIdAndPath.path)
}

// -------------------------------------------------------------------

// GetJobsRequest

// .beeremote.GetJobsRequest.QueryIdAndPath by_job_id_and_path = 1;
inline bool GetJobsRequest::_internal_has_by_job_id_and_path() const {
  return query_case() == kByJobIdAndPath;
}
inline bool GetJobsRequest::has_by_job_id_and_path() const {
  return _internal_has_by_job_id_and_path();
}
inline void GetJobsRequest::set_has_by_job_id_and_path() {
  _oneof_case_[0] = kByJobIdAndPath;
}
inline void GetJobsRequest::clear_by_job_id_and_path() {
  if (_internal_has_by_job_id_and_path()) {
    if (GetArena() == nullptr) {
      delete query_.by_job_id_and_path_;
    }
    clear_has_query();
  }
}
inline ::beeremote::GetJobsRequest_QueryIdAndPath* GetJobsRequest::release_by_job_id_and_path() {
  // @@protoc_insertion_point(field_release:beeremote.GetJobsRequest.by_job_id_and_path)
  if (_internal_has_by_job_id_and_path()) {
    clear_has_query();
      ::beeremote::GetJobsRequest_QueryIdAndPath* temp = query_.by_job_id_and_path_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    query_.by_job_id_and_path_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::beeremote::GetJobsRequest_QueryIdAndPath& GetJobsRequest::_internal_by_job_id_and_path() const {
  return _internal_has_by_job_id_and_path()
      ? *query_.by_job_id_and_path_
      : *reinterpret_cast< ::beeremote::GetJobsRequest_QueryIdAndPath*>(&::beeremote::_GetJobsRequest_QueryIdAndPath_default_instance_);
}
inline const ::beeremote::GetJobsRequest_QueryIdAndPath& GetJobsRequest::by_job_id_and_path() const {
  // @@protoc_insertion_point(field_get:beeremote.GetJobsRequest.by_job_id_and_path)
  return _internal_by_job_id_and_path();
}
inline ::beeremote::GetJobsRequest_QueryIdAndPath* GetJobsRequest::unsafe_arena_release_by_job_id_and_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.GetJobsRequest.by_job_id_and_path)
  if (_internal_has_by_job_id_and_path()) {
    clear_has_query();
    ::beeremote::GetJobsRequest_QueryIdAndPath* temp = query_.by_job_id_and_path_;
    query_.by_job_id_and_path_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetJobsRequest::unsafe_arena_set_allocated_by_job_id_and_path(::beeremote::GetJobsRequest_QueryIdAndPath* by_job_id_and_path) {
  clear_query();
  if (by_job_id_and_path) {
    set_has_by_job_id_and_path();
    query_.by_job_id_and_path_ = by_job_id_and_path;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.GetJobsRequest.by_job_id_and_path)
}
inline ::beeremote::GetJobsRequest_QueryIdAndPath* GetJobsRequest::_internal_mutable_by_job_id_and_path() {
  if (!_internal_has_by_job_id_and_path()) {
    clear_query();
    set_has_by_job_id_and_path();
    query_.by_job_id_and_path_ = CreateMaybeMessage< ::beeremote::GetJobsRequest_QueryIdAndPath >(GetArena());
  }
  return query_.by_job_id_and_path_;
}
inline ::beeremote::GetJobsRequest_QueryIdAndPath* GetJobsRequest::mutable_by_job_id_and_path() {
  // @@protoc_insertion_point(field_mutable:beeremote.GetJobsRequest.by_job_id_and_path)
  return _internal_mutable_by_job_id_and_path();
}

// string by_exact_path = 2;
inline bool GetJobsRequest::_internal_has_by_exact_path() const {
  return query_case() == kByExactPath;
}
inline void GetJobsRequest::set_has_by_exact_path() {
  _oneof_case_[0] = kByExactPath;
}
inline void GetJobsRequest::clear_by_exact_path() {
  if (_internal_has_by_exact_path()) {
    query_.by_exact_path_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_query();
  }
}
inline const std::string& GetJobsRequest::by_exact_path() const {
  // @@protoc_insertion_point(field_get:beeremote.GetJobsRequest.by_exact_path)
  return _internal_by_exact_path();
}
inline void GetJobsRequest::set_by_exact_path(const std::string& value) {
  _internal_set_by_exact_path(value);
  // @@protoc_insertion_point(field_set:beeremote.GetJobsRequest.by_exact_path)
}
inline std::string* GetJobsRequest::mutable_by_exact_path() {
  // @@protoc_insertion_point(field_mutable:beeremote.GetJobsRequest.by_exact_path)
  return _internal_mutable_by_exact_path();
}
inline const std::string& GetJobsRequest::_internal_by_exact_path() const {
  if (_internal_has_by_exact_path()) {
    return query_.by_exact_path_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetJobsRequest::_internal_set_by_exact_path(const std::string& value) {
  if (!_internal_has_by_exact_path()) {
    clear_query();
    set_has_by_exact_path();
    query_.by_exact_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  query_.by_exact_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetJobsRequest::set_by_exact_path(std::string&& value) {
  // @@protoc_insertion_point(field_set:beeremote.GetJobsRequest.by_exact_path)
  if (!_internal_has_by_exact_path()) {
    clear_query();
    set_has_by_exact_path();
    query_.by_exact_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  query_.by_exact_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.GetJobsRequest.by_exact_path)
}
inline void GetJobsRequest::set_by_exact_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_by_exact_path()) {
    clear_query();
    set_has_by_exact_path();
    query_.by_exact_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  query_.by_exact_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.GetJobsRequest.by_exact_path)
}
inline void GetJobsRequest::set_by_exact_path(const char* value,
                             size_t size) {
  if (!_internal_has_by_exact_path()) {
    clear_query();
    set_has_by_exact_path();
    query_.by_exact_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  query_.by_exact_path_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.GetJobsRequest.by_exact_path)
}
inline std::string* GetJobsRequest::_internal_mutable_by_exact_path() {
  if (!_internal_has_by_exact_path()) {
    clear_query();
    set_has_by_exact_path();
    query_.by_exact_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return query_.by_exact_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetJobsRequest::release_by_exact_path() {
  // @@protoc_insertion_point(field_release:beeremote.GetJobsRequest.by_exact_path)
  if (_internal_has_by_exact_path()) {
    clear_has_query();
    return query_.by_exact_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetJobsRequest::set_allocated_by_exact_path(std::string* by_exact_path) {
  if (has_query()) {
    clear_query();
  }
  if (by_exact_path != nullptr) {
    set_has_by_exact_path();
    query_.by_exact_path_.UnsafeSetDefault(by_exact_path);
  }
  // @@protoc_insertion_point(field_set_allocated:beeremote.GetJobsRequest.by_exact_path)
}
inline std::string* GetJobsRequest::unsafe_arena_release_by_exact_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.GetJobsRequest.by_exact_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_by_exact_path()) {
    clear_has_query();
    return query_.by_exact_path_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetJobsRequest::unsafe_arena_set_allocated_by_exact_path(std::string* by_exact_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_by_exact_path()) {
    query_.by_exact_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_query();
  if (by_exact_path) {
    set_has_by_exact_path();
    query_.by_exact_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), by_exact_path, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.GetJobsRequest.by_exact_path)
}

// string by_path_prefix = 3;
inline bool GetJobsRequest::_internal_has_by_path_prefix() const {
  return query_case() == kByPathPrefix;
}
inline void GetJobsRequest::set_has_by_path_prefix() {
  _oneof_case_[0] = kByPathPrefix;
}
inline void GetJobsRequest::clear_by_path_prefix() {
  if (_internal_has_by_path_prefix()) {
    query_.by_path_prefix_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_query();
  }
}
inline const std::string& GetJobsRequest::by_path_prefix() const {
  // @@protoc_insertion_point(field_get:beeremote.GetJobsRequest.by_path_prefix)
  return _internal_by_path_prefix();
}
inline void GetJobsRequest::set_by_path_prefix(const std::string& value) {
  _internal_set_by_path_prefix(value);
  // @@protoc_insertion_point(field_set:beeremote.GetJobsRequest.by_path_prefix)
}
inline std::string* GetJobsRequest::mutable_by_path_prefix() {
  // @@protoc_insertion_point(field_mutable:beeremote.GetJobsRequest.by_path_prefix)
  return _internal_mutable_by_path_prefix();
}
inline const std::string& GetJobsRequest::_internal_by_path_prefix() const {
  if (_internal_has_by_path_prefix()) {
    return query_.by_path_prefix_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetJobsRequest::_internal_set_by_path_prefix(const std::string& value) {
  if (!_internal_has_by_path_prefix()) {
    clear_query();
    set_has_by_path_prefix();
    query_.by_path_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  query_.by_path_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetJobsRequest::set_by_path_prefix(std::string&& value) {
  // @@protoc_insertion_point(field_set:beeremote.GetJobsRequest.by_path_prefix)
  if (!_internal_has_by_path_prefix()) {
    clear_query();
    set_has_by_path_prefix();
    query_.by_path_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  query_.by_path_prefix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.GetJobsRequest.by_path_prefix)
}
inline void GetJobsRequest::set_by_path_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_by_path_prefix()) {
    clear_query();
    set_has_by_path_prefix();
    query_.by_path_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  query_.by_path_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.GetJobsRequest.by_path_prefix)
}
inline void GetJobsRequest::set_by_path_prefix(const char* value,
                             size_t size) {
  if (!_internal_has_by_path_prefix()) {
    clear_query();
    set_has_by_path_prefix();
    query_.by_path_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  query_.by_path_prefix_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.GetJobsRequest.by_path_prefix)
}
inline std::string* GetJobsRequest::_internal_mutable_by_path_prefix() {
  if (!_internal_has_by_path_prefix()) {
    clear_query();
    set_has_by_path_prefix();
    query_.by_path_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return query_.by_path_prefix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetJobsRequest::release_by_path_prefix() {
  // @@protoc_insertion_point(field_release:beeremote.GetJobsRequest.by_path_prefix)
  if (_internal_has_by_path_prefix()) {
    clear_has_query();
    return query_.by_path_prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetJobsRequest::set_allocated_by_path_prefix(std::string* by_path_prefix) {
  if (has_query()) {
    clear_query();
  }
  if (by_path_prefix != nullptr) {
    set_has_by_path_prefix();
    query_.by_path_prefix_.UnsafeSetDefault(by_path_prefix);
  }
  // @@protoc_insertion_point(field_set_allocated:beeremote.GetJobsRequest.by_path_prefix)
}
inline std::string* GetJobsRequest::unsafe_arena_release_by_path_prefix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.GetJobsRequest.by_path_prefix)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_by_path_prefix()) {
    clear_has_query();
    return query_.by_path_prefix_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetJobsRequest::unsafe_arena_set_allocated_by_path_prefix(std::string* by_path_prefix) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_by_path_prefix()) {
    query_.by_path_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_query();
  if (by_path_prefix) {
    set_has_by_path_prefix();
    query_.by_path_prefix_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), by_path_prefix, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.GetJobsRequest.by_path_prefix)
}

// bool include_work_requests = 4;
inline void GetJobsRequest::clear_include_work_requests() {
  include_work_requests_ = false;
}
inline bool GetJobsRequest::_internal_include_work_requests() const {
  return include_work_requests_;
}
inline bool GetJobsRequest::include_work_requests() const {
  // @@protoc_insertion_point(field_get:beeremote.GetJobsRequest.include_work_requests)
  return _internal_include_work_requests();
}
inline void GetJobsRequest::_internal_set_include_work_requests(bool value) {
  
  include_work_requests_ = value;
}
inline void GetJobsRequest::set_include_work_requests(bool value) {
  _internal_set_include_work_requests(value);
  // @@protoc_insertion_point(field_set:beeremote.GetJobsRequest.include_work_requests)
}

// bool include_work_results = 5;
inline void GetJobsRequest::clear_include_work_results() {
  include_work_results_ = false;
}
inline bool GetJobsRequest::_internal_include_work_results() const {
  return include_work_results_;
}
inline bool GetJobsRequest::include_work_results() const {
  // @@protoc_insertion_point(field_get:beeremote.GetJobsRequest.include_work_results)
  return _internal_include_work_results();
}
inline void GetJobsRequest::_internal_set_include_work_results(bool value) {
  
  include_work_results_ = value;
}
inline void GetJobsRequest::set_include_work_results(bool value) {
  _internal_set_include_work_results(value);
  // @@protoc_insertion_point(field_set:beeremote.GetJobsRequest.include_work_results)
}

// bool update_work_results = 6;
inline void GetJobsRequest::clear_update_work_results() {
  update_work_results_ = false;
}
inline bool GetJobsRequest::_internal_update_work_results() const {
  return update_work_results_;
}
inline bool GetJobsRequest::update_work_results() const {
  // @@protoc_insertion_point(field_get:beeremote.GetJobsRequest.update_work_results)
  return _internal_update_work_results();
}
inline void GetJobsRequest::_internal_set_update_work_results(bool value) {
  
  update_work_results_ = value;
}
inline void GetJobsRequest::set_update_work_results(bool value) {
  _internal_set_update_work_results(value);
  // @@protoc_insertion_point(field_set:beeremote.GetJobsRequest.update_work_results)
}

inline bool GetJobsRequest::has_query() const {
  return query_case() != QUERY_NOT_SET;
}
inline void GetJobsRequest::clear_has_query() {
  _oneof_case_[0] = QUERY_NOT_SET;
}
inline GetJobsRequest::QueryCase GetJobsRequest::query_case() const {
  return GetJobsRequest::QueryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetJobsResponse

// string path = 1;
inline void GetJobsResponse::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetJobsResponse::path() const {
  // @@protoc_insertion_point(field_get:beeremote.GetJobsResponse.path)
  return _internal_path();
}
inline void GetJobsResponse::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:beeremote.GetJobsResponse.path)
}
inline std::string* GetJobsResponse::mutable_path() {
  // @@protoc_insertion_point(field_mutable:beeremote.GetJobsResponse.path)
  return _internal_mutable_path();
}
inline const std::string& GetJobsResponse::_internal_path() const {
  return path_.Get();
}
inline void GetJobsResponse::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetJobsResponse::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.GetJobsResponse.path)
}
inline void GetJobsResponse::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.GetJobsResponse.path)
}
inline void GetJobsResponse::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.GetJobsResponse.path)
}
inline std::string* GetJobsResponse::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetJobsResponse::release_path() {
  // @@protoc_insertion_point(field_release:beeremote.GetJobsResponse.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetJobsResponse::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beeremote.GetJobsResponse.path)
}
inline std::string* GetJobsResponse::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.GetJobsResponse.path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetJobsResponse::unsafe_arena_set_allocated_path(
    std::string* path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path != nullptr) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.GetJobsResponse.path)
}

// repeated .beeremote.JobResult results = 2;
inline int GetJobsResponse::_internal_results_size() const {
  return results_.size();
}
inline int GetJobsResponse::results_size() const {
  return _internal_results_size();
}
inline void GetJobsResponse::clear_results() {
  results_.Clear();
}
inline ::beeremote::JobResult* GetJobsResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:beeremote.GetJobsResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResult >*
GetJobsResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:beeremote.GetJobsResponse.results)
  return &results_;
}
inline const ::beeremote::JobResult& GetJobsResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::beeremote::JobResult& GetJobsResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:beeremote.GetJobsResponse.results)
  return _internal_results(index);
}
inline ::beeremote::JobResult* GetJobsResponse::_internal_add_results() {
  return results_.Add();
}
inline ::beeremote::JobResult* GetJobsResponse::add_results() {
  // @@protoc_insertion_point(field_add:beeremote.GetJobsResponse.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResult >&
GetJobsResponse::results() const {
  // @@protoc_insertion_point(field_list:beeremote.GetJobsResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// UpdateWorkRequest

// .flex.Work work = 1;
inline bool UpdateWorkRequest::_internal_has_work() const {
  return this != internal_default_instance() && work_ != nullptr;
}
inline bool UpdateWorkRequest::has_work() const {
  return _internal_has_work();
}
inline const ::flex::Work& UpdateWorkRequest::_internal_work() const {
  const ::flex::Work* p = work_;
  return p != nullptr ? *p : *reinterpret_cast<const ::flex::Work*>(
      &::flex::_Work_default_instance_);
}
inline const ::flex::Work& UpdateWorkRequest::work() const {
  // @@protoc_insertion_point(field_get:beeremote.UpdateWorkRequest.work)
  return _internal_work();
}
inline void UpdateWorkRequest::unsafe_arena_set_allocated_work(
    ::flex::Work* work) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_);
  }
  work_ = work;
  if (work) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.UpdateWorkRequest.work)
}
inline ::flex::Work* UpdateWorkRequest::release_work() {
  auto temp = unsafe_arena_release_work();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::flex::Work* UpdateWorkRequest::unsafe_arena_release_work() {
  // @@protoc_insertion_point(field_release:beeremote.UpdateWorkRequest.work)
  
  ::flex::Work* temp = work_;
  work_ = nullptr;
  return temp;
}
inline ::flex::Work* UpdateWorkRequest::_internal_mutable_work() {
  
  if (work_ == nullptr) {
    auto* p = CreateMaybeMessage<::flex::Work>(GetArena());
    work_ = p;
  }
  return work_;
}
inline ::flex::Work* UpdateWorkRequest::mutable_work() {
  // @@protoc_insertion_point(field_mutable:beeremote.UpdateWorkRequest.work)
  return _internal_mutable_work();
}
inline void UpdateWorkRequest::set_allocated_work(::flex::Work* work) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_);
  }
  if (work) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work)->GetArena();
    if (message_arena != submessage_arena) {
      work = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work, submessage_arena);
    }
    
  } else {
    
  }
  work_ = work;
  // @@protoc_insertion_point(field_set_allocated:beeremote.UpdateWorkRequest.work)
}

// -------------------------------------------------------------------

// UpdateWorkResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace beeremote

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::beeremote::Job_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::beeremote::Job_State>() {
  return ::beeremote::Job_State_descriptor();
}
template <> struct is_proto_enum< ::beeremote::UpdateJobRequest_NewState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::beeremote::UpdateJobRequest_NewState>() {
  return ::beeremote::UpdateJobRequest_NewState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_beeremote_2eproto
