// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateManifestRequest {
    /// Map of FsUUIDs to file systems.
    #[prost(map = "string, message", tag = "1")]
    pub config: ::std::collections::HashMap<::prost::alloc::string::String, Filesystem>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateManifestResponse {
    #[prost(string, tag = "1")]
    pub agent_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReconciliationStatusRequest {
    #[prost(string, tag = "1")]
    pub agent_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReconciliationStatusResponse {
    #[prost(string, tag = "1")]
    pub agent_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub status: ::core::option::Option<Status>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelReconciliationRequest {
    #[prost(string, tag = "1")]
    pub agent_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub reason: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelReconciliationResponse {
    #[prost(string, tag = "1")]
    pub agent_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub status: ::core::option::Option<Status>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Status {
    #[prost(enumeration = "status::State", tag = "1")]
    pub state: i32,
    #[prost(string, repeated, tag = "2")]
    pub messages: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub updated: ::core::option::Option<::prost_types::Timestamp>,
}
/// Nested message and enum types in `Status`.
pub mod status {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// Should not be used. Exists only as the default if there is a programming error.
        Unspecified = 0,
        /// No configuration has been provided to the agent.
        Idle = 1,
        /// Agent is applying the requested configuration.
        Applying = 2,
        /// Agent has applied all requested configuration.
        Success = 3,
        /// The agent has failed to apply the requested configuration.
        Failed = 4,
        /// The user requested the agent cancel applying the requested configuration.
        Cancelled = 5,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "UNSPECIFIED",
                Self::Idle => "IDLE",
                Self::Applying => "APPLYING",
                Self::Success => "SUCCESS",
                Self::Failed => "FAILED",
                Self::Cancelled => "CANCELLED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSPECIFIED" => Some(Self::Unspecified),
                "IDLE" => Some(Self::Idle),
                "APPLYING" => Some(Self::Applying),
                "SUCCESS" => Some(Self::Success),
                "FAILED" => Some(Self::Failed),
                "CANCELLED" => Some(Self::Cancelled),
                _ => None,
            }
        }
    }
}
/// The manifest defining an entire BeeGFS instance.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Filesystem {
    /// Map of agentIDs to agents.
    #[prost(map = "string, message", tag = "1")]
    pub agent: ::std::collections::HashMap<::prost::alloc::string::String, Agent>,
    /// Common configuration to apply to all Services.
    #[prost(message, optional, tag = "2")]
    pub common: ::core::option::Option<filesystem::Common>,
}
/// Nested message and enum types in `Filesystem`.
pub mod filesystem {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Common {
        #[prost(message, optional, tag = "1")]
        pub auth: ::core::option::Option<super::Auth>,
        #[prost(message, optional, tag = "2")]
        pub tls: ::core::option::Option<super::Tls>,
        #[prost(message, optional, tag = "3")]
        pub install_source: ::core::option::Option<super::InstallSource>,
        #[prost(message, repeated, tag = "4")]
        pub global_config: ::prost::alloc::vec::Vec<super::ServiceConfig>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Auth {
    #[prost(string, tag = "1")]
    pub secret: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Tls {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub cert: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstallSource {
    #[prost(enumeration = "InstallType", tag = "1")]
    pub r#type: i32,
    #[prost(string, tag = "2")]
    pub repo: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub refs: ::prost::alloc::vec::Vec<SourceRef>,
}
/// SourceRef exists because protobuf maps do not support enums as a map key. The expected use is a
/// repeated SourceRef field with one entry per NodeType. It is up to the consumer to decide what to
/// do if multiple of the same service_type are found, typically the last entry wins.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SourceRef {
    #[prost(enumeration = "super::beegfs::NodeType", tag = "1")]
    pub service_type: i32,
    #[prost(string, tag = "2")]
    pub r#ref: ::prost::alloc::string::String,
}
/// ServiceConfig exists because protobuf maps do not support enums as a map key or maps as a value. The
/// expected use is a repeated ServiceConfig field with one entry per NodeType. It is up to the consumer
/// to decide what to do if multiple of the same service_type are found, typically the last entry wins.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceConfig {
    #[prost(enumeration = "super::beegfs::NodeType", tag = "1")]
    pub service_type: i32,
    #[prost(map = "string, string", tag = "2")]
    pub string_map: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// A physical or virtual machine where the BeeGFS agent is running and one or more BeeGFS services
/// (services or clients) should be deployed by the agent.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agent {
    /// The agent can deploy one or more services on each host machine/VM.
    #[prost(message, repeated, tag = "1")]
    pub services: ::prost::alloc::vec::Vec<Service>,
    /// The agent can configure global interfaces used by multiple services.
    #[prost(message, repeated, tag = "2")]
    pub interfaces: ::prost::alloc::vec::Vec<Nic>,
}
/// A service is a single instance of a particular BeeGFS NodeType (e.g., meta, client, sync).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Service {
    #[prost(uint32, tag = "1")]
    pub num_id: u32,
    #[prost(enumeration = "super::beegfs::NodeType", tag = "2")]
    pub service_type: i32,
    /// Configuration that should be applied to this specific service.
    #[prost(map = "string, string", tag = "3")]
    pub config: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(message, repeated, tag = "4")]
    pub interfaces: ::prost::alloc::vec::Vec<Nic>,
    #[prost(message, repeated, tag = "5")]
    pub targets: ::prost::alloc::vec::Vec<Target>,
    #[prost(string, tag = "6")]
    pub executable: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nic {
    /// The name of the interface to use.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// The IP/subnet of the interface. Only required if the IP should be configured if needed.
    #[prost(string, tag = "2")]
    pub addr: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Target {
    /// The target ID. Note the type is derived from the associated service.
    #[prost(uint32, tag = "1")]
    pub num_id: u32,
    /// Path to the directory under which this BeeGFS target directory will be created. For example
    /// given path /mnt/ and storage target 101 the target contents would be at /mnt/s_101/. Always
    /// required and this directory must already exist unless mount_opts is also specified.
    #[prost(string, tag = "2")]
    pub path: ::prost::alloc::string::String,
    /// Optionally set to format+mount the underlying file system if needed. The underlying file system
    /// will be mounted at path/shortFsUUID/type_id where shortFsUUID is the first 8 hex digits of the
    /// full 128-bit v4 FsUUID. For example given FsUUID 3b6f972b-64c7-4378-9f8e-172cf88c7d93, storage
    /// target 101 and root_dir `/mnt/` the target will be mounted at `/mnt/3b6f972b/storage_101`.
    #[prost(message, optional, tag = "3")]
    pub ulfs: ::core::option::Option<target::UnderlyingFsOpts>,
}
/// Nested message and enum types in `Target`.
pub mod target {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct UnderlyingFsOpts {
        #[prost(string, tag = "1")]
        pub device: ::prost::alloc::string::String,
        #[prost(enumeration = "underlying_fs_opts::FsType", tag = "2")]
        pub r#type: i32,
        #[prost(string, tag = "3")]
        pub format_flags: ::prost::alloc::string::String,
        #[prost(string, tag = "4")]
        pub mount_flags: ::prost::alloc::string::String,
    }
    /// Nested message and enum types in `UnderlyingFSOpts`.
    pub mod underlying_fs_opts {
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum FsType {
            Unspecified = 0,
            Ext4 = 1,
        }
        impl FsType {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    Self::Unspecified => "UNSPECIFIED",
                    Self::Ext4 => "EXT4",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "UNSPECIFIED" => Some(Self::Unspecified),
                    "EXT4" => Some(Self::Ext4),
                    _ => None,
                }
            }
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum InstallType {
    Unknown = 0,
    Local = 1,
    Package = 2,
}
impl InstallType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::Local => "LOCAL",
            Self::Package => "PACKAGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "LOCAL" => Some(Self::Local),
            "PACKAGE" => Some(Self::Package),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod bee_agent_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct BeeAgentClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl BeeAgentClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> BeeAgentClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> BeeAgentClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            BeeAgentClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn update_manifest(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateManifestRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateManifestResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/agent.BeeAgent/UpdateManifest",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("agent.BeeAgent", "UpdateManifest"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn reconciliation_status(
            &mut self,
            request: impl tonic::IntoRequest<super::ReconciliationStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReconciliationStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/agent.BeeAgent/ReconciliationStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("agent.BeeAgent", "ReconciliationStatus"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn cancel_reconciliation(
            &mut self,
            request: impl tonic::IntoRequest<super::CancelReconciliationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelReconciliationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/agent.BeeAgent/CancelReconciliation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("agent.BeeAgent", "CancelReconciliation"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod bee_agent_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with BeeAgentServer.
    #[async_trait]
    pub trait BeeAgent: std::marker::Send + std::marker::Sync + 'static {
        async fn update_manifest(
            &self,
            request: tonic::Request<super::UpdateManifestRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateManifestResponse>,
            tonic::Status,
        >;
        async fn reconciliation_status(
            &self,
            request: tonic::Request<super::ReconciliationStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReconciliationStatusResponse>,
            tonic::Status,
        >;
        async fn cancel_reconciliation(
            &self,
            request: tonic::Request<super::CancelReconciliationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelReconciliationResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct BeeAgentServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> BeeAgentServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for BeeAgentServer<T>
    where
        T: BeeAgent,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/agent.BeeAgent/UpdateManifest" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateManifestSvc<T: BeeAgent>(pub Arc<T>);
                    impl<
                        T: BeeAgent,
                    > tonic::server::UnaryService<super::UpdateManifestRequest>
                    for UpdateManifestSvc<T> {
                        type Response = super::UpdateManifestResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateManifestRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BeeAgent>::update_manifest(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateManifestSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/agent.BeeAgent/ReconciliationStatus" => {
                    #[allow(non_camel_case_types)]
                    struct ReconciliationStatusSvc<T: BeeAgent>(pub Arc<T>);
                    impl<
                        T: BeeAgent,
                    > tonic::server::UnaryService<super::ReconciliationStatusRequest>
                    for ReconciliationStatusSvc<T> {
                        type Response = super::ReconciliationStatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReconciliationStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BeeAgent>::reconciliation_status(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReconciliationStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/agent.BeeAgent/CancelReconciliation" => {
                    #[allow(non_camel_case_types)]
                    struct CancelReconciliationSvc<T: BeeAgent>(pub Arc<T>);
                    impl<
                        T: BeeAgent,
                    > tonic::server::UnaryService<super::CancelReconciliationRequest>
                    for CancelReconciliationSvc<T> {
                        type Response = super::CancelReconciliationResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CancelReconciliationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BeeAgent>::cancel_reconciliation(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CancelReconciliationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for BeeAgentServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "agent.BeeAgent";
    impl<T> tonic::server::NamedService for BeeAgentServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
