syntax = "proto3";
package beegfs;
option go_package = "github.com/thinkparq/protobuf/go/beegfs";

enum EntityType {
  ENTITY_TYPE_UNSPECIFIED = 0;
  NODE = 1;
  TARGET = 2;
  BUDDY_GROUP = 3;
  POOL = 4;
}

enum NodeType {
  NODE_TYPE_UNSPECIFIED = 0;
  CLIENT = 1;
  META = 2;
  STORAGE = 3;
  MANAGEMENT = 4;
  REMOTE = 5;
  SYNC = 6;
}

enum ReachabilityState {
  REACHABILITY_STATE_UNSPECIFIED = 0;
  ONLINE = 1;
  POFFLINE = 2;
  OFFLINE = 3;
}

enum ConsistencyState {
  CONSISTENCY_STATE_UNSPECIFIED = 0;
  GOOD = 1;
  NEEDS_RESYNC = 2;
  BAD = 3;
}

enum CapacityPool {
  CAPACITY_POOL_UNSPECIFIED = 0;
  NORMAL = 1;
  LOW = 2;
  EMERGENCY = 3;
}

enum NicType {
  NIC_TYPE_UNSPECIFIED = 0;
  ETHERNET = 1;
  RDMA = 2;
}

enum QuotaIdType {
  QUOTA_ID_TYPE_UNSPECIFIED = 0;
  QUOTA_ID_TYPE_USER = 1;
  QUOTA_ID_TYPE_GROUP = 2;
}

enum QuotaType {
  QUOTA_TYPE_UNSPECIFIED = 0;
  QUOTA_TYPE_SPACE = 1;
  QUOTA_TYPE_INODE = 2;
}

// The "legacy" BeeGFS numeric Id-NodeType combination that can be used to identify an entity like
// a node or target. Because each entity type has its own id space (meaning a combination is not
// globally unique), the entity type must be known in addition to uniquely identify an entity.
message LegacyId {
  // BeeGFS numeric id.
  // Required, 0 is invalid.
  uint32 num_id = 1;
  // BeeGFS node type.
  // Required. Despite the name, also applies to other entity types (which can only be on a node of
  // their own type, so it's still correct).
  NodeType node_type = 2;
}


// Contains all identifiers used to uniquely identify an entity like a node or a target. Mainly
// meant for communication with management as management has access to all the information. This
// message should be used in two ways:
// 1) In a request message (to the management),  only _one_ of the fields needs to be set (each is
// enough to identify an entity (legacy_id with extra knowledge).
// 2) In a response message (from the management), _all_ fields should be set. The request processor
// should have all info about an entity available. If that isn't the case, leaving fields empty is
// allowed.
message EntityIdSet {
  // The global, unique entity id. Identifies an entity from all types without any additional
  // context.
  // Optional or Required, depending on the use case. 0 is invalid.
  optional int64 uid = 1;
  // The user definable globally unique alias of an entity. Identifies an entity from all types
  // without any additional context.
  // Optional or Required, depending on the use case. Aliases must start with letter and contain
  // only [a-zA-Z0-9_-.].
  optional string alias = 2;
  // The "legacy" style numeric Id-NodeType combination. The entity type must be known in addition
  // to uniquely identify an entity with this field.
  // Optional or Required, depending on the use case.
  optional LegacyId legacy_id = 3;
}
