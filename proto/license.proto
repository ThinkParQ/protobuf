syntax = "proto3";
package license;
option go_package = "github.com/thinkparq/protobuf/go/license";

import "google/protobuf/timestamp.proto";

// The enums and messages in this file are used to pass data from the Go library to its consumers.
// This provides a convenient way to encode complex data types into CStrings, which are easily
// accessible for and transferable between all languages that support a C FFI.

// The three types of result a certificate verification can produce.
enum VerifyResult {
  VERIFY_UNSPECIFIED = 0;
  VERIFY_ERROR = 1;
  VERIFY_VALID = 2;
  VERIFY_INVALID = 3;
}

// The different types of certificates used in BeeGFS license generation and verification. At this
// point, only Customer and Partner certificates are passed through protocol buffers.
enum CertType {
  CERT_TYPE_UNSPECIFIED = 0;
  CERT_TYPE_CA_ROOT = 1;
  CERT_TYPE_CA_INTERMEDIATE = 2;
  CERT_TYPE_PARTNER = 3;
  CERT_TYPE_CUSTOMER = 4;
}

// The result of a certificate verfication operation.
message VerifyCertResult {
  optional VerifyResult result = 1;
  // The certificates string serial. Empty if verification failed.
  optional string serial = 2;
  // Error or status message. Empty if verification succeeded. Contains the error message if
  // result == VERIFY_ERROR and the reason for verification failure if result == VERIFY_INVALID.
  optional string message = 3;
}

// The result of a feature verification operation.
message VerifyFeatureResult {
  optional VerifyResult result = 1;
  // Error or status message. Empty if verification succeeded. Contains the error message if
  // result == VERIFY_ERROR and the reason for verification failure if result == VERIFY_INVALID.
  optional string message = 2;
}

// The result of an operation that fetches the data of the currently loaded certificate.
message GetCertDataResult {
  optional VerifyResult result = 1;
  // The data of the certificate currently loaded in the library. Data is present even if
  // verification failed.
  optional CertData data = 2;
  // Error or status message. Empty if verification succeeded. Contains the error message if
  // result == VERIFY_ERROR and the reason for verification failure if result == VERIFY_INVALID.
  optional string message = 3;
}


// CertData is a simplified version of a Go x509.certificate that contains a subset of its
// information and some additional information relevant to BeeGFS licenses like the certificate
// type.
message CertData {
  // Certificate type. Encoded in the commonName of the x509 certificate together with the serial.
  optional CertType type = 1;
  // Int64 x509 serial number which translates into a Partner (P-????) or Support contract (SP-????)
  // string serial. Integer here, because the Go x509.Certificate uses an int64.
  optional int64 serial = 2;
  // Fields 3-7 contain an x509 certificate subject's attributes
  optional string organization = 3;
  optional string organizationalUnit = 4;
  optional string country = 5;
  optional string locality = 6;
  // commonName contains the string serial number
  optional string commonName = 7;
  // Fields 8 and 9 encode the certificate's validity period
  optional google.protobuf.Timestamp validFrom = 8;
  optional google.protobuf.Timestamp validUntil = 9;
  // The DNS names the certificate is valid for. BeeGFS license certificates encode licensed
  // features as DNS names, e.g. "io.beegfs.mirroring" or "io.beegfs.numservers.4"
  repeated string dns_names = 10 [json_name = "DNSNames"];
  // Indicates whether the certificate is part of a CA. Always false for customer and partner
  // certificates.
  optional bool is_ca= 11;
  // The certificate's parent or "Issuer" certificate
  optional CertData parent_data = 12;
}
