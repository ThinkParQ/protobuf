syntax = "proto3";
package beewatch;
option go_package = "github.com/thinkparq/protobuf/go/beewatch";

message Event {
    // The BeeGFS packet format defines these as a uint16 but protobuf does not support uint16 types (https://protobuf.dev/programming-guides/proto3/#scalar).
    uint32 format_version_major = 1;
    uint32 format_version_minor = 2;
    uint64 seq_id = 3; // TODO (BF-43): This is not implemented yet in the meta service, however for now we'll have BeeWatch generate sequence IDs. Update this as needed based on final meta implementation and remove current approach in socket.go.
    uint32 size = 4;
    uint64 dropped_seq = 5;
    uint64 missed_seq = 6;
    Type type = 7;
    string path = 8;
    string entry_id = 9;
    string parent_entry_id = 10;
    string target_path = 11;
    string target_parent_id = 12;
    
    enum Type {
        FLUSH        = 0;
        TRUNCATE     = 1;
        SETATTR      = 2;
        CLOSE_WRITE  = 3;
        CREATE       = 4;
        MKDIR        = 5;
        MKNOD        = 6;
        SYMLINK      = 7;
        RMDIR        = 8;
        UNLINK       = 9;
        HARDLINK     = 10;
        RENAME       = 11;
        READ         = 12;
    }

}

// Response messages allow the subscribers to acknowledge events they have processed and request a graceful shutdown.
message Response {
    uint64 completed_seq = 1;
    bool shutting_down = 2;
}

service Subscriber { 
    rpc ReceiveEvents(stream Event) returns (stream Response);
}
