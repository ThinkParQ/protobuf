syntax = "proto3";
package beewatch;
option go_package = "github.com/thinkparq/protobuf/go/beewatch";

// The event message provides common header fields and wraps all event versions that can be handled
// by BeeGFS Watch. It notably does not provide a way to differentiate between minor versions of the
// API. Those should only affect the serialization format between the meta and watch services, and
// should adhere to standard protocol buffer best practices. Notably minor updates should be
// additive and not remove or change the meaning of existing fields.
message Event {
    uint64 seq_id = 1;
    uint32 meta_id = 2;
    optional uint32 meta_mirror = 3;
    // Bitmask representing event flags as defined by the EVENTFLAG constants in EventContext.h
    uint32 event_flags = 4;
    oneof event_data {
        V1Event v1 = 11;
        V2Event v2 = 12;
    }
}

// The v1 event format is the legacy format from BeeGFS v7.
message V1Event {
    Type type = 1;
    uint64 dropped_seq = 2;
    uint64 missed_seq = 3;
    string path = 4;
    string entry_id = 5;
    string parent_entry_id = 6;
    string target_path = 7;
    string target_parent_id = 8;
    
    enum Type {
        FLUSH        = 0;
        TRUNCATE     = 1;
        SETATTR      = 2;
        CLOSE_WRITE  = 3;
        CREATE       = 4;
        MKDIR        = 5;
        MKNOD        = 6;
        SYMLINK      = 7;
        RMDIR        = 8;
        UNLINK       = 9;
        HARDLINK     = 10;
        RENAME       = 11;
        READ         = 12;
    }
}

// The v2 event format was introduced in BeeGFS v8. 
message V2Event {
    Type type = 1;
    uint64 num_links = 2;
    string path = 3;
    string entry_id = 4;
    string parent_entry_id = 5;
    string target_path = 6;
    string target_parent_id = 7;
    uint32 msg_user_id = 8;
    int64 timestamp = 9;
    
    enum Type {
        INVALID            = 0;
        FLUSH              = 1;
        TRUNCATE           = 2;
        SETATTR            = 3;
        CLOSE_WRITE        = 4;
        CREATE             = 5;
        MKDIR              = 6;
        MKNOD              = 7;
        SYMLINK            = 8;
        RMDIR              = 9;
        UNLINK             = 10;
        HARDLINK           = 11;
        RENAME             = 12;
        OPEN_READ          = 13;
        OPEN_WRITE         = 14;
        OPEN_READ_WRITE    = 15;
        LAST_WRITER_CLOSED = 16;
        OPEN_BLOCKED       = 17;
        STRIPE_PATTERN_CHANGED = 18;
        INODE_LOCKED = 19;
    }
}

// Response messages allow the subscribers to acknowledge events they have processed and request a graceful shutdown.
message Response {
    uint64 completed_seq = 1;
    bool shutting_down = 2;
}

service Subscriber { 
    rpc ReceiveEvents(stream Event) returns (stream Response);
}
