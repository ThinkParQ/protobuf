syntax = "proto3";
package beegfs;
option go_package = "github.com/thinkparq/protobuf/go/beegfs";


enum EntityType {
  ENTITY_TYPE_UNSPECIFIED = 0;
  NODE = 1;
  TARGET = 2;
  BUDDY_GROUP = 3;
  STORAGE_POOL = 4;
}

enum NodeType {
  NODE_TYPE_UNSPECIFIED = 0;
  CLIENT = 1;
  META = 2;
  STORAGE = 3;
  MANAGEMENT = 4;
}

// A nodes reachability state as calculated by the management
enum ReachabilityState {
  REACHABILITY_STATE_UNSPECIFIED = 0;
  ONLINE = 1;
  POFFLINE = 2;
  OFFLINE = 3;
}

// A targets consistency state as known by the management
enum ConsistencyState {
  CONSISTENCY_STATE_UNSPECIFIED = 0;
  GOOD = 1;
  NEEDS_RESYNC = 2;
  BAD = 3;
}

// A targets capacity pool as calculated by management
enum CapacityPool {
  CAPACITY_POOL_UNSPECIFIED = 0;
  NORMAL = 1;
  LOW = 2;
  EMERGENCY = 3;
}

// A Nics NicType
enum NicType {
  NIC_TYPE_UNSPECIFIED = 0;
  ETHERNET = 1;
  RDMA = 2;
}

// The "old" BeeGFS numeric Id-NodeType combination that can be used to identify entities like nodes,
// targets, ... .  Because each entity type has its own Id space (meaning a combination is NOT
// globally unique), this also requires the entities type it is related to.
message LegacyId {
  // Old style BeeGFS numeric Id
  uint32 num_id = 1;
  // BeeGFS node type. Despite the name, also applies to other entity types (which currently can
  // only be on a node of their own type, so it's still correct).
  NodeType node_type = 2;
  // The referred entities type.
  EntityType entity_type = 3;
}


// Contains all existing identifiers used to uniquely identify an entity like a specific node,
// target, ... . This is what should usually be returned by a server when referring to an entity,
// for example when requesting a list of nodes. The requestor/client can then decide which
// identifier to use depending on the use case.
// Note that all fields are explicitly optional. The server should try to fill all of them, but sometimes
// (e.g. for performance reasons), only some of them might be set. It's the requesters job to check
// that.
message EntityIdSet {
  // The new style globally unique identifier. Globally unique - identifies an entity from all types
  // without any additional context.
  uint64 uid = 1;
  // The user definable alias of an entity. Globally unique - identifies an entity from all types
  // without any additional context.
  string alias = 2;
  // The old style numeric Id-NodeType combination. NOT globally unique - entity type depends on
  // the context.
  LegacyId legacy_id = 3;
}

// Contains one of the existing identifiers used to uniquely identify an entity like a specific
// node, target, ... . This is meant for requests that identify one or more entities. Only one
// unique identifier is needed.
message EntityIdVariant {
  oneof variant {
    uint64 uid = 1;
    LegacyId legacy_id = 2;
    string alias = 3;
  }
}

message GetNodesRequest {
  // Query the nic list for each node and include it in the response
  bool include_nics = 1;
}

message GetNodesResponse {
  // BeeGFS node related data
  message Node {
    // BeeGFS nic related data
    message Nic {
      // The nics IPv4 address in the form aaa.bbb.ccc.ddd:port
      string addr = 1;
      // The nics name (note that this is NOT an alias as a Nic is not considered an entity)
      string name = 2;
      // The nics type
      NicType nic_type = 3;
    }
    // The node identifiers
    EntityIdSet id = 1;
    NodeType node_type = 2;
    // The nodes TCP and UDP port.
    uint32 port = 3;
    // The nodes Nics
    repeated Nic nics = 4;
  }

  // The list of nodes
  repeated Node nodes = 1;
  // The node containing the root inode. Will be missing on a fresh system without any meta
  // targets/nodes.
  optional EntityIdSet meta_root_node = 2;
}


message GetTargetsRequest {}

message GetTargetsResponse {
  // A BeeGFS target
  message Target {
    // The targets identifiers
    EntityIdSet id = 1;
    // Node type the target is on
    NodeType node_type = 2;
    // The targets reachability state as reported by management
    ReachabilityState reachability_state = 3;
    // The targets reachability state as reported by management
    ConsistencyState consistency_state = 4;
    // Duration since last contact to the target. Currently slightly inaccurate as it updates
    // not on each received message.
    optional uint64 last_contact_s = 5;
    // Total space on the target as reported by management
    optional uint64 total_space_bytes = 6;
    // Free space on the target as reported by management
    optional uint64 free_space_bytes = 7;
    // Total inodes on the target as reported by management
    optional uint64 total_inodes = 8;
    // Free inodes on the target as reported by management
    optional uint64 free_inodes = 9;
    // The targets capacity pool as reported by the management
    CapacityPool cap_pool = 10;
    // The targets owner node identifiers
    EntityIdSet node = 11;
    // The targets storage pool identifiers. Explicitly optional since meta targets don't have a storage pool.
    optional EntityIdSet storage_pool = 12;
  }

  // The list of targets
  repeated Target targets = 1;
}


message GetBuddyGroupsRequest {}

message GetBuddyGroupsResponse {
  message BuddyGroup {
    // The buddy groups identifiers
    EntityIdSet id = 1;
    // Node type the buddy group belongs to
    NodeType node_type = 2;
    // The buddy groups current primary target identifiers
    EntityIdSet primary_target = 3;
    // The buddy groups current secondary target identifiers
    EntityIdSet secondary_target = 4;
    // The buddy groups primary target consistency state
    ConsistencyState primary_consistency_state = 5;
    // The buddy groups secondary target consistency state
    ConsistencyState secondary_consistency_state = 6;
    // The buddy groups storage pool. Explicitly optional since meta pools dont' have a storage
    // pool.
    optional EntityIdSet storage_pool = 7;
  }

  // The list of buddy groups
  repeated BuddyGroup buddy_groups = 1;
}


message GetStoragePoolsRequest {}

message GetStoragePoolsResponse {
  message StoragePool {
    // The storage pools identifiers
    EntityIdSet id = 1;
    // The storage pools assigned targets identifiers
    repeated EntityIdSet targets = 2;
    // The storage pools assigned buddy groups identifiers
    repeated EntityIdSet buddy_groups = 3;
  }

  // The list of storage pools
  repeated StoragePool pools = 1;
}

message SetAliasRequest {
  // The identifier to set the alias for
  EntityIdVariant entity_id = 1;
  // The new alias
  string new_alias = 2;
}

message SetAliasResponse {}

service Management {
  // Gets the full list of BeeGFS nodes
  rpc GetNodes(GetNodesRequest) returns (GetNodesResponse);
  // Gets the full list of BeeGFS targets
  rpc GetTargets(GetTargetsRequest) returns (GetTargetsResponse);
  // Gets the full list of BeeGFS buddy groups
  rpc GetBuddyGroups(GetBuddyGroupsRequest) returns (GetBuddyGroupsResponse);
  // Gets the full list of BeeGFS storage pools
  rpc GetStoragePools(GetStoragePoolsRequest) returns (GetStoragePoolsResponse);
  // Sets an entity alias
  rpc SetAlias(SetAliasRequest) returns (SetAliasResponse);
}
