// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BeeAgent_UpdateManifest_FullMethodName       = "/agent.BeeAgent/UpdateManifest"
	BeeAgent_ReconciliationStatus_FullMethodName = "/agent.BeeAgent/ReconciliationStatus"
	BeeAgent_CancelReconciliation_FullMethodName = "/agent.BeeAgent/CancelReconciliation"
)

// BeeAgentClient is the client API for BeeAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeeAgentClient interface {
	UpdateManifest(ctx context.Context, in *UpdateManifestRequest, opts ...grpc.CallOption) (*UpdateManifestResponse, error)
	ReconciliationStatus(ctx context.Context, in *ReconciliationStatusRequest, opts ...grpc.CallOption) (*ReconciliationStatusResponse, error)
	CancelReconciliation(ctx context.Context, in *CancelReconciliationRequest, opts ...grpc.CallOption) (*CancelReconciliationResponse, error)
}

type beeAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewBeeAgentClient(cc grpc.ClientConnInterface) BeeAgentClient {
	return &beeAgentClient{cc}
}

func (c *beeAgentClient) UpdateManifest(ctx context.Context, in *UpdateManifestRequest, opts ...grpc.CallOption) (*UpdateManifestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateManifestResponse)
	err := c.cc.Invoke(ctx, BeeAgent_UpdateManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeAgentClient) ReconciliationStatus(ctx context.Context, in *ReconciliationStatusRequest, opts ...grpc.CallOption) (*ReconciliationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReconciliationStatusResponse)
	err := c.cc.Invoke(ctx, BeeAgent_ReconciliationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeAgentClient) CancelReconciliation(ctx context.Context, in *CancelReconciliationRequest, opts ...grpc.CallOption) (*CancelReconciliationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelReconciliationResponse)
	err := c.cc.Invoke(ctx, BeeAgent_CancelReconciliation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeeAgentServer is the server API for BeeAgent service.
// All implementations must embed UnimplementedBeeAgentServer
// for forward compatibility.
type BeeAgentServer interface {
	UpdateManifest(context.Context, *UpdateManifestRequest) (*UpdateManifestResponse, error)
	ReconciliationStatus(context.Context, *ReconciliationStatusRequest) (*ReconciliationStatusResponse, error)
	CancelReconciliation(context.Context, *CancelReconciliationRequest) (*CancelReconciliationResponse, error)
	mustEmbedUnimplementedBeeAgentServer()
}

// UnimplementedBeeAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBeeAgentServer struct{}

func (UnimplementedBeeAgentServer) UpdateManifest(context.Context, *UpdateManifestRequest) (*UpdateManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManifest not implemented")
}
func (UnimplementedBeeAgentServer) ReconciliationStatus(context.Context, *ReconciliationStatusRequest) (*ReconciliationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReconciliationStatus not implemented")
}
func (UnimplementedBeeAgentServer) CancelReconciliation(context.Context, *CancelReconciliationRequest) (*CancelReconciliationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReconciliation not implemented")
}
func (UnimplementedBeeAgentServer) mustEmbedUnimplementedBeeAgentServer() {}
func (UnimplementedBeeAgentServer) testEmbeddedByValue()                  {}

// UnsafeBeeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeeAgentServer will
// result in compilation errors.
type UnsafeBeeAgentServer interface {
	mustEmbedUnimplementedBeeAgentServer()
}

func RegisterBeeAgentServer(s grpc.ServiceRegistrar, srv BeeAgentServer) {
	// If the following call pancis, it indicates UnimplementedBeeAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BeeAgent_ServiceDesc, srv)
}

func _BeeAgent_UpdateManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeAgentServer).UpdateManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeAgent_UpdateManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeAgentServer).UpdateManifest(ctx, req.(*UpdateManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeAgent_ReconciliationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconciliationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeAgentServer).ReconciliationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeAgent_ReconciliationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeAgentServer).ReconciliationStatus(ctx, req.(*ReconciliationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeAgent_CancelReconciliation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReconciliationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeAgentServer).CancelReconciliation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeAgent_CancelReconciliation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeAgentServer).CancelReconciliation(ctx, req.(*CancelReconciliationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeeAgent_ServiceDesc is the grpc.ServiceDesc for BeeAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeeAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.BeeAgent",
	HandlerType: (*BeeAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateManifest",
			Handler:    _BeeAgent_UpdateManifest_Handler,
		},
		{
			MethodName: "ReconciliationStatus",
			Handler:    _BeeAgent_ReconciliationStatus_Handler,
		},
		{
			MethodName: "CancelReconciliation",
			Handler:    _BeeAgent_CancelReconciliation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}
