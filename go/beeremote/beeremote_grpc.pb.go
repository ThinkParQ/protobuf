// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: beeremote.proto

package beeremote

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BeeRemote_SubmitJob_FullMethodName    = "/beeremote.BeeRemote/SubmitJob"
	BeeRemote_UpdateJob_FullMethodName    = "/beeremote.BeeRemote/UpdateJob"
	BeeRemote_GetJobs_FullMethodName      = "/beeremote.BeeRemote/GetJobs"
	BeeRemote_UpdateWork_FullMethodName   = "/beeremote.BeeRemote/UpdateWork"
	BeeRemote_GetRSTConfig_FullMethodName = "/beeremote.BeeRemote/GetRSTConfig"
)

// BeeRemoteClient is the client API for BeeRemote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeeRemoteClient interface {
	SubmitJob(ctx context.Context, in *SubmitJobRequest, opts ...grpc.CallOption) (*SubmitJobResponse, error)
	UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error)
	GetJobs(ctx context.Context, in *GetJobsRequest, opts ...grpc.CallOption) (BeeRemote_GetJobsClient, error)
	// Rather then BeeRemote connecting to a worker node and using a streaming RPC to return work
	// results, we have BeeRemote expose a unary RPC that is used to send results back as they are
	// available. This allows us to avoid complex error handling needed to reliably use streams, and
	// more easily adhere to our requirement that work requests are always owned by BeeRemote or its
	// worker nodes and no polling is needed to check on the state of the requests. With this
	// approach either side can make an unary request for a particular work request, and look at the
	// response to verify ownership has successfully move to the other node (i.e., the node has
	// committed the request to its on-disk database). IMPORTANT: This is only intended to be called
	// by worker nodes.
	UpdateWork(ctx context.Context, in *UpdateWorkRequest, opts ...grpc.CallOption) (*UpdateWorkResponse, error)
	GetRSTConfig(ctx context.Context, in *GetRSTConfigRequest, opts ...grpc.CallOption) (*GetRSTConfigResponse, error)
}

type beeRemoteClient struct {
	cc grpc.ClientConnInterface
}

func NewBeeRemoteClient(cc grpc.ClientConnInterface) BeeRemoteClient {
	return &beeRemoteClient{cc}
}

func (c *beeRemoteClient) SubmitJob(ctx context.Context, in *SubmitJobRequest, opts ...grpc.CallOption) (*SubmitJobResponse, error) {
	out := new(SubmitJobResponse)
	err := c.cc.Invoke(ctx, BeeRemote_SubmitJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeRemoteClient) UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error) {
	out := new(UpdateJobResponse)
	err := c.cc.Invoke(ctx, BeeRemote_UpdateJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeRemoteClient) GetJobs(ctx context.Context, in *GetJobsRequest, opts ...grpc.CallOption) (BeeRemote_GetJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BeeRemote_ServiceDesc.Streams[0], BeeRemote_GetJobs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &beeRemoteGetJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BeeRemote_GetJobsClient interface {
	Recv() (*GetJobsResponse, error)
	grpc.ClientStream
}

type beeRemoteGetJobsClient struct {
	grpc.ClientStream
}

func (x *beeRemoteGetJobsClient) Recv() (*GetJobsResponse, error) {
	m := new(GetJobsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *beeRemoteClient) UpdateWork(ctx context.Context, in *UpdateWorkRequest, opts ...grpc.CallOption) (*UpdateWorkResponse, error) {
	out := new(UpdateWorkResponse)
	err := c.cc.Invoke(ctx, BeeRemote_UpdateWork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeRemoteClient) GetRSTConfig(ctx context.Context, in *GetRSTConfigRequest, opts ...grpc.CallOption) (*GetRSTConfigResponse, error) {
	out := new(GetRSTConfigResponse)
	err := c.cc.Invoke(ctx, BeeRemote_GetRSTConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeeRemoteServer is the server API for BeeRemote service.
// All implementations must embed UnimplementedBeeRemoteServer
// for forward compatibility
type BeeRemoteServer interface {
	SubmitJob(context.Context, *SubmitJobRequest) (*SubmitJobResponse, error)
	UpdateJob(context.Context, *UpdateJobRequest) (*UpdateJobResponse, error)
	GetJobs(*GetJobsRequest, BeeRemote_GetJobsServer) error
	// Rather then BeeRemote connecting to a worker node and using a streaming RPC to return work
	// results, we have BeeRemote expose a unary RPC that is used to send results back as they are
	// available. This allows us to avoid complex error handling needed to reliably use streams, and
	// more easily adhere to our requirement that work requests are always owned by BeeRemote or its
	// worker nodes and no polling is needed to check on the state of the requests. With this
	// approach either side can make an unary request for a particular work request, and look at the
	// response to verify ownership has successfully move to the other node (i.e., the node has
	// committed the request to its on-disk database). IMPORTANT: This is only intended to be called
	// by worker nodes.
	UpdateWork(context.Context, *UpdateWorkRequest) (*UpdateWorkResponse, error)
	GetRSTConfig(context.Context, *GetRSTConfigRequest) (*GetRSTConfigResponse, error)
	mustEmbedUnimplementedBeeRemoteServer()
}

// UnimplementedBeeRemoteServer must be embedded to have forward compatible implementations.
type UnimplementedBeeRemoteServer struct {
}

func (UnimplementedBeeRemoteServer) SubmitJob(context.Context, *SubmitJobRequest) (*SubmitJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitJob not implemented")
}
func (UnimplementedBeeRemoteServer) UpdateJob(context.Context, *UpdateJobRequest) (*UpdateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (UnimplementedBeeRemoteServer) GetJobs(*GetJobsRequest, BeeRemote_GetJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (UnimplementedBeeRemoteServer) UpdateWork(context.Context, *UpdateWorkRequest) (*UpdateWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWork not implemented")
}
func (UnimplementedBeeRemoteServer) GetRSTConfig(context.Context, *GetRSTConfigRequest) (*GetRSTConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRSTConfig not implemented")
}
func (UnimplementedBeeRemoteServer) mustEmbedUnimplementedBeeRemoteServer() {}

// UnsafeBeeRemoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeeRemoteServer will
// result in compilation errors.
type UnsafeBeeRemoteServer interface {
	mustEmbedUnimplementedBeeRemoteServer()
}

func RegisterBeeRemoteServer(s grpc.ServiceRegistrar, srv BeeRemoteServer) {
	s.RegisterService(&BeeRemote_ServiceDesc, srv)
}

func _BeeRemote_SubmitJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeRemoteServer).SubmitJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeRemote_SubmitJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeRemoteServer).SubmitJob(ctx, req.(*SubmitJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeRemote_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeRemoteServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeRemote_UpdateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeRemoteServer).UpdateJob(ctx, req.(*UpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeRemote_GetJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetJobsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BeeRemoteServer).GetJobs(m, &beeRemoteGetJobsServer{stream})
}

type BeeRemote_GetJobsServer interface {
	Send(*GetJobsResponse) error
	grpc.ServerStream
}

type beeRemoteGetJobsServer struct {
	grpc.ServerStream
}

func (x *beeRemoteGetJobsServer) Send(m *GetJobsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BeeRemote_UpdateWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeRemoteServer).UpdateWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeRemote_UpdateWork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeRemoteServer).UpdateWork(ctx, req.(*UpdateWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeRemote_GetRSTConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRSTConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeRemoteServer).GetRSTConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeRemote_GetRSTConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeRemoteServer).GetRSTConfig(ctx, req.(*GetRSTConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeeRemote_ServiceDesc is the grpc.ServiceDesc for BeeRemote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeeRemote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "beeremote.BeeRemote",
	HandlerType: (*BeeRemoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitJob",
			Handler:    _BeeRemote_SubmitJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _BeeRemote_UpdateJob_Handler,
		},
		{
			MethodName: "UpdateWork",
			Handler:    _BeeRemote_UpdateWork_Handler,
		},
		{
			MethodName: "GetRSTConfig",
			Handler:    _BeeRemote_GetRSTConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetJobs",
			Handler:       _BeeRemote_GetJobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "beeremote.proto",
}
