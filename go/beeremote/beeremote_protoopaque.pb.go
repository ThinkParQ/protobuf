// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.2
// source: beeremote.proto

//go:build protoopaque

package beeremote

import (
	flex "github.com/thinkparq/protobuf/go/flex"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubmitJobResponse_ResponseStatus int32

const (
	SubmitJobResponse_INVALID             SubmitJobResponse_ResponseStatus = 0
	SubmitJobResponse_CREATED             SubmitJobResponse_ResponseStatus = 1
	SubmitJobResponse_EXISTING            SubmitJobResponse_ResponseStatus = 2
	SubmitJobResponse_NOT_ALLOWED         SubmitJobResponse_ResponseStatus = 3
	SubmitJobResponse_ALREADY_COMPLETE    SubmitJobResponse_ResponseStatus = 4
	SubmitJobResponse_ALREADY_OFFLOADED   SubmitJobResponse_ResponseStatus = 5
	SubmitJobResponse_FAILED_PRECONDITION SubmitJobResponse_ResponseStatus = 6
)

// Enum value maps for SubmitJobResponse_ResponseStatus.
var (
	SubmitJobResponse_ResponseStatus_name = map[int32]string{
		0: "INVALID",
		1: "CREATED",
		2: "EXISTING",
		3: "NOT_ALLOWED",
		4: "ALREADY_COMPLETE",
		5: "ALREADY_OFFLOADED",
		6: "FAILED_PRECONDITION",
	}
	SubmitJobResponse_ResponseStatus_value = map[string]int32{
		"INVALID":             0,
		"CREATED":             1,
		"EXISTING":            2,
		"NOT_ALLOWED":         3,
		"ALREADY_COMPLETE":    4,
		"ALREADY_OFFLOADED":   5,
		"FAILED_PRECONDITION": 6,
	}
)

func (x SubmitJobResponse_ResponseStatus) Enum() *SubmitJobResponse_ResponseStatus {
	p := new(SubmitJobResponse_ResponseStatus)
	*p = x
	return p
}

func (x SubmitJobResponse_ResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitJobResponse_ResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_beeremote_proto_enumTypes[0].Descriptor()
}

func (SubmitJobResponse_ResponseStatus) Type() protoreflect.EnumType {
	return &file_beeremote_proto_enumTypes[0]
}

func (x SubmitJobResponse_ResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type JobRequest_GenerationStatus_State int32

const (
	// This state has no semantic value and should never be UNSPECIFIED unless there is a bug.
	JobRequest_GenerationStatus_UNSPECIFIED JobRequest_GenerationStatus_State = 0
	// This state indicates the request has already been completed. The generation_status's
	// message field must be populated with the file's beegfs-mtime in RFC3339 format (i.e.
	// 2006-01-02T15:04:05Z07:00).
	JobRequest_GenerationStatus_ALREADY_COMPLETE JobRequest_GenerationStatus_State = 1
	// This state indicates the request has already been offloaded.
	JobRequest_GenerationStatus_ALREADY_OFFLOADED JobRequest_GenerationStatus_State = 2
	// This state indicates a preconditional failed and will always result in the job being
	// cancelled. It is imperative that this state is only used when it is safe to submit
	// the job request again without first calling rst.CompleteWorkRequests().
	JobRequest_GenerationStatus_FAILED_PRECONDITION JobRequest_GenerationStatus_State = 3
	// This state indicates an error occurred that requires rst.CompleteWorkRequests() to
	// cleanup.
	JobRequest_GenerationStatus_ERROR JobRequest_GenerationStatus_State = 4
)

// Enum value maps for JobRequest_GenerationStatus_State.
var (
	JobRequest_GenerationStatus_State_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ALREADY_COMPLETE",
		2: "ALREADY_OFFLOADED",
		3: "FAILED_PRECONDITION",
		4: "ERROR",
	}
	JobRequest_GenerationStatus_State_value = map[string]int32{
		"UNSPECIFIED":         0,
		"ALREADY_COMPLETE":    1,
		"ALREADY_OFFLOADED":   2,
		"FAILED_PRECONDITION": 3,
		"ERROR":               4,
	}
)

func (x JobRequest_GenerationStatus_State) Enum() *JobRequest_GenerationStatus_State {
	p := new(JobRequest_GenerationStatus_State)
	*p = x
	return p
}

func (x JobRequest_GenerationStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobRequest_GenerationStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_beeremote_proto_enumTypes[1].Descriptor()
}

func (JobRequest_GenerationStatus_State) Type() protoreflect.EnumType {
	return &file_beeremote_proto_enumTypes[1]
}

func (x JobRequest_GenerationStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type Job_State int32

const (
	// This state has no semantic value and the state should never be UNSPECIFIED unless there
	// is a bug.
	Job_UNSPECIFIED Job_State = 0
	// Used when the state of a job cannot be definitively determined. For example if a work
	// request is in an unknown state, or if all WRs are either in a terminal state or require
	// user intervention, but they are not all in the same state.
	Job_UNKNOWN Job_State = 1
	// Initially all jobs start out in the UNASSIGNED state. This indicates BeeRemote has not
	// had a chance to schedule work requests for the job to any worker node(s).
	Job_UNASSIGNED Job_State = 2
	// When all worker node(s) have accepted the job's work requests, but may be waiting on
	// an available worker goroutine to pickup the request.
	Job_SCHEDULED Job_State = 3
	// When all work requests for this job are in progress.
	Job_RUNNING Job_State = 4
	// TODO: https://github.com/ThinkParQ/bee-remote/issues/16
	// A user manually requested the job be paused.
	// PAUSED = 5;
	//
	// ERROR indicates one or more transient/ephemeral error(s) occurred carrying out the job,
	// but the worker nodes are still retrying the requests. Once the allowed number of retries
	// or retry timeout is exceed, the work requests will fail, and the overall job state will
	// be failed. In this state work requests are still active on the worker nodes, and jobs in
	// the error state must be cancelled or complete successfully before new jobs are allowed
	// for this RST+path combo.
	Job_ERROR Job_State = 6
	// FAILED indicates one or more unrecoverable errors occurred carrying out this job.
	// Typically jobs fail due to some condition that requires user intervention, such as
	// updating the RST configuration, but can also fail if work requests exceed the allowed
	// number of retries or retry timeout. Failed indicates no work requests for this job are
	// scheduled to the worker nodes (meaning it can be cancelled without talking to the
	// workers), however any associated external IDs (such as a multipart upload) have not been
	// invalidated, because (1) if we're able to resume the job later this avoids having to
	// reupload/download data and (2) it is unlikely the RST is in a state we can interact with
	// it anyway. As a result jobs in the failed state must be cancelled before new jobs are
	// allowed for this RST+path combo.
	//
	// TODO: https://github.com/ThinkParQ/bee-remote/issues/27.
	// Update the ERROR and FAILED state descriptions based on the decisions made around
	// allowing jobs to be resumed after an error/failure occurs.
	Job_FAILED Job_State = 7
	// Jobs and their WRs may be cancelled manually be a user. This is a terminal state and no
	// further changes are possible once a job enters this state.
	Job_CANCELLED Job_State = 8
	// If the job and its WRs completed successfully. This is a terminal state and no further
	// state changes are possible once a job enters this state.
	Job_COMPLETED Job_State = 9
	// If the job's WRs completed successfully and a stub has replaced the local file. This is a
	// terminal state and no further state changes are possible once a job enters this state.
	Job_OFFLOADED Job_State = 10
)

// Enum value maps for Job_State.
var (
	Job_State_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "UNKNOWN",
		2:  "UNASSIGNED",
		3:  "SCHEDULED",
		4:  "RUNNING",
		6:  "ERROR",
		7:  "FAILED",
		8:  "CANCELLED",
		9:  "COMPLETED",
		10: "OFFLOADED",
	}
	Job_State_value = map[string]int32{
		"UNSPECIFIED": 0,
		"UNKNOWN":     1,
		"UNASSIGNED":  2,
		"SCHEDULED":   3,
		"RUNNING":     4,
		"ERROR":       6,
		"FAILED":      7,
		"CANCELLED":   8,
		"COMPLETED":   9,
		"OFFLOADED":   10,
	}
)

func (x Job_State) Enum() *Job_State {
	p := new(Job_State)
	*p = x
	return p
}

func (x Job_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_State) Descriptor() protoreflect.EnumDescriptor {
	return file_beeremote_proto_enumTypes[2].Descriptor()
}

func (Job_State) Type() protoreflect.EnumType {
	return &file_beeremote_proto_enumTypes[2]
}

func (x Job_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type UpdateJobsRequest_NewState int32

const (
	UpdateJobsRequest_UNSPECIFIED UpdateJobsRequest_NewState = 0
	UpdateJobsRequest_CANCELLED   UpdateJobsRequest_NewState = 1
	UpdateJobsRequest_DELETED     UpdateJobsRequest_NewState = 2
)

// Enum value maps for UpdateJobsRequest_NewState.
var (
	UpdateJobsRequest_NewState_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "CANCELLED",
		2: "DELETED",
	}
	UpdateJobsRequest_NewState_value = map[string]int32{
		"UNSPECIFIED": 0,
		"CANCELLED":   1,
		"DELETED":     2,
	}
)

func (x UpdateJobsRequest_NewState) Enum() *UpdateJobsRequest_NewState {
	p := new(UpdateJobsRequest_NewState)
	*p = x
	return p
}

func (x UpdateJobsRequest_NewState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateJobsRequest_NewState) Descriptor() protoreflect.EnumDescriptor {
	return file_beeremote_proto_enumTypes[3].Descriptor()
}

func (UpdateJobsRequest_NewState) Type() protoreflect.EnumType {
	return &file_beeremote_proto_enumTypes[3]
}

func (x UpdateJobsRequest_NewState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type SubmitJobRequest struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Request *JobRequest            `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SubmitJobRequest) Reset() {
	*x = SubmitJobRequest{}
	mi := &file_beeremote_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobRequest) ProtoMessage() {}

func (x *SubmitJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SubmitJobRequest) GetRequest() *JobRequest {
	if x != nil {
		return x.xxx_hidden_Request
	}
	return nil
}

func (x *SubmitJobRequest) SetRequest(v *JobRequest) {
	x.xxx_hidden_Request = v
}

func (x *SubmitJobRequest) HasRequest() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Request != nil
}

func (x *SubmitJobRequest) ClearRequest() {
	x.xxx_hidden_Request = nil
}

type SubmitJobRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Request *JobRequest
}

func (b0 SubmitJobRequest_builder) Build() *SubmitJobRequest {
	m0 := &SubmitJobRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Request = b.Request
	return m0
}

type SubmitJobResponse struct {
	state             protoimpl.MessageState           `protogen:"opaque.v1"`
	xxx_hidden_Result *JobResult                       `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	xxx_hidden_Status SubmitJobResponse_ResponseStatus `protobuf:"varint,2,opt,name=status,proto3,enum=beeremote.SubmitJobResponse_ResponseStatus" json:"status,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SubmitJobResponse) Reset() {
	*x = SubmitJobResponse{}
	mi := &file_beeremote_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobResponse) ProtoMessage() {}

func (x *SubmitJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SubmitJobResponse) GetResult() *JobResult {
	if x != nil {
		return x.xxx_hidden_Result
	}
	return nil
}

func (x *SubmitJobResponse) GetStatus() SubmitJobResponse_ResponseStatus {
	if x != nil {
		return x.xxx_hidden_Status
	}
	return SubmitJobResponse_INVALID
}

func (x *SubmitJobResponse) SetResult(v *JobResult) {
	x.xxx_hidden_Result = v
}

func (x *SubmitJobResponse) SetStatus(v SubmitJobResponse_ResponseStatus) {
	x.xxx_hidden_Status = v
}

func (x *SubmitJobResponse) HasResult() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Result != nil
}

func (x *SubmitJobResponse) ClearResult() {
	x.xxx_hidden_Result = nil
}

type SubmitJobResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Result *JobResult
	Status SubmitJobResponse_ResponseStatus
}

func (b0 SubmitJobResponse_builder) Build() *SubmitJobResponse {
	m0 := &SubmitJobResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Result = b.Result
	x.xxx_hidden_Status = b.Status
	return m0
}

// A JobRequest contains all the information necessary for BeeRemote to trigger
// a job on the appropriate worker node(s) (like BeeSync nodes) based on the
// particular request_type specified by the user. It is the external request
// so it does not include automatically generated fields like the job ID or
// anything about the work request(s) used to execute the job.
type JobRequest struct {
	state                          protoimpl.MessageState       `protogen:"opaque.v1"`
	xxx_hidden_Path                string                       `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	xxx_hidden_Name                string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	xxx_hidden_Priority            int32                        `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	xxx_hidden_RemoteStorageTarget uint32                       `protobuf:"varint,4,opt,name=remote_storage_target,json=remoteStorageTarget,proto3" json:"remote_storage_target,omitempty"`
	xxx_hidden_Type                isJobRequest_Type            `protobuf_oneof:"type"`
	xxx_hidden_Force               bool                         `protobuf:"varint,5,opt,name=force,proto3" json:"force,omitempty"`
	xxx_hidden_StubLocal           bool                         `protobuf:"varint,7,opt,name=stub_local,json=stubLocal,proto3" json:"stub_local,omitempty"`
	xxx_hidden_GenerationStatus    *JobRequest_GenerationStatus `protobuf:"bytes,8,opt,name=generation_status,json=generationStatus,proto3" json:"generation_status,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *JobRequest) Reset() {
	*x = JobRequest{}
	mi := &file_beeremote_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRequest) ProtoMessage() {}

func (x *JobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *JobRequest) GetPath() string {
	if x != nil {
		return x.xxx_hidden_Path
	}
	return ""
}

func (x *JobRequest) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *JobRequest) GetPriority() int32 {
	if x != nil {
		return x.xxx_hidden_Priority
	}
	return 0
}

func (x *JobRequest) GetRemoteStorageTarget() uint32 {
	if x != nil {
		return x.xxx_hidden_RemoteStorageTarget
	}
	return 0
}

func (x *JobRequest) GetSync() *flex.SyncJob {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*jobRequest_Sync); ok {
			return x.Sync
		}
	}
	return nil
}

func (x *JobRequest) GetMock() *flex.MockJob {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*jobRequest_Mock); ok {
			return x.Mock
		}
	}
	return nil
}

func (x *JobRequest) GetBuilder() *flex.BuilderJob {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*jobRequest_Builder); ok {
			return x.Builder
		}
	}
	return nil
}

func (x *JobRequest) GetForce() bool {
	if x != nil {
		return x.xxx_hidden_Force
	}
	return false
}

func (x *JobRequest) GetStubLocal() bool {
	if x != nil {
		return x.xxx_hidden_StubLocal
	}
	return false
}

func (x *JobRequest) GetGenerationStatus() *JobRequest_GenerationStatus {
	if x != nil {
		return x.xxx_hidden_GenerationStatus
	}
	return nil
}

func (x *JobRequest) SetPath(v string) {
	x.xxx_hidden_Path = v
}

func (x *JobRequest) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *JobRequest) SetPriority(v int32) {
	x.xxx_hidden_Priority = v
}

func (x *JobRequest) SetRemoteStorageTarget(v uint32) {
	x.xxx_hidden_RemoteStorageTarget = v
}

func (x *JobRequest) SetSync(v *flex.SyncJob) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &jobRequest_Sync{v}
}

func (x *JobRequest) SetMock(v *flex.MockJob) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &jobRequest_Mock{v}
}

func (x *JobRequest) SetBuilder(v *flex.BuilderJob) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &jobRequest_Builder{v}
}

func (x *JobRequest) SetForce(v bool) {
	x.xxx_hidden_Force = v
}

func (x *JobRequest) SetStubLocal(v bool) {
	x.xxx_hidden_StubLocal = v
}

func (x *JobRequest) SetGenerationStatus(v *JobRequest_GenerationStatus) {
	x.xxx_hidden_GenerationStatus = v
}

func (x *JobRequest) HasType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Type != nil
}

func (x *JobRequest) HasSync() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*jobRequest_Sync)
	return ok
}

func (x *JobRequest) HasMock() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*jobRequest_Mock)
	return ok
}

func (x *JobRequest) HasBuilder() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*jobRequest_Builder)
	return ok
}

func (x *JobRequest) HasGenerationStatus() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_GenerationStatus != nil
}

func (x *JobRequest) ClearType() {
	x.xxx_hidden_Type = nil
}

func (x *JobRequest) ClearSync() {
	if _, ok := x.xxx_hidden_Type.(*jobRequest_Sync); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *JobRequest) ClearMock() {
	if _, ok := x.xxx_hidden_Type.(*jobRequest_Mock); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *JobRequest) ClearBuilder() {
	if _, ok := x.xxx_hidden_Type.(*jobRequest_Builder); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *JobRequest) ClearGenerationStatus() {
	x.xxx_hidden_GenerationStatus = nil
}

const JobRequest_Type_not_set_case case_JobRequest_Type = 0
const JobRequest_Sync_case case_JobRequest_Type = 10
const JobRequest_Mock_case case_JobRequest_Type = 11
const JobRequest_Builder_case case_JobRequest_Type = 12

func (x *JobRequest) WhichType() case_JobRequest_Type {
	if x == nil {
		return JobRequest_Type_not_set_case
	}
	switch x.xxx_hidden_Type.(type) {
	case *jobRequest_Sync:
		return JobRequest_Sync_case
	case *jobRequest_Mock:
		return JobRequest_Mock_case
	case *jobRequest_Builder:
		return JobRequest_Builder_case
	default:
		return JobRequest_Type_not_set_case
	}
}

type JobRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Path string
	// An arbitrary name for a job can be specified.
	// Job names are optional and not need to be unique.
	Name     string
	Priority int32
	// This is the uint32 ID, NOT an actual reference to an RST.
	// This ensures we don't have to include the full RST configuration,
	// every time we send a Entry (commonly as part of a Job).
	RemoteStorageTarget uint32
	// Fields of oneof xxx_hidden_Type:
	Sync    *flex.SyncJob
	Mock    *flex.MockJob
	Builder *flex.BuilderJob
	// -- end of xxx_hidden_Type
	// When force is set this request will create a new job even if there is already a completed
	// job. When forced the request will return an error if there is already a job running. This is
	// part of the JobRequest instead of the SubmitJobRequest message in case it ever is important
	// to know if a particular job request was forced.
	Force bool
	// When stub_local is set the local file with be a stub file
	StubLocal bool
	// generation_status reports the outcome of generating this JobRequest (e.g. already complete,
	// already offloaded, or an error message). This is used by job manager to determine whether the
	// job is already in a terminal or failed state.
	GenerationStatus *JobRequest_GenerationStatus
}

func (b0 JobRequest_builder) Build() *JobRequest {
	m0 := &JobRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Path = b.Path
	x.xxx_hidden_Name = b.Name
	x.xxx_hidden_Priority = b.Priority
	x.xxx_hidden_RemoteStorageTarget = b.RemoteStorageTarget
	if b.Sync != nil {
		x.xxx_hidden_Type = &jobRequest_Sync{b.Sync}
	}
	if b.Mock != nil {
		x.xxx_hidden_Type = &jobRequest_Mock{b.Mock}
	}
	if b.Builder != nil {
		x.xxx_hidden_Type = &jobRequest_Builder{b.Builder}
	}
	x.xxx_hidden_Force = b.Force
	x.xxx_hidden_StubLocal = b.StubLocal
	x.xxx_hidden_GenerationStatus = b.GenerationStatus
	return m0
}

type case_JobRequest_Type protoreflect.FieldNumber

func (x case_JobRequest_Type) String() string {
	md := file_beeremote_proto_msgTypes[2].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isJobRequest_Type interface {
	isJobRequest_Type()
}

type jobRequest_Sync struct {
	Sync *flex.SyncJob `protobuf:"bytes,10,opt,name=sync,proto3,oneof"`
}

type jobRequest_Mock struct {
	Mock *flex.MockJob `protobuf:"bytes,11,opt,name=mock,proto3,oneof"`
}

type jobRequest_Builder struct {
	Builder *flex.BuilderJob `protobuf:"bytes,12,opt,name=builder,proto3,oneof"`
}

func (*jobRequest_Sync) isJobRequest_Type() {}

func (*jobRequest_Mock) isJobRequest_Type() {}

func (*jobRequest_Builder) isJobRequest_Type() {}

// Job contains all the data from the original request plus the job ID and
// current status. This is what is stored in the database for each path. We
// don't embed results of a job in the Job because we store the Job and its
// WorkResults (the latest work response from each worker node) in separate
// key/value stores. This approach simplifies encoding and decoding these
// messages and allows us to quickly look up jobs by path or ID.
type Job struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_Request    *JobRequest            `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	xxx_hidden_Created    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	xxx_hidden_Status     *Job_Status            `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	xxx_hidden_ExternalId string                 `protobuf:"bytes,5,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	xxx_hidden_StartMtime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_mtime,json=startMtime,proto3,oneof" json:"start_mtime,omitempty"`
	xxx_hidden_StopMtime  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=stop_mtime,json=stopMtime,proto3,oneof" json:"stop_mtime,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_beeremote_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Job) GetId() string {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return ""
}

func (x *Job) GetRequest() *JobRequest {
	if x != nil {
		return x.xxx_hidden_Request
	}
	return nil
}

func (x *Job) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Created
	}
	return nil
}

func (x *Job) GetStatus() *Job_Status {
	if x != nil {
		return x.xxx_hidden_Status
	}
	return nil
}

func (x *Job) GetExternalId() string {
	if x != nil {
		return x.xxx_hidden_ExternalId
	}
	return ""
}

func (x *Job) GetStartMtime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_StartMtime
	}
	return nil
}

func (x *Job) GetStopMtime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_StopMtime
	}
	return nil
}

func (x *Job) SetId(v string) {
	x.xxx_hidden_Id = v
}

func (x *Job) SetRequest(v *JobRequest) {
	x.xxx_hidden_Request = v
}

func (x *Job) SetCreated(v *timestamppb.Timestamp) {
	x.xxx_hidden_Created = v
}

func (x *Job) SetStatus(v *Job_Status) {
	x.xxx_hidden_Status = v
}

func (x *Job) SetExternalId(v string) {
	x.xxx_hidden_ExternalId = v
}

func (x *Job) SetStartMtime(v *timestamppb.Timestamp) {
	x.xxx_hidden_StartMtime = v
}

func (x *Job) SetStopMtime(v *timestamppb.Timestamp) {
	x.xxx_hidden_StopMtime = v
}

func (x *Job) HasRequest() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Request != nil
}

func (x *Job) HasCreated() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Created != nil
}

func (x *Job) HasStatus() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Status != nil
}

func (x *Job) HasStartMtime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_StartMtime != nil
}

func (x *Job) HasStopMtime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_StopMtime != nil
}

func (x *Job) ClearRequest() {
	x.xxx_hidden_Request = nil
}

func (x *Job) ClearCreated() {
	x.xxx_hidden_Created = nil
}

func (x *Job) ClearStatus() {
	x.xxx_hidden_Status = nil
}

func (x *Job) ClearStartMtime() {
	x.xxx_hidden_StartMtime = nil
}

func (x *Job) ClearStopMtime() {
	x.xxx_hidden_StopMtime = nil
}

type Job_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id      string
	Request *JobRequest
	Created *timestamppb.Timestamp
	// Status is usually updated using `GetStatus()` which returns a status a pointer to the status
	// of the overall job. Because it returns a pointer the status and/or message can be updated
	// directly. This allows you to modify one but not the other field (commonly message can change
	// but status should not). The state should encompass the results for individual work requests.
	// For example if some WRs are finished and others are still running the state would be RUNNING.
	Status *Job_Status
	// Used as the upload ID for multipart uploads, or any other time
	// an external identifer is needed to coordinate a distributed transfer.
	ExternalId string
	// start_mtime is the modification timestamp from a stat of the local file in BeeGFS captured
	// just before the job is started and any work requests are scheduled. This may be nil if there
	// is no file in BeeGFS at the start of the job. A caller might wish to compare the start/stop
	// mtime to determine if a file changed while being synchronized.
	StartMtime *timestamppb.Timestamp
	// stop_mtime is the modification timestamp from a stat of the local file in BeeGFS captured
	// just before the job is completed but after all work requests have finished executing. The
	// stop_mtime is always set regardless if the job completes successfully, was aborted, or there
	// was an error completing the job. Consumers should not blindly rely on stop_mtime to determine
	// the state of a file, and should also check the job state. For example to determine if a file
	// in BeeGFS based on its current mtime matches the mtime of a successfully uploaded file. This
	// may be nil if there is no file in BeeGFS at the end of the job.
	StopMtime *timestamppb.Timestamp
}

func (b0 Job_builder) Build() *Job {
	m0 := &Job{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Request = b.Request
	x.xxx_hidden_Created = b.Created
	x.xxx_hidden_Status = b.Status
	x.xxx_hidden_ExternalId = b.ExternalId
	x.xxx_hidden_StartMtime = b.StartMtime
	x.xxx_hidden_StopMtime = b.StopMtime
	return m0
}

// The JobResult is used to return information about a job and its work results. Note the work
// results are not directly embedded in the Job message to reduce the amount of data that needs to
// be stored on-disk (notably work requests are deterministically generated).
type JobResult struct {
	state                   protoimpl.MessageState   `protogen:"opaque.v1"`
	xxx_hidden_Job          *Job                     `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	xxx_hidden_WorkRequests *[]*flex.WorkRequest     `protobuf:"bytes,2,rep,name=work_requests,json=workRequests,proto3" json:"work_requests,omitempty"`
	xxx_hidden_WorkResults  *[]*JobResult_WorkResult `protobuf:"bytes,3,rep,name=work_results,json=workResults,proto3" json:"work_results,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *JobResult) Reset() {
	*x = JobResult{}
	mi := &file_beeremote_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResult) ProtoMessage() {}

func (x *JobResult) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *JobResult) GetJob() *Job {
	if x != nil {
		return x.xxx_hidden_Job
	}
	return nil
}

func (x *JobResult) GetWorkRequests() []*flex.WorkRequest {
	if x != nil {
		if x.xxx_hidden_WorkRequests != nil {
			return *x.xxx_hidden_WorkRequests
		}
	}
	return nil
}

func (x *JobResult) GetWorkResults() []*JobResult_WorkResult {
	if x != nil {
		if x.xxx_hidden_WorkResults != nil {
			return *x.xxx_hidden_WorkResults
		}
	}
	return nil
}

func (x *JobResult) SetJob(v *Job) {
	x.xxx_hidden_Job = v
}

func (x *JobResult) SetWorkRequests(v []*flex.WorkRequest) {
	x.xxx_hidden_WorkRequests = &v
}

func (x *JobResult) SetWorkResults(v []*JobResult_WorkResult) {
	x.xxx_hidden_WorkResults = &v
}

func (x *JobResult) HasJob() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Job != nil
}

func (x *JobResult) ClearJob() {
	x.xxx_hidden_Job = nil
}

type JobResult_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Job          *Job
	WorkRequests []*flex.WorkRequest
	WorkResults  []*JobResult_WorkResult
}

func (b0 JobResult_builder) Build() *JobResult {
	m0 := &JobResult{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Job = b.Job
	x.xxx_hidden_WorkRequests = &b.WorkRequests
	x.xxx_hidden_WorkResults = &b.WorkResults
	return m0
}

type UpdatePathsRequest struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_PathPrefix      string                 `protobuf:"bytes,1,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	xxx_hidden_RequestedUpdate *UpdateJobsRequest     `protobuf:"bytes,2,opt,name=requested_update,json=requestedUpdate,proto3" json:"requested_update,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *UpdatePathsRequest) Reset() {
	*x = UpdatePathsRequest{}
	mi := &file_beeremote_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePathsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePathsRequest) ProtoMessage() {}

func (x *UpdatePathsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdatePathsRequest) GetPathPrefix() string {
	if x != nil {
		return x.xxx_hidden_PathPrefix
	}
	return ""
}

func (x *UpdatePathsRequest) GetRequestedUpdate() *UpdateJobsRequest {
	if x != nil {
		return x.xxx_hidden_RequestedUpdate
	}
	return nil
}

func (x *UpdatePathsRequest) SetPathPrefix(v string) {
	x.xxx_hidden_PathPrefix = v
}

func (x *UpdatePathsRequest) SetRequestedUpdate(v *UpdateJobsRequest) {
	x.xxx_hidden_RequestedUpdate = v
}

func (x *UpdatePathsRequest) HasRequestedUpdate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_RequestedUpdate != nil
}

func (x *UpdatePathsRequest) ClearRequestedUpdate() {
	x.xxx_hidden_RequestedUpdate = nil
}

type UpdatePathsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	PathPrefix      string
	RequestedUpdate *UpdateJobsRequest
}

func (b0 UpdatePathsRequest_builder) Build() *UpdatePathsRequest {
	m0 := &UpdatePathsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_PathPrefix = b.PathPrefix
	x.xxx_hidden_RequestedUpdate = b.RequestedUpdate
	return m0
}

type UpdatePathsResponse struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Path         string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	xxx_hidden_UpdateResult *UpdateJobsResponse    `protobuf:"bytes,2,opt,name=update_result,json=updateResult,proto3" json:"update_result,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *UpdatePathsResponse) Reset() {
	*x = UpdatePathsResponse{}
	mi := &file_beeremote_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePathsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePathsResponse) ProtoMessage() {}

func (x *UpdatePathsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdatePathsResponse) GetPath() string {
	if x != nil {
		return x.xxx_hidden_Path
	}
	return ""
}

func (x *UpdatePathsResponse) GetUpdateResult() *UpdateJobsResponse {
	if x != nil {
		return x.xxx_hidden_UpdateResult
	}
	return nil
}

func (x *UpdatePathsResponse) SetPath(v string) {
	x.xxx_hidden_Path = v
}

func (x *UpdatePathsResponse) SetUpdateResult(v *UpdateJobsResponse) {
	x.xxx_hidden_UpdateResult = v
}

func (x *UpdatePathsResponse) HasUpdateResult() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_UpdateResult != nil
}

func (x *UpdatePathsResponse) ClearUpdateResult() {
	x.xxx_hidden_UpdateResult = nil
}

type UpdatePathsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Path         string
	UpdateResult *UpdateJobsResponse
}

func (b0 UpdatePathsResponse_builder) Build() *UpdatePathsResponse {
	m0 := &UpdatePathsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Path = b.Path
	x.xxx_hidden_UpdateResult = b.UpdateResult
	return m0
}

// UpdateJobsRequest is used to update one or more jobs for a particular path.
type UpdateJobsRequest struct {
	state                    protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_Path          string                     `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	xxx_hidden_JobId         *string                    `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3,oneof" json:"job_id,omitempty"`
	xxx_hidden_RemoteTargets map[uint32]bool            `protobuf:"bytes,3,rep,name=remote_targets,json=remoteTargets,proto3" json:"remote_targets,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	xxx_hidden_NewState      UpdateJobsRequest_NewState `protobuf:"varint,10,opt,name=new_state,json=newState,proto3,enum=beeremote.UpdateJobsRequest_NewState" json:"new_state,omitempty"`
	xxx_hidden_ForceUpdate   bool                       `protobuf:"varint,4,opt,name=force_update,json=forceUpdate,proto3" json:"force_update,omitempty"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UpdateJobsRequest) Reset() {
	*x = UpdateJobsRequest{}
	mi := &file_beeremote_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobsRequest) ProtoMessage() {}

func (x *UpdateJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateJobsRequest) GetPath() string {
	if x != nil {
		return x.xxx_hidden_Path
	}
	return ""
}

func (x *UpdateJobsRequest) GetJobId() string {
	if x != nil {
		if x.xxx_hidden_JobId != nil {
			return *x.xxx_hidden_JobId
		}
		return ""
	}
	return ""
}

func (x *UpdateJobsRequest) GetRemoteTargets() map[uint32]bool {
	if x != nil {
		return x.xxx_hidden_RemoteTargets
	}
	return nil
}

func (x *UpdateJobsRequest) GetNewState() UpdateJobsRequest_NewState {
	if x != nil {
		return x.xxx_hidden_NewState
	}
	return UpdateJobsRequest_UNSPECIFIED
}

func (x *UpdateJobsRequest) GetForceUpdate() bool {
	if x != nil {
		return x.xxx_hidden_ForceUpdate
	}
	return false
}

func (x *UpdateJobsRequest) SetPath(v string) {
	x.xxx_hidden_Path = v
}

func (x *UpdateJobsRequest) SetJobId(v string) {
	x.xxx_hidden_JobId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *UpdateJobsRequest) SetRemoteTargets(v map[uint32]bool) {
	x.xxx_hidden_RemoteTargets = v
}

func (x *UpdateJobsRequest) SetNewState(v UpdateJobsRequest_NewState) {
	x.xxx_hidden_NewState = v
}

func (x *UpdateJobsRequest) SetForceUpdate(v bool) {
	x.xxx_hidden_ForceUpdate = v
}

func (x *UpdateJobsRequest) HasJobId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *UpdateJobsRequest) ClearJobId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_JobId = nil
}

type UpdateJobsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The path with the job(s) to update. Ignored when updating multiple paths via
	// UpdatePathsRequest.
	Path string
	// Optional: Only update a single job for the specified path. If this job ID is not found for
	// the specified path, the response will be !ok.
	JobId *string
	// Optional: Only update job(s) for the specified remote targets. When also filtering by job ID,
	// if the specified ID is not for any of these remote targets, the response will be !ok.
	RemoteTargets map[uint32]bool
	// Required: The new state to set the job(s) to.
	NewState UpdateJobsRequest_NewState
	// Optional: Normally completed jobs are ignored when making updates so some number of completed
	// jobs can be automatically retained to determine when a path has been successfully
	// synchronized with an RST. If a user wants to delete a completed job, or perhaps there was
	// some bug and the user wants to go back through the steps to cancel a job to try and
	// cleanup/recover, this can be done through a force update.
	ForceUpdate bool
}

func (b0 UpdateJobsRequest_builder) Build() *UpdateJobsRequest {
	m0 := &UpdateJobsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Path = b.Path
	if b.JobId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_JobId = b.JobId
	}
	x.xxx_hidden_RemoteTargets = b.RemoteTargets
	x.xxx_hidden_NewState = b.NewState
	x.xxx_hidden_ForceUpdate = b.ForceUpdate
	return m0
}

// UpdateJobsResponse returns the result of updating one or more job(s) for a particular path.
type UpdateJobsResponse struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Ok      bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	xxx_hidden_Message string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	xxx_hidden_Results *[]*JobResult          `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateJobsResponse) Reset() {
	*x = UpdateJobsResponse{}
	mi := &file_beeremote_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobsResponse) ProtoMessage() {}

func (x *UpdateJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateJobsResponse) GetOk() bool {
	if x != nil {
		return x.xxx_hidden_Ok
	}
	return false
}

func (x *UpdateJobsResponse) GetMessage() string {
	if x != nil {
		return x.xxx_hidden_Message
	}
	return ""
}

func (x *UpdateJobsResponse) GetResults() []*JobResult {
	if x != nil {
		if x.xxx_hidden_Results != nil {
			return *x.xxx_hidden_Results
		}
	}
	return nil
}

func (x *UpdateJobsResponse) SetOk(v bool) {
	x.xxx_hidden_Ok = v
}

func (x *UpdateJobsResponse) SetMessage(v string) {
	x.xxx_hidden_Message = v
}

func (x *UpdateJobsResponse) SetResults(v []*JobResult) {
	x.xxx_hidden_Results = &v
}

type UpdateJobsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Required: If the newState could not be applied to any of the jobs then ok will be false.
	// Inspect the message and individual job responses to troubleshoot further.
	Ok bool
	// Required: Generally the message will indicate any overall errors applying the update whereas
	// the status of individual jobs will indicate problems applying updates to a particular job.
	Message string
	Results []*JobResult
}

func (b0 UpdateJobsResponse_builder) Build() *UpdateJobsResponse {
	m0 := &UpdateJobsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Ok = b.Ok
	x.xxx_hidden_Message = b.Message
	x.xxx_hidden_Results = &b.Results
	return m0
}

// The number of query options is limited because we store jobs in a key/value
// store where the key is essentially the equivalent of an index in a
// traditional RDBMS. To optimize for multiple search terms we need to use
// multiple k/v stores using a different item we want to query for as the key.
// With the MapStore used as a wrapper around the BadgerDB k/v store we don't
// have to duplicate all information and can use the Metadata field of the
// MapStore to create references to data stored in other MapStores.
type GetJobsRequest struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Query               isGetJobsRequest_Query `protobuf_oneof:"query"`
	xxx_hidden_IncludeWorkRequests bool                   `protobuf:"varint,4,opt,name=include_work_requests,json=includeWorkRequests,proto3" json:"include_work_requests,omitempty"`
	xxx_hidden_IncludeWorkResults  bool                   `protobuf:"varint,5,opt,name=include_work_results,json=includeWorkResults,proto3" json:"include_work_results,omitempty"`
	xxx_hidden_UpdateWorkResults   bool                   `protobuf:"varint,6,opt,name=update_work_results,json=updateWorkResults,proto3" json:"update_work_results,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *GetJobsRequest) Reset() {
	*x = GetJobsRequest{}
	mi := &file_beeremote_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobsRequest) ProtoMessage() {}

func (x *GetJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetJobsRequest) GetByJobIdAndPath() *GetJobsRequest_QueryIdAndPath {
	if x != nil {
		if x, ok := x.xxx_hidden_Query.(*getJobsRequest_ByJobIdAndPath); ok {
			return x.ByJobIdAndPath
		}
	}
	return nil
}

func (x *GetJobsRequest) GetByExactPath() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Query.(*getJobsRequest_ByExactPath); ok {
			return x.ByExactPath
		}
	}
	return ""
}

func (x *GetJobsRequest) GetByPathPrefix() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Query.(*getJobsRequest_ByPathPrefix); ok {
			return x.ByPathPrefix
		}
	}
	return ""
}

func (x *GetJobsRequest) GetIncludeWorkRequests() bool {
	if x != nil {
		return x.xxx_hidden_IncludeWorkRequests
	}
	return false
}

func (x *GetJobsRequest) GetIncludeWorkResults() bool {
	if x != nil {
		return x.xxx_hidden_IncludeWorkResults
	}
	return false
}

func (x *GetJobsRequest) GetUpdateWorkResults() bool {
	if x != nil {
		return x.xxx_hidden_UpdateWorkResults
	}
	return false
}

func (x *GetJobsRequest) SetByJobIdAndPath(v *GetJobsRequest_QueryIdAndPath) {
	if v == nil {
		x.xxx_hidden_Query = nil
		return
	}
	x.xxx_hidden_Query = &getJobsRequest_ByJobIdAndPath{v}
}

func (x *GetJobsRequest) SetByExactPath(v string) {
	x.xxx_hidden_Query = &getJobsRequest_ByExactPath{v}
}

func (x *GetJobsRequest) SetByPathPrefix(v string) {
	x.xxx_hidden_Query = &getJobsRequest_ByPathPrefix{v}
}

func (x *GetJobsRequest) SetIncludeWorkRequests(v bool) {
	x.xxx_hidden_IncludeWorkRequests = v
}

func (x *GetJobsRequest) SetIncludeWorkResults(v bool) {
	x.xxx_hidden_IncludeWorkResults = v
}

func (x *GetJobsRequest) SetUpdateWorkResults(v bool) {
	x.xxx_hidden_UpdateWorkResults = v
}

func (x *GetJobsRequest) HasQuery() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Query != nil
}

func (x *GetJobsRequest) HasByJobIdAndPath() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Query.(*getJobsRequest_ByJobIdAndPath)
	return ok
}

func (x *GetJobsRequest) HasByExactPath() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Query.(*getJobsRequest_ByExactPath)
	return ok
}

func (x *GetJobsRequest) HasByPathPrefix() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Query.(*getJobsRequest_ByPathPrefix)
	return ok
}

func (x *GetJobsRequest) ClearQuery() {
	x.xxx_hidden_Query = nil
}

func (x *GetJobsRequest) ClearByJobIdAndPath() {
	if _, ok := x.xxx_hidden_Query.(*getJobsRequest_ByJobIdAndPath); ok {
		x.xxx_hidden_Query = nil
	}
}

func (x *GetJobsRequest) ClearByExactPath() {
	if _, ok := x.xxx_hidden_Query.(*getJobsRequest_ByExactPath); ok {
		x.xxx_hidden_Query = nil
	}
}

func (x *GetJobsRequest) ClearByPathPrefix() {
	if _, ok := x.xxx_hidden_Query.(*getJobsRequest_ByPathPrefix); ok {
		x.xxx_hidden_Query = nil
	}
}

const GetJobsRequest_Query_not_set_case case_GetJobsRequest_Query = 0
const GetJobsRequest_ByJobIdAndPath_case case_GetJobsRequest_Query = 1
const GetJobsRequest_ByExactPath_case case_GetJobsRequest_Query = 2
const GetJobsRequest_ByPathPrefix_case case_GetJobsRequest_Query = 3

func (x *GetJobsRequest) WhichQuery() case_GetJobsRequest_Query {
	if x == nil {
		return GetJobsRequest_Query_not_set_case
	}
	switch x.xxx_hidden_Query.(type) {
	case *getJobsRequest_ByJobIdAndPath:
		return GetJobsRequest_ByJobIdAndPath_case
	case *getJobsRequest_ByExactPath:
		return GetJobsRequest_ByExactPath_case
	case *getJobsRequest_ByPathPrefix:
		return GetJobsRequest_ByPathPrefix_case
	default:
		return GetJobsRequest_Query_not_set_case
	}
}

type GetJobsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Query:
	// Returns at most one Job.
	ByJobIdAndPath *GetJobsRequest_QueryIdAndPath
	// Returns all Jobs for the specified path.
	ByExactPath *string
	// Returns all Jobs for the specified paths.
	// All jobs can be returned by specifying "/".
	ByPathPrefix *string
	// -- end of xxx_hidden_Query
	IncludeWorkRequests bool
	// Set to true to also return work results details.
	IncludeWorkResults bool
	// By default we just return the latest results known to BeeRemote and don't
	// pull the latest work results from worker nodes and update the job status.
	// We can optionally request an update from all worker nodes for each job
	// and also update the job status, however this inccurs extra overhead as we'll
	// have to lock the entries and send extra messages to get the latest status.
	// Generally this should only be used to get the latest updates from a single
	// job or all jobs for a particular path.
	UpdateWorkResults bool
}

func (b0 GetJobsRequest_builder) Build() *GetJobsRequest {
	m0 := &GetJobsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ByJobIdAndPath != nil {
		x.xxx_hidden_Query = &getJobsRequest_ByJobIdAndPath{b.ByJobIdAndPath}
	}
	if b.ByExactPath != nil {
		x.xxx_hidden_Query = &getJobsRequest_ByExactPath{*b.ByExactPath}
	}
	if b.ByPathPrefix != nil {
		x.xxx_hidden_Query = &getJobsRequest_ByPathPrefix{*b.ByPathPrefix}
	}
	x.xxx_hidden_IncludeWorkRequests = b.IncludeWorkRequests
	x.xxx_hidden_IncludeWorkResults = b.IncludeWorkResults
	x.xxx_hidden_UpdateWorkResults = b.UpdateWorkResults
	return m0
}

type case_GetJobsRequest_Query protoreflect.FieldNumber

func (x case_GetJobsRequest_Query) String() string {
	md := file_beeremote_proto_msgTypes[9].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isGetJobsRequest_Query interface {
	isGetJobsRequest_Query()
}

type getJobsRequest_ByJobIdAndPath struct {
	// Returns at most one Job.
	ByJobIdAndPath *GetJobsRequest_QueryIdAndPath `protobuf:"bytes,1,opt,name=by_job_id_and_path,json=byJobIdAndPath,proto3,oneof"`
}

type getJobsRequest_ByExactPath struct {
	// Returns all Jobs for the specified path.
	ByExactPath string `protobuf:"bytes,2,opt,name=by_exact_path,json=byExactPath,proto3,oneof"`
}

type getJobsRequest_ByPathPrefix struct {
	// Returns all Jobs for the specified paths.
	// All jobs can be returned by specifying "/".
	ByPathPrefix string `protobuf:"bytes,3,opt,name=by_path_prefix,json=byPathPrefix,proto3,oneof"`
}

func (*getJobsRequest_ByJobIdAndPath) isGetJobsRequest_Query() {}

func (*getJobsRequest_ByExactPath) isGetJobsRequest_Query() {}

func (*getJobsRequest_ByPathPrefix) isGetJobsRequest_Query() {}

type GetJobsResponse struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Path    string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	xxx_hidden_Results *[]*JobResult          `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetJobsResponse) Reset() {
	*x = GetJobsResponse{}
	mi := &file_beeremote_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobsResponse) ProtoMessage() {}

func (x *GetJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetJobsResponse) GetPath() string {
	if x != nil {
		return x.xxx_hidden_Path
	}
	return ""
}

func (x *GetJobsResponse) GetResults() []*JobResult {
	if x != nil {
		if x.xxx_hidden_Results != nil {
			return *x.xxx_hidden_Results
		}
	}
	return nil
}

func (x *GetJobsResponse) SetPath(v string) {
	x.xxx_hidden_Path = v
}

func (x *GetJobsResponse) SetResults(v []*JobResult) {
	x.xxx_hidden_Results = &v
}

type GetJobsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Path    string
	Results []*JobResult
}

func (b0 GetJobsResponse_builder) Build() *GetJobsResponse {
	m0 := &GetJobsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Path = b.Path
	x.xxx_hidden_Results = &b.Results
	return m0
}

type UpdateWorkRequest struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Work *flex.Work             `protobuf:"bytes,1,opt,name=work,proto3" json:"work,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateWorkRequest) Reset() {
	*x = UpdateWorkRequest{}
	mi := &file_beeremote_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkRequest) ProtoMessage() {}

func (x *UpdateWorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateWorkRequest) GetWork() *flex.Work {
	if x != nil {
		return x.xxx_hidden_Work
	}
	return nil
}

func (x *UpdateWorkRequest) SetWork(v *flex.Work) {
	x.xxx_hidden_Work = v
}

func (x *UpdateWorkRequest) HasWork() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Work != nil
}

func (x *UpdateWorkRequest) ClearWork() {
	x.xxx_hidden_Work = nil
}

type UpdateWorkRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Work *flex.Work
}

func (b0 UpdateWorkRequest_builder) Build() *UpdateWorkRequest {
	m0 := &UpdateWorkRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Work = b.Work
	return m0
}

type UpdateWorkResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateWorkResponse) Reset() {
	*x = UpdateWorkResponse{}
	mi := &file_beeremote_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWorkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkResponse) ProtoMessage() {}

func (x *UpdateWorkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type UpdateWorkResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 UpdateWorkResponse_builder) Build() *UpdateWorkResponse {
	m0 := &UpdateWorkResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type GetRSTConfigRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRSTConfigRequest) Reset() {
	*x = GetRSTConfigRequest{}
	mi := &file_beeremote_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRSTConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRSTConfigRequest) ProtoMessage() {}

func (x *GetRSTConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type GetRSTConfigRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 GetRSTConfigRequest_builder) Build() *GetRSTConfigRequest {
	m0 := &GetRSTConfigRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type GetRSTConfigResponse struct {
	state           protoimpl.MessageState       `protogen:"opaque.v1"`
	xxx_hidden_Rsts *[]*flex.RemoteStorageTarget `protobuf:"bytes,1,rep,name=rsts,proto3" json:"rsts,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetRSTConfigResponse) Reset() {
	*x = GetRSTConfigResponse{}
	mi := &file_beeremote_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRSTConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRSTConfigResponse) ProtoMessage() {}

func (x *GetRSTConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetRSTConfigResponse) GetRsts() []*flex.RemoteStorageTarget {
	if x != nil {
		if x.xxx_hidden_Rsts != nil {
			return *x.xxx_hidden_Rsts
		}
	}
	return nil
}

func (x *GetRSTConfigResponse) SetRsts(v []*flex.RemoteStorageTarget) {
	x.xxx_hidden_Rsts = &v
}

type GetRSTConfigResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Rsts []*flex.RemoteStorageTarget
}

func (b0 GetRSTConfigResponse_builder) Build() *GetRSTConfigResponse {
	m0 := &GetRSTConfigResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Rsts = &b.Rsts
	return m0
}

type JobRequest_GenerationStatus struct {
	state              protoimpl.MessageState            `protogen:"opaque.v1"`
	xxx_hidden_State   JobRequest_GenerationStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=beeremote.JobRequest_GenerationStatus_State" json:"state,omitempty"`
	xxx_hidden_Message string                            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *JobRequest_GenerationStatus) Reset() {
	*x = JobRequest_GenerationStatus{}
	mi := &file_beeremote_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobRequest_GenerationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRequest_GenerationStatus) ProtoMessage() {}

func (x *JobRequest_GenerationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *JobRequest_GenerationStatus) GetState() JobRequest_GenerationStatus_State {
	if x != nil {
		return x.xxx_hidden_State
	}
	return JobRequest_GenerationStatus_UNSPECIFIED
}

func (x *JobRequest_GenerationStatus) GetMessage() string {
	if x != nil {
		return x.xxx_hidden_Message
	}
	return ""
}

func (x *JobRequest_GenerationStatus) SetState(v JobRequest_GenerationStatus_State) {
	x.xxx_hidden_State = v
}

func (x *JobRequest_GenerationStatus) SetMessage(v string) {
	x.xxx_hidden_Message = v
}

type JobRequest_GenerationStatus_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	State   JobRequest_GenerationStatus_State
	Message string
}

func (b0 JobRequest_GenerationStatus_builder) Build() *JobRequest_GenerationStatus {
	m0 := &JobRequest_GenerationStatus{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_State = b.State
	x.xxx_hidden_Message = b.Message
	return m0
}

type Job_Status struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_State   Job_State              `protobuf:"varint,1,opt,name=state,proto3,enum=beeremote.Job_State" json:"state,omitempty"`
	xxx_hidden_Message string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	xxx_hidden_Updated *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated,proto3" json:"updated,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Job_Status) Reset() {
	*x = Job_Status{}
	mi := &file_beeremote_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Status) ProtoMessage() {}

func (x *Job_Status) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Job_Status) GetState() Job_State {
	if x != nil {
		return x.xxx_hidden_State
	}
	return Job_UNSPECIFIED
}

func (x *Job_Status) GetMessage() string {
	if x != nil {
		return x.xxx_hidden_Message
	}
	return ""
}

func (x *Job_Status) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Updated
	}
	return nil
}

func (x *Job_Status) SetState(v Job_State) {
	x.xxx_hidden_State = v
}

func (x *Job_Status) SetMessage(v string) {
	x.xxx_hidden_Message = v
}

func (x *Job_Status) SetUpdated(v *timestamppb.Timestamp) {
	x.xxx_hidden_Updated = v
}

func (x *Job_Status) HasUpdated() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Updated != nil
}

func (x *Job_Status) ClearUpdated() {
	x.xxx_hidden_Updated = nil
}

type Job_Status_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	State Job_State
	// Message should be used to return any additional details, particularly to aid in
	// troubleshooting. When useful for troubleshooting, multiple historical messages may be
	// concatenated together in the format: "oldest message; newer message; newest message".
	// Especially if the request goes through multiple state transitions (for example error to
	// failed) this can be helpful to troubleshoot the chain of events that lead to a failure.
	// Note messages should not be concatenated for the entire life of a request, and should
	// generally be reset when either the state transitions from an expected to another expected
	// state (i.e., UNASSIGNED->SCHEDULED), or when a request experienced an error or failure and
	// was automatically or manually retried. Don't keep the message intact across multiple failed
	// retries as this (a) makes troubleshooting each failure difficult and (b) means the message
	// size can eventually grow beyond a reasonable limit and cause other issues.
	Message string
	Updated *timestamppb.Timestamp
}

func (b0 Job_Status_builder) Build() *Job_Status {
	m0 := &Job_Status{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_State = b.State
	x.xxx_hidden_Message = b.Message
	x.xxx_hidden_Updated = b.Updated
	return m0
}

type JobResult_WorkResult struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Work         *flex.Work             `protobuf:"bytes,1,opt,name=work,proto3" json:"work,omitempty"`
	xxx_hidden_AssignedNode string                 `protobuf:"bytes,2,opt,name=assigned_node,json=assignedNode,proto3" json:"assigned_node,omitempty"`
	xxx_hidden_AssignedPool string                 `protobuf:"bytes,3,opt,name=assigned_pool,json=assignedPool,proto3" json:"assigned_pool,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *JobResult_WorkResult) Reset() {
	*x = JobResult_WorkResult{}
	mi := &file_beeremote_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobResult_WorkResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResult_WorkResult) ProtoMessage() {}

func (x *JobResult_WorkResult) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *JobResult_WorkResult) GetWork() *flex.Work {
	if x != nil {
		return x.xxx_hidden_Work
	}
	return nil
}

func (x *JobResult_WorkResult) GetAssignedNode() string {
	if x != nil {
		return x.xxx_hidden_AssignedNode
	}
	return ""
}

func (x *JobResult_WorkResult) GetAssignedPool() string {
	if x != nil {
		return x.xxx_hidden_AssignedPool
	}
	return ""
}

func (x *JobResult_WorkResult) SetWork(v *flex.Work) {
	x.xxx_hidden_Work = v
}

func (x *JobResult_WorkResult) SetAssignedNode(v string) {
	x.xxx_hidden_AssignedNode = v
}

func (x *JobResult_WorkResult) SetAssignedPool(v string) {
	x.xxx_hidden_AssignedPool = v
}

func (x *JobResult_WorkResult) HasWork() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Work != nil
}

func (x *JobResult_WorkResult) ClearWork() {
	x.xxx_hidden_Work = nil
}

type JobResult_WorkResult_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Work         *flex.Work
	AssignedNode string
	AssignedPool string
}

func (b0 JobResult_WorkResult_builder) Build() *JobResult_WorkResult {
	m0 := &JobResult_WorkResult{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Work = b.Work
	x.xxx_hidden_AssignedNode = b.AssignedNode
	x.xxx_hidden_AssignedPool = b.AssignedPool
	return m0
}

type GetJobsRequest_QueryIdAndPath struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_JobId string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	xxx_hidden_Path  string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetJobsRequest_QueryIdAndPath) Reset() {
	*x = GetJobsRequest_QueryIdAndPath{}
	mi := &file_beeremote_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobsRequest_QueryIdAndPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobsRequest_QueryIdAndPath) ProtoMessage() {}

func (x *GetJobsRequest_QueryIdAndPath) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetJobsRequest_QueryIdAndPath) GetJobId() string {
	if x != nil {
		return x.xxx_hidden_JobId
	}
	return ""
}

func (x *GetJobsRequest_QueryIdAndPath) GetPath() string {
	if x != nil {
		return x.xxx_hidden_Path
	}
	return ""
}

func (x *GetJobsRequest_QueryIdAndPath) SetJobId(v string) {
	x.xxx_hidden_JobId = v
}

func (x *GetJobsRequest_QueryIdAndPath) SetPath(v string) {
	x.xxx_hidden_Path = v
}

type GetJobsRequest_QueryIdAndPath_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	JobId string
	Path  string
}

func (b0 GetJobsRequest_QueryIdAndPath_builder) Build() *GetJobsRequest_QueryIdAndPath {
	m0 := &GetJobsRequest_QueryIdAndPath{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_JobId = b.JobId
	x.xxx_hidden_Path = b.Path
	return m0
}

var File_beeremote_proto protoreflect.FileDescriptor

var file_beeremote_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x1a, 0x0a, 0x66, 0x6c,
	0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x10, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x98,
	0x02, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x17, 0x0a, 0x13, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x22, 0xec, 0x04, 0x0a, 0x0a, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x23, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52,
	0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x4a,
	0x6f, 0x62, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x07, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6c,
	0x65, 0x78, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x74, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x53, 0x0a,
	0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0xdb, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8c, 0x05, 0x0a, 0x03, 0x4a, 0x6f, 0x62,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x70, 0x4d, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x84, 0x01, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x95, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x46, 0x46,
	0x4c, 0x4f, 0x41, 0x44, 0x45, 0x44, 0x10, 0x0a, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4a,
	0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x36, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x42, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x1a, 0x76, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1e, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x04, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x7e, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x6d, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x88, 0x03, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x56, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a,
	0x40, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x37, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x92, 0x03, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x62, 0x79, 0x5f, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00,
	0x52, 0x0e, 0x62, 0x79, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x24, 0x0a, 0x0d, 0x62, 0x79, 0x5f, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x79, 0x45, 0x78, 0x61,
	0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0c, 0x62, 0x79, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x32,
	0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x1a, 0x3b, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x41,
	0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x55, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0x33, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x52, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x52, 0x53, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x53, 0x54, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x72,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x65, 0x78,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x04, 0x72, 0x73, 0x74, 0x73, 0x32, 0xce, 0x03, 0x0a, 0x09, 0x42,
	0x65, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x1b, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12,
	0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x49, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x1c,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x49, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x1c, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x52, 0x53, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x53, 0x54, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x53, 0x54, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2c, 0x5a, 0x2a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x70,
	0x61, 0x72, 0x71, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2f,
	0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var file_beeremote_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_beeremote_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_beeremote_proto_goTypes = []any{
	(SubmitJobResponse_ResponseStatus)(0),  // 0: beeremote.SubmitJobResponse.ResponseStatus
	(JobRequest_GenerationStatus_State)(0), // 1: beeremote.JobRequest.GenerationStatus.State
	(Job_State)(0),                         // 2: beeremote.Job.State
	(UpdateJobsRequest_NewState)(0),        // 3: beeremote.UpdateJobsRequest.NewState
	(*SubmitJobRequest)(nil),               // 4: beeremote.SubmitJobRequest
	(*SubmitJobResponse)(nil),              // 5: beeremote.SubmitJobResponse
	(*JobRequest)(nil),                     // 6: beeremote.JobRequest
	(*Job)(nil),                            // 7: beeremote.Job
	(*JobResult)(nil),                      // 8: beeremote.JobResult
	(*UpdatePathsRequest)(nil),             // 9: beeremote.UpdatePathsRequest
	(*UpdatePathsResponse)(nil),            // 10: beeremote.UpdatePathsResponse
	(*UpdateJobsRequest)(nil),              // 11: beeremote.UpdateJobsRequest
	(*UpdateJobsResponse)(nil),             // 12: beeremote.UpdateJobsResponse
	(*GetJobsRequest)(nil),                 // 13: beeremote.GetJobsRequest
	(*GetJobsResponse)(nil),                // 14: beeremote.GetJobsResponse
	(*UpdateWorkRequest)(nil),              // 15: beeremote.UpdateWorkRequest
	(*UpdateWorkResponse)(nil),             // 16: beeremote.UpdateWorkResponse
	(*GetRSTConfigRequest)(nil),            // 17: beeremote.GetRSTConfigRequest
	(*GetRSTConfigResponse)(nil),           // 18: beeremote.GetRSTConfigResponse
	(*JobRequest_GenerationStatus)(nil),    // 19: beeremote.JobRequest.GenerationStatus
	(*Job_Status)(nil),                     // 20: beeremote.Job.Status
	(*JobResult_WorkResult)(nil),           // 21: beeremote.JobResult.WorkResult
	nil,                                    // 22: beeremote.UpdateJobsRequest.RemoteTargetsEntry
	(*GetJobsRequest_QueryIdAndPath)(nil),  // 23: beeremote.GetJobsRequest.QueryIdAndPath
	(*flex.SyncJob)(nil),                   // 24: flex.SyncJob
	(*flex.MockJob)(nil),                   // 25: flex.MockJob
	(*flex.BuilderJob)(nil),                // 26: flex.BuilderJob
	(*timestamppb.Timestamp)(nil),          // 27: google.protobuf.Timestamp
	(*flex.WorkRequest)(nil),               // 28: flex.WorkRequest
	(*flex.Work)(nil),                      // 29: flex.Work
	(*flex.RemoteStorageTarget)(nil),       // 30: flex.RemoteStorageTarget
}
var file_beeremote_proto_depIdxs = []int32{
	6,  // 0: beeremote.SubmitJobRequest.request:type_name -> beeremote.JobRequest
	8,  // 1: beeremote.SubmitJobResponse.result:type_name -> beeremote.JobResult
	0,  // 2: beeremote.SubmitJobResponse.status:type_name -> beeremote.SubmitJobResponse.ResponseStatus
	24, // 3: beeremote.JobRequest.sync:type_name -> flex.SyncJob
	25, // 4: beeremote.JobRequest.mock:type_name -> flex.MockJob
	26, // 5: beeremote.JobRequest.builder:type_name -> flex.BuilderJob
	19, // 6: beeremote.JobRequest.generation_status:type_name -> beeremote.JobRequest.GenerationStatus
	6,  // 7: beeremote.Job.request:type_name -> beeremote.JobRequest
	27, // 8: beeremote.Job.created:type_name -> google.protobuf.Timestamp
	20, // 9: beeremote.Job.status:type_name -> beeremote.Job.Status
	27, // 10: beeremote.Job.start_mtime:type_name -> google.protobuf.Timestamp
	27, // 11: beeremote.Job.stop_mtime:type_name -> google.protobuf.Timestamp
	7,  // 12: beeremote.JobResult.job:type_name -> beeremote.Job
	28, // 13: beeremote.JobResult.work_requests:type_name -> flex.WorkRequest
	21, // 14: beeremote.JobResult.work_results:type_name -> beeremote.JobResult.WorkResult
	11, // 15: beeremote.UpdatePathsRequest.requested_update:type_name -> beeremote.UpdateJobsRequest
	12, // 16: beeremote.UpdatePathsResponse.update_result:type_name -> beeremote.UpdateJobsResponse
	22, // 17: beeremote.UpdateJobsRequest.remote_targets:type_name -> beeremote.UpdateJobsRequest.RemoteTargetsEntry
	3,  // 18: beeremote.UpdateJobsRequest.new_state:type_name -> beeremote.UpdateJobsRequest.NewState
	8,  // 19: beeremote.UpdateJobsResponse.results:type_name -> beeremote.JobResult
	23, // 20: beeremote.GetJobsRequest.by_job_id_and_path:type_name -> beeremote.GetJobsRequest.QueryIdAndPath
	8,  // 21: beeremote.GetJobsResponse.results:type_name -> beeremote.JobResult
	29, // 22: beeremote.UpdateWorkRequest.work:type_name -> flex.Work
	30, // 23: beeremote.GetRSTConfigResponse.rsts:type_name -> flex.RemoteStorageTarget
	1,  // 24: beeremote.JobRequest.GenerationStatus.state:type_name -> beeremote.JobRequest.GenerationStatus.State
	2,  // 25: beeremote.Job.Status.state:type_name -> beeremote.Job.State
	27, // 26: beeremote.Job.Status.updated:type_name -> google.protobuf.Timestamp
	29, // 27: beeremote.JobResult.WorkResult.work:type_name -> flex.Work
	4,  // 28: beeremote.BeeRemote.SubmitJob:input_type -> beeremote.SubmitJobRequest
	9,  // 29: beeremote.BeeRemote.UpdatePaths:input_type -> beeremote.UpdatePathsRequest
	11, // 30: beeremote.BeeRemote.UpdateJobs:input_type -> beeremote.UpdateJobsRequest
	13, // 31: beeremote.BeeRemote.GetJobs:input_type -> beeremote.GetJobsRequest
	15, // 32: beeremote.BeeRemote.UpdateWork:input_type -> beeremote.UpdateWorkRequest
	17, // 33: beeremote.BeeRemote.GetRSTConfig:input_type -> beeremote.GetRSTConfigRequest
	5,  // 34: beeremote.BeeRemote.SubmitJob:output_type -> beeremote.SubmitJobResponse
	10, // 35: beeremote.BeeRemote.UpdatePaths:output_type -> beeremote.UpdatePathsResponse
	12, // 36: beeremote.BeeRemote.UpdateJobs:output_type -> beeremote.UpdateJobsResponse
	14, // 37: beeremote.BeeRemote.GetJobs:output_type -> beeremote.GetJobsResponse
	16, // 38: beeremote.BeeRemote.UpdateWork:output_type -> beeremote.UpdateWorkResponse
	18, // 39: beeremote.BeeRemote.GetRSTConfig:output_type -> beeremote.GetRSTConfigResponse
	34, // [34:40] is the sub-list for method output_type
	28, // [28:34] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_beeremote_proto_init() }
func file_beeremote_proto_init() {
	if File_beeremote_proto != nil {
		return
	}
	file_beeremote_proto_msgTypes[2].OneofWrappers = []any{
		(*jobRequest_Sync)(nil),
		(*jobRequest_Mock)(nil),
		(*jobRequest_Builder)(nil),
	}
	file_beeremote_proto_msgTypes[3].OneofWrappers = []any{}
	file_beeremote_proto_msgTypes[7].OneofWrappers = []any{}
	file_beeremote_proto_msgTypes[9].OneofWrappers = []any{
		(*getJobsRequest_ByJobIdAndPath)(nil),
		(*getJobsRequest_ByExactPath)(nil),
		(*getJobsRequest_ByPathPrefix)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beeremote_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_beeremote_proto_goTypes,
		DependencyIndexes: file_beeremote_proto_depIdxs,
		EnumInfos:         file_beeremote_proto_enumTypes,
		MessageInfos:      file_beeremote_proto_msgTypes,
	}.Build()
	File_beeremote_proto = out.File
	file_beeremote_proto_rawDesc = nil
	file_beeremote_proto_goTypes = nil
	file_beeremote_proto_depIdxs = nil
}
