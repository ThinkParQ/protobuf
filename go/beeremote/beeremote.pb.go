// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.26.1
// source: beeremote.proto

package beeremote

import (
	flex "github.com/thinkparq/protobuf/go/flex"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Job_State int32

const (
	// This state has no semantic value and the state should never be UNSPECIFIED unless there
	// is a bug.
	Job_UNSPECIFIED Job_State = 0
	// Used when the state of a job cannot be definitively determined. For example if a work
	// request is in an unknown state, or if all WRs are either in a terminal state or require
	// user intervention, but they are not all in the same state.
	Job_UNKNOWN Job_State = 1
	// Initially all jobs start out in the UNASSIGNED state. This indicates BeeRemote has not
	// had a chance to schedule work requests for the job to any worker node(s).
	Job_UNASSIGNED Job_State = 2
	// When all worker node(s) have accepted the job's work requests, but may be waiting on
	// an available worker goroutine to pickup the request.
	Job_SCHEDULED Job_State = 3
	// When all work requests for this job are in progress.
	Job_RUNNING Job_State = 4
	// TODO: https://github.com/ThinkParQ/bee-remote/issues/16
	// A user manually requested the job be paused.
	// PAUSED = 5;
	//
	// ERROR indicates one or more transient/ephemeral error(s) occurred carrying out the job,
	// but the worker nodes are still retrying the requests. Once the allowed number of retries
	// or retry timeout is exceed, the work requests will fail, and the overall job state will
	// be failed. In this state work requests are still active on the worker nodes, and jobs in
	// the error state must be cancelled or complete successfully before new jobs are allowed
	// for this RST+path combo.
	Job_ERROR Job_State = 6
	// FAILED indicates one or more unrecoverable errors occurred carrying out this job.
	// Typically jobs fail due to some condition that requires user intervention, such as
	// updating the RST configuration, but can also fail if work requests exceed the allowed
	// number of retries or retry timeout. Failed indicates no work requests for this job are
	// scheduled to the worker nodes (meaning it can be cancelled without talking to the
	// workers), however any associated external IDs (such as a multipart upload) have not been
	// invalidated, because (1) if we're able to resume the job later this avoids having to
	// reupload/download data and (2) it is unlikely the RST is in a state we can interact with
	// it anyway. As a result jobs in the failed state must be cancelled before new jobs are
	// allowed for this RST+path combo.
	//
	// TODO: https://github.com/ThinkParQ/bee-remote/issues/27.
	// Update the ERROR and FAILED state descriptions based on the decisions made around
	// allowing jobs to be resumed after an error/failure occurs.
	Job_FAILED Job_State = 7
	// Jobs and their WRs may be cancelled manually be a user. This is a terminal state and no
	// further changes are possible once a job enters this state.
	Job_CANCELLED Job_State = 8
	// If the job and its WRs completed successfully. This is a terminal state and no further
	// state changes are possible once a job enters this state.
	Job_COMPLETED Job_State = 9
)

// Enum value maps for Job_State.
var (
	Job_State_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "UNKNOWN",
		2: "UNASSIGNED",
		3: "SCHEDULED",
		4: "RUNNING",
		6: "ERROR",
		7: "FAILED",
		8: "CANCELLED",
		9: "COMPLETED",
	}
	Job_State_value = map[string]int32{
		"UNSPECIFIED": 0,
		"UNKNOWN":     1,
		"UNASSIGNED":  2,
		"SCHEDULED":   3,
		"RUNNING":     4,
		"ERROR":       6,
		"FAILED":      7,
		"CANCELLED":   8,
		"COMPLETED":   9,
	}
)

func (x Job_State) Enum() *Job_State {
	p := new(Job_State)
	*p = x
	return p
}

func (x Job_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_State) Descriptor() protoreflect.EnumDescriptor {
	return file_beeremote_proto_enumTypes[0].Descriptor()
}

func (Job_State) Type() protoreflect.EnumType {
	return &file_beeremote_proto_enumTypes[0]
}

func (x Job_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_State.Descriptor instead.
func (Job_State) EnumDescriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{3, 0}
}

type UpdateJobRequest_NewState int32

const (
	UpdateJobRequest_UNSPECIFIED UpdateJobRequest_NewState = 0
	UpdateJobRequest_CANCELLED   UpdateJobRequest_NewState = 1
	UpdateJobRequest_DELETED     UpdateJobRequest_NewState = 2
)

// Enum value maps for UpdateJobRequest_NewState.
var (
	UpdateJobRequest_NewState_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "CANCELLED",
		2: "DELETED",
	}
	UpdateJobRequest_NewState_value = map[string]int32{
		"UNSPECIFIED": 0,
		"CANCELLED":   1,
		"DELETED":     2,
	}
)

func (x UpdateJobRequest_NewState) Enum() *UpdateJobRequest_NewState {
	p := new(UpdateJobRequest_NewState)
	*p = x
	return p
}

func (x UpdateJobRequest_NewState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateJobRequest_NewState) Descriptor() protoreflect.EnumDescriptor {
	return file_beeremote_proto_enumTypes[1].Descriptor()
}

func (UpdateJobRequest_NewState) Type() protoreflect.EnumType {
	return &file_beeremote_proto_enumTypes[1]
}

func (x UpdateJobRequest_NewState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateJobRequest_NewState.Descriptor instead.
func (UpdateJobRequest_NewState) EnumDescriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{5, 0}
}

type SubmitJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *JobRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *SubmitJobRequest) Reset() {
	*x = SubmitJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobRequest) ProtoMessage() {}

func (x *SubmitJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJobRequest.ProtoReflect.Descriptor instead.
func (*SubmitJobRequest) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{0}
}

func (x *SubmitJobRequest) GetRequest() *JobRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type SubmitJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *JobResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SubmitJobResponse) Reset() {
	*x = SubmitJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobResponse) ProtoMessage() {}

func (x *SubmitJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJobResponse.ProtoReflect.Descriptor instead.
func (*SubmitJobResponse) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{1}
}

func (x *SubmitJobResponse) GetResult() *JobResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// A JobRequest contains all the information necessary for BeeRemote to trigger
// a job on the appropriate worker node(s) (like BeeSync nodes) based on the
// particular request_type specified by the user. It is the external request
// so it does not include automatically generated fields like the job ID or
// anything about the work request(s) used to execute the job.
type JobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// An arbitrary name for a job can be specified.
	// Job names are optional and not need to be unique.
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Priority int32  `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	// This is the string based ID, NOT an actual reference to an RST.
	// This ensures we don't have to include the full RST configuration,
	// every time we send a Entry (commonly as part of a Job).
	RemoteStorageTarget string `protobuf:"bytes,4,opt,name=remote_storage_target,json=remoteStorageTarget,proto3" json:"remote_storage_target,omitempty"`
	// Types that are assignable to Type:
	//
	//	*JobRequest_Sync
	//	*JobRequest_Mock
	Type isJobRequest_Type `protobuf_oneof:"type"`
}

func (x *JobRequest) Reset() {
	*x = JobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRequest) ProtoMessage() {}

func (x *JobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRequest.ProtoReflect.Descriptor instead.
func (*JobRequest) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{2}
}

func (x *JobRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *JobRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *JobRequest) GetRemoteStorageTarget() string {
	if x != nil {
		return x.RemoteStorageTarget
	}
	return ""
}

func (m *JobRequest) GetType() isJobRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *JobRequest) GetSync() *flex.SyncJob {
	if x, ok := x.GetType().(*JobRequest_Sync); ok {
		return x.Sync
	}
	return nil
}

func (x *JobRequest) GetMock() *flex.MockJob {
	if x, ok := x.GetType().(*JobRequest_Mock); ok {
		return x.Mock
	}
	return nil
}

type isJobRequest_Type interface {
	isJobRequest_Type()
}

type JobRequest_Sync struct {
	Sync *flex.SyncJob `protobuf:"bytes,10,opt,name=sync,proto3,oneof"`
}

type JobRequest_Mock struct {
	Mock *flex.MockJob `protobuf:"bytes,11,opt,name=mock,proto3,oneof"`
}

func (*JobRequest_Sync) isJobRequest_Type() {}

func (*JobRequest_Mock) isJobRequest_Type() {}

// Job contains all the data from the original request plus the job ID and
// current status. This is what is stored in the database for each path. We
// don't embed results of a job in the Job because we store the Job and its
// WorkResults (the latest work response from each worker node) in separate
// key/value stores. This approach simplifies encoding and decoding these
// messages and allows us to quickly look up jobs by path or ID.
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Request *JobRequest            `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Created *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	// Status is usually updated using `GetStatus()` which returns a status a pointer to the status
	// of the overall job. Because it returns a pointer the status and/or message can be updated
	// directly. This allows you to modify one but not the other field (commonly message can change
	// but status should not). The state should encompass the results for individual work requests.
	// For example if some WRs are finished and others are still running the state would be RUNNING.
	Status *Job_Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// Used as the upload ID for multipart uploads, or any other time
	// an external identifer is needed to coordinate a distributed transfer.
	ExternalId string `protobuf:"bytes,5,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{3}
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Job) GetRequest() *JobRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Job) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Job) GetStatus() *Job_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Job) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

// The JobResult is used to return information about a job and its work results. Note the work
// results are not directly embedded in the Job message to reduce the amount of data that needs to
// be stored on-disk (notably work requests are deterministically generated).
type JobResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job          *Job                    `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	WorkRequests []*flex.WorkRequest     `protobuf:"bytes,2,rep,name=work_requests,json=workRequests,proto3" json:"work_requests,omitempty"`
	WorkResults  []*JobResult_WorkResult `protobuf:"bytes,3,rep,name=work_results,json=workResults,proto3" json:"work_results,omitempty"`
}

func (x *JobResult) Reset() {
	*x = JobResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResult) ProtoMessage() {}

func (x *JobResult) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResult.ProtoReflect.Descriptor instead.
func (*JobResult) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{4}
}

func (x *JobResult) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *JobResult) GetWorkRequests() []*flex.WorkRequest {
	if x != nil {
		return x.WorkRequests
	}
	return nil
}

func (x *JobResult) GetWorkResults() []*JobResult_WorkResult {
	if x != nil {
		return x.WorkResults
	}
	return nil
}

type UpdateJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*UpdateJobRequest_ByIdAndPath
	//	*UpdateJobRequest_ByExactPath
	Query    isUpdateJobRequest_Query  `protobuf_oneof:"query"`
	NewState UpdateJobRequest_NewState `protobuf:"varint,3,opt,name=new_state,json=newState,proto3,enum=beeremote.UpdateJobRequest_NewState" json:"new_state,omitempty"`
	// Normally completed jobs are ignored when making updates so some number of completed jobs can
	// be automatically retained to determine when a path has been successfully synchronized with an
	// RST. If a user wants to delete a completed job, or perhaps there was some bug and the user
	// wants to go back through the steps to cancel a job to try and cleanup/recover, this can be
	// done through a force update.
	ForceUpdate bool `protobuf:"varint,4,opt,name=force_update,json=forceUpdate,proto3" json:"force_update,omitempty"`
}

func (x *UpdateJobRequest) Reset() {
	*x = UpdateJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobRequest) ProtoMessage() {}

func (x *UpdateJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobRequest.ProtoReflect.Descriptor instead.
func (*UpdateJobRequest) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{5}
}

func (m *UpdateJobRequest) GetQuery() isUpdateJobRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *UpdateJobRequest) GetByIdAndPath() *UpdateJobRequest_QueryIdAndPath {
	if x, ok := x.GetQuery().(*UpdateJobRequest_ByIdAndPath); ok {
		return x.ByIdAndPath
	}
	return nil
}

func (x *UpdateJobRequest) GetByExactPath() string {
	if x, ok := x.GetQuery().(*UpdateJobRequest_ByExactPath); ok {
		return x.ByExactPath
	}
	return ""
}

func (x *UpdateJobRequest) GetNewState() UpdateJobRequest_NewState {
	if x != nil {
		return x.NewState
	}
	return UpdateJobRequest_UNSPECIFIED
}

func (x *UpdateJobRequest) GetForceUpdate() bool {
	if x != nil {
		return x.ForceUpdate
	}
	return false
}

type isUpdateJobRequest_Query interface {
	isUpdateJobRequest_Query()
}

type UpdateJobRequest_ByIdAndPath struct {
	// Updates at most one job.
	ByIdAndPath *UpdateJobRequest_QueryIdAndPath `protobuf:"bytes,1,opt,name=by_id_and_path,json=byIdAndPath,proto3,oneof"`
}

type UpdateJobRequest_ByExactPath struct {
	// Updates all jobs with this path.
	ByExactPath string `protobuf:"bytes,2,opt,name=by_exact_path,json=byExactPath,proto3,oneof"`
}

func (*UpdateJobRequest_ByIdAndPath) isUpdateJobRequest_Query() {}

func (*UpdateJobRequest_ByExactPath) isUpdateJobRequest_Query() {}

// Updating jobs can happen asynchronously or synchronously depending if wait is
// set in the UpdateJobRequest.If wait == true then JobResponses will contain
// one or morwe job responses with the updated status of the job(s). Otherwise
// it will be empty.
type UpdateJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the newState could not be applied to any of the jobs then ok will be
	// false. Inspect the message and individual job responses to troubleshoot
	// further. Generally the message will indicate any internal errors whereas
	// the status of individual jobs will indicate problems applying the new
	// state to that particular job.
	Ok      bool         `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Results []*JobResult `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *UpdateJobResponse) Reset() {
	*x = UpdateJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobResponse) ProtoMessage() {}

func (x *UpdateJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobResponse.ProtoReflect.Descriptor instead.
func (*UpdateJobResponse) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateJobResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *UpdateJobResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateJobResponse) GetResults() []*JobResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// The number of query options is limited because we store jobs in a key/value
// store where the key is essentially the equivalent of an index in a
// traditional RDBMS. To optimize for multiple search terms we need to use
// multiple k/v stores using a different item we want to query for as the key.
// With the MapStore used as a wrapper around the BadgerDB k/v store we don't
// have to duplicate all information and can use the Metadata field of the
// MapStore to create references to data stored in other MapStores.
type GetJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*GetJobsRequest_ByJobIdAndPath
	//	*GetJobsRequest_ByExactPath
	//	*GetJobsRequest_ByPathPrefix
	Query               isGetJobsRequest_Query `protobuf_oneof:"query"`
	IncludeWorkRequests bool                   `protobuf:"varint,4,opt,name=include_work_requests,json=includeWorkRequests,proto3" json:"include_work_requests,omitempty"`
	// Set to true to also return work results details.
	IncludeWorkResults bool `protobuf:"varint,5,opt,name=include_work_results,json=includeWorkResults,proto3" json:"include_work_results,omitempty"`
	// By default we just return the latest results known to BeeRemote and don't
	// pull the latest work results from worker nodes and update the job status.
	// We can optionally request an update from all worker nodes for each job
	// and also update the job status, however this inccurs extra overhead as we'll
	// have to lock the entries and send extra messages to get the latest status.
	// Generally this should only be used to get the latest updates from a single
	// job or all jobs for a particular path.
	UpdateWorkResults bool `protobuf:"varint,6,opt,name=update_work_results,json=updateWorkResults,proto3" json:"update_work_results,omitempty"`
}

func (x *GetJobsRequest) Reset() {
	*x = GetJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobsRequest) ProtoMessage() {}

func (x *GetJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobsRequest.ProtoReflect.Descriptor instead.
func (*GetJobsRequest) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{7}
}

func (m *GetJobsRequest) GetQuery() isGetJobsRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *GetJobsRequest) GetByJobIdAndPath() *GetJobsRequest_QueryIdAndPath {
	if x, ok := x.GetQuery().(*GetJobsRequest_ByJobIdAndPath); ok {
		return x.ByJobIdAndPath
	}
	return nil
}

func (x *GetJobsRequest) GetByExactPath() string {
	if x, ok := x.GetQuery().(*GetJobsRequest_ByExactPath); ok {
		return x.ByExactPath
	}
	return ""
}

func (x *GetJobsRequest) GetByPathPrefix() string {
	if x, ok := x.GetQuery().(*GetJobsRequest_ByPathPrefix); ok {
		return x.ByPathPrefix
	}
	return ""
}

func (x *GetJobsRequest) GetIncludeWorkRequests() bool {
	if x != nil {
		return x.IncludeWorkRequests
	}
	return false
}

func (x *GetJobsRequest) GetIncludeWorkResults() bool {
	if x != nil {
		return x.IncludeWorkResults
	}
	return false
}

func (x *GetJobsRequest) GetUpdateWorkResults() bool {
	if x != nil {
		return x.UpdateWorkResults
	}
	return false
}

type isGetJobsRequest_Query interface {
	isGetJobsRequest_Query()
}

type GetJobsRequest_ByJobIdAndPath struct {
	// Returns at most one Job.
	ByJobIdAndPath *GetJobsRequest_QueryIdAndPath `protobuf:"bytes,1,opt,name=by_job_id_and_path,json=byJobIdAndPath,proto3,oneof"`
}

type GetJobsRequest_ByExactPath struct {
	// Returns all Jobs for the specified path.
	ByExactPath string `protobuf:"bytes,2,opt,name=by_exact_path,json=byExactPath,proto3,oneof"`
}

type GetJobsRequest_ByPathPrefix struct {
	// Returns all Jobs for the specified paths.
	// All jobs can be returned by specifying "/".
	ByPathPrefix string `protobuf:"bytes,3,opt,name=by_path_prefix,json=byPathPrefix,proto3,oneof"`
}

func (*GetJobsRequest_ByJobIdAndPath) isGetJobsRequest_Query() {}

func (*GetJobsRequest_ByExactPath) isGetJobsRequest_Query() {}

func (*GetJobsRequest_ByPathPrefix) isGetJobsRequest_Query() {}

type GetJobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path    string       `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Results []*JobResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GetJobsResponse) Reset() {
	*x = GetJobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobsResponse) ProtoMessage() {}

func (x *GetJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobsResponse.ProtoReflect.Descriptor instead.
func (*GetJobsResponse) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{8}
}

func (x *GetJobsResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetJobsResponse) GetResults() []*JobResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type UpdateWorkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Work *flex.Work `protobuf:"bytes,1,opt,name=work,proto3" json:"work,omitempty"`
}

func (x *UpdateWorkRequest) Reset() {
	*x = UpdateWorkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkRequest) ProtoMessage() {}

func (x *UpdateWorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkRequest) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateWorkRequest) GetWork() *flex.Work {
	if x != nil {
		return x.Work
	}
	return nil
}

type UpdateWorkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateWorkResponse) Reset() {
	*x = UpdateWorkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkResponse) ProtoMessage() {}

func (x *UpdateWorkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkResponse.ProtoReflect.Descriptor instead.
func (*UpdateWorkResponse) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{10}
}

type GetRSTConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRSTConfigRequest) Reset() {
	*x = GetRSTConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRSTConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRSTConfigRequest) ProtoMessage() {}

func (x *GetRSTConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRSTConfigRequest.ProtoReflect.Descriptor instead.
func (*GetRSTConfigRequest) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{11}
}

type GetRSTConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rsts []*flex.RemoteStorageTarget `protobuf:"bytes,1,rep,name=rsts,proto3" json:"rsts,omitempty"`
}

func (x *GetRSTConfigResponse) Reset() {
	*x = GetRSTConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRSTConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRSTConfigResponse) ProtoMessage() {}

func (x *GetRSTConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRSTConfigResponse.ProtoReflect.Descriptor instead.
func (*GetRSTConfigResponse) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{12}
}

func (x *GetRSTConfigResponse) GetRsts() []*flex.RemoteStorageTarget {
	if x != nil {
		return x.Rsts
	}
	return nil
}

type Job_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State Job_State `protobuf:"varint,1,opt,name=state,proto3,enum=beeremote.Job_State" json:"state,omitempty"`
	// Message should be used to return any additional details, particularly to aid in
	// troubleshooting. When useful for troubleshooting, multiple historical messages may be
	// concatenated together in the format: "oldest message; newer message; newest message".
	// Especially if the request goes through multiple state transitions (for example error to
	// failed) this can be helpful to troubleshoot the chain of events that lead to a failure.
	// Note messages should not be concatenated for the entire life of a request, and should
	// generally be reset when either the state transitions from an expected to another expected
	// state (i.e., UNASSIGNED->SCHEDULED), or when a request experienced an error or failure and
	// was automatically or manually retried. Don't keep the message intact across multiple failed
	// retries as this (a) makes troubleshooting each failure difficult and (b) means the message
	// size can eventually grow beyond a reasonable limit and cause other issues.
	Message string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Updated *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *Job_Status) Reset() {
	*x = Job_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Status) ProtoMessage() {}

func (x *Job_Status) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Status.ProtoReflect.Descriptor instead.
func (*Job_Status) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Job_Status) GetState() Job_State {
	if x != nil {
		return x.State
	}
	return Job_UNSPECIFIED
}

func (x *Job_Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Job_Status) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type JobResult_WorkResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Work         *flex.Work `protobuf:"bytes,1,opt,name=work,proto3" json:"work,omitempty"`
	AssignedNode string     `protobuf:"bytes,2,opt,name=assigned_node,json=assignedNode,proto3" json:"assigned_node,omitempty"`
	AssignedPool string     `protobuf:"bytes,3,opt,name=assigned_pool,json=assignedPool,proto3" json:"assigned_pool,omitempty"`
}

func (x *JobResult_WorkResult) Reset() {
	*x = JobResult_WorkResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResult_WorkResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResult_WorkResult) ProtoMessage() {}

func (x *JobResult_WorkResult) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResult_WorkResult.ProtoReflect.Descriptor instead.
func (*JobResult_WorkResult) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{4, 0}
}

func (x *JobResult_WorkResult) GetWork() *flex.Work {
	if x != nil {
		return x.Work
	}
	return nil
}

func (x *JobResult_WorkResult) GetAssignedNode() string {
	if x != nil {
		return x.AssignedNode
	}
	return ""
}

func (x *JobResult_WorkResult) GetAssignedPool() string {
	if x != nil {
		return x.AssignedPool
	}
	return ""
}

type UpdateJobRequest_QueryIdAndPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Path  string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *UpdateJobRequest_QueryIdAndPath) Reset() {
	*x = UpdateJobRequest_QueryIdAndPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJobRequest_QueryIdAndPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobRequest_QueryIdAndPath) ProtoMessage() {}

func (x *UpdateJobRequest_QueryIdAndPath) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobRequest_QueryIdAndPath.ProtoReflect.Descriptor instead.
func (*UpdateJobRequest_QueryIdAndPath) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{5, 0}
}

func (x *UpdateJobRequest_QueryIdAndPath) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *UpdateJobRequest_QueryIdAndPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type GetJobsRequest_QueryIdAndPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Path  string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *GetJobsRequest_QueryIdAndPath) Reset() {
	*x = GetJobsRequest_QueryIdAndPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobsRequest_QueryIdAndPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobsRequest_QueryIdAndPath) ProtoMessage() {}

func (x *GetJobsRequest_QueryIdAndPath) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobsRequest_QueryIdAndPath.ProtoReflect.Descriptor instead.
func (*GetJobsRequest_QueryIdAndPath) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetJobsRequest_QueryIdAndPath) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *GetJobsRequest_QueryIdAndPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_beeremote_proto protoreflect.FileDescriptor

var file_beeremote_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x1a, 0x0f, 0x66, 0x6c,
	0x65, 0x78, 0x2f, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43,
	0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x23, 0x0a,
	0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x6c,
	0x65, 0x78, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x04, 0x73, 0x79,
	0x6e, 0x63, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x48,
	0x00, 0x52, 0x04, 0x6d, 0x6f, 0x63, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xdc, 0x03, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x1a, 0x84,
	0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x55, 0x4e, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x09, 0x22, 0xa1,
	0x02, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x03,
	0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x36,
	0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x76, 0x0a, 0x0a, 0x57, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x6f,
	0x6f, 0x6c, 0x22, 0xf0, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0e, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0b, 0x62,
	0x79, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x79,
	0x5f, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x79, 0x45, 0x78, 0x61, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x41, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x3b, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x37, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x42, 0x07, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x6d, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x22, 0x92, 0x03, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x62, 0x79, 0x5f, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52,
	0x0e, 0x62, 0x79, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x24, 0x0a, 0x0d, 0x62, 0x79, 0x5f, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x79, 0x45, 0x78, 0x61, 0x63,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0c, 0x62, 0x79, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x32, 0x0a,
	0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x1a, 0x3b, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x41, 0x6e,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x55, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x33, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52,
	0x04, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x52, 0x53, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x45, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x53, 0x54, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x04, 0x72, 0x73, 0x74, 0x73, 0x32, 0xfb, 0x02, 0x0a, 0x09, 0x42, 0x65,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x4a, 0x6f, 0x62, 0x12, 0x1b, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x1b, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x73, 0x12, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x53, 0x54,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x53, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x53, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x70, 0x61, 0x72, 0x71, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x65, 0x65, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_beeremote_proto_rawDescOnce sync.Once
	file_beeremote_proto_rawDescData = file_beeremote_proto_rawDesc
)

func file_beeremote_proto_rawDescGZIP() []byte {
	file_beeremote_proto_rawDescOnce.Do(func() {
		file_beeremote_proto_rawDescData = protoimpl.X.CompressGZIP(file_beeremote_proto_rawDescData)
	})
	return file_beeremote_proto_rawDescData
}

var file_beeremote_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_beeremote_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_beeremote_proto_goTypes = []interface{}{
	(Job_State)(0),                          // 0: beeremote.Job.State
	(UpdateJobRequest_NewState)(0),          // 1: beeremote.UpdateJobRequest.NewState
	(*SubmitJobRequest)(nil),                // 2: beeremote.SubmitJobRequest
	(*SubmitJobResponse)(nil),               // 3: beeremote.SubmitJobResponse
	(*JobRequest)(nil),                      // 4: beeremote.JobRequest
	(*Job)(nil),                             // 5: beeremote.Job
	(*JobResult)(nil),                       // 6: beeremote.JobResult
	(*UpdateJobRequest)(nil),                // 7: beeremote.UpdateJobRequest
	(*UpdateJobResponse)(nil),               // 8: beeremote.UpdateJobResponse
	(*GetJobsRequest)(nil),                  // 9: beeremote.GetJobsRequest
	(*GetJobsResponse)(nil),                 // 10: beeremote.GetJobsResponse
	(*UpdateWorkRequest)(nil),               // 11: beeremote.UpdateWorkRequest
	(*UpdateWorkResponse)(nil),              // 12: beeremote.UpdateWorkResponse
	(*GetRSTConfigRequest)(nil),             // 13: beeremote.GetRSTConfigRequest
	(*GetRSTConfigResponse)(nil),            // 14: beeremote.GetRSTConfigResponse
	(*Job_Status)(nil),                      // 15: beeremote.Job.Status
	(*JobResult_WorkResult)(nil),            // 16: beeremote.JobResult.WorkResult
	(*UpdateJobRequest_QueryIdAndPath)(nil), // 17: beeremote.UpdateJobRequest.QueryIdAndPath
	(*GetJobsRequest_QueryIdAndPath)(nil),   // 18: beeremote.GetJobsRequest.QueryIdAndPath
	(*flex.SyncJob)(nil),                    // 19: flex.SyncJob
	(*flex.MockJob)(nil),                    // 20: flex.MockJob
	(*timestamppb.Timestamp)(nil),           // 21: google.protobuf.Timestamp
	(*flex.WorkRequest)(nil),                // 22: flex.WorkRequest
	(*flex.Work)(nil),                       // 23: flex.Work
	(*flex.RemoteStorageTarget)(nil),        // 24: flex.RemoteStorageTarget
}
var file_beeremote_proto_depIdxs = []int32{
	4,  // 0: beeremote.SubmitJobRequest.request:type_name -> beeremote.JobRequest
	6,  // 1: beeremote.SubmitJobResponse.result:type_name -> beeremote.JobResult
	19, // 2: beeremote.JobRequest.sync:type_name -> flex.SyncJob
	20, // 3: beeremote.JobRequest.mock:type_name -> flex.MockJob
	4,  // 4: beeremote.Job.request:type_name -> beeremote.JobRequest
	21, // 5: beeremote.Job.created:type_name -> google.protobuf.Timestamp
	15, // 6: beeremote.Job.status:type_name -> beeremote.Job.Status
	5,  // 7: beeremote.JobResult.job:type_name -> beeremote.Job
	22, // 8: beeremote.JobResult.work_requests:type_name -> flex.WorkRequest
	16, // 9: beeremote.JobResult.work_results:type_name -> beeremote.JobResult.WorkResult
	17, // 10: beeremote.UpdateJobRequest.by_id_and_path:type_name -> beeremote.UpdateJobRequest.QueryIdAndPath
	1,  // 11: beeremote.UpdateJobRequest.new_state:type_name -> beeremote.UpdateJobRequest.NewState
	6,  // 12: beeremote.UpdateJobResponse.results:type_name -> beeremote.JobResult
	18, // 13: beeremote.GetJobsRequest.by_job_id_and_path:type_name -> beeremote.GetJobsRequest.QueryIdAndPath
	6,  // 14: beeremote.GetJobsResponse.results:type_name -> beeremote.JobResult
	23, // 15: beeremote.UpdateWorkRequest.work:type_name -> flex.Work
	24, // 16: beeremote.GetRSTConfigResponse.rsts:type_name -> flex.RemoteStorageTarget
	0,  // 17: beeremote.Job.Status.state:type_name -> beeremote.Job.State
	21, // 18: beeremote.Job.Status.updated:type_name -> google.protobuf.Timestamp
	23, // 19: beeremote.JobResult.WorkResult.work:type_name -> flex.Work
	2,  // 20: beeremote.BeeRemote.SubmitJob:input_type -> beeremote.SubmitJobRequest
	7,  // 21: beeremote.BeeRemote.UpdateJob:input_type -> beeremote.UpdateJobRequest
	9,  // 22: beeremote.BeeRemote.GetJobs:input_type -> beeremote.GetJobsRequest
	11, // 23: beeremote.BeeRemote.UpdateWork:input_type -> beeremote.UpdateWorkRequest
	13, // 24: beeremote.BeeRemote.GetRSTConfig:input_type -> beeremote.GetRSTConfigRequest
	3,  // 25: beeremote.BeeRemote.SubmitJob:output_type -> beeremote.SubmitJobResponse
	8,  // 26: beeremote.BeeRemote.UpdateJob:output_type -> beeremote.UpdateJobResponse
	10, // 27: beeremote.BeeRemote.GetJobs:output_type -> beeremote.GetJobsResponse
	12, // 28: beeremote.BeeRemote.UpdateWork:output_type -> beeremote.UpdateWorkResponse
	14, // 29: beeremote.BeeRemote.GetRSTConfig:output_type -> beeremote.GetRSTConfigResponse
	25, // [25:30] is the sub-list for method output_type
	20, // [20:25] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_beeremote_proto_init() }
func file_beeremote_proto_init() {
	if File_beeremote_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_beeremote_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRSTConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRSTConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobResult_WorkResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateJobRequest_QueryIdAndPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobsRequest_QueryIdAndPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_beeremote_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*JobRequest_Sync)(nil),
		(*JobRequest_Mock)(nil),
	}
	file_beeremote_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*UpdateJobRequest_ByIdAndPath)(nil),
		(*UpdateJobRequest_ByExactPath)(nil),
	}
	file_beeremote_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*GetJobsRequest_ByJobIdAndPath)(nil),
		(*GetJobsRequest_ByExactPath)(nil),
		(*GetJobsRequest_ByPathPrefix)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beeremote_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_beeremote_proto_goTypes,
		DependencyIndexes: file_beeremote_proto_depIdxs,
		EnumInfos:         file_beeremote_proto_enumTypes,
		MessageInfos:      file_beeremote_proto_msgTypes,
	}.Build()
	File_beeremote_proto = out.File
	file_beeremote_proto_rawDesc = nil
	file_beeremote_proto_goTypes = nil
	file_beeremote_proto_depIdxs = nil
}
