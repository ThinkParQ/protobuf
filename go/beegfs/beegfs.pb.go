// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.26.1
// source: beegfs.proto

package beegfs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EntityType int32

const (
	EntityType_ENTITY_TYPE_UNSPECIFIED EntityType = 0
	EntityType_NODE                    EntityType = 1
	EntityType_TARGET                  EntityType = 2
	EntityType_BUDDY_GROUP             EntityType = 3
	EntityType_STORAGE_POOL            EntityType = 4
)

// Enum value maps for EntityType.
var (
	EntityType_name = map[int32]string{
		0: "ENTITY_TYPE_UNSPECIFIED",
		1: "NODE",
		2: "TARGET",
		3: "BUDDY_GROUP",
		4: "STORAGE_POOL",
	}
	EntityType_value = map[string]int32{
		"ENTITY_TYPE_UNSPECIFIED": 0,
		"NODE":                    1,
		"TARGET":                  2,
		"BUDDY_GROUP":             3,
		"STORAGE_POOL":            4,
	}
)

func (x EntityType) Enum() *EntityType {
	p := new(EntityType)
	*p = x
	return p
}

func (x EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_beegfs_proto_enumTypes[0].Descriptor()
}

func (EntityType) Type() protoreflect.EnumType {
	return &file_beegfs_proto_enumTypes[0]
}

func (x EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityType.Descriptor instead.
func (EntityType) EnumDescriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{0}
}

type NodeType int32

const (
	NodeType_NODE_TYPE_UNSPECIFIED NodeType = 0
	NodeType_CLIENT                NodeType = 1
	NodeType_META                  NodeType = 2
	NodeType_STORAGE               NodeType = 3
	NodeType_MANAGEMENT            NodeType = 4
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0: "NODE_TYPE_UNSPECIFIED",
		1: "CLIENT",
		2: "META",
		3: "STORAGE",
		4: "MANAGEMENT",
	}
	NodeType_value = map[string]int32{
		"NODE_TYPE_UNSPECIFIED": 0,
		"CLIENT":                1,
		"META":                  2,
		"STORAGE":               3,
		"MANAGEMENT":            4,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_beegfs_proto_enumTypes[1].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_beegfs_proto_enumTypes[1]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{1}
}

// A nodes reachability state as calculated by the management
type ReachabilityState int32

const (
	ReachabilityState_REACHABILITY_STATE_UNSPECIFIED ReachabilityState = 0
	ReachabilityState_ONLINE                         ReachabilityState = 1
	ReachabilityState_POFFLINE                       ReachabilityState = 2
	ReachabilityState_OFFLINE                        ReachabilityState = 3
)

// Enum value maps for ReachabilityState.
var (
	ReachabilityState_name = map[int32]string{
		0: "REACHABILITY_STATE_UNSPECIFIED",
		1: "ONLINE",
		2: "POFFLINE",
		3: "OFFLINE",
	}
	ReachabilityState_value = map[string]int32{
		"REACHABILITY_STATE_UNSPECIFIED": 0,
		"ONLINE":                         1,
		"POFFLINE":                       2,
		"OFFLINE":                        3,
	}
)

func (x ReachabilityState) Enum() *ReachabilityState {
	p := new(ReachabilityState)
	*p = x
	return p
}

func (x ReachabilityState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReachabilityState) Descriptor() protoreflect.EnumDescriptor {
	return file_beegfs_proto_enumTypes[2].Descriptor()
}

func (ReachabilityState) Type() protoreflect.EnumType {
	return &file_beegfs_proto_enumTypes[2]
}

func (x ReachabilityState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReachabilityState.Descriptor instead.
func (ReachabilityState) EnumDescriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{2}
}

// A targets consistency state as known by the management
type ConsistencyState int32

const (
	ConsistencyState_CONSISTENCY_STATE_UNSPECIFIED ConsistencyState = 0
	ConsistencyState_GOOD                          ConsistencyState = 1
	ConsistencyState_NEEDS_RESYNC                  ConsistencyState = 2
	ConsistencyState_BAD                           ConsistencyState = 3
)

// Enum value maps for ConsistencyState.
var (
	ConsistencyState_name = map[int32]string{
		0: "CONSISTENCY_STATE_UNSPECIFIED",
		1: "GOOD",
		2: "NEEDS_RESYNC",
		3: "BAD",
	}
	ConsistencyState_value = map[string]int32{
		"CONSISTENCY_STATE_UNSPECIFIED": 0,
		"GOOD":                          1,
		"NEEDS_RESYNC":                  2,
		"BAD":                           3,
	}
)

func (x ConsistencyState) Enum() *ConsistencyState {
	p := new(ConsistencyState)
	*p = x
	return p
}

func (x ConsistencyState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsistencyState) Descriptor() protoreflect.EnumDescriptor {
	return file_beegfs_proto_enumTypes[3].Descriptor()
}

func (ConsistencyState) Type() protoreflect.EnumType {
	return &file_beegfs_proto_enumTypes[3]
}

func (x ConsistencyState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsistencyState.Descriptor instead.
func (ConsistencyState) EnumDescriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{3}
}

// A targets capacity pool as calculated by management
type CapacityPool int32

const (
	CapacityPool_CAPACITY_POOL_UNSPECIFIED CapacityPool = 0
	CapacityPool_NORMAL                    CapacityPool = 1
	CapacityPool_LOW                       CapacityPool = 2
	CapacityPool_EMERGENCY                 CapacityPool = 3
)

// Enum value maps for CapacityPool.
var (
	CapacityPool_name = map[int32]string{
		0: "CAPACITY_POOL_UNSPECIFIED",
		1: "NORMAL",
		2: "LOW",
		3: "EMERGENCY",
	}
	CapacityPool_value = map[string]int32{
		"CAPACITY_POOL_UNSPECIFIED": 0,
		"NORMAL":                    1,
		"LOW":                       2,
		"EMERGENCY":                 3,
	}
)

func (x CapacityPool) Enum() *CapacityPool {
	p := new(CapacityPool)
	*p = x
	return p
}

func (x CapacityPool) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapacityPool) Descriptor() protoreflect.EnumDescriptor {
	return file_beegfs_proto_enumTypes[4].Descriptor()
}

func (CapacityPool) Type() protoreflect.EnumType {
	return &file_beegfs_proto_enumTypes[4]
}

func (x CapacityPool) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapacityPool.Descriptor instead.
func (CapacityPool) EnumDescriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{4}
}

// A Nics NicType
type NicType int32

const (
	NicType_NIC_TYPE_UNSPECIFIED NicType = 0
	NicType_ETHERNET             NicType = 1
	NicType_RDMA                 NicType = 2
)

// Enum value maps for NicType.
var (
	NicType_name = map[int32]string{
		0: "NIC_TYPE_UNSPECIFIED",
		1: "ETHERNET",
		2: "RDMA",
	}
	NicType_value = map[string]int32{
		"NIC_TYPE_UNSPECIFIED": 0,
		"ETHERNET":             1,
		"RDMA":                 2,
	}
)

func (x NicType) Enum() *NicType {
	p := new(NicType)
	*p = x
	return p
}

func (x NicType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NicType) Descriptor() protoreflect.EnumDescriptor {
	return file_beegfs_proto_enumTypes[5].Descriptor()
}

func (NicType) Type() protoreflect.EnumType {
	return &file_beegfs_proto_enumTypes[5]
}

func (x NicType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NicType.Descriptor instead.
func (NicType) EnumDescriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{5}
}

// The "old" BeeGFS numeric Id-NodeType combination that can be used to identify entities like nodes,
// targets, ... .  Because each entity type has its own Id space (meaning a combination is NOT
// globally unique), this also requires the entities type it is related to.
type LegacyId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Old style BeeGFS numeric Id
	NumId uint32 `protobuf:"varint,1,opt,name=num_id,json=numId,proto3" json:"num_id,omitempty"`
	// BeeGFS node type. Despite the name, also applies to other entity types (which currently can
	// only be on a node of their own type, so it's still correct).
	NodeType NodeType `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=beegfs.NodeType" json:"node_type,omitempty"`
	// The referred entities type.
	EntityType EntityType `protobuf:"varint,3,opt,name=entity_type,json=entityType,proto3,enum=beegfs.EntityType" json:"entity_type,omitempty"`
}

func (x *LegacyId) Reset() {
	*x = LegacyId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegacyId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyId) ProtoMessage() {}

func (x *LegacyId) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyId.ProtoReflect.Descriptor instead.
func (*LegacyId) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{0}
}

func (x *LegacyId) GetNumId() uint32 {
	if x != nil {
		return x.NumId
	}
	return 0
}

func (x *LegacyId) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NODE_TYPE_UNSPECIFIED
}

func (x *LegacyId) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_ENTITY_TYPE_UNSPECIFIED
}

// Contains all existing identifiers used to uniquely identify an entity like a specific node,
// target, ... . This is what should usually be returned by a server when referring to an entity,
// for example when requesting a list of nodes. The requestor/client can then decide which
// identifier to use depending on the use case.
// Note that all fields are explicitly optional. The server should try to fill all of them, but sometimes
// (e.g. for performance reasons), only some of them might be set. It's the requesters job to check
// that.
type EntityIdSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new style globally unique identifier. Globally unique - identifies an entity from all types
	// without any additional context.
	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// The user definable alias of an entity. Globally unique - identifies an entity from all types
	// without any additional context.
	Alias string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	// The old style numeric Id-NodeType combination. NOT globally unique - entity type depends on
	// the context.
	LegacyId *LegacyId `protobuf:"bytes,3,opt,name=legacy_id,json=legacyId,proto3" json:"legacy_id,omitempty"`
}

func (x *EntityIdSet) Reset() {
	*x = EntityIdSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityIdSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityIdSet) ProtoMessage() {}

func (x *EntityIdSet) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityIdSet.ProtoReflect.Descriptor instead.
func (*EntityIdSet) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{1}
}

func (x *EntityIdSet) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *EntityIdSet) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *EntityIdSet) GetLegacyId() *LegacyId {
	if x != nil {
		return x.LegacyId
	}
	return nil
}

// Contains one of the existing identifiers used to uniquely identify an entity like a specific
// node, target, ... . This is meant for requests that identify one or more entities. Only one
// unique identifier is needed.
type EntityIdVariant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*EntityIdVariant_Uid
	//	*EntityIdVariant_LegacyId
	//	*EntityIdVariant_Alias
	Variant isEntityIdVariant_Variant `protobuf_oneof:"variant"`
}

func (x *EntityIdVariant) Reset() {
	*x = EntityIdVariant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityIdVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityIdVariant) ProtoMessage() {}

func (x *EntityIdVariant) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityIdVariant.ProtoReflect.Descriptor instead.
func (*EntityIdVariant) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{2}
}

func (m *EntityIdVariant) GetVariant() isEntityIdVariant_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *EntityIdVariant) GetUid() uint64 {
	if x, ok := x.GetVariant().(*EntityIdVariant_Uid); ok {
		return x.Uid
	}
	return 0
}

func (x *EntityIdVariant) GetLegacyId() *LegacyId {
	if x, ok := x.GetVariant().(*EntityIdVariant_LegacyId); ok {
		return x.LegacyId
	}
	return nil
}

func (x *EntityIdVariant) GetAlias() string {
	if x, ok := x.GetVariant().(*EntityIdVariant_Alias); ok {
		return x.Alias
	}
	return ""
}

type isEntityIdVariant_Variant interface {
	isEntityIdVariant_Variant()
}

type EntityIdVariant_Uid struct {
	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3,oneof"`
}

type EntityIdVariant_LegacyId struct {
	LegacyId *LegacyId `protobuf:"bytes,2,opt,name=legacy_id,json=legacyId,proto3,oneof"`
}

type EntityIdVariant_Alias struct {
	Alias string `protobuf:"bytes,3,opt,name=alias,proto3,oneof"`
}

func (*EntityIdVariant_Uid) isEntityIdVariant_Variant() {}

func (*EntityIdVariant_LegacyId) isEntityIdVariant_Variant() {}

func (*EntityIdVariant_Alias) isEntityIdVariant_Variant() {}

type GetNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query the nic list for each node and include it in the response
	IncludeNics bool `protobuf:"varint,1,opt,name=include_nics,json=includeNics,proto3" json:"include_nics,omitempty"`
}

func (x *GetNodesRequest) Reset() {
	*x = GetNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesRequest) ProtoMessage() {}

func (x *GetNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesRequest.ProtoReflect.Descriptor instead.
func (*GetNodesRequest) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{3}
}

func (x *GetNodesRequest) GetIncludeNics() bool {
	if x != nil {
		return x.IncludeNics
	}
	return false
}

type GetNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of nodes
	Nodes []*GetNodesResponse_Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// The node containing the root inode. Will be missing on a fresh system without any meta
	// targets/nodes.
	MetaRootNode *EntityIdSet `protobuf:"bytes,2,opt,name=meta_root_node,json=metaRootNode,proto3,oneof" json:"meta_root_node,omitempty"`
}

func (x *GetNodesResponse) Reset() {
	*x = GetNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesResponse) ProtoMessage() {}

func (x *GetNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesResponse.ProtoReflect.Descriptor instead.
func (*GetNodesResponse) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{4}
}

func (x *GetNodesResponse) GetNodes() []*GetNodesResponse_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *GetNodesResponse) GetMetaRootNode() *EntityIdSet {
	if x != nil {
		return x.MetaRootNode
	}
	return nil
}

type GetTargetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTargetsRequest) Reset() {
	*x = GetTargetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTargetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetsRequest) ProtoMessage() {}

func (x *GetTargetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTargetsRequest.ProtoReflect.Descriptor instead.
func (*GetTargetsRequest) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{5}
}

type GetTargetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of targets
	Targets []*GetTargetsResponse_Target `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *GetTargetsResponse) Reset() {
	*x = GetTargetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTargetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetsResponse) ProtoMessage() {}

func (x *GetTargetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTargetsResponse.ProtoReflect.Descriptor instead.
func (*GetTargetsResponse) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{6}
}

func (x *GetTargetsResponse) GetTargets() []*GetTargetsResponse_Target {
	if x != nil {
		return x.Targets
	}
	return nil
}

type GetBuddyGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBuddyGroupsRequest) Reset() {
	*x = GetBuddyGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuddyGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuddyGroupsRequest) ProtoMessage() {}

func (x *GetBuddyGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuddyGroupsRequest.ProtoReflect.Descriptor instead.
func (*GetBuddyGroupsRequest) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{7}
}

type GetBuddyGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of buddy groups
	BuddyGroups []*GetBuddyGroupsResponse_BuddyGroup `protobuf:"bytes,1,rep,name=buddy_groups,json=buddyGroups,proto3" json:"buddy_groups,omitempty"`
}

func (x *GetBuddyGroupsResponse) Reset() {
	*x = GetBuddyGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuddyGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuddyGroupsResponse) ProtoMessage() {}

func (x *GetBuddyGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuddyGroupsResponse.ProtoReflect.Descriptor instead.
func (*GetBuddyGroupsResponse) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{8}
}

func (x *GetBuddyGroupsResponse) GetBuddyGroups() []*GetBuddyGroupsResponse_BuddyGroup {
	if x != nil {
		return x.BuddyGroups
	}
	return nil
}

type GetStoragePoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStoragePoolsRequest) Reset() {
	*x = GetStoragePoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStoragePoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoragePoolsRequest) ProtoMessage() {}

func (x *GetStoragePoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoragePoolsRequest.ProtoReflect.Descriptor instead.
func (*GetStoragePoolsRequest) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{9}
}

type GetStoragePoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of storage pools
	Pools []*GetStoragePoolsResponse_StoragePool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *GetStoragePoolsResponse) Reset() {
	*x = GetStoragePoolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStoragePoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoragePoolsResponse) ProtoMessage() {}

func (x *GetStoragePoolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoragePoolsResponse.ProtoReflect.Descriptor instead.
func (*GetStoragePoolsResponse) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{10}
}

func (x *GetStoragePoolsResponse) GetPools() []*GetStoragePoolsResponse_StoragePool {
	if x != nil {
		return x.Pools
	}
	return nil
}

type SetAliasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier to set the alias for
	EntityId *EntityIdVariant `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// The new alias
	NewAlias string `protobuf:"bytes,2,opt,name=new_alias,json=newAlias,proto3" json:"new_alias,omitempty"`
}

func (x *SetAliasRequest) Reset() {
	*x = SetAliasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAliasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAliasRequest) ProtoMessage() {}

func (x *SetAliasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAliasRequest.ProtoReflect.Descriptor instead.
func (*SetAliasRequest) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{11}
}

func (x *SetAliasRequest) GetEntityId() *EntityIdVariant {
	if x != nil {
		return x.EntityId
	}
	return nil
}

func (x *SetAliasRequest) GetNewAlias() string {
	if x != nil {
		return x.NewAlias
	}
	return ""
}

type SetAliasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetAliasResponse) Reset() {
	*x = SetAliasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAliasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAliasResponse) ProtoMessage() {}

func (x *SetAliasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAliasResponse.ProtoReflect.Descriptor instead.
func (*SetAliasResponse) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{12}
}

// BeeGFS node related data
type GetNodesResponse_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node identifiers
	Id       *EntityIdSet `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeType NodeType     `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=beegfs.NodeType" json:"node_type,omitempty"`
	// The nodes TCP and UDP port.
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// The nodes Nics
	Nics []*GetNodesResponse_Node_Nic `protobuf:"bytes,4,rep,name=nics,proto3" json:"nics,omitempty"`
}

func (x *GetNodesResponse_Node) Reset() {
	*x = GetNodesResponse_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesResponse_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesResponse_Node) ProtoMessage() {}

func (x *GetNodesResponse_Node) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesResponse_Node.ProtoReflect.Descriptor instead.
func (*GetNodesResponse_Node) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GetNodesResponse_Node) GetId() *EntityIdSet {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetNodesResponse_Node) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NODE_TYPE_UNSPECIFIED
}

func (x *GetNodesResponse_Node) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GetNodesResponse_Node) GetNics() []*GetNodesResponse_Node_Nic {
	if x != nil {
		return x.Nics
	}
	return nil
}

// BeeGFS nic related data
type GetNodesResponse_Node_Nic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nics IPv4 address in the form aaa.bbb.ccc.ddd:port
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// The nics name (note that this is NOT an alias as a Nic is not considered an entity)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The nics type
	NicType NicType `protobuf:"varint,3,opt,name=nic_type,json=nicType,proto3,enum=beegfs.NicType" json:"nic_type,omitempty"`
}

func (x *GetNodesResponse_Node_Nic) Reset() {
	*x = GetNodesResponse_Node_Nic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesResponse_Node_Nic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesResponse_Node_Nic) ProtoMessage() {}

func (x *GetNodesResponse_Node_Nic) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesResponse_Node_Nic.ProtoReflect.Descriptor instead.
func (*GetNodesResponse_Node_Nic) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *GetNodesResponse_Node_Nic) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *GetNodesResponse_Node_Nic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetNodesResponse_Node_Nic) GetNicType() NicType {
	if x != nil {
		return x.NicType
	}
	return NicType_NIC_TYPE_UNSPECIFIED
}

// A BeeGFS target
type GetTargetsResponse_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The targets identifiers
	Id *EntityIdSet `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Node type the target is on
	NodeType NodeType `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=beegfs.NodeType" json:"node_type,omitempty"`
	// The targets reachability state as reported by management
	ReachabilityState ReachabilityState `protobuf:"varint,3,opt,name=reachability_state,json=reachabilityState,proto3,enum=beegfs.ReachabilityState" json:"reachability_state,omitempty"`
	// The targets reachability state as reported by management
	ConsistencyState ConsistencyState `protobuf:"varint,4,opt,name=consistency_state,json=consistencyState,proto3,enum=beegfs.ConsistencyState" json:"consistency_state,omitempty"`
	// Duration since last contact to the target. Currently slightly inaccurate as it updates
	// not on each received message.
	LastContactS *uint64 `protobuf:"varint,5,opt,name=last_contact_s,json=lastContactS,proto3,oneof" json:"last_contact_s,omitempty"`
	// Total space on the target as reported by management
	TotalSpaceBytes *uint64 `protobuf:"varint,6,opt,name=total_space_bytes,json=totalSpaceBytes,proto3,oneof" json:"total_space_bytes,omitempty"`
	// Free space on the target as reported by management
	FreeSpaceBytes *uint64 `protobuf:"varint,7,opt,name=free_space_bytes,json=freeSpaceBytes,proto3,oneof" json:"free_space_bytes,omitempty"`
	// Total inodes on the target as reported by management
	TotalInodes *uint64 `protobuf:"varint,8,opt,name=total_inodes,json=totalInodes,proto3,oneof" json:"total_inodes,omitempty"`
	// Free inodes on the target as reported by management
	FreeInodes *uint64 `protobuf:"varint,9,opt,name=free_inodes,json=freeInodes,proto3,oneof" json:"free_inodes,omitempty"`
	// The targets capacity pool as reported by the management
	CapPool CapacityPool `protobuf:"varint,10,opt,name=cap_pool,json=capPool,proto3,enum=beegfs.CapacityPool" json:"cap_pool,omitempty"`
	// The targets owner node identifiers
	Node *EntityIdSet `protobuf:"bytes,11,opt,name=node,proto3" json:"node,omitempty"`
	// The targets storage pool identifiers. Explicitly optional since meta targets don't have a storage pool.
	StoragePool *EntityIdSet `protobuf:"bytes,12,opt,name=storage_pool,json=storagePool,proto3,oneof" json:"storage_pool,omitempty"`
}

func (x *GetTargetsResponse_Target) Reset() {
	*x = GetTargetsResponse_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTargetsResponse_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetsResponse_Target) ProtoMessage() {}

func (x *GetTargetsResponse_Target) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTargetsResponse_Target.ProtoReflect.Descriptor instead.
func (*GetTargetsResponse_Target) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetTargetsResponse_Target) GetId() *EntityIdSet {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetTargetsResponse_Target) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NODE_TYPE_UNSPECIFIED
}

func (x *GetTargetsResponse_Target) GetReachabilityState() ReachabilityState {
	if x != nil {
		return x.ReachabilityState
	}
	return ReachabilityState_REACHABILITY_STATE_UNSPECIFIED
}

func (x *GetTargetsResponse_Target) GetConsistencyState() ConsistencyState {
	if x != nil {
		return x.ConsistencyState
	}
	return ConsistencyState_CONSISTENCY_STATE_UNSPECIFIED
}

func (x *GetTargetsResponse_Target) GetLastContactS() uint64 {
	if x != nil && x.LastContactS != nil {
		return *x.LastContactS
	}
	return 0
}

func (x *GetTargetsResponse_Target) GetTotalSpaceBytes() uint64 {
	if x != nil && x.TotalSpaceBytes != nil {
		return *x.TotalSpaceBytes
	}
	return 0
}

func (x *GetTargetsResponse_Target) GetFreeSpaceBytes() uint64 {
	if x != nil && x.FreeSpaceBytes != nil {
		return *x.FreeSpaceBytes
	}
	return 0
}

func (x *GetTargetsResponse_Target) GetTotalInodes() uint64 {
	if x != nil && x.TotalInodes != nil {
		return *x.TotalInodes
	}
	return 0
}

func (x *GetTargetsResponse_Target) GetFreeInodes() uint64 {
	if x != nil && x.FreeInodes != nil {
		return *x.FreeInodes
	}
	return 0
}

func (x *GetTargetsResponse_Target) GetCapPool() CapacityPool {
	if x != nil {
		return x.CapPool
	}
	return CapacityPool_CAPACITY_POOL_UNSPECIFIED
}

func (x *GetTargetsResponse_Target) GetNode() *EntityIdSet {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *GetTargetsResponse_Target) GetStoragePool() *EntityIdSet {
	if x != nil {
		return x.StoragePool
	}
	return nil
}

type GetBuddyGroupsResponse_BuddyGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The buddy groups identifiers
	Id *EntityIdSet `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Node type the buddy group belongs to
	NodeType NodeType `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=beegfs.NodeType" json:"node_type,omitempty"`
	// The buddy groups current primary target identifiers
	PrimaryTarget *EntityIdSet `protobuf:"bytes,3,opt,name=primary_target,json=primaryTarget,proto3" json:"primary_target,omitempty"`
	// The buddy groups current secondary target identifiers
	SecondaryTarget *EntityIdSet `protobuf:"bytes,4,opt,name=secondary_target,json=secondaryTarget,proto3" json:"secondary_target,omitempty"`
	// The buddy groups primary target consistency state
	PrimaryConsistencyState ConsistencyState `protobuf:"varint,5,opt,name=primary_consistency_state,json=primaryConsistencyState,proto3,enum=beegfs.ConsistencyState" json:"primary_consistency_state,omitempty"`
	// The buddy groups secondary target consistency state
	SecondaryConsistencyState ConsistencyState `protobuf:"varint,6,opt,name=secondary_consistency_state,json=secondaryConsistencyState,proto3,enum=beegfs.ConsistencyState" json:"secondary_consistency_state,omitempty"`
	// The buddy groups storage pool. Explicitly optional since meta pools dont' have a storage
	// pool.
	StoragePool *EntityIdSet `protobuf:"bytes,7,opt,name=storage_pool,json=storagePool,proto3,oneof" json:"storage_pool,omitempty"`
}

func (x *GetBuddyGroupsResponse_BuddyGroup) Reset() {
	*x = GetBuddyGroupsResponse_BuddyGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuddyGroupsResponse_BuddyGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuddyGroupsResponse_BuddyGroup) ProtoMessage() {}

func (x *GetBuddyGroupsResponse_BuddyGroup) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuddyGroupsResponse_BuddyGroup.ProtoReflect.Descriptor instead.
func (*GetBuddyGroupsResponse_BuddyGroup) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{8, 0}
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetId() *EntityIdSet {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NODE_TYPE_UNSPECIFIED
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetPrimaryTarget() *EntityIdSet {
	if x != nil {
		return x.PrimaryTarget
	}
	return nil
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetSecondaryTarget() *EntityIdSet {
	if x != nil {
		return x.SecondaryTarget
	}
	return nil
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetPrimaryConsistencyState() ConsistencyState {
	if x != nil {
		return x.PrimaryConsistencyState
	}
	return ConsistencyState_CONSISTENCY_STATE_UNSPECIFIED
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetSecondaryConsistencyState() ConsistencyState {
	if x != nil {
		return x.SecondaryConsistencyState
	}
	return ConsistencyState_CONSISTENCY_STATE_UNSPECIFIED
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetStoragePool() *EntityIdSet {
	if x != nil {
		return x.StoragePool
	}
	return nil
}

type GetStoragePoolsResponse_StoragePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The storage pools identifiers
	Id *EntityIdSet `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The storage pools assigned targets identifiers
	Targets []*EntityIdSet `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	// The storage pools assigned buddy groups identifiers
	BuddyGroups []*EntityIdSet `protobuf:"bytes,3,rep,name=buddy_groups,json=buddyGroups,proto3" json:"buddy_groups,omitempty"`
}

func (x *GetStoragePoolsResponse_StoragePool) Reset() {
	*x = GetStoragePoolsResponse_StoragePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStoragePoolsResponse_StoragePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoragePoolsResponse_StoragePool) ProtoMessage() {}

func (x *GetStoragePoolsResponse_StoragePool) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoragePoolsResponse_StoragePool.ProtoReflect.Descriptor instead.
func (*GetStoragePoolsResponse_StoragePool) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{10, 0}
}

func (x *GetStoragePoolsResponse_StoragePool) GetId() *EntityIdSet {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetStoragePoolsResponse_StoragePool) GetTargets() []*EntityIdSet {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *GetStoragePoolsResponse_StoragePool) GetBuddyGroups() []*EntityIdSet {
	if x != nil {
		return x.BuddyGroups
	}
	return nil
}

var File_beegfs_proto protoreflect.FileDescriptor

var file_beegfs_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x08, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x64,
	0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66,
	0x73, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x64, 0x52, 0x08, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x64,
	0x48, 0x00, 0x52, 0x08, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22,
	0x34, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x69,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x4e, 0x69, 0x63, 0x73, 0x22, 0x9d, 0x03, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x67,
	0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0c,
	0x6d, 0x65, 0x74, 0x61, 0x52, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x1a,
	0x80, 0x02, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x35, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x69,
	0x63, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x1a, 0x59, 0x0a, 0x03, 0x4e, 0x69, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66,
	0x73, 0x2e, 0x4e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa1, 0x06, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x1a, 0xcd,
	0x05, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d,
	0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a,
	0x12, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x67,
	0x66, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29,
	0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x66, 0x72,
	0x65, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0e, 0x66, 0x72, 0x65, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x49, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x67,
	0x66, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x07, 0x63, 0x61, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x05, 0x52, 0x0b,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x72, 0x65, 0x65,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x17,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc3, 0x04, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x62, 0x75, 0x64, 0x64, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x0b, 0x62, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x1a, 0xda, 0x03, 0x0a, 0x0a, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65,
	0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65,
	0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74,
	0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x3e, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67,
	0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x54, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x17, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x1b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x65,
	0x67, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x18, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x1a, 0x99, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62,
	0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65,
	0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x62, 0x75,
	0x64, 0x64, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x62, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x22, 0x64, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66,
	0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x65, 0x77, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x65, 0x77, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x62, 0x0a, 0x0a,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x44, 0x45, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x42, 0x55, 0x44, 0x44, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x04,
	0x2a, 0x58, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x2a, 0x5e, 0x0a, 0x11, 0x52, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x1e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x2a, 0x5a, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e,
	0x45, 0x45, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x42, 0x41, 0x44, 0x10, 0x03, 0x2a, 0x51, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49,
	0x54, 0x59, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4d,
	0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x03, 0x2a, 0x3b, 0x0a, 0x07, 0x4e, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x52, 0x44, 0x4d, 0x41, 0x10, 0x02, 0x32, 0xf4, 0x02, 0x0a, 0x0a, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x17, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x62, 0x65, 0x65,
	0x67, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x12, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1d, 0x2e, 0x62, 0x65,
	0x65, 0x67, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x65, 0x65,
	0x67, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x1e, 0x2e,
	0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x08, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x17, 0x2e, 0x62, 0x65, 0x65,
	0x67, 0x66, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x29, 0x5a,
	0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x69, 0x6e,
	0x6b, 0x70, 0x61, 0x72, 0x71, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67,
	0x6f, 0x2f, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_beegfs_proto_rawDescOnce sync.Once
	file_beegfs_proto_rawDescData = file_beegfs_proto_rawDesc
)

func file_beegfs_proto_rawDescGZIP() []byte {
	file_beegfs_proto_rawDescOnce.Do(func() {
		file_beegfs_proto_rawDescData = protoimpl.X.CompressGZIP(file_beegfs_proto_rawDescData)
	})
	return file_beegfs_proto_rawDescData
}

var file_beegfs_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_beegfs_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_beegfs_proto_goTypes = []interface{}{
	(EntityType)(0),                             // 0: beegfs.EntityType
	(NodeType)(0),                               // 1: beegfs.NodeType
	(ReachabilityState)(0),                      // 2: beegfs.ReachabilityState
	(ConsistencyState)(0),                       // 3: beegfs.ConsistencyState
	(CapacityPool)(0),                           // 4: beegfs.CapacityPool
	(NicType)(0),                                // 5: beegfs.NicType
	(*LegacyId)(nil),                            // 6: beegfs.LegacyId
	(*EntityIdSet)(nil),                         // 7: beegfs.EntityIdSet
	(*EntityIdVariant)(nil),                     // 8: beegfs.EntityIdVariant
	(*GetNodesRequest)(nil),                     // 9: beegfs.GetNodesRequest
	(*GetNodesResponse)(nil),                    // 10: beegfs.GetNodesResponse
	(*GetTargetsRequest)(nil),                   // 11: beegfs.GetTargetsRequest
	(*GetTargetsResponse)(nil),                  // 12: beegfs.GetTargetsResponse
	(*GetBuddyGroupsRequest)(nil),               // 13: beegfs.GetBuddyGroupsRequest
	(*GetBuddyGroupsResponse)(nil),              // 14: beegfs.GetBuddyGroupsResponse
	(*GetStoragePoolsRequest)(nil),              // 15: beegfs.GetStoragePoolsRequest
	(*GetStoragePoolsResponse)(nil),             // 16: beegfs.GetStoragePoolsResponse
	(*SetAliasRequest)(nil),                     // 17: beegfs.SetAliasRequest
	(*SetAliasResponse)(nil),                    // 18: beegfs.SetAliasResponse
	(*GetNodesResponse_Node)(nil),               // 19: beegfs.GetNodesResponse.Node
	(*GetNodesResponse_Node_Nic)(nil),           // 20: beegfs.GetNodesResponse.Node.Nic
	(*GetTargetsResponse_Target)(nil),           // 21: beegfs.GetTargetsResponse.Target
	(*GetBuddyGroupsResponse_BuddyGroup)(nil),   // 22: beegfs.GetBuddyGroupsResponse.BuddyGroup
	(*GetStoragePoolsResponse_StoragePool)(nil), // 23: beegfs.GetStoragePoolsResponse.StoragePool
}
var file_beegfs_proto_depIdxs = []int32{
	1,  // 0: beegfs.LegacyId.node_type:type_name -> beegfs.NodeType
	0,  // 1: beegfs.LegacyId.entity_type:type_name -> beegfs.EntityType
	6,  // 2: beegfs.EntityIdSet.legacy_id:type_name -> beegfs.LegacyId
	6,  // 3: beegfs.EntityIdVariant.legacy_id:type_name -> beegfs.LegacyId
	19, // 4: beegfs.GetNodesResponse.nodes:type_name -> beegfs.GetNodesResponse.Node
	7,  // 5: beegfs.GetNodesResponse.meta_root_node:type_name -> beegfs.EntityIdSet
	21, // 6: beegfs.GetTargetsResponse.targets:type_name -> beegfs.GetTargetsResponse.Target
	22, // 7: beegfs.GetBuddyGroupsResponse.buddy_groups:type_name -> beegfs.GetBuddyGroupsResponse.BuddyGroup
	23, // 8: beegfs.GetStoragePoolsResponse.pools:type_name -> beegfs.GetStoragePoolsResponse.StoragePool
	8,  // 9: beegfs.SetAliasRequest.entity_id:type_name -> beegfs.EntityIdVariant
	7,  // 10: beegfs.GetNodesResponse.Node.id:type_name -> beegfs.EntityIdSet
	1,  // 11: beegfs.GetNodesResponse.Node.node_type:type_name -> beegfs.NodeType
	20, // 12: beegfs.GetNodesResponse.Node.nics:type_name -> beegfs.GetNodesResponse.Node.Nic
	5,  // 13: beegfs.GetNodesResponse.Node.Nic.nic_type:type_name -> beegfs.NicType
	7,  // 14: beegfs.GetTargetsResponse.Target.id:type_name -> beegfs.EntityIdSet
	1,  // 15: beegfs.GetTargetsResponse.Target.node_type:type_name -> beegfs.NodeType
	2,  // 16: beegfs.GetTargetsResponse.Target.reachability_state:type_name -> beegfs.ReachabilityState
	3,  // 17: beegfs.GetTargetsResponse.Target.consistency_state:type_name -> beegfs.ConsistencyState
	4,  // 18: beegfs.GetTargetsResponse.Target.cap_pool:type_name -> beegfs.CapacityPool
	7,  // 19: beegfs.GetTargetsResponse.Target.node:type_name -> beegfs.EntityIdSet
	7,  // 20: beegfs.GetTargetsResponse.Target.storage_pool:type_name -> beegfs.EntityIdSet
	7,  // 21: beegfs.GetBuddyGroupsResponse.BuddyGroup.id:type_name -> beegfs.EntityIdSet
	1,  // 22: beegfs.GetBuddyGroupsResponse.BuddyGroup.node_type:type_name -> beegfs.NodeType
	7,  // 23: beegfs.GetBuddyGroupsResponse.BuddyGroup.primary_target:type_name -> beegfs.EntityIdSet
	7,  // 24: beegfs.GetBuddyGroupsResponse.BuddyGroup.secondary_target:type_name -> beegfs.EntityIdSet
	3,  // 25: beegfs.GetBuddyGroupsResponse.BuddyGroup.primary_consistency_state:type_name -> beegfs.ConsistencyState
	3,  // 26: beegfs.GetBuddyGroupsResponse.BuddyGroup.secondary_consistency_state:type_name -> beegfs.ConsistencyState
	7,  // 27: beegfs.GetBuddyGroupsResponse.BuddyGroup.storage_pool:type_name -> beegfs.EntityIdSet
	7,  // 28: beegfs.GetStoragePoolsResponse.StoragePool.id:type_name -> beegfs.EntityIdSet
	7,  // 29: beegfs.GetStoragePoolsResponse.StoragePool.targets:type_name -> beegfs.EntityIdSet
	7,  // 30: beegfs.GetStoragePoolsResponse.StoragePool.buddy_groups:type_name -> beegfs.EntityIdSet
	9,  // 31: beegfs.Management.GetNodes:input_type -> beegfs.GetNodesRequest
	11, // 32: beegfs.Management.GetTargets:input_type -> beegfs.GetTargetsRequest
	13, // 33: beegfs.Management.GetBuddyGroups:input_type -> beegfs.GetBuddyGroupsRequest
	15, // 34: beegfs.Management.GetStoragePools:input_type -> beegfs.GetStoragePoolsRequest
	17, // 35: beegfs.Management.SetAlias:input_type -> beegfs.SetAliasRequest
	10, // 36: beegfs.Management.GetNodes:output_type -> beegfs.GetNodesResponse
	12, // 37: beegfs.Management.GetTargets:output_type -> beegfs.GetTargetsResponse
	14, // 38: beegfs.Management.GetBuddyGroups:output_type -> beegfs.GetBuddyGroupsResponse
	16, // 39: beegfs.Management.GetStoragePools:output_type -> beegfs.GetStoragePoolsResponse
	18, // 40: beegfs.Management.SetAlias:output_type -> beegfs.SetAliasResponse
	36, // [36:41] is the sub-list for method output_type
	31, // [31:36] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_beegfs_proto_init() }
func file_beegfs_proto_init() {
	if File_beegfs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_beegfs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegacyId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityIdSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityIdVariant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTargetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTargetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuddyGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuddyGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStoragePoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStoragePoolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAliasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAliasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesResponse_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesResponse_Node_Nic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTargetsResponse_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuddyGroupsResponse_BuddyGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStoragePoolsResponse_StoragePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_beegfs_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*EntityIdVariant_Uid)(nil),
		(*EntityIdVariant_LegacyId)(nil),
		(*EntityIdVariant_Alias)(nil),
	}
	file_beegfs_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_beegfs_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_beegfs_proto_msgTypes[16].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beegfs_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_beegfs_proto_goTypes,
		DependencyIndexes: file_beegfs_proto_depIdxs,
		EnumInfos:         file_beegfs_proto_enumTypes,
		MessageInfos:      file_beegfs_proto_msgTypes,
	}.Build()
	File_beegfs_proto = out.File
	file_beegfs_proto_rawDesc = nil
	file_beegfs_proto_goTypes = nil
	file_beegfs_proto_depIdxs = nil
}
