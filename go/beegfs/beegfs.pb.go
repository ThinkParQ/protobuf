// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.26.1
// source: beegfs.proto

package beegfs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EntityType int32

const (
	EntityType_ENTITY_TYPE_UNSPECIFIED EntityType = 0
	EntityType_NODE                    EntityType = 1
	EntityType_TARGET                  EntityType = 2
	EntityType_BUDDY_GROUP             EntityType = 3
	EntityType_STORAGE_POOL            EntityType = 4
)

// Enum value maps for EntityType.
var (
	EntityType_name = map[int32]string{
		0: "ENTITY_TYPE_UNSPECIFIED",
		1: "NODE",
		2: "TARGET",
		3: "BUDDY_GROUP",
		4: "STORAGE_POOL",
	}
	EntityType_value = map[string]int32{
		"ENTITY_TYPE_UNSPECIFIED": 0,
		"NODE":                    1,
		"TARGET":                  2,
		"BUDDY_GROUP":             3,
		"STORAGE_POOL":            4,
	}
)

func (x EntityType) Enum() *EntityType {
	p := new(EntityType)
	*p = x
	return p
}

func (x EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_beegfs_proto_enumTypes[0].Descriptor()
}

func (EntityType) Type() protoreflect.EnumType {
	return &file_beegfs_proto_enumTypes[0]
}

func (x EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityType.Descriptor instead.
func (EntityType) EnumDescriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{0}
}

type NodeType int32

const (
	NodeType_NODE_TYPE_UNSPECIFIED NodeType = 0
	NodeType_CLIENT                NodeType = 1
	NodeType_META                  NodeType = 2
	NodeType_STORAGE               NodeType = 3
	NodeType_MANAGEMENT            NodeType = 4
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0: "NODE_TYPE_UNSPECIFIED",
		1: "CLIENT",
		2: "META",
		3: "STORAGE",
		4: "MANAGEMENT",
	}
	NodeType_value = map[string]int32{
		"NODE_TYPE_UNSPECIFIED": 0,
		"CLIENT":                1,
		"META":                  2,
		"STORAGE":               3,
		"MANAGEMENT":            4,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_beegfs_proto_enumTypes[1].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_beegfs_proto_enumTypes[1]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{1}
}

type ReachabilityState int32

const (
	ReachabilityState_REACHABILITY_STATE_UNSPECIFIED ReachabilityState = 0
	ReachabilityState_ONLINE                         ReachabilityState = 1
	ReachabilityState_POFFLINE                       ReachabilityState = 2
	ReachabilityState_OFFLINE                        ReachabilityState = 3
)

// Enum value maps for ReachabilityState.
var (
	ReachabilityState_name = map[int32]string{
		0: "REACHABILITY_STATE_UNSPECIFIED",
		1: "ONLINE",
		2: "POFFLINE",
		3: "OFFLINE",
	}
	ReachabilityState_value = map[string]int32{
		"REACHABILITY_STATE_UNSPECIFIED": 0,
		"ONLINE":                         1,
		"POFFLINE":                       2,
		"OFFLINE":                        3,
	}
)

func (x ReachabilityState) Enum() *ReachabilityState {
	p := new(ReachabilityState)
	*p = x
	return p
}

func (x ReachabilityState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReachabilityState) Descriptor() protoreflect.EnumDescriptor {
	return file_beegfs_proto_enumTypes[2].Descriptor()
}

func (ReachabilityState) Type() protoreflect.EnumType {
	return &file_beegfs_proto_enumTypes[2]
}

func (x ReachabilityState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReachabilityState.Descriptor instead.
func (ReachabilityState) EnumDescriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{2}
}

type ConsistencyState int32

const (
	ConsistencyState_CONSISTENCY_STATE_UNSPECIFIED ConsistencyState = 0
	ConsistencyState_GOOD                          ConsistencyState = 1
	ConsistencyState_NEEDS_RESYNC                  ConsistencyState = 2
	ConsistencyState_BAD                           ConsistencyState = 3
)

// Enum value maps for ConsistencyState.
var (
	ConsistencyState_name = map[int32]string{
		0: "CONSISTENCY_STATE_UNSPECIFIED",
		1: "GOOD",
		2: "NEEDS_RESYNC",
		3: "BAD",
	}
	ConsistencyState_value = map[string]int32{
		"CONSISTENCY_STATE_UNSPECIFIED": 0,
		"GOOD":                          1,
		"NEEDS_RESYNC":                  2,
		"BAD":                           3,
	}
)

func (x ConsistencyState) Enum() *ConsistencyState {
	p := new(ConsistencyState)
	*p = x
	return p
}

func (x ConsistencyState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsistencyState) Descriptor() protoreflect.EnumDescriptor {
	return file_beegfs_proto_enumTypes[3].Descriptor()
}

func (ConsistencyState) Type() protoreflect.EnumType {
	return &file_beegfs_proto_enumTypes[3]
}

func (x ConsistencyState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsistencyState.Descriptor instead.
func (ConsistencyState) EnumDescriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{3}
}

type CapacityPool int32

const (
	CapacityPool_CAPACITY_POOL_UNSPECIFIED CapacityPool = 0
	CapacityPool_NORMAL                    CapacityPool = 1
	CapacityPool_LOW                       CapacityPool = 2
	CapacityPool_EMERGENCY                 CapacityPool = 3
)

// Enum value maps for CapacityPool.
var (
	CapacityPool_name = map[int32]string{
		0: "CAPACITY_POOL_UNSPECIFIED",
		1: "NORMAL",
		2: "LOW",
		3: "EMERGENCY",
	}
	CapacityPool_value = map[string]int32{
		"CAPACITY_POOL_UNSPECIFIED": 0,
		"NORMAL":                    1,
		"LOW":                       2,
		"EMERGENCY":                 3,
	}
)

func (x CapacityPool) Enum() *CapacityPool {
	p := new(CapacityPool)
	*p = x
	return p
}

func (x CapacityPool) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapacityPool) Descriptor() protoreflect.EnumDescriptor {
	return file_beegfs_proto_enumTypes[4].Descriptor()
}

func (CapacityPool) Type() protoreflect.EnumType {
	return &file_beegfs_proto_enumTypes[4]
}

func (x CapacityPool) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapacityPool.Descriptor instead.
func (CapacityPool) EnumDescriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{4}
}

// A Nics NicType
type NicType int32

const (
	NicType_NIC_TYPE_UNSPECIFIED NicType = 0
	NicType_ETHERNET             NicType = 1
	NicType_RDMA                 NicType = 2
)

// Enum value maps for NicType.
var (
	NicType_name = map[int32]string{
		0: "NIC_TYPE_UNSPECIFIED",
		1: "ETHERNET",
		2: "RDMA",
	}
	NicType_value = map[string]int32{
		"NIC_TYPE_UNSPECIFIED": 0,
		"ETHERNET":             1,
		"RDMA":                 2,
	}
)

func (x NicType) Enum() *NicType {
	p := new(NicType)
	*p = x
	return p
}

func (x NicType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NicType) Descriptor() protoreflect.EnumDescriptor {
	return file_beegfs_proto_enumTypes[5].Descriptor()
}

func (NicType) Type() protoreflect.EnumType {
	return &file_beegfs_proto_enumTypes[5]
}

func (x NicType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NicType.Descriptor instead.
func (NicType) EnumDescriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{5}
}

// The "old" BeeGFS numeric Id-NodeType combination that can be used to identify entities like nodes,
// targets, ... .  Because each entity type has its own Id space (meaning a combination is NOT
// globally unique), this also requires the entities type it is related to.
type LegacyId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Old style BeeGFS numeric Id
	NumId uint32 `protobuf:"varint,1,opt,name=num_id,json=numId,proto3" json:"num_id,omitempty"`
	// BeeGFS node type. Despite the name, also applies to other entity types (which currently can
	// only be on a node of their own type, so it's still correct).
	NodeType NodeType `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=beegfs.NodeType" json:"node_type,omitempty"`
	// The referred entities type.
	EntityType EntityType `protobuf:"varint,3,opt,name=entity_type,json=entityType,proto3,enum=beegfs.EntityType" json:"entity_type,omitempty"`
}

func (x *LegacyId) Reset() {
	*x = LegacyId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegacyId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyId) ProtoMessage() {}

func (x *LegacyId) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyId.ProtoReflect.Descriptor instead.
func (*LegacyId) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{0}
}

func (x *LegacyId) GetNumId() uint32 {
	if x != nil {
		return x.NumId
	}
	return 0
}

func (x *LegacyId) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NODE_TYPE_UNSPECIFIED
}

func (x *LegacyId) GetEntityType() EntityType {
	if x != nil {
		return x.EntityType
	}
	return EntityType_ENTITY_TYPE_UNSPECIFIED
}

// Contains all existing identifiers used to uniquely identify an entity like a specific node,
// target, ... . This is what should usually be returned by a server when referring to an entity,
// for example when requesting a list of nodes. The requestor/client can then decide which
// identifier to use depending on the use case.
// Note that all fields are explicitly optional. The server should try to fill all of them, but sometimes
// (e.g. for performance reasons), only some of them might be set. It's the requesters job to check
// that.
type EntityIdSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new style globally unique identifier. Globally unique - identifies an entity from all types
	// without any additional context.
	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// The user definable alias of an entity. Globally unique - identifies an entity from all types
	// without any additional context.
	Alias string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	// The old style numeric Id-NodeType combination. NOT globally unique - entity type depends on
	// the context.
	LegacyId *LegacyId `protobuf:"bytes,3,opt,name=legacy_id,json=legacyId,proto3" json:"legacy_id,omitempty"`
}

func (x *EntityIdSet) Reset() {
	*x = EntityIdSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityIdSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityIdSet) ProtoMessage() {}

func (x *EntityIdSet) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityIdSet.ProtoReflect.Descriptor instead.
func (*EntityIdSet) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{1}
}

func (x *EntityIdSet) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *EntityIdSet) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *EntityIdSet) GetLegacyId() *LegacyId {
	if x != nil {
		return x.LegacyId
	}
	return nil
}

// Contains one of the existing identifiers used to uniquely identify an entity like a specific
// node, target, ... . This is meant for requests that identify one or more entities. Only one
// unique identifier is needed.
type EntityIdVariant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*EntityIdVariant_Uid
	//	*EntityIdVariant_LegacyId
	//	*EntityIdVariant_Alias
	Variant isEntityIdVariant_Variant `protobuf_oneof:"variant"`
}

func (x *EntityIdVariant) Reset() {
	*x = EntityIdVariant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityIdVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityIdVariant) ProtoMessage() {}

func (x *EntityIdVariant) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityIdVariant.ProtoReflect.Descriptor instead.
func (*EntityIdVariant) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{2}
}

func (m *EntityIdVariant) GetVariant() isEntityIdVariant_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *EntityIdVariant) GetUid() uint64 {
	if x, ok := x.GetVariant().(*EntityIdVariant_Uid); ok {
		return x.Uid
	}
	return 0
}

func (x *EntityIdVariant) GetLegacyId() *LegacyId {
	if x, ok := x.GetVariant().(*EntityIdVariant_LegacyId); ok {
		return x.LegacyId
	}
	return nil
}

func (x *EntityIdVariant) GetAlias() string {
	if x, ok := x.GetVariant().(*EntityIdVariant_Alias); ok {
		return x.Alias
	}
	return ""
}

type isEntityIdVariant_Variant interface {
	isEntityIdVariant_Variant()
}

type EntityIdVariant_Uid struct {
	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3,oneof"`
}

type EntityIdVariant_LegacyId struct {
	LegacyId *LegacyId `protobuf:"bytes,2,opt,name=legacy_id,json=legacyId,proto3,oneof"`
}

type EntityIdVariant_Alias struct {
	Alias string `protobuf:"bytes,3,opt,name=alias,proto3,oneof"`
}

func (*EntityIdVariant_Uid) isEntityIdVariant_Variant() {}

func (*EntityIdVariant_LegacyId) isEntityIdVariant_Variant() {}

func (*EntityIdVariant_Alias) isEntityIdVariant_Variant() {}

var File_beegfs_proto protoreflect.FileDescriptor

var file_beegfs_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x08, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x64,
	0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66,
	0x73, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x64, 0x52, 0x08, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x64,
	0x48, 0x00, 0x52, 0x08, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2a,
	0x62, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x44, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x55, 0x44, 0x44, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x4f,
	0x4c, 0x10, 0x04, 0x2a, 0x58, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x2a, 0x5e, 0x0a,
	0x11, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x2a, 0x5a, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x41, 0x44, 0x10, 0x03, 0x2a, 0x51, 0x0a, 0x0c, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x50,
	0x41, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x03, 0x2a, 0x3b, 0x0a, 0x07,
	0x4e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x49, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x52, 0x44, 0x4d, 0x41, 0x10, 0x02, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x70, 0x61, 0x72,
	0x71, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x65,
	0x65, 0x67, 0x66, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_beegfs_proto_rawDescOnce sync.Once
	file_beegfs_proto_rawDescData = file_beegfs_proto_rawDesc
)

func file_beegfs_proto_rawDescGZIP() []byte {
	file_beegfs_proto_rawDescOnce.Do(func() {
		file_beegfs_proto_rawDescData = protoimpl.X.CompressGZIP(file_beegfs_proto_rawDescData)
	})
	return file_beegfs_proto_rawDescData
}

var file_beegfs_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_beegfs_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_beegfs_proto_goTypes = []interface{}{
	(EntityType)(0),         // 0: beegfs.EntityType
	(NodeType)(0),           // 1: beegfs.NodeType
	(ReachabilityState)(0),  // 2: beegfs.ReachabilityState
	(ConsistencyState)(0),   // 3: beegfs.ConsistencyState
	(CapacityPool)(0),       // 4: beegfs.CapacityPool
	(NicType)(0),            // 5: beegfs.NicType
	(*LegacyId)(nil),        // 6: beegfs.LegacyId
	(*EntityIdSet)(nil),     // 7: beegfs.EntityIdSet
	(*EntityIdVariant)(nil), // 8: beegfs.EntityIdVariant
}
var file_beegfs_proto_depIdxs = []int32{
	1, // 0: beegfs.LegacyId.node_type:type_name -> beegfs.NodeType
	0, // 1: beegfs.LegacyId.entity_type:type_name -> beegfs.EntityType
	6, // 2: beegfs.EntityIdSet.legacy_id:type_name -> beegfs.LegacyId
	6, // 3: beegfs.EntityIdVariant.legacy_id:type_name -> beegfs.LegacyId
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_beegfs_proto_init() }
func file_beegfs_proto_init() {
	if File_beegfs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_beegfs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegacyId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityIdSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityIdVariant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_beegfs_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*EntityIdVariant_Uid)(nil),
		(*EntityIdVariant_LegacyId)(nil),
		(*EntityIdVariant_Alias)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beegfs_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beegfs_proto_goTypes,
		DependencyIndexes: file_beegfs_proto_depIdxs,
		EnumInfos:         file_beegfs_proto_enumTypes,
		MessageInfos:      file_beegfs_proto_msgTypes,
	}.Build()
	File_beegfs_proto = out.File
	file_beegfs_proto_rawDesc = nil
	file_beegfs_proto_goTypes = nil
	file_beegfs_proto_depIdxs = nil
}
