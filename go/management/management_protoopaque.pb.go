// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.2
// source: management.proto

//go:build protoopaque

package management

import (
	beegfs "github.com/thinkparq/protobuf/go/beegfs"
	license "github.com/thinkparq/protobuf/go/license"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Sets an entity alias.
type SetAliasRequest struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_EntityId   *beegfs.EntityIdSet    `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	xxx_hidden_EntityType beegfs.EntityType      `protobuf:"varint,2,opt,name=entity_type,json=entityType,proto3,enum=beegfs.EntityType" json:"entity_type,omitempty"`
	xxx_hidden_NewAlias   string                 `protobuf:"bytes,3,opt,name=new_alias,json=newAlias,proto3" json:"new_alias,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SetAliasRequest) Reset() {
	*x = SetAliasRequest{}
	mi := &file_management_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAliasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAliasRequest) ProtoMessage() {}

func (x *SetAliasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SetAliasRequest) GetEntityId() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_EntityId
	}
	return nil
}

func (x *SetAliasRequest) GetEntityType() beegfs.EntityType {
	if x != nil {
		return x.xxx_hidden_EntityType
	}
	return beegfs.EntityType(0)
}

func (x *SetAliasRequest) GetNewAlias() string {
	if x != nil {
		return x.xxx_hidden_NewAlias
	}
	return ""
}

func (x *SetAliasRequest) SetEntityId(v *beegfs.EntityIdSet) {
	x.xxx_hidden_EntityId = v
}

func (x *SetAliasRequest) SetEntityType(v beegfs.EntityType) {
	x.xxx_hidden_EntityType = v
}

func (x *SetAliasRequest) SetNewAlias(v string) {
	x.xxx_hidden_NewAlias = v
}

func (x *SetAliasRequest) HasEntityId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EntityId != nil
}

func (x *SetAliasRequest) ClearEntityId() {
	x.xxx_hidden_EntityId = nil
}

type SetAliasRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The entity to set the alias for.
	// Required, one identifier is sufficient.
	EntityId *beegfs.EntityIdSet
	// The entity type to set the alias for.
	// Required. Must match entity_id's entity type.
	EntityType beegfs.EntityType
	// The new alias.
	// Required.
	NewAlias string
}

func (b0 SetAliasRequest_builder) Build() *SetAliasRequest {
	m0 := &SetAliasRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_EntityId = b.EntityId
	x.xxx_hidden_EntityType = b.EntityType
	x.xxx_hidden_NewAlias = b.NewAlias
	return m0
}

type SetAliasResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAliasResponse) Reset() {
	*x = SetAliasResponse{}
	mi := &file_management_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAliasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAliasResponse) ProtoMessage() {}

func (x *SetAliasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type SetAliasResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 SetAliasResponse_builder) Build() *SetAliasResponse {
	m0 := &SetAliasResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Gets the full list of nodes.
type GetNodesRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_IncludeNics bool                   `protobuf:"varint,1,opt,name=include_nics,json=includeNics,proto3" json:"include_nics,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetNodesRequest) Reset() {
	*x = GetNodesRequest{}
	mi := &file_management_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesRequest) ProtoMessage() {}

func (x *GetNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetNodesRequest) GetIncludeNics() bool {
	if x != nil {
		return x.xxx_hidden_IncludeNics
	}
	return false
}

func (x *GetNodesRequest) SetIncludeNics(v bool) {
	x.xxx_hidden_IncludeNics = v
}

type GetNodesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Should the nic list should be included for each node?
	// Required.
	IncludeNics bool
}

func (b0 GetNodesRequest_builder) Build() *GetNodesRequest {
	m0 := &GetNodesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_IncludeNics = b.IncludeNics
	return m0
}

type GetNodesResponse struct {
	state                   protoimpl.MessageState    `protogen:"opaque.v1"`
	xxx_hidden_Nodes        *[]*GetNodesResponse_Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	xxx_hidden_MetaRootNode *beegfs.EntityIdSet       `protobuf:"bytes,2,opt,name=meta_root_node,json=metaRootNode,proto3,oneof" json:"meta_root_node,omitempty"`
	xxx_hidden_FsUuid       *string                   `protobuf:"bytes,3,opt,name=fs_uuid,json=fsUuid,proto3,oneof" json:"fs_uuid,omitempty"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetNodesResponse) Reset() {
	*x = GetNodesResponse{}
	mi := &file_management_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesResponse) ProtoMessage() {}

func (x *GetNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetNodesResponse) GetNodes() []*GetNodesResponse_Node {
	if x != nil {
		if x.xxx_hidden_Nodes != nil {
			return *x.xxx_hidden_Nodes
		}
	}
	return nil
}

func (x *GetNodesResponse) GetMetaRootNode() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_MetaRootNode
	}
	return nil
}

func (x *GetNodesResponse) GetFsUuid() string {
	if x != nil {
		if x.xxx_hidden_FsUuid != nil {
			return *x.xxx_hidden_FsUuid
		}
		return ""
	}
	return ""
}

func (x *GetNodesResponse) SetNodes(v []*GetNodesResponse_Node) {
	x.xxx_hidden_Nodes = &v
}

func (x *GetNodesResponse) SetMetaRootNode(v *beegfs.EntityIdSet) {
	x.xxx_hidden_MetaRootNode = v
}

func (x *GetNodesResponse) SetFsUuid(v string) {
	x.xxx_hidden_FsUuid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *GetNodesResponse) HasMetaRootNode() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_MetaRootNode != nil
}

func (x *GetNodesResponse) HasFsUuid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *GetNodesResponse) ClearMetaRootNode() {
	x.xxx_hidden_MetaRootNode = nil
}

func (x *GetNodesResponse) ClearFsUuid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_FsUuid = nil
}

type GetNodesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The list of nodes.
	Nodes []*GetNodesResponse_Node
	// The node containing the root inode.
	// Optional, may be omitted if that information is not yet available (e.g. on a fresh system
	// without any meta targets/nodes).
	MetaRootNode *beegfs.EntityIdSet
	// The file system UUID for this BeeGFS.
	// Required.
	FsUuid *string
}

func (b0 GetNodesResponse_builder) Build() *GetNodesResponse {
	m0 := &GetNodesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Nodes = &b.Nodes
	x.xxx_hidden_MetaRootNode = b.MetaRootNode
	if b.FsUuid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_FsUuid = b.FsUuid
	}
	return m0
}

// Deletes a node from the system.
type DeleteNodeRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Node        *beegfs.EntityIdSet    `protobuf:"bytes,1,opt,name=node,proto3,oneof" json:"node,omitempty"`
	xxx_hidden_Execute     bool                   `protobuf:"varint,2,opt,name=execute,proto3,oneof" json:"execute,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DeleteNodeRequest) Reset() {
	*x = DeleteNodeRequest{}
	mi := &file_management_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeRequest) ProtoMessage() {}

func (x *DeleteNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeleteNodeRequest) GetNode() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Node
	}
	return nil
}

func (x *DeleteNodeRequest) GetExecute() bool {
	if x != nil {
		return x.xxx_hidden_Execute
	}
	return false
}

func (x *DeleteNodeRequest) SetNode(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Node = v
}

func (x *DeleteNodeRequest) SetExecute(v bool) {
	x.xxx_hidden_Execute = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *DeleteNodeRequest) HasNode() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Node != nil
}

func (x *DeleteNodeRequest) HasExecute() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DeleteNodeRequest) ClearNode() {
	x.xxx_hidden_Node = nil
}

func (x *DeleteNodeRequest) ClearExecute() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Execute = false
}

type DeleteNodeRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The node to delete.
	// Required, one identifier is sufficient.
	Node *beegfs.EntityIdSet
	// Execute the deletion? If set to false, check if delete is possible but don't actually do it.
	// Required.
	Execute *bool
}

func (b0 DeleteNodeRequest_builder) Build() *DeleteNodeRequest {
	m0 := &DeleteNodeRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Node = b.Node
	if b.Execute != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Execute = *b.Execute
	}
	return m0
}

type DeleteNodeResponse struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Node *beegfs.EntityIdSet    `protobuf:"bytes,1,opt,name=node,proto3,oneof" json:"node,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeleteNodeResponse) Reset() {
	*x = DeleteNodeResponse{}
	mi := &file_management_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeResponse) ProtoMessage() {}

func (x *DeleteNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeleteNodeResponse) GetNode() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Node
	}
	return nil
}

func (x *DeleteNodeResponse) SetNode(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Node = v
}

func (x *DeleteNodeResponse) HasNode() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Node != nil
}

func (x *DeleteNodeResponse) ClearNode() {
	x.xxx_hidden_Node = nil
}

type DeleteNodeResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The identifier set of the deleted node.
	// Required, should be completely populated.
	Node *beegfs.EntityIdSet
}

func (b0 DeleteNodeResponse_builder) Build() *DeleteNodeResponse {
	m0 := &DeleteNodeResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Node = b.Node
	return m0
}

// Gets the full list of targets.
type GetTargetsRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTargetsRequest) Reset() {
	*x = GetTargetsRequest{}
	mi := &file_management_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTargetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetsRequest) ProtoMessage() {}

func (x *GetTargetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type GetTargetsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 GetTargetsRequest_builder) Build() *GetTargetsRequest {
	m0 := &GetTargetsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type GetTargetsResponse struct {
	state              protoimpl.MessageState        `protogen:"opaque.v1"`
	xxx_hidden_Targets *[]*GetTargetsResponse_Target `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetTargetsResponse) Reset() {
	*x = GetTargetsResponse{}
	mi := &file_management_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTargetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetsResponse) ProtoMessage() {}

func (x *GetTargetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetTargetsResponse) GetTargets() []*GetTargetsResponse_Target {
	if x != nil {
		if x.xxx_hidden_Targets != nil {
			return *x.xxx_hidden_Targets
		}
	}
	return nil
}

func (x *GetTargetsResponse) SetTargets(v []*GetTargetsResponse_Target) {
	x.xxx_hidden_Targets = &v
}

type GetTargetsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The list of targets.
	Targets []*GetTargetsResponse_Target
}

func (b0 GetTargetsResponse_builder) Build() *GetTargetsResponse {
	m0 := &GetTargetsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Targets = &b.Targets
	return m0
}

// Deletes a target from the system.
type DeleteTargetRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Target      *beegfs.EntityIdSet    `protobuf:"bytes,1,opt,name=target,proto3,oneof" json:"target,omitempty"`
	xxx_hidden_Execute     bool                   `protobuf:"varint,2,opt,name=execute,proto3,oneof" json:"execute,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DeleteTargetRequest) Reset() {
	*x = DeleteTargetRequest{}
	mi := &file_management_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTargetRequest) ProtoMessage() {}

func (x *DeleteTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeleteTargetRequest) GetTarget() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Target
	}
	return nil
}

func (x *DeleteTargetRequest) GetExecute() bool {
	if x != nil {
		return x.xxx_hidden_Execute
	}
	return false
}

func (x *DeleteTargetRequest) SetTarget(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Target = v
}

func (x *DeleteTargetRequest) SetExecute(v bool) {
	x.xxx_hidden_Execute = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *DeleteTargetRequest) HasTarget() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Target != nil
}

func (x *DeleteTargetRequest) HasExecute() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DeleteTargetRequest) ClearTarget() {
	x.xxx_hidden_Target = nil
}

func (x *DeleteTargetRequest) ClearExecute() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Execute = false
}

type DeleteTargetRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The target to delete.
	// Required, one identifier is sufficient.
	Target *beegfs.EntityIdSet
	// Execute the deletion? If set to false, check if delete is possible but don't actually do it.
	// Required.
	Execute *bool
}

func (b0 DeleteTargetRequest_builder) Build() *DeleteTargetRequest {
	m0 := &DeleteTargetRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Target = b.Target
	if b.Execute != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Execute = *b.Execute
	}
	return m0
}

type DeleteTargetResponse struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Target *beegfs.EntityIdSet    `protobuf:"bytes,1,opt,name=target,proto3,oneof" json:"target,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DeleteTargetResponse) Reset() {
	*x = DeleteTargetResponse{}
	mi := &file_management_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTargetResponse) ProtoMessage() {}

func (x *DeleteTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeleteTargetResponse) GetTarget() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Target
	}
	return nil
}

func (x *DeleteTargetResponse) SetTarget(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Target = v
}

func (x *DeleteTargetResponse) HasTarget() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Target != nil
}

func (x *DeleteTargetResponse) ClearTarget() {
	x.xxx_hidden_Target = nil
}

type DeleteTargetResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The identifier set of the deleted target.
	// Required, should be completely populated.
	Target *beegfs.EntityIdSet
}

func (b0 DeleteTargetResponse_builder) Build() *DeleteTargetResponse {
	m0 := &DeleteTargetResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Target = b.Target
	return m0
}

// Sets a targets consistency state.
type SetTargetStateRequest struct {
	state                       protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Target           *beegfs.EntityIdSet     `protobuf:"bytes,1,opt,name=target,proto3,oneof" json:"target,omitempty"`
	xxx_hidden_ConsistencyState beegfs.ConsistencyState `protobuf:"varint,2,opt,name=consistency_state,json=consistencyState,proto3,enum=beegfs.ConsistencyState,oneof" json:"consistency_state,omitempty"`
	XXX_raceDetectHookData      protoimpl.RaceDetectHookData
	XXX_presence                [1]uint32
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *SetTargetStateRequest) Reset() {
	*x = SetTargetStateRequest{}
	mi := &file_management_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTargetStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTargetStateRequest) ProtoMessage() {}

func (x *SetTargetStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SetTargetStateRequest) GetTarget() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Target
	}
	return nil
}

func (x *SetTargetStateRequest) GetConsistencyState() beegfs.ConsistencyState {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_ConsistencyState
		}
	}
	return beegfs.ConsistencyState(0)
}

func (x *SetTargetStateRequest) SetTarget(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Target = v
}

func (x *SetTargetStateRequest) SetConsistencyState(v beegfs.ConsistencyState) {
	x.xxx_hidden_ConsistencyState = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *SetTargetStateRequest) HasTarget() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Target != nil
}

func (x *SetTargetStateRequest) HasConsistencyState() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SetTargetStateRequest) ClearTarget() {
	x.xxx_hidden_Target = nil
}

func (x *SetTargetStateRequest) ClearConsistencyState() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ConsistencyState = beegfs.ConsistencyState_CONSISTENCY_STATE_UNSPECIFIED
}

type SetTargetStateRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The target to set the state for.
	// Required, one identifier is sufficient.
	Target *beegfs.EntityIdSet
	// Consistency state to set for the target.
	// Required.
	ConsistencyState *beegfs.ConsistencyState
}

func (b0 SetTargetStateRequest_builder) Build() *SetTargetStateRequest {
	m0 := &SetTargetStateRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Target = b.Target
	if b.ConsistencyState != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_ConsistencyState = *b.ConsistencyState
	}
	return m0
}

type SetTargetStateResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTargetStateResponse) Reset() {
	*x = SetTargetStateResponse{}
	mi := &file_management_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTargetStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTargetStateResponse) ProtoMessage() {}

func (x *SetTargetStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type SetTargetStateResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 SetTargetStateResponse_builder) Build() *SetTargetStateResponse {
	m0 := &SetTargetStateResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Gets the full list of storage pools.
type GetPoolsRequest struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_WithQuotaLimits bool                   `protobuf:"varint,1,opt,name=with_quota_limits,json=withQuotaLimits,proto3" json:"with_quota_limits,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *GetPoolsRequest) Reset() {
	*x = GetPoolsRequest{}
	mi := &file_management_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoolsRequest) ProtoMessage() {}

func (x *GetPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetPoolsRequest) GetWithQuotaLimits() bool {
	if x != nil {
		return x.xxx_hidden_WithQuotaLimits
	}
	return false
}

func (x *GetPoolsRequest) SetWithQuotaLimits(v bool) {
	x.xxx_hidden_WithQuotaLimits = v
}

type GetPoolsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Should the quota limits be included for each pool?
	// Required.
	WithQuotaLimits bool
}

func (b0 GetPoolsRequest_builder) Build() *GetPoolsRequest {
	m0 := &GetPoolsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_WithQuotaLimits = b.WithQuotaLimits
	return m0
}

type GetPoolsResponse struct {
	state            protoimpl.MessageState           `protogen:"opaque.v1"`
	xxx_hidden_Pools *[]*GetPoolsResponse_StoragePool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetPoolsResponse) Reset() {
	*x = GetPoolsResponse{}
	mi := &file_management_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoolsResponse) ProtoMessage() {}

func (x *GetPoolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetPoolsResponse) GetPools() []*GetPoolsResponse_StoragePool {
	if x != nil {
		if x.xxx_hidden_Pools != nil {
			return *x.xxx_hidden_Pools
		}
	}
	return nil
}

func (x *GetPoolsResponse) SetPools(v []*GetPoolsResponse_StoragePool) {
	x.xxx_hidden_Pools = &v
}

type GetPoolsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The list of storage pools.
	Pools []*GetPoolsResponse_StoragePool
}

func (b0 GetPoolsResponse_builder) Build() *GetPoolsResponse {
	m0 := &GetPoolsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Pools = &b.Pools
	return m0
}

// Creates a new pool.
type CreatePoolRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_NodeType    beegfs.NodeType        `protobuf:"varint,1,opt,name=node_type,json=nodeType,proto3,enum=beegfs.NodeType,oneof" json:"node_type,omitempty"`
	xxx_hidden_NumId       uint32                 `protobuf:"varint,2,opt,name=num_id,json=numId,proto3,oneof" json:"num_id,omitempty"`
	xxx_hidden_Alias       *string                `protobuf:"bytes,3,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	xxx_hidden_Targets     *[]*beegfs.EntityIdSet `protobuf:"bytes,4,rep,name=targets,proto3" json:"targets,omitempty"`
	xxx_hidden_BuddyGroups *[]*beegfs.EntityIdSet `protobuf:"bytes,5,rep,name=buddy_groups,json=buddyGroups,proto3" json:"buddy_groups,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CreatePoolRequest) Reset() {
	*x = CreatePoolRequest{}
	mi := &file_management_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePoolRequest) ProtoMessage() {}

func (x *CreatePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreatePoolRequest) GetNodeType() beegfs.NodeType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_NodeType
		}
	}
	return beegfs.NodeType(0)
}

func (x *CreatePoolRequest) GetNumId() uint32 {
	if x != nil {
		return x.xxx_hidden_NumId
	}
	return 0
}

func (x *CreatePoolRequest) GetAlias() string {
	if x != nil {
		if x.xxx_hidden_Alias != nil {
			return *x.xxx_hidden_Alias
		}
		return ""
	}
	return ""
}

func (x *CreatePoolRequest) GetTargets() []*beegfs.EntityIdSet {
	if x != nil {
		if x.xxx_hidden_Targets != nil {
			return *x.xxx_hidden_Targets
		}
	}
	return nil
}

func (x *CreatePoolRequest) GetBuddyGroups() []*beegfs.EntityIdSet {
	if x != nil {
		if x.xxx_hidden_BuddyGroups != nil {
			return *x.xxx_hidden_BuddyGroups
		}
	}
	return nil
}

func (x *CreatePoolRequest) SetNodeType(v beegfs.NodeType) {
	x.xxx_hidden_NodeType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *CreatePoolRequest) SetNumId(v uint32) {
	x.xxx_hidden_NumId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *CreatePoolRequest) SetAlias(v string) {
	x.xxx_hidden_Alias = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *CreatePoolRequest) SetTargets(v []*beegfs.EntityIdSet) {
	x.xxx_hidden_Targets = &v
}

func (x *CreatePoolRequest) SetBuddyGroups(v []*beegfs.EntityIdSet) {
	x.xxx_hidden_BuddyGroups = &v
}

func (x *CreatePoolRequest) HasNodeType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CreatePoolRequest) HasNumId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CreatePoolRequest) HasAlias() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CreatePoolRequest) ClearNodeType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_NodeType = beegfs.NodeType_NODE_TYPE_UNSPECIFIED
}

func (x *CreatePoolRequest) ClearNumId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_NumId = 0
}

func (x *CreatePoolRequest) ClearAlias() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Alias = nil
}

type CreatePoolRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The node type of the new pool.
	// Required, must be STORAGE.
	NodeType *beegfs.NodeType
	// The numeric id of the new pool.
	// Optional. Must be chosen by the receiver if omitted.
	NumId *uint32
	// The alias of the new pool.
	// Required.
	Alias *string
	// The targets to assign to the new pool.
	// One identifier is sufficient for each.
	Targets []*beegfs.EntityIdSet
	// The buddy groups to assign to the new pool.
	// One identifier is sufficient for each.
	BuddyGroups []*beegfs.EntityIdSet
}

func (b0 CreatePoolRequest_builder) Build() *CreatePoolRequest {
	m0 := &CreatePoolRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.NodeType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_NodeType = *b.NodeType
	}
	if b.NumId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_NumId = *b.NumId
	}
	if b.Alias != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_Alias = b.Alias
	}
	x.xxx_hidden_Targets = &b.Targets
	x.xxx_hidden_BuddyGroups = &b.BuddyGroups
	return m0
}

type CreatePoolResponse struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Pool *beegfs.EntityIdSet    `protobuf:"bytes,1,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreatePoolResponse) Reset() {
	*x = CreatePoolResponse{}
	mi := &file_management_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePoolResponse) ProtoMessage() {}

func (x *CreatePoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreatePoolResponse) GetPool() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Pool
	}
	return nil
}

func (x *CreatePoolResponse) SetPool(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Pool = v
}

func (x *CreatePoolResponse) HasPool() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Pool != nil
}

func (x *CreatePoolResponse) ClearPool() {
	x.xxx_hidden_Pool = nil
}

type CreatePoolResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The identifier set of the new pool.
	// Required, should be completely populated.
	Pool *beegfs.EntityIdSet
}

func (b0 CreatePoolResponse_builder) Build() *CreatePoolResponse {
	m0 := &CreatePoolResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Pool = b.Pool
	return m0
}

// Assigns targets and buddy groups to a pool.
type AssignPoolRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Pool        *beegfs.EntityIdSet    `protobuf:"bytes,1,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
	xxx_hidden_Targets     *[]*beegfs.EntityIdSet `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	xxx_hidden_BuddyGroups *[]*beegfs.EntityIdSet `protobuf:"bytes,3,rep,name=buddy_groups,json=buddyGroups,proto3" json:"buddy_groups,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *AssignPoolRequest) Reset() {
	*x = AssignPoolRequest{}
	mi := &file_management_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPoolRequest) ProtoMessage() {}

func (x *AssignPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AssignPoolRequest) GetPool() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Pool
	}
	return nil
}

func (x *AssignPoolRequest) GetTargets() []*beegfs.EntityIdSet {
	if x != nil {
		if x.xxx_hidden_Targets != nil {
			return *x.xxx_hidden_Targets
		}
	}
	return nil
}

func (x *AssignPoolRequest) GetBuddyGroups() []*beegfs.EntityIdSet {
	if x != nil {
		if x.xxx_hidden_BuddyGroups != nil {
			return *x.xxx_hidden_BuddyGroups
		}
	}
	return nil
}

func (x *AssignPoolRequest) SetPool(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Pool = v
}

func (x *AssignPoolRequest) SetTargets(v []*beegfs.EntityIdSet) {
	x.xxx_hidden_Targets = &v
}

func (x *AssignPoolRequest) SetBuddyGroups(v []*beegfs.EntityIdSet) {
	x.xxx_hidden_BuddyGroups = &v
}

func (x *AssignPoolRequest) HasPool() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Pool != nil
}

func (x *AssignPoolRequest) ClearPool() {
	x.xxx_hidden_Pool = nil
}

type AssignPoolRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The pool to assign to.
	// Required, one identifier is sufficient.
	Pool *beegfs.EntityIdSet
	// The targets to assign to the new pool.
	// One identifier is sufficient for each.
	Targets []*beegfs.EntityIdSet
	// The buddy groups to assign to the new pool.
	// One identifier is sufficient for each.
	BuddyGroups []*beegfs.EntityIdSet
}

func (b0 AssignPoolRequest_builder) Build() *AssignPoolRequest {
	m0 := &AssignPoolRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Pool = b.Pool
	x.xxx_hidden_Targets = &b.Targets
	x.xxx_hidden_BuddyGroups = &b.BuddyGroups
	return m0
}

type AssignPoolResponse struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Pool *beegfs.EntityIdSet    `protobuf:"bytes,1,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AssignPoolResponse) Reset() {
	*x = AssignPoolResponse{}
	mi := &file_management_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPoolResponse) ProtoMessage() {}

func (x *AssignPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AssignPoolResponse) GetPool() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Pool
	}
	return nil
}

func (x *AssignPoolResponse) SetPool(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Pool = v
}

func (x *AssignPoolResponse) HasPool() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Pool != nil
}

func (x *AssignPoolResponse) ClearPool() {
	x.xxx_hidden_Pool = nil
}

type AssignPoolResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The identifier set of the pool assigned to.
	// Required, should be completely populated.
	Pool *beegfs.EntityIdSet
}

func (b0 AssignPoolResponse_builder) Build() *AssignPoolResponse {
	m0 := &AssignPoolResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Pool = b.Pool
	return m0
}

// Deletes a pool from the system.
type DeletePoolRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Pool        *beegfs.EntityIdSet    `protobuf:"bytes,1,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
	xxx_hidden_Execute     bool                   `protobuf:"varint,2,opt,name=execute,proto3,oneof" json:"execute,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DeletePoolRequest) Reset() {
	*x = DeletePoolRequest{}
	mi := &file_management_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePoolRequest) ProtoMessage() {}

func (x *DeletePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeletePoolRequest) GetPool() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Pool
	}
	return nil
}

func (x *DeletePoolRequest) GetExecute() bool {
	if x != nil {
		return x.xxx_hidden_Execute
	}
	return false
}

func (x *DeletePoolRequest) SetPool(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Pool = v
}

func (x *DeletePoolRequest) SetExecute(v bool) {
	x.xxx_hidden_Execute = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *DeletePoolRequest) HasPool() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Pool != nil
}

func (x *DeletePoolRequest) HasExecute() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DeletePoolRequest) ClearPool() {
	x.xxx_hidden_Pool = nil
}

func (x *DeletePoolRequest) ClearExecute() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Execute = false
}

type DeletePoolRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The pool to delete.
	// Required, one identifier is sufficient.
	Pool *beegfs.EntityIdSet
	// Execute the deletion? If set to false, check if delete is possible but don't
	// actually do it.
	// Required.
	Execute *bool
}

func (b0 DeletePoolRequest_builder) Build() *DeletePoolRequest {
	m0 := &DeletePoolRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Pool = b.Pool
	if b.Execute != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Execute = *b.Execute
	}
	return m0
}

type DeletePoolResponse struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Pool *beegfs.EntityIdSet    `protobuf:"bytes,1,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeletePoolResponse) Reset() {
	*x = DeletePoolResponse{}
	mi := &file_management_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePoolResponse) ProtoMessage() {}

func (x *DeletePoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeletePoolResponse) GetPool() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Pool
	}
	return nil
}

func (x *DeletePoolResponse) SetPool(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Pool = v
}

func (x *DeletePoolResponse) HasPool() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Pool != nil
}

func (x *DeletePoolResponse) ClearPool() {
	x.xxx_hidden_Pool = nil
}

type DeletePoolResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The identifier set of the deleted pool.
	// Required, should be completely populated.
	Pool *beegfs.EntityIdSet
}

func (b0 DeletePoolResponse_builder) Build() *DeletePoolResponse {
	m0 := &DeletePoolResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Pool = b.Pool
	return m0
}

// Gets the list of buddy groups.
type GetBuddyGroupsRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBuddyGroupsRequest) Reset() {
	*x = GetBuddyGroupsRequest{}
	mi := &file_management_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBuddyGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuddyGroupsRequest) ProtoMessage() {}

func (x *GetBuddyGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type GetBuddyGroupsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 GetBuddyGroupsRequest_builder) Build() *GetBuddyGroupsRequest {
	m0 := &GetBuddyGroupsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type GetBuddyGroupsResponse struct {
	state                  protoimpl.MessageState                `protogen:"opaque.v1"`
	xxx_hidden_BuddyGroups *[]*GetBuddyGroupsResponse_BuddyGroup `protobuf:"bytes,1,rep,name=buddy_groups,json=buddyGroups,proto3" json:"buddy_groups,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetBuddyGroupsResponse) Reset() {
	*x = GetBuddyGroupsResponse{}
	mi := &file_management_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBuddyGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuddyGroupsResponse) ProtoMessage() {}

func (x *GetBuddyGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetBuddyGroupsResponse) GetBuddyGroups() []*GetBuddyGroupsResponse_BuddyGroup {
	if x != nil {
		if x.xxx_hidden_BuddyGroups != nil {
			return *x.xxx_hidden_BuddyGroups
		}
	}
	return nil
}

func (x *GetBuddyGroupsResponse) SetBuddyGroups(v []*GetBuddyGroupsResponse_BuddyGroup) {
	x.xxx_hidden_BuddyGroups = &v
}

type GetBuddyGroupsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The list of buddy groups.
	BuddyGroups []*GetBuddyGroupsResponse_BuddyGroup
}

func (b0 GetBuddyGroupsResponse_builder) Build() *GetBuddyGroupsResponse {
	m0 := &GetBuddyGroupsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_BuddyGroups = &b.BuddyGroups
	return m0
}

// Creates a new buddy group.
type CreateBuddyGroupRequest struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_NodeType        beegfs.NodeType        `protobuf:"varint,1,opt,name=node_type,json=nodeType,proto3,enum=beegfs.NodeType,oneof" json:"node_type,omitempty"`
	xxx_hidden_NumId           uint32                 `protobuf:"varint,2,opt,name=num_id,json=numId,proto3,oneof" json:"num_id,omitempty"`
	xxx_hidden_Alias           *string                `protobuf:"bytes,3,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	xxx_hidden_PrimaryTarget   *beegfs.EntityIdSet    `protobuf:"bytes,4,opt,name=primary_target,json=primaryTarget,proto3,oneof" json:"primary_target,omitempty"`
	xxx_hidden_SecondaryTarget *beegfs.EntityIdSet    `protobuf:"bytes,5,opt,name=secondary_target,json=secondaryTarget,proto3,oneof" json:"secondary_target,omitempty"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CreateBuddyGroupRequest) Reset() {
	*x = CreateBuddyGroupRequest{}
	mi := &file_management_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBuddyGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBuddyGroupRequest) ProtoMessage() {}

func (x *CreateBuddyGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateBuddyGroupRequest) GetNodeType() beegfs.NodeType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_NodeType
		}
	}
	return beegfs.NodeType(0)
}

func (x *CreateBuddyGroupRequest) GetNumId() uint32 {
	if x != nil {
		return x.xxx_hidden_NumId
	}
	return 0
}

func (x *CreateBuddyGroupRequest) GetAlias() string {
	if x != nil {
		if x.xxx_hidden_Alias != nil {
			return *x.xxx_hidden_Alias
		}
		return ""
	}
	return ""
}

func (x *CreateBuddyGroupRequest) GetPrimaryTarget() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_PrimaryTarget
	}
	return nil
}

func (x *CreateBuddyGroupRequest) GetSecondaryTarget() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_SecondaryTarget
	}
	return nil
}

func (x *CreateBuddyGroupRequest) SetNodeType(v beegfs.NodeType) {
	x.xxx_hidden_NodeType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *CreateBuddyGroupRequest) SetNumId(v uint32) {
	x.xxx_hidden_NumId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *CreateBuddyGroupRequest) SetAlias(v string) {
	x.xxx_hidden_Alias = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *CreateBuddyGroupRequest) SetPrimaryTarget(v *beegfs.EntityIdSet) {
	x.xxx_hidden_PrimaryTarget = v
}

func (x *CreateBuddyGroupRequest) SetSecondaryTarget(v *beegfs.EntityIdSet) {
	x.xxx_hidden_SecondaryTarget = v
}

func (x *CreateBuddyGroupRequest) HasNodeType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CreateBuddyGroupRequest) HasNumId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CreateBuddyGroupRequest) HasAlias() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CreateBuddyGroupRequest) HasPrimaryTarget() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PrimaryTarget != nil
}

func (x *CreateBuddyGroupRequest) HasSecondaryTarget() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SecondaryTarget != nil
}

func (x *CreateBuddyGroupRequest) ClearNodeType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_NodeType = beegfs.NodeType_NODE_TYPE_UNSPECIFIED
}

func (x *CreateBuddyGroupRequest) ClearNumId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_NumId = 0
}

func (x *CreateBuddyGroupRequest) ClearAlias() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Alias = nil
}

func (x *CreateBuddyGroupRequest) ClearPrimaryTarget() {
	x.xxx_hidden_PrimaryTarget = nil
}

func (x *CreateBuddyGroupRequest) ClearSecondaryTarget() {
	x.xxx_hidden_SecondaryTarget = nil
}

type CreateBuddyGroupRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The node type of the new buddy group.
	// Required, must be META or STORAGE.
	NodeType *beegfs.NodeType
	// The numeric id of the new buddy group.
	// Optional. Must be chosen by the receiver if omitted.
	NumId *uint32
	// The alias of the new buddy group.
	// Required.
	Alias *string
	// The new buddy groups primary target.
	// Required. One identifier is sufficient.
	PrimaryTarget *beegfs.EntityIdSet
	// The new buddy groups secondary target.
	// Required. One identifier is sufficient.
	SecondaryTarget *beegfs.EntityIdSet
}

func (b0 CreateBuddyGroupRequest_builder) Build() *CreateBuddyGroupRequest {
	m0 := &CreateBuddyGroupRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.NodeType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_NodeType = *b.NodeType
	}
	if b.NumId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_NumId = *b.NumId
	}
	if b.Alias != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_Alias = b.Alias
	}
	x.xxx_hidden_PrimaryTarget = b.PrimaryTarget
	x.xxx_hidden_SecondaryTarget = b.SecondaryTarget
	return m0
}

type CreateBuddyGroupResponse struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Group *beegfs.EntityIdSet    `protobuf:"bytes,1,opt,name=group,proto3,oneof" json:"group,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateBuddyGroupResponse) Reset() {
	*x = CreateBuddyGroupResponse{}
	mi := &file_management_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBuddyGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBuddyGroupResponse) ProtoMessage() {}

func (x *CreateBuddyGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateBuddyGroupResponse) GetGroup() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Group
	}
	return nil
}

func (x *CreateBuddyGroupResponse) SetGroup(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Group = v
}

func (x *CreateBuddyGroupResponse) HasGroup() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Group != nil
}

func (x *CreateBuddyGroupResponse) ClearGroup() {
	x.xxx_hidden_Group = nil
}

type CreateBuddyGroupResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The identifier set of the new buddy group.
	// Required, should be completely populated.
	Group *beegfs.EntityIdSet
}

func (b0 CreateBuddyGroupResponse_builder) Build() *CreateBuddyGroupResponse {
	m0 := &CreateBuddyGroupResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Group = b.Group
	return m0
}

// Deletes a buddy group from the system.
type DeleteBuddyGroupRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Group       *beegfs.EntityIdSet    `protobuf:"bytes,1,opt,name=group,proto3,oneof" json:"group,omitempty"`
	xxx_hidden_Execute     bool                   `protobuf:"varint,2,opt,name=execute,proto3,oneof" json:"execute,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DeleteBuddyGroupRequest) Reset() {
	*x = DeleteBuddyGroupRequest{}
	mi := &file_management_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBuddyGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBuddyGroupRequest) ProtoMessage() {}

func (x *DeleteBuddyGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeleteBuddyGroupRequest) GetGroup() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Group
	}
	return nil
}

func (x *DeleteBuddyGroupRequest) GetExecute() bool {
	if x != nil {
		return x.xxx_hidden_Execute
	}
	return false
}

func (x *DeleteBuddyGroupRequest) SetGroup(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Group = v
}

func (x *DeleteBuddyGroupRequest) SetExecute(v bool) {
	x.xxx_hidden_Execute = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *DeleteBuddyGroupRequest) HasGroup() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Group != nil
}

func (x *DeleteBuddyGroupRequest) HasExecute() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DeleteBuddyGroupRequest) ClearGroup() {
	x.xxx_hidden_Group = nil
}

func (x *DeleteBuddyGroupRequest) ClearExecute() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Execute = false
}

type DeleteBuddyGroupRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The buddy group to delete.
	// Required, one identifier is sufficient.
	Group *beegfs.EntityIdSet
	// Execute the deletion? If set to false, check if delete is possible but don't
	// actually do it.
	// Required.
	Execute *bool
}

func (b0 DeleteBuddyGroupRequest_builder) Build() *DeleteBuddyGroupRequest {
	m0 := &DeleteBuddyGroupRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Group = b.Group
	if b.Execute != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Execute = *b.Execute
	}
	return m0
}

type DeleteBuddyGroupResponse struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Group *beegfs.EntityIdSet    `protobuf:"bytes,1,opt,name=group,proto3,oneof" json:"group,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DeleteBuddyGroupResponse) Reset() {
	*x = DeleteBuddyGroupResponse{}
	mi := &file_management_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBuddyGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBuddyGroupResponse) ProtoMessage() {}

func (x *DeleteBuddyGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeleteBuddyGroupResponse) GetGroup() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Group
	}
	return nil
}

func (x *DeleteBuddyGroupResponse) SetGroup(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Group = v
}

func (x *DeleteBuddyGroupResponse) HasGroup() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Group != nil
}

func (x *DeleteBuddyGroupResponse) ClearGroup() {
	x.xxx_hidden_Group = nil
}

type DeleteBuddyGroupResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The identifier set of the deleted buddy group.
	// Required, should be completely populated.
	Group *beegfs.EntityIdSet
}

func (b0 DeleteBuddyGroupResponse_builder) Build() *DeleteBuddyGroupResponse {
	m0 := &DeleteBuddyGroupResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Group = b.Group
	return m0
}

// Enable metadata mirroring for the root directory.
type MirrorRootInodeRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MirrorRootInodeRequest) Reset() {
	*x = MirrorRootInodeRequest{}
	mi := &file_management_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MirrorRootInodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirrorRootInodeRequest) ProtoMessage() {}

func (x *MirrorRootInodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type MirrorRootInodeRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 MirrorRootInodeRequest_builder) Build() *MirrorRootInodeRequest {
	m0 := &MirrorRootInodeRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type MirrorRootInodeResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MirrorRootInodeResponse) Reset() {
	*x = MirrorRootInodeResponse{}
	mi := &file_management_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MirrorRootInodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirrorRootInodeResponse) ProtoMessage() {}

func (x *MirrorRootInodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type MirrorRootInodeResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 MirrorRootInodeResponse_builder) Build() *MirrorRootInodeResponse {
	m0 := &MirrorRootInodeResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Manually start a resync.
type StartResyncRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_BuddyGroup  *beegfs.EntityIdSet    `protobuf:"bytes,1,opt,name=buddy_group,json=buddyGroup,proto3,oneof" json:"buddy_group,omitempty"`
	xxx_hidden_Timestamp   int64                  `protobuf:"varint,2,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	xxx_hidden_Restart     bool                   `protobuf:"varint,3,opt,name=restart,proto3,oneof" json:"restart,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *StartResyncRequest) Reset() {
	*x = StartResyncRequest{}
	mi := &file_management_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartResyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartResyncRequest) ProtoMessage() {}

func (x *StartResyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StartResyncRequest) GetBuddyGroup() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_BuddyGroup
	}
	return nil
}

func (x *StartResyncRequest) GetTimestamp() int64 {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return 0
}

func (x *StartResyncRequest) GetRestart() bool {
	if x != nil {
		return x.xxx_hidden_Restart
	}
	return false
}

func (x *StartResyncRequest) SetBuddyGroup(v *beegfs.EntityIdSet) {
	x.xxx_hidden_BuddyGroup = v
}

func (x *StartResyncRequest) SetTimestamp(v int64) {
	x.xxx_hidden_Timestamp = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *StartResyncRequest) SetRestart(v bool) {
	x.xxx_hidden_Restart = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *StartResyncRequest) HasBuddyGroup() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_BuddyGroup != nil
}

func (x *StartResyncRequest) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *StartResyncRequest) HasRestart() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *StartResyncRequest) ClearBuddyGroup() {
	x.xxx_hidden_BuddyGroup = nil
}

func (x *StartResyncRequest) ClearTimestamp() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Timestamp = 0
}

func (x *StartResyncRequest) ClearRestart() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Restart = false
}

type StartResyncRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The buddy group whose secondary target will be resynced from its primary target.
	// Required, one identifier is sufficient.
	BuddyGroup *beegfs.EntityIdSet
	// Resync only data after the given unix timestamp (in seconds). Set to -1 for a complete resync.
	// Required. On meta buddy groups (e.g. buddy_group.legacy_id.node_type = META), must be -1.
	Timestamp *int64
	// Abort an ongoing resync and restart?
	// Required. Must be false for meta buddy groups.
	Restart *bool
}

func (b0 StartResyncRequest_builder) Build() *StartResyncRequest {
	m0 := &StartResyncRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_BuddyGroup = b.BuddyGroup
	if b.Timestamp != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Timestamp = *b.Timestamp
	}
	if b.Restart != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Restart = *b.Restart
	}
	return m0
}

type StartResyncResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartResyncResponse) Reset() {
	*x = StartResyncResponse{}
	mi := &file_management_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartResyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartResyncResponse) ProtoMessage() {}

func (x *StartResyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StartResyncResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StartResyncResponse_builder) Build() *StartResyncResponse {
	m0 := &StartResyncResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Contains info belonging to a quota_id + id_type + pool entry (e.g. user 1000 on storage pool 1).
// Depending on the message, some fields are unused.
type QuotaInfo struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_QuotaId     uint32                 `protobuf:"varint,1,opt,name=quota_id,json=quotaId,proto3,oneof" json:"quota_id,omitempty"`
	xxx_hidden_IdType      beegfs.QuotaIdType     `protobuf:"varint,2,opt,name=id_type,json=idType,proto3,enum=beegfs.QuotaIdType" json:"id_type,omitempty"`
	xxx_hidden_Pool        *beegfs.EntityIdSet    `protobuf:"bytes,3,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
	xxx_hidden_SpaceLimit  int64                  `protobuf:"varint,4,opt,name=space_limit,json=spaceLimit,proto3,oneof" json:"space_limit,omitempty"`
	xxx_hidden_InodeLimit  int64                  `protobuf:"varint,5,opt,name=inode_limit,json=inodeLimit,proto3,oneof" json:"inode_limit,omitempty"`
	xxx_hidden_SpaceUsed   int64                  `protobuf:"varint,6,opt,name=space_used,json=spaceUsed,proto3,oneof" json:"space_used,omitempty"`
	xxx_hidden_InodeUsed   int64                  `protobuf:"varint,7,opt,name=inode_used,json=inodeUsed,proto3,oneof" json:"inode_used,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *QuotaInfo) Reset() {
	*x = QuotaInfo{}
	mi := &file_management_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuotaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaInfo) ProtoMessage() {}

func (x *QuotaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *QuotaInfo) GetQuotaId() uint32 {
	if x != nil {
		return x.xxx_hidden_QuotaId
	}
	return 0
}

func (x *QuotaInfo) GetIdType() beegfs.QuotaIdType {
	if x != nil {
		return x.xxx_hidden_IdType
	}
	return beegfs.QuotaIdType(0)
}

func (x *QuotaInfo) GetPool() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Pool
	}
	return nil
}

func (x *QuotaInfo) GetSpaceLimit() int64 {
	if x != nil {
		return x.xxx_hidden_SpaceLimit
	}
	return 0
}

func (x *QuotaInfo) GetInodeLimit() int64 {
	if x != nil {
		return x.xxx_hidden_InodeLimit
	}
	return 0
}

func (x *QuotaInfo) GetSpaceUsed() int64 {
	if x != nil {
		return x.xxx_hidden_SpaceUsed
	}
	return 0
}

func (x *QuotaInfo) GetInodeUsed() int64 {
	if x != nil {
		return x.xxx_hidden_InodeUsed
	}
	return 0
}

func (x *QuotaInfo) SetQuotaId(v uint32) {
	x.xxx_hidden_QuotaId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *QuotaInfo) SetIdType(v beegfs.QuotaIdType) {
	x.xxx_hidden_IdType = v
}

func (x *QuotaInfo) SetPool(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Pool = v
}

func (x *QuotaInfo) SetSpaceLimit(v int64) {
	x.xxx_hidden_SpaceLimit = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *QuotaInfo) SetInodeLimit(v int64) {
	x.xxx_hidden_InodeLimit = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *QuotaInfo) SetSpaceUsed(v int64) {
	x.xxx_hidden_SpaceUsed = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *QuotaInfo) SetInodeUsed(v int64) {
	x.xxx_hidden_InodeUsed = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *QuotaInfo) HasQuotaId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *QuotaInfo) HasPool() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Pool != nil
}

func (x *QuotaInfo) HasSpaceLimit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *QuotaInfo) HasInodeLimit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *QuotaInfo) HasSpaceUsed() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *QuotaInfo) HasInodeUsed() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *QuotaInfo) ClearQuotaId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_QuotaId = 0
}

func (x *QuotaInfo) ClearPool() {
	x.xxx_hidden_Pool = nil
}

func (x *QuotaInfo) ClearSpaceLimit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_SpaceLimit = 0
}

func (x *QuotaInfo) ClearInodeLimit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_InodeLimit = 0
}

func (x *QuotaInfo) ClearSpaceUsed() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_SpaceUsed = 0
}

func (x *QuotaInfo) ClearInodeUsed() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_InodeUsed = 0
}

type QuotaInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The system user/group id the info belongs to.
	// Required.
	QuotaId *uint32
	// The id type (user or group) of quota_id.
	// Required.
	IdType beegfs.QuotaIdType
	// The storage pool the info belongs to.
	// Required, should be completely populated.
	Pool *beegfs.EntityIdSet
	// The space quota limit for this user/group. -1 means unlimited.
	// When used for returning data: Should be set if the corresponding data is available.
	// When used for setting limits: Optional.
	SpaceLimit *int64
	// The inode quota limit for this user/group. -1 means unlimited.
	// When used for returning data: Should be set if the corresponding data is available.
	// When used for setting limits: Optional.
	InodeLimit *int64
	// The space quota used for this user/group.
	// When used for returning data: Should be set if the corresponding data is available.
	// When used for setting limits: Ignore.
	SpaceUsed *int64
	// The inode quota used for this user/group.
	// When used for returning data: Should be set if the corresponding data is available.
	// When used for setting limits: Ignore.
	InodeUsed *int64
}

func (b0 QuotaInfo_builder) Build() *QuotaInfo {
	m0 := &QuotaInfo{}
	b, x := &b0, m0
	_, _ = b, x
	if b.QuotaId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_QuotaId = *b.QuotaId
	}
	x.xxx_hidden_IdType = b.IdType
	x.xxx_hidden_Pool = b.Pool
	if b.SpaceLimit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_SpaceLimit = *b.SpaceLimit
	}
	if b.InodeLimit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_InodeLimit = *b.InodeLimit
	}
	if b.SpaceUsed != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_SpaceUsed = *b.SpaceUsed
	}
	if b.InodeUsed != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_InodeUsed = *b.InodeUsed
	}
	return m0
}

// Sets the default quota limits for a pool.
type SetDefaultQuotaLimitsRequest struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Pool            *beegfs.EntityIdSet    `protobuf:"bytes,1,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
	xxx_hidden_UserSpaceLimit  int64                  `protobuf:"varint,2,opt,name=user_space_limit,json=userSpaceLimit,proto3,oneof" json:"user_space_limit,omitempty"`
	xxx_hidden_UserInodeLimit  int64                  `protobuf:"varint,3,opt,name=user_inode_limit,json=userInodeLimit,proto3,oneof" json:"user_inode_limit,omitempty"`
	xxx_hidden_GroupSpaceLimit int64                  `protobuf:"varint,4,opt,name=group_space_limit,json=groupSpaceLimit,proto3,oneof" json:"group_space_limit,omitempty"`
	xxx_hidden_GroupInodeLimit int64                  `protobuf:"varint,5,opt,name=group_inode_limit,json=groupInodeLimit,proto3,oneof" json:"group_inode_limit,omitempty"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *SetDefaultQuotaLimitsRequest) Reset() {
	*x = SetDefaultQuotaLimitsRequest{}
	mi := &file_management_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDefaultQuotaLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultQuotaLimitsRequest) ProtoMessage() {}

func (x *SetDefaultQuotaLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SetDefaultQuotaLimitsRequest) GetPool() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Pool
	}
	return nil
}

func (x *SetDefaultQuotaLimitsRequest) GetUserSpaceLimit() int64 {
	if x != nil {
		return x.xxx_hidden_UserSpaceLimit
	}
	return 0
}

func (x *SetDefaultQuotaLimitsRequest) GetUserInodeLimit() int64 {
	if x != nil {
		return x.xxx_hidden_UserInodeLimit
	}
	return 0
}

func (x *SetDefaultQuotaLimitsRequest) GetGroupSpaceLimit() int64 {
	if x != nil {
		return x.xxx_hidden_GroupSpaceLimit
	}
	return 0
}

func (x *SetDefaultQuotaLimitsRequest) GetGroupInodeLimit() int64 {
	if x != nil {
		return x.xxx_hidden_GroupInodeLimit
	}
	return 0
}

func (x *SetDefaultQuotaLimitsRequest) SetPool(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Pool = v
}

func (x *SetDefaultQuotaLimitsRequest) SetUserSpaceLimit(v int64) {
	x.xxx_hidden_UserSpaceLimit = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *SetDefaultQuotaLimitsRequest) SetUserInodeLimit(v int64) {
	x.xxx_hidden_UserInodeLimit = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *SetDefaultQuotaLimitsRequest) SetGroupSpaceLimit(v int64) {
	x.xxx_hidden_GroupSpaceLimit = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *SetDefaultQuotaLimitsRequest) SetGroupInodeLimit(v int64) {
	x.xxx_hidden_GroupInodeLimit = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *SetDefaultQuotaLimitsRequest) HasPool() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Pool != nil
}

func (x *SetDefaultQuotaLimitsRequest) HasUserSpaceLimit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SetDefaultQuotaLimitsRequest) HasUserInodeLimit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *SetDefaultQuotaLimitsRequest) HasGroupSpaceLimit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *SetDefaultQuotaLimitsRequest) HasGroupInodeLimit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *SetDefaultQuotaLimitsRequest) ClearPool() {
	x.xxx_hidden_Pool = nil
}

func (x *SetDefaultQuotaLimitsRequest) ClearUserSpaceLimit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_UserSpaceLimit = 0
}

func (x *SetDefaultQuotaLimitsRequest) ClearUserInodeLimit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_UserInodeLimit = 0
}

func (x *SetDefaultQuotaLimitsRequest) ClearGroupSpaceLimit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_GroupSpaceLimit = 0
}

func (x *SetDefaultQuotaLimitsRequest) ClearGroupInodeLimit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_GroupInodeLimit = 0
}

type SetDefaultQuotaLimitsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The storage pool to set the limits for.
	// Required, one identifier is sufficient.
	Pool *beegfs.EntityIdSet
	// The default user space quota limit. -1 means unlimited.
	// Optional.
	UserSpaceLimit *int64
	// The default user inode quota limit. -1 means unlimited.
	// Optional.
	UserInodeLimit *int64
	// The default group space quota limit. -1 means unlimited.
	// Optional.
	GroupSpaceLimit *int64
	// The default group inode quota limit. -1 means unlimited.
	// Optional.
	GroupInodeLimit *int64
}

func (b0 SetDefaultQuotaLimitsRequest_builder) Build() *SetDefaultQuotaLimitsRequest {
	m0 := &SetDefaultQuotaLimitsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Pool = b.Pool
	if b.UserSpaceLimit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_UserSpaceLimit = *b.UserSpaceLimit
	}
	if b.UserInodeLimit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_UserInodeLimit = *b.UserInodeLimit
	}
	if b.GroupSpaceLimit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_GroupSpaceLimit = *b.GroupSpaceLimit
	}
	if b.GroupInodeLimit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_GroupInodeLimit = *b.GroupInodeLimit
	}
	return m0
}

type SetDefaultQuotaLimitsResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetDefaultQuotaLimitsResponse) Reset() {
	*x = SetDefaultQuotaLimitsResponse{}
	mi := &file_management_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDefaultQuotaLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultQuotaLimitsResponse) ProtoMessage() {}

func (x *SetDefaultQuotaLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type SetDefaultQuotaLimitsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 SetDefaultQuotaLimitsResponse_builder) Build() *SetDefaultQuotaLimitsResponse {
	m0 := &SetDefaultQuotaLimitsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Sets the individually set per-id-and-pool quota limits.
type SetQuotaLimitsRequest struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Limits *[]*QuotaInfo          `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SetQuotaLimitsRequest) Reset() {
	*x = SetQuotaLimitsRequest{}
	mi := &file_management_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetQuotaLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQuotaLimitsRequest) ProtoMessage() {}

func (x *SetQuotaLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SetQuotaLimitsRequest) GetLimits() []*QuotaInfo {
	if x != nil {
		if x.xxx_hidden_Limits != nil {
			return *x.xxx_hidden_Limits
		}
	}
	return nil
}

func (x *SetQuotaLimitsRequest) SetLimits(v []*QuotaInfo) {
	x.xxx_hidden_Limits = &v
}

type SetQuotaLimitsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The explicit quota limit entries to set on the management. The _used fields should be unset.
	Limits []*QuotaInfo
}

func (b0 SetQuotaLimitsRequest_builder) Build() *SetQuotaLimitsRequest {
	m0 := &SetQuotaLimitsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Limits = &b.Limits
	return m0
}

type SetQuotaLimitsResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetQuotaLimitsResponse) Reset() {
	*x = SetQuotaLimitsResponse{}
	mi := &file_management_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetQuotaLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQuotaLimitsResponse) ProtoMessage() {}

func (x *SetQuotaLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type SetQuotaLimitsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 SetQuotaLimitsResponse_builder) Build() *SetQuotaLimitsResponse {
	m0 := &SetQuotaLimitsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Gets the individually set per-id-and-pool quota limits. Retrieves all explicitly set entries.
// By default, nothing shall be returned. Set at least one user_id_* / group_id_* field to enable
// querying (e.g. set user_id_min to 0 to return user entries for all user ids).
type GetQuotaLimitsRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_UserIdMin   uint32                 `protobuf:"varint,1,opt,name=user_id_min,json=userIdMin,proto3,oneof" json:"user_id_min,omitempty"`
	xxx_hidden_UserIdMax   uint32                 `protobuf:"varint,2,opt,name=user_id_max,json=userIdMax,proto3,oneof" json:"user_id_max,omitempty"`
	xxx_hidden_UserIdList  []uint32               `protobuf:"varint,3,rep,packed,name=user_id_list,json=userIdList,proto3" json:"user_id_list,omitempty"`
	xxx_hidden_GroupIdMin  uint32                 `protobuf:"varint,4,opt,name=group_id_min,json=groupIdMin,proto3,oneof" json:"group_id_min,omitempty"`
	xxx_hidden_GroupIdMax  uint32                 `protobuf:"varint,5,opt,name=group_id_max,json=groupIdMax,proto3,oneof" json:"group_id_max,omitempty"`
	xxx_hidden_GroupIdList []uint32               `protobuf:"varint,6,rep,packed,name=group_id_list,json=groupIdList,proto3" json:"group_id_list,omitempty"`
	xxx_hidden_Pool        *beegfs.EntityIdSet    `protobuf:"bytes,7,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetQuotaLimitsRequest) Reset() {
	*x = GetQuotaLimitsRequest{}
	mi := &file_management_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuotaLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuotaLimitsRequest) ProtoMessage() {}

func (x *GetQuotaLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetQuotaLimitsRequest) GetUserIdMin() uint32 {
	if x != nil {
		return x.xxx_hidden_UserIdMin
	}
	return 0
}

func (x *GetQuotaLimitsRequest) GetUserIdMax() uint32 {
	if x != nil {
		return x.xxx_hidden_UserIdMax
	}
	return 0
}

func (x *GetQuotaLimitsRequest) GetUserIdList() []uint32 {
	if x != nil {
		return x.xxx_hidden_UserIdList
	}
	return nil
}

func (x *GetQuotaLimitsRequest) GetGroupIdMin() uint32 {
	if x != nil {
		return x.xxx_hidden_GroupIdMin
	}
	return 0
}

func (x *GetQuotaLimitsRequest) GetGroupIdMax() uint32 {
	if x != nil {
		return x.xxx_hidden_GroupIdMax
	}
	return 0
}

func (x *GetQuotaLimitsRequest) GetGroupIdList() []uint32 {
	if x != nil {
		return x.xxx_hidden_GroupIdList
	}
	return nil
}

func (x *GetQuotaLimitsRequest) GetPool() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Pool
	}
	return nil
}

func (x *GetQuotaLimitsRequest) SetUserIdMin(v uint32) {
	x.xxx_hidden_UserIdMin = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *GetQuotaLimitsRequest) SetUserIdMax(v uint32) {
	x.xxx_hidden_UserIdMax = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *GetQuotaLimitsRequest) SetUserIdList(v []uint32) {
	x.xxx_hidden_UserIdList = v
}

func (x *GetQuotaLimitsRequest) SetGroupIdMin(v uint32) {
	x.xxx_hidden_GroupIdMin = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *GetQuotaLimitsRequest) SetGroupIdMax(v uint32) {
	x.xxx_hidden_GroupIdMax = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *GetQuotaLimitsRequest) SetGroupIdList(v []uint32) {
	x.xxx_hidden_GroupIdList = v
}

func (x *GetQuotaLimitsRequest) SetPool(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Pool = v
}

func (x *GetQuotaLimitsRequest) HasUserIdMin() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *GetQuotaLimitsRequest) HasUserIdMax() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *GetQuotaLimitsRequest) HasGroupIdMin() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *GetQuotaLimitsRequest) HasGroupIdMax() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *GetQuotaLimitsRequest) HasPool() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Pool != nil
}

func (x *GetQuotaLimitsRequest) ClearUserIdMin() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_UserIdMin = 0
}

func (x *GetQuotaLimitsRequest) ClearUserIdMax() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_UserIdMax = 0
}

func (x *GetQuotaLimitsRequest) ClearGroupIdMin() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_GroupIdMin = 0
}

func (x *GetQuotaLimitsRequest) ClearGroupIdMax() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_GroupIdMax = 0
}

func (x *GetQuotaLimitsRequest) ClearPool() {
	x.xxx_hidden_Pool = nil
}

type GetQuotaLimitsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The minimum user id to return.
	// Optional.
	UserIdMin *uint32
	// The maximum id to return.
	// Optional.
	UserIdMax *uint32
	// Return only the user ids listed.
	UserIdList []uint32
	// The minimum group id to return.
	// Optional.
	GroupIdMin *uint32
	// The maximum id to return.
	// Optional.
	GroupIdMax *uint32
	// Return only the group ids listed.
	GroupIdList []uint32
	// Return only a specific pool.
	// Optional. One identifier is sufficient.
	Pool *beegfs.EntityIdSet
}

func (b0 GetQuotaLimitsRequest_builder) Build() *GetQuotaLimitsRequest {
	m0 := &GetQuotaLimitsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.UserIdMin != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_UserIdMin = *b.UserIdMin
	}
	if b.UserIdMax != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_UserIdMax = *b.UserIdMax
	}
	x.xxx_hidden_UserIdList = b.UserIdList
	if b.GroupIdMin != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_GroupIdMin = *b.GroupIdMin
	}
	if b.GroupIdMax != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_GroupIdMax = *b.GroupIdMax
	}
	x.xxx_hidden_GroupIdList = b.GroupIdList
	x.xxx_hidden_Pool = b.Pool
	return m0
}

// One entry in the quota per-id-and-pool limits list. Meant to be streamed.
type GetQuotaLimitsResponse struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Limits *QuotaInfo             `protobuf:"bytes,1,opt,name=limits,proto3,oneof" json:"limits,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetQuotaLimitsResponse) Reset() {
	*x = GetQuotaLimitsResponse{}
	mi := &file_management_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuotaLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuotaLimitsResponse) ProtoMessage() {}

func (x *GetQuotaLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetQuotaLimitsResponse) GetLimits() *QuotaInfo {
	if x != nil {
		return x.xxx_hidden_Limits
	}
	return nil
}

func (x *GetQuotaLimitsResponse) SetLimits(v *QuotaInfo) {
	x.xxx_hidden_Limits = v
}

func (x *GetQuotaLimitsResponse) HasLimits() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Limits != nil
}

func (x *GetQuotaLimitsResponse) ClearLimits() {
	x.xxx_hidden_Limits = nil
}

type GetQuotaLimitsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// One per-id-and-pool quota limit entry.
	// This is a single (non-repeated) field because the response is meant to be streamed.
	// Required. The _used fields are unused.
	Limits *QuotaInfo
}

func (b0 GetQuotaLimitsResponse_builder) Build() *GetQuotaLimitsResponse {
	m0 := &GetQuotaLimitsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Limits = b.Limits
	return m0
}

// Gets the quota usage info for all the ids the management knows about. In addition, contains
// the effective limits for each entry.
// By default, nothing shall be returned. Set at least one user_id_* / group_id_* field to enable
// querying (e.g. set user_id_min to 0 to return user entries for all user ids).
type GetQuotaUsageRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_UserIdMin   uint32                 `protobuf:"varint,1,opt,name=user_id_min,json=userIdMin,proto3,oneof" json:"user_id_min,omitempty"`
	xxx_hidden_UserIdMax   uint32                 `protobuf:"varint,2,opt,name=user_id_max,json=userIdMax,proto3,oneof" json:"user_id_max,omitempty"`
	xxx_hidden_UserIdList  []uint32               `protobuf:"varint,3,rep,packed,name=user_id_list,json=userIdList,proto3" json:"user_id_list,omitempty"`
	xxx_hidden_GroupIdMin  uint32                 `protobuf:"varint,4,opt,name=group_id_min,json=groupIdMin,proto3,oneof" json:"group_id_min,omitempty"`
	xxx_hidden_GroupIdMax  uint32                 `protobuf:"varint,5,opt,name=group_id_max,json=groupIdMax,proto3,oneof" json:"group_id_max,omitempty"`
	xxx_hidden_GroupIdList []uint32               `protobuf:"varint,6,rep,packed,name=group_id_list,json=groupIdList,proto3" json:"group_id_list,omitempty"`
	xxx_hidden_Pool        *beegfs.EntityIdSet    `protobuf:"bytes,7,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
	xxx_hidden_Exceeded    bool                   `protobuf:"varint,8,opt,name=exceeded,proto3,oneof" json:"exceeded,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetQuotaUsageRequest) Reset() {
	*x = GetQuotaUsageRequest{}
	mi := &file_management_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuotaUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuotaUsageRequest) ProtoMessage() {}

func (x *GetQuotaUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetQuotaUsageRequest) GetUserIdMin() uint32 {
	if x != nil {
		return x.xxx_hidden_UserIdMin
	}
	return 0
}

func (x *GetQuotaUsageRequest) GetUserIdMax() uint32 {
	if x != nil {
		return x.xxx_hidden_UserIdMax
	}
	return 0
}

func (x *GetQuotaUsageRequest) GetUserIdList() []uint32 {
	if x != nil {
		return x.xxx_hidden_UserIdList
	}
	return nil
}

func (x *GetQuotaUsageRequest) GetGroupIdMin() uint32 {
	if x != nil {
		return x.xxx_hidden_GroupIdMin
	}
	return 0
}

func (x *GetQuotaUsageRequest) GetGroupIdMax() uint32 {
	if x != nil {
		return x.xxx_hidden_GroupIdMax
	}
	return 0
}

func (x *GetQuotaUsageRequest) GetGroupIdList() []uint32 {
	if x != nil {
		return x.xxx_hidden_GroupIdList
	}
	return nil
}

func (x *GetQuotaUsageRequest) GetPool() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Pool
	}
	return nil
}

func (x *GetQuotaUsageRequest) GetExceeded() bool {
	if x != nil {
		return x.xxx_hidden_Exceeded
	}
	return false
}

func (x *GetQuotaUsageRequest) SetUserIdMin(v uint32) {
	x.xxx_hidden_UserIdMin = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 8)
}

func (x *GetQuotaUsageRequest) SetUserIdMax(v uint32) {
	x.xxx_hidden_UserIdMax = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 8)
}

func (x *GetQuotaUsageRequest) SetUserIdList(v []uint32) {
	x.xxx_hidden_UserIdList = v
}

func (x *GetQuotaUsageRequest) SetGroupIdMin(v uint32) {
	x.xxx_hidden_GroupIdMin = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 8)
}

func (x *GetQuotaUsageRequest) SetGroupIdMax(v uint32) {
	x.xxx_hidden_GroupIdMax = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 8)
}

func (x *GetQuotaUsageRequest) SetGroupIdList(v []uint32) {
	x.xxx_hidden_GroupIdList = v
}

func (x *GetQuotaUsageRequest) SetPool(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Pool = v
}

func (x *GetQuotaUsageRequest) SetExceeded(v bool) {
	x.xxx_hidden_Exceeded = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 8)
}

func (x *GetQuotaUsageRequest) HasUserIdMin() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *GetQuotaUsageRequest) HasUserIdMax() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *GetQuotaUsageRequest) HasGroupIdMin() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *GetQuotaUsageRequest) HasGroupIdMax() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *GetQuotaUsageRequest) HasPool() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Pool != nil
}

func (x *GetQuotaUsageRequest) HasExceeded() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *GetQuotaUsageRequest) ClearUserIdMin() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_UserIdMin = 0
}

func (x *GetQuotaUsageRequest) ClearUserIdMax() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_UserIdMax = 0
}

func (x *GetQuotaUsageRequest) ClearGroupIdMin() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_GroupIdMin = 0
}

func (x *GetQuotaUsageRequest) ClearGroupIdMax() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_GroupIdMax = 0
}

func (x *GetQuotaUsageRequest) ClearPool() {
	x.xxx_hidden_Pool = nil
}

func (x *GetQuotaUsageRequest) ClearExceeded() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_Exceeded = false
}

type GetQuotaUsageRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The minimum user id to return.
	// Optional.
	UserIdMin *uint32
	// The maximum id to return.
	// Optional. If set, user_id_min must also be set.
	UserIdMax *uint32
	// Return only the user ids listed.
	UserIdList []uint32
	// The minimum group id to return.
	// Optional. If set, group_id_max must also be set.
	GroupIdMin *uint32
	// The maximum id to return.
	// Optional. If set, group_id_min must also be set.
	GroupIdMax *uint32
	// Return only the group ids listed.
	GroupIdList []uint32
	// Return only a specific pool.
	// Optional. One identifier is sufficient.
	Pool *beegfs.EntityIdSet
	// Return only exceeded or not exceeded entries?
	// Optional.
	Exceeded *bool
}

func (b0 GetQuotaUsageRequest_builder) Build() *GetQuotaUsageRequest {
	m0 := &GetQuotaUsageRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.UserIdMin != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 8)
		x.xxx_hidden_UserIdMin = *b.UserIdMin
	}
	if b.UserIdMax != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 8)
		x.xxx_hidden_UserIdMax = *b.UserIdMax
	}
	x.xxx_hidden_UserIdList = b.UserIdList
	if b.GroupIdMin != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 8)
		x.xxx_hidden_GroupIdMin = *b.GroupIdMin
	}
	if b.GroupIdMax != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 8)
		x.xxx_hidden_GroupIdMax = *b.GroupIdMax
	}
	x.xxx_hidden_GroupIdList = b.GroupIdList
	x.xxx_hidden_Pool = b.Pool
	if b.Exceeded != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 8)
		x.xxx_hidden_Exceeded = *b.Exceeded
	}
	return m0
}

// One entry in the quota per-id-and-pool limits list. Meant to be streamed.
type GetQuotaUsageResponse struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Entry          *QuotaInfo             `protobuf:"bytes,1,opt,name=entry,proto3,oneof" json:"entry,omitempty"`
	xxx_hidden_RefreshPeriodS uint64                 `protobuf:"varint,2,opt,name=refresh_period_s,json=refreshPeriodS,proto3,oneof" json:"refresh_period_s,omitempty"`
	XXX_raceDetectHookData    protoimpl.RaceDetectHookData
	XXX_presence              [1]uint32
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GetQuotaUsageResponse) Reset() {
	*x = GetQuotaUsageResponse{}
	mi := &file_management_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuotaUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuotaUsageResponse) ProtoMessage() {}

func (x *GetQuotaUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetQuotaUsageResponse) GetEntry() *QuotaInfo {
	if x != nil {
		return x.xxx_hidden_Entry
	}
	return nil
}

func (x *GetQuotaUsageResponse) GetRefreshPeriodS() uint64 {
	if x != nil {
		return x.xxx_hidden_RefreshPeriodS
	}
	return 0
}

func (x *GetQuotaUsageResponse) SetEntry(v *QuotaInfo) {
	x.xxx_hidden_Entry = v
}

func (x *GetQuotaUsageResponse) SetRefreshPeriodS(v uint64) {
	x.xxx_hidden_RefreshPeriodS = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *GetQuotaUsageResponse) HasEntry() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Entry != nil
}

func (x *GetQuotaUsageResponse) HasRefreshPeriodS() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *GetQuotaUsageResponse) ClearEntry() {
	x.xxx_hidden_Entry = nil
}

func (x *GetQuotaUsageResponse) ClearRefreshPeriodS() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_RefreshPeriodS = 0
}

type GetQuotaUsageResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// One per-id-and-pool quota usage entry.
	// This is a single (non-repeated) field because the response is meant to be streamed.
	// Required.
	Entry *QuotaInfo
	// The refresh period of the quota usage info in seconds.
	// Optional. Should be set only on the first response in the stream.
	RefreshPeriodS *uint64
}

func (b0 GetQuotaUsageResponse_builder) Build() *GetQuotaUsageResponse {
	m0 := &GetQuotaUsageResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Entry = b.Entry
	if b.RefreshPeriodS != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_RefreshPeriodS = *b.RefreshPeriodS
	}
	return m0
}

// Gets license information.
type GetLicenseRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Reload      bool                   `protobuf:"varint,1,opt,name=reload,proto3,oneof" json:"reload,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetLicenseRequest) Reset() {
	*x = GetLicenseRequest{}
	mi := &file_management_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLicenseRequest) ProtoMessage() {}

func (x *GetLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetLicenseRequest) GetReload() bool {
	if x != nil {
		return x.xxx_hidden_Reload
	}
	return false
}

func (x *GetLicenseRequest) SetReload(v bool) {
	x.xxx_hidden_Reload = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *GetLicenseRequest) HasReload() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *GetLicenseRequest) ClearReload() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Reload = false
}

type GetLicenseRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Reload and re-verify the license before returning it?
	// Required.
	Reload *bool
}

func (b0 GetLicenseRequest_builder) Build() *GetLicenseRequest {
	m0 := &GetLicenseRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Reload != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Reload = *b.Reload
	}
	return m0
}

type GetLicenseResponse struct {
	state               protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_CertData *license.GetCertDataResult `protobuf:"bytes,1,opt,name=cert_data,json=certData,proto3,oneof" json:"cert_data,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetLicenseResponse) Reset() {
	*x = GetLicenseResponse{}
	mi := &file_management_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLicenseResponse) ProtoMessage() {}

func (x *GetLicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetLicenseResponse) GetCertData() *license.GetCertDataResult {
	if x != nil {
		return x.xxx_hidden_CertData
	}
	return nil
}

func (x *GetLicenseResponse) SetCertData(v *license.GetCertDataResult) {
	x.xxx_hidden_CertData = v
}

func (x *GetLicenseResponse) HasCertData() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CertData != nil
}

func (x *GetLicenseResponse) ClearCertData() {
	x.xxx_hidden_CertData = nil
}

type GetLicenseResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A license.
	// Optional, might be omitted if no license data is available.
	CertData *license.GetCertDataResult
}

func (b0 GetLicenseResponse_builder) Build() *GetLicenseResponse {
	m0 := &GetLicenseResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_CertData = b.CertData
	return m0
}

// An entry in the node list.
type GetNodesResponse_Node struct {
	state               protoimpl.MessageState        `protogen:"opaque.v1"`
	xxx_hidden_Id       *beegfs.EntityIdSet           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_NodeType beegfs.NodeType               `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=beegfs.NodeType" json:"node_type,omitempty"`
	xxx_hidden_Port     uint32                        `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	xxx_hidden_Nics     *[]*GetNodesResponse_Node_Nic `protobuf:"bytes,4,rep,name=nics,proto3" json:"nics,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetNodesResponse_Node) Reset() {
	*x = GetNodesResponse_Node{}
	mi := &file_management_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodesResponse_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesResponse_Node) ProtoMessage() {}

func (x *GetNodesResponse_Node) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetNodesResponse_Node) GetId() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return nil
}

func (x *GetNodesResponse_Node) GetNodeType() beegfs.NodeType {
	if x != nil {
		return x.xxx_hidden_NodeType
	}
	return beegfs.NodeType(0)
}

func (x *GetNodesResponse_Node) GetPort() uint32 {
	if x != nil {
		return x.xxx_hidden_Port
	}
	return 0
}

func (x *GetNodesResponse_Node) GetNics() []*GetNodesResponse_Node_Nic {
	if x != nil {
		if x.xxx_hidden_Nics != nil {
			return *x.xxx_hidden_Nics
		}
	}
	return nil
}

func (x *GetNodesResponse_Node) SetId(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Id = v
}

func (x *GetNodesResponse_Node) SetNodeType(v beegfs.NodeType) {
	x.xxx_hidden_NodeType = v
}

func (x *GetNodesResponse_Node) SetPort(v uint32) {
	x.xxx_hidden_Port = v
}

func (x *GetNodesResponse_Node) SetNics(v []*GetNodesResponse_Node_Nic) {
	x.xxx_hidden_Nics = &v
}

func (x *GetNodesResponse_Node) HasId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Id != nil
}

func (x *GetNodesResponse_Node) ClearId() {
	x.xxx_hidden_Id = nil
}

type GetNodesResponse_Node_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The nodes identifier set. Required, should be completely populated.
	Id *beegfs.EntityIdSet
	// The node type.
	// Required.
	NodeType beegfs.NodeType
	// The nodes TCP and UDP port.
	// Required.
	Port uint32
	// The nodes list of nics.
	// Should only be filled if include_nics was set to true.
	Nics []*GetNodesResponse_Node_Nic
}

func (b0 GetNodesResponse_Node_builder) Build() *GetNodesResponse_Node {
	m0 := &GetNodesResponse_Node{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_NodeType = b.NodeType
	x.xxx_hidden_Port = b.Port
	x.xxx_hidden_Nics = &b.Nics
	return m0
}

// An entry in a nodes nic list.
type GetNodesResponse_Node_Nic struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Addr    string                 `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	xxx_hidden_Name    string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	xxx_hidden_NicType beegfs.NicType         `protobuf:"varint,3,opt,name=nic_type,json=nicType,proto3,enum=beegfs.NicType" json:"nic_type,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetNodesResponse_Node_Nic) Reset() {
	*x = GetNodesResponse_Node_Nic{}
	mi := &file_management_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodesResponse_Node_Nic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesResponse_Node_Nic) ProtoMessage() {}

func (x *GetNodesResponse_Node_Nic) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetNodesResponse_Node_Nic) GetAddr() string {
	if x != nil {
		return x.xxx_hidden_Addr
	}
	return ""
}

func (x *GetNodesResponse_Node_Nic) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *GetNodesResponse_Node_Nic) GetNicType() beegfs.NicType {
	if x != nil {
		return x.xxx_hidden_NicType
	}
	return beegfs.NicType(0)
}

func (x *GetNodesResponse_Node_Nic) SetAddr(v string) {
	x.xxx_hidden_Addr = v
}

func (x *GetNodesResponse_Node_Nic) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *GetNodesResponse_Node_Nic) SetNicType(v beegfs.NicType) {
	x.xxx_hidden_NicType = v
}

type GetNodesResponse_Node_Nic_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The nics IPv4 address in the form aaa.bbb.ccc.ddd:port.
	// Required.
	Addr string
	// The nics name (note that this is NOT an alias as a Nic is not considered an entity).
	// Required.
	Name string
	// The nics type.
	// Required.
	NicType beegfs.NicType
}

func (b0 GetNodesResponse_Node_Nic_builder) Build() *GetNodesResponse_Node_Nic {
	m0 := &GetNodesResponse_Node_Nic{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Addr = b.Addr
	x.xxx_hidden_Name = b.Name
	x.xxx_hidden_NicType = b.NicType
	return m0
}

// An entry in the target list.
type GetTargetsResponse_Target struct {
	state                        protoimpl.MessageState   `protogen:"opaque.v1"`
	xxx_hidden_Id                *beegfs.EntityIdSet      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_NodeType          beegfs.NodeType          `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=beegfs.NodeType" json:"node_type,omitempty"`
	xxx_hidden_ReachabilityState beegfs.ReachabilityState `protobuf:"varint,3,opt,name=reachability_state,json=reachabilityState,proto3,enum=beegfs.ReachabilityState" json:"reachability_state,omitempty"`
	xxx_hidden_ConsistencyState  beegfs.ConsistencyState  `protobuf:"varint,4,opt,name=consistency_state,json=consistencyState,proto3,enum=beegfs.ConsistencyState" json:"consistency_state,omitempty"`
	xxx_hidden_LastContactS      uint64                   `protobuf:"varint,5,opt,name=last_contact_s,json=lastContactS,proto3,oneof" json:"last_contact_s,omitempty"`
	xxx_hidden_TotalSpaceBytes   uint64                   `protobuf:"varint,6,opt,name=total_space_bytes,json=totalSpaceBytes,proto3,oneof" json:"total_space_bytes,omitempty"`
	xxx_hidden_FreeSpaceBytes    uint64                   `protobuf:"varint,7,opt,name=free_space_bytes,json=freeSpaceBytes,proto3,oneof" json:"free_space_bytes,omitempty"`
	xxx_hidden_TotalInodes       uint64                   `protobuf:"varint,8,opt,name=total_inodes,json=totalInodes,proto3,oneof" json:"total_inodes,omitempty"`
	xxx_hidden_FreeInodes        uint64                   `protobuf:"varint,9,opt,name=free_inodes,json=freeInodes,proto3,oneof" json:"free_inodes,omitempty"`
	xxx_hidden_CapPool           beegfs.CapacityPool      `protobuf:"varint,10,opt,name=cap_pool,json=capPool,proto3,enum=beegfs.CapacityPool" json:"cap_pool,omitempty"`
	xxx_hidden_Node              *beegfs.EntityIdSet      `protobuf:"bytes,11,opt,name=node,proto3" json:"node,omitempty"`
	xxx_hidden_StoragePool       *beegfs.EntityIdSet      `protobuf:"bytes,12,opt,name=storage_pool,json=storagePool,proto3,oneof" json:"storage_pool,omitempty"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *GetTargetsResponse_Target) Reset() {
	*x = GetTargetsResponse_Target{}
	mi := &file_management_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTargetsResponse_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetsResponse_Target) ProtoMessage() {}

func (x *GetTargetsResponse_Target) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetTargetsResponse_Target) GetId() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return nil
}

func (x *GetTargetsResponse_Target) GetNodeType() beegfs.NodeType {
	if x != nil {
		return x.xxx_hidden_NodeType
	}
	return beegfs.NodeType(0)
}

func (x *GetTargetsResponse_Target) GetReachabilityState() beegfs.ReachabilityState {
	if x != nil {
		return x.xxx_hidden_ReachabilityState
	}
	return beegfs.ReachabilityState(0)
}

func (x *GetTargetsResponse_Target) GetConsistencyState() beegfs.ConsistencyState {
	if x != nil {
		return x.xxx_hidden_ConsistencyState
	}
	return beegfs.ConsistencyState(0)
}

func (x *GetTargetsResponse_Target) GetLastContactS() uint64 {
	if x != nil {
		return x.xxx_hidden_LastContactS
	}
	return 0
}

func (x *GetTargetsResponse_Target) GetTotalSpaceBytes() uint64 {
	if x != nil {
		return x.xxx_hidden_TotalSpaceBytes
	}
	return 0
}

func (x *GetTargetsResponse_Target) GetFreeSpaceBytes() uint64 {
	if x != nil {
		return x.xxx_hidden_FreeSpaceBytes
	}
	return 0
}

func (x *GetTargetsResponse_Target) GetTotalInodes() uint64 {
	if x != nil {
		return x.xxx_hidden_TotalInodes
	}
	return 0
}

func (x *GetTargetsResponse_Target) GetFreeInodes() uint64 {
	if x != nil {
		return x.xxx_hidden_FreeInodes
	}
	return 0
}

func (x *GetTargetsResponse_Target) GetCapPool() beegfs.CapacityPool {
	if x != nil {
		return x.xxx_hidden_CapPool
	}
	return beegfs.CapacityPool(0)
}

func (x *GetTargetsResponse_Target) GetNode() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Node
	}
	return nil
}

func (x *GetTargetsResponse_Target) GetStoragePool() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_StoragePool
	}
	return nil
}

func (x *GetTargetsResponse_Target) SetId(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Id = v
}

func (x *GetTargetsResponse_Target) SetNodeType(v beegfs.NodeType) {
	x.xxx_hidden_NodeType = v
}

func (x *GetTargetsResponse_Target) SetReachabilityState(v beegfs.ReachabilityState) {
	x.xxx_hidden_ReachabilityState = v
}

func (x *GetTargetsResponse_Target) SetConsistencyState(v beegfs.ConsistencyState) {
	x.xxx_hidden_ConsistencyState = v
}

func (x *GetTargetsResponse_Target) SetLastContactS(v uint64) {
	x.xxx_hidden_LastContactS = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 12)
}

func (x *GetTargetsResponse_Target) SetTotalSpaceBytes(v uint64) {
	x.xxx_hidden_TotalSpaceBytes = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 12)
}

func (x *GetTargetsResponse_Target) SetFreeSpaceBytes(v uint64) {
	x.xxx_hidden_FreeSpaceBytes = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 12)
}

func (x *GetTargetsResponse_Target) SetTotalInodes(v uint64) {
	x.xxx_hidden_TotalInodes = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 12)
}

func (x *GetTargetsResponse_Target) SetFreeInodes(v uint64) {
	x.xxx_hidden_FreeInodes = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 12)
}

func (x *GetTargetsResponse_Target) SetCapPool(v beegfs.CapacityPool) {
	x.xxx_hidden_CapPool = v
}

func (x *GetTargetsResponse_Target) SetNode(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Node = v
}

func (x *GetTargetsResponse_Target) SetStoragePool(v *beegfs.EntityIdSet) {
	x.xxx_hidden_StoragePool = v
}

func (x *GetTargetsResponse_Target) HasId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Id != nil
}

func (x *GetTargetsResponse_Target) HasLastContactS() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *GetTargetsResponse_Target) HasTotalSpaceBytes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *GetTargetsResponse_Target) HasFreeSpaceBytes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *GetTargetsResponse_Target) HasTotalInodes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *GetTargetsResponse_Target) HasFreeInodes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *GetTargetsResponse_Target) HasNode() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Node != nil
}

func (x *GetTargetsResponse_Target) HasStoragePool() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_StoragePool != nil
}

func (x *GetTargetsResponse_Target) ClearId() {
	x.xxx_hidden_Id = nil
}

func (x *GetTargetsResponse_Target) ClearLastContactS() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_LastContactS = 0
}

func (x *GetTargetsResponse_Target) ClearTotalSpaceBytes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_TotalSpaceBytes = 0
}

func (x *GetTargetsResponse_Target) ClearFreeSpaceBytes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_FreeSpaceBytes = 0
}

func (x *GetTargetsResponse_Target) ClearTotalInodes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_TotalInodes = 0
}

func (x *GetTargetsResponse_Target) ClearFreeInodes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_FreeInodes = 0
}

func (x *GetTargetsResponse_Target) ClearNode() {
	x.xxx_hidden_Node = nil
}

func (x *GetTargetsResponse_Target) ClearStoragePool() {
	x.xxx_hidden_StoragePool = nil
}

type GetTargetsResponse_Target_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The targets identifier set.
	// Required, should be completely populated.
	Id *beegfs.EntityIdSet
	// Node type of the target.
	// Required.
	NodeType beegfs.NodeType
	// The targets reachability state as reported by management.
	// Required.
	ReachabilityState beegfs.ReachabilityState
	// The targets reachability state as reported by management.
	// Required.
	ConsistencyState beegfs.ConsistencyState
	// Duration since last contact to the target in seconds.
	// Optional, may be omitted if that information is not available.
	LastContactS *uint64
	// Total space on the target as reported by management.
	// Optional, may be omitted if that information is not available.
	TotalSpaceBytes *uint64
	// Free space on the target as reported by management.
	// Optional, may be omitted if that information is not available.
	FreeSpaceBytes *uint64
	// Total inodes on the target as reported by management.
	// Optional, may be omitted if that information is not available.
	TotalInodes *uint64
	// Free inodes on the target as reported by management.
	// Optional, may be omitted if that information is not available.
	FreeInodes *uint64
	// The targets capacity pool as reported by the management.
	// Required.
	CapPool beegfs.CapacityPool
	// The targets owner node. Storage targets can be "unmapped".
	// Optional if this target is a storage target (e.g. node_type is STORAGE), required otherwise.
	// If set, should be completely populated.
	Node *beegfs.EntityIdSet
	// The targets storage pool.
	// Required if this target is a storage target (e.g. node_type is STORAGE), unset otherwise. If
	// set, should be completely populated.
	StoragePool *beegfs.EntityIdSet
}

func (b0 GetTargetsResponse_Target_builder) Build() *GetTargetsResponse_Target {
	m0 := &GetTargetsResponse_Target{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_NodeType = b.NodeType
	x.xxx_hidden_ReachabilityState = b.ReachabilityState
	x.xxx_hidden_ConsistencyState = b.ConsistencyState
	if b.LastContactS != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 12)
		x.xxx_hidden_LastContactS = *b.LastContactS
	}
	if b.TotalSpaceBytes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 12)
		x.xxx_hidden_TotalSpaceBytes = *b.TotalSpaceBytes
	}
	if b.FreeSpaceBytes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 12)
		x.xxx_hidden_FreeSpaceBytes = *b.FreeSpaceBytes
	}
	if b.TotalInodes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 12)
		x.xxx_hidden_TotalInodes = *b.TotalInodes
	}
	if b.FreeInodes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 12)
		x.xxx_hidden_FreeInodes = *b.FreeInodes
	}
	x.xxx_hidden_CapPool = b.CapPool
	x.xxx_hidden_Node = b.Node
	x.xxx_hidden_StoragePool = b.StoragePool
	return m0
}

// An entry in the storage pool list.
type GetPoolsResponse_StoragePool struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id              *beegfs.EntityIdSet    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_Targets         *[]*beegfs.EntityIdSet `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	xxx_hidden_BuddyGroups     *[]*beegfs.EntityIdSet `protobuf:"bytes,3,rep,name=buddy_groups,json=buddyGroups,proto3" json:"buddy_groups,omitempty"`
	xxx_hidden_UserSpaceLimit  int64                  `protobuf:"varint,4,opt,name=user_space_limit,json=userSpaceLimit,proto3,oneof" json:"user_space_limit,omitempty"`
	xxx_hidden_UserInodeLimit  int64                  `protobuf:"varint,5,opt,name=user_inode_limit,json=userInodeLimit,proto3,oneof" json:"user_inode_limit,omitempty"`
	xxx_hidden_GroupSpaceLimit int64                  `protobuf:"varint,6,opt,name=group_space_limit,json=groupSpaceLimit,proto3,oneof" json:"group_space_limit,omitempty"`
	xxx_hidden_GroupInodeLimit int64                  `protobuf:"varint,7,opt,name=group_inode_limit,json=groupInodeLimit,proto3,oneof" json:"group_inode_limit,omitempty"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *GetPoolsResponse_StoragePool) Reset() {
	*x = GetPoolsResponse_StoragePool{}
	mi := &file_management_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoolsResponse_StoragePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoolsResponse_StoragePool) ProtoMessage() {}

func (x *GetPoolsResponse_StoragePool) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetPoolsResponse_StoragePool) GetId() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return nil
}

func (x *GetPoolsResponse_StoragePool) GetTargets() []*beegfs.EntityIdSet {
	if x != nil {
		if x.xxx_hidden_Targets != nil {
			return *x.xxx_hidden_Targets
		}
	}
	return nil
}

func (x *GetPoolsResponse_StoragePool) GetBuddyGroups() []*beegfs.EntityIdSet {
	if x != nil {
		if x.xxx_hidden_BuddyGroups != nil {
			return *x.xxx_hidden_BuddyGroups
		}
	}
	return nil
}

func (x *GetPoolsResponse_StoragePool) GetUserSpaceLimit() int64 {
	if x != nil {
		return x.xxx_hidden_UserSpaceLimit
	}
	return 0
}

func (x *GetPoolsResponse_StoragePool) GetUserInodeLimit() int64 {
	if x != nil {
		return x.xxx_hidden_UserInodeLimit
	}
	return 0
}

func (x *GetPoolsResponse_StoragePool) GetGroupSpaceLimit() int64 {
	if x != nil {
		return x.xxx_hidden_GroupSpaceLimit
	}
	return 0
}

func (x *GetPoolsResponse_StoragePool) GetGroupInodeLimit() int64 {
	if x != nil {
		return x.xxx_hidden_GroupInodeLimit
	}
	return 0
}

func (x *GetPoolsResponse_StoragePool) SetId(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Id = v
}

func (x *GetPoolsResponse_StoragePool) SetTargets(v []*beegfs.EntityIdSet) {
	x.xxx_hidden_Targets = &v
}

func (x *GetPoolsResponse_StoragePool) SetBuddyGroups(v []*beegfs.EntityIdSet) {
	x.xxx_hidden_BuddyGroups = &v
}

func (x *GetPoolsResponse_StoragePool) SetUserSpaceLimit(v int64) {
	x.xxx_hidden_UserSpaceLimit = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *GetPoolsResponse_StoragePool) SetUserInodeLimit(v int64) {
	x.xxx_hidden_UserInodeLimit = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *GetPoolsResponse_StoragePool) SetGroupSpaceLimit(v int64) {
	x.xxx_hidden_GroupSpaceLimit = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *GetPoolsResponse_StoragePool) SetGroupInodeLimit(v int64) {
	x.xxx_hidden_GroupInodeLimit = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *GetPoolsResponse_StoragePool) HasId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Id != nil
}

func (x *GetPoolsResponse_StoragePool) HasUserSpaceLimit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *GetPoolsResponse_StoragePool) HasUserInodeLimit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *GetPoolsResponse_StoragePool) HasGroupSpaceLimit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *GetPoolsResponse_StoragePool) HasGroupInodeLimit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *GetPoolsResponse_StoragePool) ClearId() {
	x.xxx_hidden_Id = nil
}

func (x *GetPoolsResponse_StoragePool) ClearUserSpaceLimit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_UserSpaceLimit = 0
}

func (x *GetPoolsResponse_StoragePool) ClearUserInodeLimit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_UserInodeLimit = 0
}

func (x *GetPoolsResponse_StoragePool) ClearGroupSpaceLimit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_GroupSpaceLimit = 0
}

func (x *GetPoolsResponse_StoragePool) ClearGroupInodeLimit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_GroupInodeLimit = 0
}

type GetPoolsResponse_StoragePool_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The pools identifier set.
	// Required, should be completely populated.
	Id *beegfs.EntityIdSet
	// The targets assigned to the storage pool.
	// Each should be completely populated.
	Targets []*beegfs.EntityIdSet
	// The buddy groups assigned to the storage pool.
	// Each should be completely populated.
	BuddyGroups []*beegfs.EntityIdSet
	// The default user space quota limit for data in this pool. -1 means unlimited.
	// Optional. Should be set if with_quota_limits was set to true and the corresponding data is
	// available.
	UserSpaceLimit *int64
	// The default user inode quota limit for data in this pool. -1 means unlimited.
	// Optional. Should be set if with_quota_limits was set to true and the corresponding data is
	// available.
	UserInodeLimit *int64
	// The default group space quota limit for data in this pool. -1 means unlimited.
	// Optional. Should be set if with_quota_limits was set to true and the corresponding data is
	// available.
	GroupSpaceLimit *int64
	// The default group inode quota limit for data in this pool. -1 means unlimited.
	// Optional. Should be set if with_quota_limits was set to true and the corresponding data is
	// available.
	GroupInodeLimit *int64
}

func (b0 GetPoolsResponse_StoragePool_builder) Build() *GetPoolsResponse_StoragePool {
	m0 := &GetPoolsResponse_StoragePool{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Targets = &b.Targets
	x.xxx_hidden_BuddyGroups = &b.BuddyGroups
	if b.UserSpaceLimit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_UserSpaceLimit = *b.UserSpaceLimit
	}
	if b.UserInodeLimit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_UserInodeLimit = *b.UserInodeLimit
	}
	if b.GroupSpaceLimit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_GroupSpaceLimit = *b.GroupSpaceLimit
	}
	if b.GroupInodeLimit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_GroupInodeLimit = *b.GroupInodeLimit
	}
	return m0
}

// An entry in the buddy groups list.
type GetBuddyGroupsResponse_BuddyGroup struct {
	state                                protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Id                        *beegfs.EntityIdSet     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_NodeType                  beegfs.NodeType         `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=beegfs.NodeType" json:"node_type,omitempty"`
	xxx_hidden_PrimaryTarget             *beegfs.EntityIdSet     `protobuf:"bytes,3,opt,name=primary_target,json=primaryTarget,proto3" json:"primary_target,omitempty"`
	xxx_hidden_SecondaryTarget           *beegfs.EntityIdSet     `protobuf:"bytes,4,opt,name=secondary_target,json=secondaryTarget,proto3" json:"secondary_target,omitempty"`
	xxx_hidden_PrimaryConsistencyState   beegfs.ConsistencyState `protobuf:"varint,5,opt,name=primary_consistency_state,json=primaryConsistencyState,proto3,enum=beegfs.ConsistencyState" json:"primary_consistency_state,omitempty"`
	xxx_hidden_SecondaryConsistencyState beegfs.ConsistencyState `protobuf:"varint,6,opt,name=secondary_consistency_state,json=secondaryConsistencyState,proto3,enum=beegfs.ConsistencyState" json:"secondary_consistency_state,omitempty"`
	xxx_hidden_StoragePool               *beegfs.EntityIdSet     `protobuf:"bytes,7,opt,name=storage_pool,json=storagePool,proto3,oneof" json:"storage_pool,omitempty"`
	unknownFields                        protoimpl.UnknownFields
	sizeCache                            protoimpl.SizeCache
}

func (x *GetBuddyGroupsResponse_BuddyGroup) Reset() {
	*x = GetBuddyGroupsResponse_BuddyGroup{}
	mi := &file_management_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBuddyGroupsResponse_BuddyGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuddyGroupsResponse_BuddyGroup) ProtoMessage() {}

func (x *GetBuddyGroupsResponse_BuddyGroup) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetId() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return nil
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetNodeType() beegfs.NodeType {
	if x != nil {
		return x.xxx_hidden_NodeType
	}
	return beegfs.NodeType(0)
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetPrimaryTarget() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_PrimaryTarget
	}
	return nil
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetSecondaryTarget() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_SecondaryTarget
	}
	return nil
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetPrimaryConsistencyState() beegfs.ConsistencyState {
	if x != nil {
		return x.xxx_hidden_PrimaryConsistencyState
	}
	return beegfs.ConsistencyState(0)
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetSecondaryConsistencyState() beegfs.ConsistencyState {
	if x != nil {
		return x.xxx_hidden_SecondaryConsistencyState
	}
	return beegfs.ConsistencyState(0)
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetStoragePool() *beegfs.EntityIdSet {
	if x != nil {
		return x.xxx_hidden_StoragePool
	}
	return nil
}

func (x *GetBuddyGroupsResponse_BuddyGroup) SetId(v *beegfs.EntityIdSet) {
	x.xxx_hidden_Id = v
}

func (x *GetBuddyGroupsResponse_BuddyGroup) SetNodeType(v beegfs.NodeType) {
	x.xxx_hidden_NodeType = v
}

func (x *GetBuddyGroupsResponse_BuddyGroup) SetPrimaryTarget(v *beegfs.EntityIdSet) {
	x.xxx_hidden_PrimaryTarget = v
}

func (x *GetBuddyGroupsResponse_BuddyGroup) SetSecondaryTarget(v *beegfs.EntityIdSet) {
	x.xxx_hidden_SecondaryTarget = v
}

func (x *GetBuddyGroupsResponse_BuddyGroup) SetPrimaryConsistencyState(v beegfs.ConsistencyState) {
	x.xxx_hidden_PrimaryConsistencyState = v
}

func (x *GetBuddyGroupsResponse_BuddyGroup) SetSecondaryConsistencyState(v beegfs.ConsistencyState) {
	x.xxx_hidden_SecondaryConsistencyState = v
}

func (x *GetBuddyGroupsResponse_BuddyGroup) SetStoragePool(v *beegfs.EntityIdSet) {
	x.xxx_hidden_StoragePool = v
}

func (x *GetBuddyGroupsResponse_BuddyGroup) HasId() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Id != nil
}

func (x *GetBuddyGroupsResponse_BuddyGroup) HasPrimaryTarget() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PrimaryTarget != nil
}

func (x *GetBuddyGroupsResponse_BuddyGroup) HasSecondaryTarget() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SecondaryTarget != nil
}

func (x *GetBuddyGroupsResponse_BuddyGroup) HasStoragePool() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_StoragePool != nil
}

func (x *GetBuddyGroupsResponse_BuddyGroup) ClearId() {
	x.xxx_hidden_Id = nil
}

func (x *GetBuddyGroupsResponse_BuddyGroup) ClearPrimaryTarget() {
	x.xxx_hidden_PrimaryTarget = nil
}

func (x *GetBuddyGroupsResponse_BuddyGroup) ClearSecondaryTarget() {
	x.xxx_hidden_SecondaryTarget = nil
}

func (x *GetBuddyGroupsResponse_BuddyGroup) ClearStoragePool() {
	x.xxx_hidden_StoragePool = nil
}

type GetBuddyGroupsResponse_BuddyGroup_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The buddy groups identifier set.
	// Required, should be completely populated.
	Id *beegfs.EntityIdSet
	// Node type of the buddy group.
	// Required.
	NodeType beegfs.NodeType
	// The buddy groups primary target.
	// Required, should be completely populated.
	PrimaryTarget *beegfs.EntityIdSet
	// The buddy groups secondary target.
	// Required, should be completely populated.
	SecondaryTarget *beegfs.EntityIdSet
	// The buddy groups primary target consistency state.
	// Required.
	PrimaryConsistencyState beegfs.ConsistencyState
	// The buddy groups secondary target consistency state.
	// Required.
	SecondaryConsistencyState beegfs.ConsistencyState
	// The targets storage pool.
	// Required if this target is a storage target (e.g. node_type is STORAGE), unset otherwise. If
	// set, should be completely populated.
	StoragePool *beegfs.EntityIdSet
}

func (b0 GetBuddyGroupsResponse_BuddyGroup_builder) Build() *GetBuddyGroupsResponse_BuddyGroup {
	m0 := &GetBuddyGroupsResponse_BuddyGroup{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_NodeType = b.NodeType
	x.xxx_hidden_PrimaryTarget = b.PrimaryTarget
	x.xxx_hidden_SecondaryTarget = b.SecondaryTarget
	x.xxx_hidden_PrimaryConsistencyState = b.PrimaryConsistencyState
	x.xxx_hidden_SecondaryConsistencyState = b.SecondaryConsistencyState
	x.xxx_hidden_StoragePool = b.StoragePool
	return m0
}

var File_management_proto protoreflect.FileDescriptor

var file_management_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0c,
	0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x01, 0x0a, 0x0f,
	0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x69, 0x63, 0x73, 0x22, 0xcf, 0x03,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61,
	0x52, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66,
	0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06,
	0x66, 0x73, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x84, 0x02, 0x0a, 0x04, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x53, 0x65, 0x74, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x65,
	0x67, 0x66, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x69,
	0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x69, 0x63, 0x52,
	0x04, 0x6e, 0x69, 0x63, 0x73, 0x1a, 0x59, 0x0a, 0x03, 0x4e, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e,
	0x4e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22,
	0x75, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x22, 0x4b, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65,
	0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa5, 0x06, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x1a, 0xcd, 0x05, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x48, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x65,
	0x65, 0x67, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0e, 0x66, 0x72, 0x65, 0x65, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65,
	0x49, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x61, 0x70,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x65,
	0x65, 0x67, 0x66, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x07, 0x63, 0x61, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66,
	0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67,
	0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x05,
	0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x22, 0x7d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x22,
	0x53, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x65,
	0x65, 0x67, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x18, 0x0a,
	0x16, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x84, 0x04, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x1a, 0xaf, 0x03, 0x0a, 0x0b,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12,
	0x36, 0x0a, 0x0c, 0x62, 0x75, 0x64, 0x64, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x62, 0x75, 0x64, 0x64,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x02, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x03, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x88, 0x02,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x05, 0x6e, 0x75, 0x6d, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x53, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a,
	0x0c, 0x62, 0x75, 0x64, 0x64, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x62, 0x75, 0x64, 0x64, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x4b, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62,
	0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0xb1, 0x01, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67,
	0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x07, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65,
	0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x62, 0x75, 0x64, 0x64,
	0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x53, 0x65, 0x74, 0x52, 0x0b, 0x62, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x4b, 0x0a, 0x12, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x75, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67,
	0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x22, 0x4b, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xc7, 0x04, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x64, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x0c, 0x62, 0x75, 0x64, 0x64, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x0b, 0x62, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x1a, 0xda, 0x03, 0x0a, 0x0a, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65,
	0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65,
	0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74,
	0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x3e, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67,
	0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x54, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x17, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x1b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x65,
	0x67, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0xd5, 0x02,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62,
	0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52,
	0x05, 0x6e, 0x75, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62,
	0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65,
	0x74, 0x48, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x53, 0x65, 0x74, 0x48, 0x04, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x54, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x7e, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x22, 0x54, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x18, 0x0a, 0x16, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x49,
	0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x0b, 0x62, 0x75, 0x64, 0x64, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x64, 0x64, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62,
	0x75, 0x64, 0x64, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x09,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x08, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x07, 0x69, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65,
	0x67, 0x66, 0x73, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x01, 0x52, 0x04, 0x70, 0x6f,
	0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x22, 0xeb, 0x02,
	0x0a, 0x1c, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62,
	0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x1f, 0x0a, 0x1d, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x15,
	0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xee,
	0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x01, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x61, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x4d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x03, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x4d, 0x61, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x04, 0x52, 0x04, 0x70, 0x6f, 0x6f,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x5f, 0x6d, 0x61, 0x78, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x22,
	0x57, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x9b, 0x03, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x4d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x4d, 0x69,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53,
	0x65, 0x74, 0x48, 0x04, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x05, 0x52, 0x08, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x78,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0e,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73,
	0x22, 0x3b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x60, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x98, 0x0d, 0x0a, 0x0a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45,
	0x0a, 0x08, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x53, 0x65, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x1b,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x6f,
	0x6f, 0x74, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x79,
	0x6e, 0x63, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x57, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x4b, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x70, 0x61,
	0x72, 0x71, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var file_management_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_management_proto_goTypes = []any{
	(*SetAliasRequest)(nil),                   // 0: management.SetAliasRequest
	(*SetAliasResponse)(nil),                  // 1: management.SetAliasResponse
	(*GetNodesRequest)(nil),                   // 2: management.GetNodesRequest
	(*GetNodesResponse)(nil),                  // 3: management.GetNodesResponse
	(*DeleteNodeRequest)(nil),                 // 4: management.DeleteNodeRequest
	(*DeleteNodeResponse)(nil),                // 5: management.DeleteNodeResponse
	(*GetTargetsRequest)(nil),                 // 6: management.GetTargetsRequest
	(*GetTargetsResponse)(nil),                // 7: management.GetTargetsResponse
	(*DeleteTargetRequest)(nil),               // 8: management.DeleteTargetRequest
	(*DeleteTargetResponse)(nil),              // 9: management.DeleteTargetResponse
	(*SetTargetStateRequest)(nil),             // 10: management.SetTargetStateRequest
	(*SetTargetStateResponse)(nil),            // 11: management.SetTargetStateResponse
	(*GetPoolsRequest)(nil),                   // 12: management.GetPoolsRequest
	(*GetPoolsResponse)(nil),                  // 13: management.GetPoolsResponse
	(*CreatePoolRequest)(nil),                 // 14: management.CreatePoolRequest
	(*CreatePoolResponse)(nil),                // 15: management.CreatePoolResponse
	(*AssignPoolRequest)(nil),                 // 16: management.AssignPoolRequest
	(*AssignPoolResponse)(nil),                // 17: management.AssignPoolResponse
	(*DeletePoolRequest)(nil),                 // 18: management.DeletePoolRequest
	(*DeletePoolResponse)(nil),                // 19: management.DeletePoolResponse
	(*GetBuddyGroupsRequest)(nil),             // 20: management.GetBuddyGroupsRequest
	(*GetBuddyGroupsResponse)(nil),            // 21: management.GetBuddyGroupsResponse
	(*CreateBuddyGroupRequest)(nil),           // 22: management.CreateBuddyGroupRequest
	(*CreateBuddyGroupResponse)(nil),          // 23: management.CreateBuddyGroupResponse
	(*DeleteBuddyGroupRequest)(nil),           // 24: management.DeleteBuddyGroupRequest
	(*DeleteBuddyGroupResponse)(nil),          // 25: management.DeleteBuddyGroupResponse
	(*MirrorRootInodeRequest)(nil),            // 26: management.MirrorRootInodeRequest
	(*MirrorRootInodeResponse)(nil),           // 27: management.MirrorRootInodeResponse
	(*StartResyncRequest)(nil),                // 28: management.StartResyncRequest
	(*StartResyncResponse)(nil),               // 29: management.StartResyncResponse
	(*QuotaInfo)(nil),                         // 30: management.QuotaInfo
	(*SetDefaultQuotaLimitsRequest)(nil),      // 31: management.SetDefaultQuotaLimitsRequest
	(*SetDefaultQuotaLimitsResponse)(nil),     // 32: management.SetDefaultQuotaLimitsResponse
	(*SetQuotaLimitsRequest)(nil),             // 33: management.SetQuotaLimitsRequest
	(*SetQuotaLimitsResponse)(nil),            // 34: management.SetQuotaLimitsResponse
	(*GetQuotaLimitsRequest)(nil),             // 35: management.GetQuotaLimitsRequest
	(*GetQuotaLimitsResponse)(nil),            // 36: management.GetQuotaLimitsResponse
	(*GetQuotaUsageRequest)(nil),              // 37: management.GetQuotaUsageRequest
	(*GetQuotaUsageResponse)(nil),             // 38: management.GetQuotaUsageResponse
	(*GetLicenseRequest)(nil),                 // 39: management.GetLicenseRequest
	(*GetLicenseResponse)(nil),                // 40: management.GetLicenseResponse
	(*GetNodesResponse_Node)(nil),             // 41: management.GetNodesResponse.Node
	(*GetNodesResponse_Node_Nic)(nil),         // 42: management.GetNodesResponse.Node.Nic
	(*GetTargetsResponse_Target)(nil),         // 43: management.GetTargetsResponse.Target
	(*GetPoolsResponse_StoragePool)(nil),      // 44: management.GetPoolsResponse.StoragePool
	(*GetBuddyGroupsResponse_BuddyGroup)(nil), // 45: management.GetBuddyGroupsResponse.BuddyGroup
	(*beegfs.EntityIdSet)(nil),                // 46: beegfs.EntityIdSet
	(beegfs.EntityType)(0),                    // 47: beegfs.EntityType
	(beegfs.ConsistencyState)(0),              // 48: beegfs.ConsistencyState
	(beegfs.NodeType)(0),                      // 49: beegfs.NodeType
	(beegfs.QuotaIdType)(0),                   // 50: beegfs.QuotaIdType
	(*license.GetCertDataResult)(nil),         // 51: license.GetCertDataResult
	(beegfs.NicType)(0),                       // 52: beegfs.NicType
	(beegfs.ReachabilityState)(0),             // 53: beegfs.ReachabilityState
	(beegfs.CapacityPool)(0),                  // 54: beegfs.CapacityPool
}
var file_management_proto_depIdxs = []int32{
	46, // 0: management.SetAliasRequest.entity_id:type_name -> beegfs.EntityIdSet
	47, // 1: management.SetAliasRequest.entity_type:type_name -> beegfs.EntityType
	41, // 2: management.GetNodesResponse.nodes:type_name -> management.GetNodesResponse.Node
	46, // 3: management.GetNodesResponse.meta_root_node:type_name -> beegfs.EntityIdSet
	46, // 4: management.DeleteNodeRequest.node:type_name -> beegfs.EntityIdSet
	46, // 5: management.DeleteNodeResponse.node:type_name -> beegfs.EntityIdSet
	43, // 6: management.GetTargetsResponse.targets:type_name -> management.GetTargetsResponse.Target
	46, // 7: management.DeleteTargetRequest.target:type_name -> beegfs.EntityIdSet
	46, // 8: management.DeleteTargetResponse.target:type_name -> beegfs.EntityIdSet
	46, // 9: management.SetTargetStateRequest.target:type_name -> beegfs.EntityIdSet
	48, // 10: management.SetTargetStateRequest.consistency_state:type_name -> beegfs.ConsistencyState
	44, // 11: management.GetPoolsResponse.pools:type_name -> management.GetPoolsResponse.StoragePool
	49, // 12: management.CreatePoolRequest.node_type:type_name -> beegfs.NodeType
	46, // 13: management.CreatePoolRequest.targets:type_name -> beegfs.EntityIdSet
	46, // 14: management.CreatePoolRequest.buddy_groups:type_name -> beegfs.EntityIdSet
	46, // 15: management.CreatePoolResponse.pool:type_name -> beegfs.EntityIdSet
	46, // 16: management.AssignPoolRequest.pool:type_name -> beegfs.EntityIdSet
	46, // 17: management.AssignPoolRequest.targets:type_name -> beegfs.EntityIdSet
	46, // 18: management.AssignPoolRequest.buddy_groups:type_name -> beegfs.EntityIdSet
	46, // 19: management.AssignPoolResponse.pool:type_name -> beegfs.EntityIdSet
	46, // 20: management.DeletePoolRequest.pool:type_name -> beegfs.EntityIdSet
	46, // 21: management.DeletePoolResponse.pool:type_name -> beegfs.EntityIdSet
	45, // 22: management.GetBuddyGroupsResponse.buddy_groups:type_name -> management.GetBuddyGroupsResponse.BuddyGroup
	49, // 23: management.CreateBuddyGroupRequest.node_type:type_name -> beegfs.NodeType
	46, // 24: management.CreateBuddyGroupRequest.primary_target:type_name -> beegfs.EntityIdSet
	46, // 25: management.CreateBuddyGroupRequest.secondary_target:type_name -> beegfs.EntityIdSet
	46, // 26: management.CreateBuddyGroupResponse.group:type_name -> beegfs.EntityIdSet
	46, // 27: management.DeleteBuddyGroupRequest.group:type_name -> beegfs.EntityIdSet
	46, // 28: management.DeleteBuddyGroupResponse.group:type_name -> beegfs.EntityIdSet
	46, // 29: management.StartResyncRequest.buddy_group:type_name -> beegfs.EntityIdSet
	50, // 30: management.QuotaInfo.id_type:type_name -> beegfs.QuotaIdType
	46, // 31: management.QuotaInfo.pool:type_name -> beegfs.EntityIdSet
	46, // 32: management.SetDefaultQuotaLimitsRequest.pool:type_name -> beegfs.EntityIdSet
	30, // 33: management.SetQuotaLimitsRequest.limits:type_name -> management.QuotaInfo
	46, // 34: management.GetQuotaLimitsRequest.pool:type_name -> beegfs.EntityIdSet
	30, // 35: management.GetQuotaLimitsResponse.limits:type_name -> management.QuotaInfo
	46, // 36: management.GetQuotaUsageRequest.pool:type_name -> beegfs.EntityIdSet
	30, // 37: management.GetQuotaUsageResponse.entry:type_name -> management.QuotaInfo
	51, // 38: management.GetLicenseResponse.cert_data:type_name -> license.GetCertDataResult
	46, // 39: management.GetNodesResponse.Node.id:type_name -> beegfs.EntityIdSet
	49, // 40: management.GetNodesResponse.Node.node_type:type_name -> beegfs.NodeType
	42, // 41: management.GetNodesResponse.Node.nics:type_name -> management.GetNodesResponse.Node.Nic
	52, // 42: management.GetNodesResponse.Node.Nic.nic_type:type_name -> beegfs.NicType
	46, // 43: management.GetTargetsResponse.Target.id:type_name -> beegfs.EntityIdSet
	49, // 44: management.GetTargetsResponse.Target.node_type:type_name -> beegfs.NodeType
	53, // 45: management.GetTargetsResponse.Target.reachability_state:type_name -> beegfs.ReachabilityState
	48, // 46: management.GetTargetsResponse.Target.consistency_state:type_name -> beegfs.ConsistencyState
	54, // 47: management.GetTargetsResponse.Target.cap_pool:type_name -> beegfs.CapacityPool
	46, // 48: management.GetTargetsResponse.Target.node:type_name -> beegfs.EntityIdSet
	46, // 49: management.GetTargetsResponse.Target.storage_pool:type_name -> beegfs.EntityIdSet
	46, // 50: management.GetPoolsResponse.StoragePool.id:type_name -> beegfs.EntityIdSet
	46, // 51: management.GetPoolsResponse.StoragePool.targets:type_name -> beegfs.EntityIdSet
	46, // 52: management.GetPoolsResponse.StoragePool.buddy_groups:type_name -> beegfs.EntityIdSet
	46, // 53: management.GetBuddyGroupsResponse.BuddyGroup.id:type_name -> beegfs.EntityIdSet
	49, // 54: management.GetBuddyGroupsResponse.BuddyGroup.node_type:type_name -> beegfs.NodeType
	46, // 55: management.GetBuddyGroupsResponse.BuddyGroup.primary_target:type_name -> beegfs.EntityIdSet
	46, // 56: management.GetBuddyGroupsResponse.BuddyGroup.secondary_target:type_name -> beegfs.EntityIdSet
	48, // 57: management.GetBuddyGroupsResponse.BuddyGroup.primary_consistency_state:type_name -> beegfs.ConsistencyState
	48, // 58: management.GetBuddyGroupsResponse.BuddyGroup.secondary_consistency_state:type_name -> beegfs.ConsistencyState
	46, // 59: management.GetBuddyGroupsResponse.BuddyGroup.storage_pool:type_name -> beegfs.EntityIdSet
	0,  // 60: management.Management.SetAlias:input_type -> management.SetAliasRequest
	2,  // 61: management.Management.GetNodes:input_type -> management.GetNodesRequest
	4,  // 62: management.Management.DeleteNode:input_type -> management.DeleteNodeRequest
	6,  // 63: management.Management.GetTargets:input_type -> management.GetTargetsRequest
	8,  // 64: management.Management.DeleteTarget:input_type -> management.DeleteTargetRequest
	10, // 65: management.Management.SetTargetState:input_type -> management.SetTargetStateRequest
	12, // 66: management.Management.GetPools:input_type -> management.GetPoolsRequest
	14, // 67: management.Management.CreatePool:input_type -> management.CreatePoolRequest
	16, // 68: management.Management.AssignPool:input_type -> management.AssignPoolRequest
	18, // 69: management.Management.DeletePool:input_type -> management.DeletePoolRequest
	20, // 70: management.Management.GetBuddyGroups:input_type -> management.GetBuddyGroupsRequest
	22, // 71: management.Management.CreateBuddyGroup:input_type -> management.CreateBuddyGroupRequest
	24, // 72: management.Management.DeleteBuddyGroup:input_type -> management.DeleteBuddyGroupRequest
	26, // 73: management.Management.MirrorRootInode:input_type -> management.MirrorRootInodeRequest
	28, // 74: management.Management.StartResync:input_type -> management.StartResyncRequest
	31, // 75: management.Management.SetDefaultQuotaLimits:input_type -> management.SetDefaultQuotaLimitsRequest
	33, // 76: management.Management.SetQuotaLimits:input_type -> management.SetQuotaLimitsRequest
	35, // 77: management.Management.GetQuotaLimits:input_type -> management.GetQuotaLimitsRequest
	37, // 78: management.Management.GetQuotaUsage:input_type -> management.GetQuotaUsageRequest
	39, // 79: management.Management.GetLicense:input_type -> management.GetLicenseRequest
	1,  // 80: management.Management.SetAlias:output_type -> management.SetAliasResponse
	3,  // 81: management.Management.GetNodes:output_type -> management.GetNodesResponse
	5,  // 82: management.Management.DeleteNode:output_type -> management.DeleteNodeResponse
	7,  // 83: management.Management.GetTargets:output_type -> management.GetTargetsResponse
	9,  // 84: management.Management.DeleteTarget:output_type -> management.DeleteTargetResponse
	11, // 85: management.Management.SetTargetState:output_type -> management.SetTargetStateResponse
	13, // 86: management.Management.GetPools:output_type -> management.GetPoolsResponse
	15, // 87: management.Management.CreatePool:output_type -> management.CreatePoolResponse
	17, // 88: management.Management.AssignPool:output_type -> management.AssignPoolResponse
	19, // 89: management.Management.DeletePool:output_type -> management.DeletePoolResponse
	21, // 90: management.Management.GetBuddyGroups:output_type -> management.GetBuddyGroupsResponse
	23, // 91: management.Management.CreateBuddyGroup:output_type -> management.CreateBuddyGroupResponse
	25, // 92: management.Management.DeleteBuddyGroup:output_type -> management.DeleteBuddyGroupResponse
	27, // 93: management.Management.MirrorRootInode:output_type -> management.MirrorRootInodeResponse
	29, // 94: management.Management.StartResync:output_type -> management.StartResyncResponse
	32, // 95: management.Management.SetDefaultQuotaLimits:output_type -> management.SetDefaultQuotaLimitsResponse
	34, // 96: management.Management.SetQuotaLimits:output_type -> management.SetQuotaLimitsResponse
	36, // 97: management.Management.GetQuotaLimits:output_type -> management.GetQuotaLimitsResponse
	38, // 98: management.Management.GetQuotaUsage:output_type -> management.GetQuotaUsageResponse
	40, // 99: management.Management.GetLicense:output_type -> management.GetLicenseResponse
	80, // [80:100] is the sub-list for method output_type
	60, // [60:80] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_management_proto_init() }
func file_management_proto_init() {
	if File_management_proto != nil {
		return
	}
	file_management_proto_msgTypes[3].OneofWrappers = []any{}
	file_management_proto_msgTypes[4].OneofWrappers = []any{}
	file_management_proto_msgTypes[5].OneofWrappers = []any{}
	file_management_proto_msgTypes[8].OneofWrappers = []any{}
	file_management_proto_msgTypes[9].OneofWrappers = []any{}
	file_management_proto_msgTypes[10].OneofWrappers = []any{}
	file_management_proto_msgTypes[14].OneofWrappers = []any{}
	file_management_proto_msgTypes[15].OneofWrappers = []any{}
	file_management_proto_msgTypes[16].OneofWrappers = []any{}
	file_management_proto_msgTypes[17].OneofWrappers = []any{}
	file_management_proto_msgTypes[18].OneofWrappers = []any{}
	file_management_proto_msgTypes[19].OneofWrappers = []any{}
	file_management_proto_msgTypes[22].OneofWrappers = []any{}
	file_management_proto_msgTypes[23].OneofWrappers = []any{}
	file_management_proto_msgTypes[24].OneofWrappers = []any{}
	file_management_proto_msgTypes[25].OneofWrappers = []any{}
	file_management_proto_msgTypes[28].OneofWrappers = []any{}
	file_management_proto_msgTypes[30].OneofWrappers = []any{}
	file_management_proto_msgTypes[31].OneofWrappers = []any{}
	file_management_proto_msgTypes[35].OneofWrappers = []any{}
	file_management_proto_msgTypes[36].OneofWrappers = []any{}
	file_management_proto_msgTypes[37].OneofWrappers = []any{}
	file_management_proto_msgTypes[38].OneofWrappers = []any{}
	file_management_proto_msgTypes[39].OneofWrappers = []any{}
	file_management_proto_msgTypes[40].OneofWrappers = []any{}
	file_management_proto_msgTypes[43].OneofWrappers = []any{}
	file_management_proto_msgTypes[44].OneofWrappers = []any{}
	file_management_proto_msgTypes[45].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_management_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_management_proto_goTypes,
		DependencyIndexes: file_management_proto_depIdxs,
		MessageInfos:      file_management_proto_msgTypes,
	}.Build()
	File_management_proto = out.File
	file_management_proto_rawDesc = nil
	file_management_proto_goTypes = nil
	file_management_proto_depIdxs = nil
}
