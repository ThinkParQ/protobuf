// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.2
// source: management.proto

package management

import (
	beegfs "github.com/thinkparq/protobuf/go/beegfs"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetAliasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier to set the alias for
	EntityId *beegfs.EntityIdSet `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// The entity type to set the alias for
	EntityType beegfs.EntityType `protobuf:"varint,2,opt,name=entity_type,json=entityType,proto3,enum=beegfs.EntityType" json:"entity_type,omitempty"`
	// The new alias
	NewAlias string `protobuf:"bytes,3,opt,name=new_alias,json=newAlias,proto3" json:"new_alias,omitempty"`
}

func (x *SetAliasRequest) Reset() {
	*x = SetAliasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAliasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAliasRequest) ProtoMessage() {}

func (x *SetAliasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAliasRequest.ProtoReflect.Descriptor instead.
func (*SetAliasRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{0}
}

func (x *SetAliasRequest) GetEntityId() *beegfs.EntityIdSet {
	if x != nil {
		return x.EntityId
	}
	return nil
}

func (x *SetAliasRequest) GetEntityType() beegfs.EntityType {
	if x != nil {
		return x.EntityType
	}
	return beegfs.EntityType(0)
}

func (x *SetAliasRequest) GetNewAlias() string {
	if x != nil {
		return x.NewAlias
	}
	return ""
}

type SetAliasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetAliasResponse) Reset() {
	*x = SetAliasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAliasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAliasResponse) ProtoMessage() {}

func (x *SetAliasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAliasResponse.ProtoReflect.Descriptor instead.
func (*SetAliasResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{1}
}

type GetNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query the nic list for each node and include it in the response
	IncludeNics bool `protobuf:"varint,1,opt,name=include_nics,json=includeNics,proto3" json:"include_nics,omitempty"`
}

func (x *GetNodesRequest) Reset() {
	*x = GetNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesRequest) ProtoMessage() {}

func (x *GetNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesRequest.ProtoReflect.Descriptor instead.
func (*GetNodesRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{2}
}

func (x *GetNodesRequest) GetIncludeNics() bool {
	if x != nil {
		return x.IncludeNics
	}
	return false
}

type GetNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of nodes
	Nodes []*GetNodesResponse_Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// The node containing the root inode. Will be missing on a fresh system without any meta
	// targets/nodes.
	MetaRootNode *beegfs.EntityIdSet `protobuf:"bytes,2,opt,name=meta_root_node,json=metaRootNode,proto3,oneof" json:"meta_root_node,omitempty"`
}

func (x *GetNodesResponse) Reset() {
	*x = GetNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesResponse) ProtoMessage() {}

func (x *GetNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesResponse.ProtoReflect.Descriptor instead.
func (*GetNodesResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{3}
}

func (x *GetNodesResponse) GetNodes() []*GetNodesResponse_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *GetNodesResponse) GetMetaRootNode() *beegfs.EntityIdSet {
	if x != nil {
		return x.MetaRootNode
	}
	return nil
}

type DeleteNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node to delete.
	Node *beegfs.EntityIdSet `protobuf:"bytes,1,opt,name=node,proto3,oneof" json:"node,omitempty"`
	// If set to false, check if delete is possible but don't execute it
	Execute *bool `protobuf:"varint,2,opt,name=execute,proto3,oneof" json:"execute,omitempty"`
}

func (x *DeleteNodeRequest) Reset() {
	*x = DeleteNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeRequest) ProtoMessage() {}

func (x *DeleteNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteNodeRequest) GetNode() *beegfs.EntityIdSet {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *DeleteNodeRequest) GetExecute() bool {
	if x != nil && x.Execute != nil {
		return *x.Execute
	}
	return false
}

type DeleteNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ids of the deleted node
	Node *beegfs.EntityIdSet `protobuf:"bytes,1,opt,name=node,proto3,oneof" json:"node,omitempty"`
}

func (x *DeleteNodeResponse) Reset() {
	*x = DeleteNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeResponse) ProtoMessage() {}

func (x *DeleteNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeResponse.ProtoReflect.Descriptor instead.
func (*DeleteNodeResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteNodeResponse) GetNode() *beegfs.EntityIdSet {
	if x != nil {
		return x.Node
	}
	return nil
}

type GetTargetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTargetsRequest) Reset() {
	*x = GetTargetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTargetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetsRequest) ProtoMessage() {}

func (x *GetTargetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTargetsRequest.ProtoReflect.Descriptor instead.
func (*GetTargetsRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{6}
}

type GetTargetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of targets
	Targets []*GetTargetsResponse_Target `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *GetTargetsResponse) Reset() {
	*x = GetTargetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTargetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetsResponse) ProtoMessage() {}

func (x *GetTargetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTargetsResponse.ProtoReflect.Descriptor instead.
func (*GetTargetsResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{7}
}

func (x *GetTargetsResponse) GetTargets() []*GetTargetsResponse_Target {
	if x != nil {
		return x.Targets
	}
	return nil
}

type DeleteTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The target to delete
	Target *beegfs.EntityIdSet `protobuf:"bytes,1,opt,name=target,proto3,oneof" json:"target,omitempty"`
	// If set to false, check if delete is possible but don't execute it
	Execute *bool `protobuf:"varint,2,opt,name=execute,proto3,oneof" json:"execute,omitempty"`
}

func (x *DeleteTargetRequest) Reset() {
	*x = DeleteTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTargetRequest) ProtoMessage() {}

func (x *DeleteTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTargetRequest.ProtoReflect.Descriptor instead.
func (*DeleteTargetRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteTargetRequest) GetTarget() *beegfs.EntityIdSet {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *DeleteTargetRequest) GetExecute() bool {
	if x != nil && x.Execute != nil {
		return *x.Execute
	}
	return false
}

type DeleteTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ids of the deleted target
	Target *beegfs.EntityIdSet `protobuf:"bytes,1,opt,name=target,proto3,oneof" json:"target,omitempty"`
}

func (x *DeleteTargetResponse) Reset() {
	*x = DeleteTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTargetResponse) ProtoMessage() {}

func (x *DeleteTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTargetResponse.ProtoReflect.Descriptor instead.
func (*DeleteTargetResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteTargetResponse) GetTarget() *beegfs.EntityIdSet {
	if x != nil {
		return x.Target
	}
	return nil
}

type GetPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPoolsRequest) Reset() {
	*x = GetPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoolsRequest) ProtoMessage() {}

func (x *GetPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoolsRequest.ProtoReflect.Descriptor instead.
func (*GetPoolsRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{10}
}

type GetPoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of storage pools
	Pools []*GetPoolsResponse_StoragePool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *GetPoolsResponse) Reset() {
	*x = GetPoolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoolsResponse) ProtoMessage() {}

func (x *GetPoolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoolsResponse.ProtoReflect.Descriptor instead.
func (*GetPoolsResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{11}
}

func (x *GetPoolsResponse) GetPools() []*GetPoolsResponse_StoragePool {
	if x != nil {
		return x.Pools
	}
	return nil
}

type CreatePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node type of the new pool (currently, only storage is allowed)
	NodeType *beegfs.NodeType `protobuf:"varint,1,opt,name=node_type,json=nodeType,proto3,enum=beegfs.NodeType,oneof" json:"node_type,omitempty"`
	// The numeric id of the new pool. Chosen automatically if omitted.
	NumId *uint32 `protobuf:"varint,2,opt,name=num_id,json=numId,proto3,oneof" json:"num_id,omitempty"`
	// The alias of the new pool
	Alias *string `protobuf:"bytes,3,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// Targets assigned to the new pool
	Targets []*beegfs.EntityIdSet `protobuf:"bytes,4,rep,name=targets,proto3" json:"targets,omitempty"`
	// Buddy groups assigned to the new pool
	BuddyGroups []*beegfs.EntityIdSet `protobuf:"bytes,5,rep,name=buddy_groups,json=buddyGroups,proto3" json:"buddy_groups,omitempty"`
}

func (x *CreatePoolRequest) Reset() {
	*x = CreatePoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePoolRequest) ProtoMessage() {}

func (x *CreatePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePoolRequest.ProtoReflect.Descriptor instead.
func (*CreatePoolRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{12}
}

func (x *CreatePoolRequest) GetNodeType() beegfs.NodeType {
	if x != nil && x.NodeType != nil {
		return *x.NodeType
	}
	return beegfs.NodeType(0)
}

func (x *CreatePoolRequest) GetNumId() uint32 {
	if x != nil && x.NumId != nil {
		return *x.NumId
	}
	return 0
}

func (x *CreatePoolRequest) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *CreatePoolRequest) GetTargets() []*beegfs.EntityIdSet {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CreatePoolRequest) GetBuddyGroups() []*beegfs.EntityIdSet {
	if x != nil {
		return x.BuddyGroups
	}
	return nil
}

type CreatePoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ids of the new pool
	Pool *beegfs.EntityIdSet `protobuf:"bytes,1,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
}

func (x *CreatePoolResponse) Reset() {
	*x = CreatePoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePoolResponse) ProtoMessage() {}

func (x *CreatePoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePoolResponse.ProtoReflect.Descriptor instead.
func (*CreatePoolResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{13}
}

func (x *CreatePoolResponse) GetPool() *beegfs.EntityIdSet {
	if x != nil {
		return x.Pool
	}
	return nil
}

type AssignPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pool to assign to
	Pool *beegfs.EntityIdSet `protobuf:"bytes,1,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
	// Targets to assign
	Targets []*beegfs.EntityIdSet `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	// Buddy groups to assign
	BuddyGroups []*beegfs.EntityIdSet `protobuf:"bytes,3,rep,name=buddy_groups,json=buddyGroups,proto3" json:"buddy_groups,omitempty"`
}

func (x *AssignPoolRequest) Reset() {
	*x = AssignPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPoolRequest) ProtoMessage() {}

func (x *AssignPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPoolRequest.ProtoReflect.Descriptor instead.
func (*AssignPoolRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{14}
}

func (x *AssignPoolRequest) GetPool() *beegfs.EntityIdSet {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *AssignPoolRequest) GetTargets() []*beegfs.EntityIdSet {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *AssignPoolRequest) GetBuddyGroups() []*beegfs.EntityIdSet {
	if x != nil {
		return x.BuddyGroups
	}
	return nil
}

type AssignPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ids of the pool assigned to
	Pool *beegfs.EntityIdSet `protobuf:"bytes,1,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
}

func (x *AssignPoolResponse) Reset() {
	*x = AssignPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPoolResponse) ProtoMessage() {}

func (x *AssignPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPoolResponse.ProtoReflect.Descriptor instead.
func (*AssignPoolResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{15}
}

func (x *AssignPoolResponse) GetPool() *beegfs.EntityIdSet {
	if x != nil {
		return x.Pool
	}
	return nil
}

type DeletePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pool to delete
	Pool *beegfs.EntityIdSet `protobuf:"bytes,1,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
	// If set to false, check if delete is possible but don't execute it
	Execute *bool `protobuf:"varint,2,opt,name=execute,proto3,oneof" json:"execute,omitempty"`
}

func (x *DeletePoolRequest) Reset() {
	*x = DeletePoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePoolRequest) ProtoMessage() {}

func (x *DeletePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePoolRequest.ProtoReflect.Descriptor instead.
func (*DeletePoolRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{16}
}

func (x *DeletePoolRequest) GetPool() *beegfs.EntityIdSet {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *DeletePoolRequest) GetExecute() bool {
	if x != nil && x.Execute != nil {
		return *x.Execute
	}
	return false
}

type DeletePoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ids of the deleted pool
	Pool *beegfs.EntityIdSet `protobuf:"bytes,1,opt,name=pool,proto3,oneof" json:"pool,omitempty"`
}

func (x *DeletePoolResponse) Reset() {
	*x = DeletePoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePoolResponse) ProtoMessage() {}

func (x *DeletePoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePoolResponse.ProtoReflect.Descriptor instead.
func (*DeletePoolResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{17}
}

func (x *DeletePoolResponse) GetPool() *beegfs.EntityIdSet {
	if x != nil {
		return x.Pool
	}
	return nil
}

type GetBuddyGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBuddyGroupsRequest) Reset() {
	*x = GetBuddyGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuddyGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuddyGroupsRequest) ProtoMessage() {}

func (x *GetBuddyGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuddyGroupsRequest.ProtoReflect.Descriptor instead.
func (*GetBuddyGroupsRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{18}
}

type GetBuddyGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of buddy groups
	BuddyGroups []*GetBuddyGroupsResponse_BuddyGroup `protobuf:"bytes,1,rep,name=buddy_groups,json=buddyGroups,proto3" json:"buddy_groups,omitempty"`
}

func (x *GetBuddyGroupsResponse) Reset() {
	*x = GetBuddyGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuddyGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuddyGroupsResponse) ProtoMessage() {}

func (x *GetBuddyGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuddyGroupsResponse.ProtoReflect.Descriptor instead.
func (*GetBuddyGroupsResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{19}
}

func (x *GetBuddyGroupsResponse) GetBuddyGroups() []*GetBuddyGroupsResponse_BuddyGroup {
	if x != nil {
		return x.BuddyGroups
	}
	return nil
}

type CreateBuddyGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node type of the new buddy group
	NodeType *beegfs.NodeType `protobuf:"varint,1,opt,name=node_type,json=nodeType,proto3,enum=beegfs.NodeType,oneof" json:"node_type,omitempty"`
	// The numeric id of the new buddy group. Chosen automatically if omitted.
	NumId *uint32 `protobuf:"varint,2,opt,name=num_id,json=numId,proto3,oneof" json:"num_id,omitempty"`
	// The alias of the new buddy group
	Alias *string `protobuf:"bytes,3,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// The primary target of the new buddy group
	PrimaryTarget *beegfs.EntityIdSet `protobuf:"bytes,4,opt,name=primary_target,json=primaryTarget,proto3,oneof" json:"primary_target,omitempty"`
	// The secondary target of the new buddy group
	SecondaryTarget *beegfs.EntityIdSet `protobuf:"bytes,5,opt,name=secondary_target,json=secondaryTarget,proto3,oneof" json:"secondary_target,omitempty"`
}

func (x *CreateBuddyGroupRequest) Reset() {
	*x = CreateBuddyGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBuddyGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBuddyGroupRequest) ProtoMessage() {}

func (x *CreateBuddyGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBuddyGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateBuddyGroupRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{20}
}

func (x *CreateBuddyGroupRequest) GetNodeType() beegfs.NodeType {
	if x != nil && x.NodeType != nil {
		return *x.NodeType
	}
	return beegfs.NodeType(0)
}

func (x *CreateBuddyGroupRequest) GetNumId() uint32 {
	if x != nil && x.NumId != nil {
		return *x.NumId
	}
	return 0
}

func (x *CreateBuddyGroupRequest) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *CreateBuddyGroupRequest) GetPrimaryTarget() *beegfs.EntityIdSet {
	if x != nil {
		return x.PrimaryTarget
	}
	return nil
}

func (x *CreateBuddyGroupRequest) GetSecondaryTarget() *beegfs.EntityIdSet {
	if x != nil {
		return x.SecondaryTarget
	}
	return nil
}

type CreateBuddyGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ids of the new buddy group
	Group *beegfs.EntityIdSet `protobuf:"bytes,1,opt,name=group,proto3,oneof" json:"group,omitempty"`
}

func (x *CreateBuddyGroupResponse) Reset() {
	*x = CreateBuddyGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBuddyGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBuddyGroupResponse) ProtoMessage() {}

func (x *CreateBuddyGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBuddyGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateBuddyGroupResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{21}
}

func (x *CreateBuddyGroupResponse) GetGroup() *beegfs.EntityIdSet {
	if x != nil {
		return x.Group
	}
	return nil
}

type DeleteBuddyGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The buddy group to delete
	Group *beegfs.EntityIdSet `protobuf:"bytes,1,opt,name=group,proto3,oneof" json:"group,omitempty"`
	// If set to false, check if delete is possible but don't execute it
	Execute *bool `protobuf:"varint,2,opt,name=execute,proto3,oneof" json:"execute,omitempty"`
}

func (x *DeleteBuddyGroupRequest) Reset() {
	*x = DeleteBuddyGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBuddyGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBuddyGroupRequest) ProtoMessage() {}

func (x *DeleteBuddyGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBuddyGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteBuddyGroupRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteBuddyGroupRequest) GetGroup() *beegfs.EntityIdSet {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *DeleteBuddyGroupRequest) GetExecute() bool {
	if x != nil && x.Execute != nil {
		return *x.Execute
	}
	return false
}

type DeleteBuddyGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ids of the deleted buddy group
	Group *beegfs.EntityIdSet `protobuf:"bytes,1,opt,name=group,proto3,oneof" json:"group,omitempty"`
}

func (x *DeleteBuddyGroupResponse) Reset() {
	*x = DeleteBuddyGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBuddyGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBuddyGroupResponse) ProtoMessage() {}

func (x *DeleteBuddyGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBuddyGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteBuddyGroupResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteBuddyGroupResponse) GetGroup() *beegfs.EntityIdSet {
	if x != nil {
		return x.Group
	}
	return nil
}

type MirrorRootInodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MirrorRootInodeRequest) Reset() {
	*x = MirrorRootInodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirrorRootInodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirrorRootInodeRequest) ProtoMessage() {}

func (x *MirrorRootInodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirrorRootInodeRequest.ProtoReflect.Descriptor instead.
func (*MirrorRootInodeRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{24}
}

type MirrorRootInodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MirrorRootInodeResponse) Reset() {
	*x = MirrorRootInodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirrorRootInodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirrorRootInodeResponse) ProtoMessage() {}

func (x *MirrorRootInodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirrorRootInodeResponse.ProtoReflect.Descriptor instead.
func (*MirrorRootInodeResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{25}
}

// BeeGFS node related data
type GetNodesResponse_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node identifiers
	Id       *beegfs.EntityIdSet `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeType beegfs.NodeType     `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=beegfs.NodeType" json:"node_type,omitempty"`
	// The nodes TCP and UDP port.
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// The nodes Nics
	Nics []*GetNodesResponse_Node_Nic `protobuf:"bytes,4,rep,name=nics,proto3" json:"nics,omitempty"`
}

func (x *GetNodesResponse_Node) Reset() {
	*x = GetNodesResponse_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesResponse_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesResponse_Node) ProtoMessage() {}

func (x *GetNodesResponse_Node) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesResponse_Node.ProtoReflect.Descriptor instead.
func (*GetNodesResponse_Node) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetNodesResponse_Node) GetId() *beegfs.EntityIdSet {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetNodesResponse_Node) GetNodeType() beegfs.NodeType {
	if x != nil {
		return x.NodeType
	}
	return beegfs.NodeType(0)
}

func (x *GetNodesResponse_Node) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GetNodesResponse_Node) GetNics() []*GetNodesResponse_Node_Nic {
	if x != nil {
		return x.Nics
	}
	return nil
}

// BeeGFS nic related data
type GetNodesResponse_Node_Nic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nics IPv4 address in the form aaa.bbb.ccc.ddd:port
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// The nics name (note that this is NOT an alias as a Nic is not considered an entity)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The nics type
	NicType beegfs.NicType `protobuf:"varint,3,opt,name=nic_type,json=nicType,proto3,enum=beegfs.NicType" json:"nic_type,omitempty"`
}

func (x *GetNodesResponse_Node_Nic) Reset() {
	*x = GetNodesResponse_Node_Nic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesResponse_Node_Nic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesResponse_Node_Nic) ProtoMessage() {}

func (x *GetNodesResponse_Node_Nic) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesResponse_Node_Nic.ProtoReflect.Descriptor instead.
func (*GetNodesResponse_Node_Nic) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *GetNodesResponse_Node_Nic) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *GetNodesResponse_Node_Nic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetNodesResponse_Node_Nic) GetNicType() beegfs.NicType {
	if x != nil {
		return x.NicType
	}
	return beegfs.NicType(0)
}

// A BeeGFS target
type GetTargetsResponse_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The targets identifiers
	Id *beegfs.EntityIdSet `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Node type the target is on
	NodeType beegfs.NodeType `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=beegfs.NodeType" json:"node_type,omitempty"`
	// The targets reachability state as reported by management
	ReachabilityState beegfs.ReachabilityState `protobuf:"varint,3,opt,name=reachability_state,json=reachabilityState,proto3,enum=beegfs.ReachabilityState" json:"reachability_state,omitempty"`
	// The targets reachability state as reported by management
	ConsistencyState beegfs.ConsistencyState `protobuf:"varint,4,opt,name=consistency_state,json=consistencyState,proto3,enum=beegfs.ConsistencyState" json:"consistency_state,omitempty"`
	// Duration since last contact to the target. Currently slightly inaccurate as it updates
	// not on each received message.
	LastContactS *uint64 `protobuf:"varint,5,opt,name=last_contact_s,json=lastContactS,proto3,oneof" json:"last_contact_s,omitempty"`
	// Total space on the target as reported by management
	TotalSpaceBytes *uint64 `protobuf:"varint,6,opt,name=total_space_bytes,json=totalSpaceBytes,proto3,oneof" json:"total_space_bytes,omitempty"`
	// Free space on the target as reported by management
	FreeSpaceBytes *uint64 `protobuf:"varint,7,opt,name=free_space_bytes,json=freeSpaceBytes,proto3,oneof" json:"free_space_bytes,omitempty"`
	// Total inodes on the target as reported by management
	TotalInodes *uint64 `protobuf:"varint,8,opt,name=total_inodes,json=totalInodes,proto3,oneof" json:"total_inodes,omitempty"`
	// Free inodes on the target as reported by management
	FreeInodes *uint64 `protobuf:"varint,9,opt,name=free_inodes,json=freeInodes,proto3,oneof" json:"free_inodes,omitempty"`
	// The targets capacity pool as reported by the management
	CapPool beegfs.CapacityPool `protobuf:"varint,10,opt,name=cap_pool,json=capPool,proto3,enum=beegfs.CapacityPool" json:"cap_pool,omitempty"`
	// The targets owner node identifiers
	Node *beegfs.EntityIdSet `protobuf:"bytes,11,opt,name=node,proto3" json:"node,omitempty"`
	// The targets storage pool identifiers. Explicitly optional since meta targets don't have a storage pool.
	StoragePool *beegfs.EntityIdSet `protobuf:"bytes,12,opt,name=storage_pool,json=storagePool,proto3,oneof" json:"storage_pool,omitempty"`
}

func (x *GetTargetsResponse_Target) Reset() {
	*x = GetTargetsResponse_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTargetsResponse_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetsResponse_Target) ProtoMessage() {}

func (x *GetTargetsResponse_Target) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTargetsResponse_Target.ProtoReflect.Descriptor instead.
func (*GetTargetsResponse_Target) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetTargetsResponse_Target) GetId() *beegfs.EntityIdSet {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetTargetsResponse_Target) GetNodeType() beegfs.NodeType {
	if x != nil {
		return x.NodeType
	}
	return beegfs.NodeType(0)
}

func (x *GetTargetsResponse_Target) GetReachabilityState() beegfs.ReachabilityState {
	if x != nil {
		return x.ReachabilityState
	}
	return beegfs.ReachabilityState(0)
}

func (x *GetTargetsResponse_Target) GetConsistencyState() beegfs.ConsistencyState {
	if x != nil {
		return x.ConsistencyState
	}
	return beegfs.ConsistencyState(0)
}

func (x *GetTargetsResponse_Target) GetLastContactS() uint64 {
	if x != nil && x.LastContactS != nil {
		return *x.LastContactS
	}
	return 0
}

func (x *GetTargetsResponse_Target) GetTotalSpaceBytes() uint64 {
	if x != nil && x.TotalSpaceBytes != nil {
		return *x.TotalSpaceBytes
	}
	return 0
}

func (x *GetTargetsResponse_Target) GetFreeSpaceBytes() uint64 {
	if x != nil && x.FreeSpaceBytes != nil {
		return *x.FreeSpaceBytes
	}
	return 0
}

func (x *GetTargetsResponse_Target) GetTotalInodes() uint64 {
	if x != nil && x.TotalInodes != nil {
		return *x.TotalInodes
	}
	return 0
}

func (x *GetTargetsResponse_Target) GetFreeInodes() uint64 {
	if x != nil && x.FreeInodes != nil {
		return *x.FreeInodes
	}
	return 0
}

func (x *GetTargetsResponse_Target) GetCapPool() beegfs.CapacityPool {
	if x != nil {
		return x.CapPool
	}
	return beegfs.CapacityPool(0)
}

func (x *GetTargetsResponse_Target) GetNode() *beegfs.EntityIdSet {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *GetTargetsResponse_Target) GetStoragePool() *beegfs.EntityIdSet {
	if x != nil {
		return x.StoragePool
	}
	return nil
}

type GetPoolsResponse_StoragePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The storage pools identifiers
	Id *beegfs.EntityIdSet `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The storage pools assigned targets identifiers
	Targets []*beegfs.EntityIdSet `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	// The storage pools assigned buddy groups identifiers
	BuddyGroups []*beegfs.EntityIdSet `protobuf:"bytes,3,rep,name=buddy_groups,json=buddyGroups,proto3" json:"buddy_groups,omitempty"`
}

func (x *GetPoolsResponse_StoragePool) Reset() {
	*x = GetPoolsResponse_StoragePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPoolsResponse_StoragePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoolsResponse_StoragePool) ProtoMessage() {}

func (x *GetPoolsResponse_StoragePool) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoolsResponse_StoragePool.ProtoReflect.Descriptor instead.
func (*GetPoolsResponse_StoragePool) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{11, 0}
}

func (x *GetPoolsResponse_StoragePool) GetId() *beegfs.EntityIdSet {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetPoolsResponse_StoragePool) GetTargets() []*beegfs.EntityIdSet {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *GetPoolsResponse_StoragePool) GetBuddyGroups() []*beegfs.EntityIdSet {
	if x != nil {
		return x.BuddyGroups
	}
	return nil
}

type GetBuddyGroupsResponse_BuddyGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The buddy groups identifiers
	Id *beegfs.EntityIdSet `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Node type the buddy group belongs to
	NodeType beegfs.NodeType `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=beegfs.NodeType" json:"node_type,omitempty"`
	// The buddy groups current primary target identifiers
	PrimaryTarget *beegfs.EntityIdSet `protobuf:"bytes,3,opt,name=primary_target,json=primaryTarget,proto3" json:"primary_target,omitempty"`
	// The buddy groups current secondary target identifiers
	SecondaryTarget *beegfs.EntityIdSet `protobuf:"bytes,4,opt,name=secondary_target,json=secondaryTarget,proto3" json:"secondary_target,omitempty"`
	// The buddy groups primary target consistency state
	PrimaryConsistencyState beegfs.ConsistencyState `protobuf:"varint,5,opt,name=primary_consistency_state,json=primaryConsistencyState,proto3,enum=beegfs.ConsistencyState" json:"primary_consistency_state,omitempty"`
	// The buddy groups secondary target consistency state
	SecondaryConsistencyState beegfs.ConsistencyState `protobuf:"varint,6,opt,name=secondary_consistency_state,json=secondaryConsistencyState,proto3,enum=beegfs.ConsistencyState" json:"secondary_consistency_state,omitempty"`
	// The buddy groups storage pool. Explicitly optional since meta pools dont' have a storage
	// pool.
	StoragePool *beegfs.EntityIdSet `protobuf:"bytes,7,opt,name=storage_pool,json=storagePool,proto3,oneof" json:"storage_pool,omitempty"`
}

func (x *GetBuddyGroupsResponse_BuddyGroup) Reset() {
	*x = GetBuddyGroupsResponse_BuddyGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuddyGroupsResponse_BuddyGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuddyGroupsResponse_BuddyGroup) ProtoMessage() {}

func (x *GetBuddyGroupsResponse_BuddyGroup) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuddyGroupsResponse_BuddyGroup.ProtoReflect.Descriptor instead.
func (*GetBuddyGroupsResponse_BuddyGroup) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{19, 0}
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetId() *beegfs.EntityIdSet {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetNodeType() beegfs.NodeType {
	if x != nil {
		return x.NodeType
	}
	return beegfs.NodeType(0)
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetPrimaryTarget() *beegfs.EntityIdSet {
	if x != nil {
		return x.PrimaryTarget
	}
	return nil
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetSecondaryTarget() *beegfs.EntityIdSet {
	if x != nil {
		return x.SecondaryTarget
	}
	return nil
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetPrimaryConsistencyState() beegfs.ConsistencyState {
	if x != nil {
		return x.PrimaryConsistencyState
	}
	return beegfs.ConsistencyState(0)
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetSecondaryConsistencyState() beegfs.ConsistencyState {
	if x != nil {
		return x.SecondaryConsistencyState
	}
	return beegfs.ConsistencyState(0)
}

func (x *GetBuddyGroupsResponse_BuddyGroup) GetStoragePool() *beegfs.EntityIdSet {
	if x != nil {
		return x.StoragePool
	}
	return nil
}

var File_management_proto protoreflect.FileDescriptor

var file_management_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0c,
	0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x01, 0x0a,
	0x0f, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x69, 0x63, 0x73, 0x22, 0xa5,
	0x03, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0e,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65, 0x74,
	0x61, 0x52, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x84, 0x02, 0x0a,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a,
	0x04, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4e,
	0x69, 0x63, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x1a, 0x59, 0x0a, 0x03, 0x4e, 0x69, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62, 0x65, 0x65, 0x67,
	0x66, 0x73, 0x2e, 0x4e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x75, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67,
	0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x22, 0x4b, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xa5, 0x06, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x1a, 0xcd, 0x05, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x53, 0x65, 0x74, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x65,
	0x67, 0x66, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x45, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x65,
	0x65, 0x67, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52,
	0x0e, 0x66, 0x72, 0x65, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x72,
	0x65, 0x65, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x04, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x63, 0x61, 0x70, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x53, 0x65, 0x74, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x7d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x22, 0x53, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xee,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x1a, 0x99, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x53, 0x65, 0x74, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67,
	0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x62, 0x75, 0x64, 0x64, 0x79,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53,
	0x65, 0x74, 0x52, 0x0b, 0x62, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22,
	0x88, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66,
	0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x05, 0x6e, 0x75, 0x6d,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12,
	0x36, 0x0a, 0x0c, 0x62, 0x75, 0x64, 0x64, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x62, 0x75, 0x64, 0x64,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x64,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x4b, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0xb1, 0x01, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65,
	0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62,
	0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65,
	0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x62, 0x75,
	0x64, 0x64, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x62, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x4b, 0x0a, 0x12, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x75, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65,
	0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x22,
	0x4b, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x17, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc7, 0x04, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x75, 0x64,
	0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x0c, 0x62, 0x75, 0x64, 0x64, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x64, 0x64, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x62, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x1a, 0xda, 0x03, 0x0a, 0x0a, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53,
	0x65, 0x74, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x65, 0x67,
	0x66, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53,
	0x65, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65,
	0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74,
	0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x54, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x17,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x1b, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62,
	0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x22,
	0xd5, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x01, 0x52, 0x05, 0x6e, 0x75, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x53, 0x65, 0x74, 0x48, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x04, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x54, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x7e, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x22, 0x54, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66,
	0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x18, 0x0a, 0x16, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x6f, 0x6f,
	0x74, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19, 0x0a,
	0x17, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa8, 0x08, 0x0a, 0x0a, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65,
	0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x1f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x1b,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x6f,
	0x6f, 0x74, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x70, 0x61, 0x72, 0x71, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_management_proto_rawDescOnce sync.Once
	file_management_proto_rawDescData = file_management_proto_rawDesc
)

func file_management_proto_rawDescGZIP() []byte {
	file_management_proto_rawDescOnce.Do(func() {
		file_management_proto_rawDescData = protoimpl.X.CompressGZIP(file_management_proto_rawDescData)
	})
	return file_management_proto_rawDescData
}

var file_management_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_management_proto_goTypes = []any{
	(*SetAliasRequest)(nil),                   // 0: management.SetAliasRequest
	(*SetAliasResponse)(nil),                  // 1: management.SetAliasResponse
	(*GetNodesRequest)(nil),                   // 2: management.GetNodesRequest
	(*GetNodesResponse)(nil),                  // 3: management.GetNodesResponse
	(*DeleteNodeRequest)(nil),                 // 4: management.DeleteNodeRequest
	(*DeleteNodeResponse)(nil),                // 5: management.DeleteNodeResponse
	(*GetTargetsRequest)(nil),                 // 6: management.GetTargetsRequest
	(*GetTargetsResponse)(nil),                // 7: management.GetTargetsResponse
	(*DeleteTargetRequest)(nil),               // 8: management.DeleteTargetRequest
	(*DeleteTargetResponse)(nil),              // 9: management.DeleteTargetResponse
	(*GetPoolsRequest)(nil),                   // 10: management.GetPoolsRequest
	(*GetPoolsResponse)(nil),                  // 11: management.GetPoolsResponse
	(*CreatePoolRequest)(nil),                 // 12: management.CreatePoolRequest
	(*CreatePoolResponse)(nil),                // 13: management.CreatePoolResponse
	(*AssignPoolRequest)(nil),                 // 14: management.AssignPoolRequest
	(*AssignPoolResponse)(nil),                // 15: management.AssignPoolResponse
	(*DeletePoolRequest)(nil),                 // 16: management.DeletePoolRequest
	(*DeletePoolResponse)(nil),                // 17: management.DeletePoolResponse
	(*GetBuddyGroupsRequest)(nil),             // 18: management.GetBuddyGroupsRequest
	(*GetBuddyGroupsResponse)(nil),            // 19: management.GetBuddyGroupsResponse
	(*CreateBuddyGroupRequest)(nil),           // 20: management.CreateBuddyGroupRequest
	(*CreateBuddyGroupResponse)(nil),          // 21: management.CreateBuddyGroupResponse
	(*DeleteBuddyGroupRequest)(nil),           // 22: management.DeleteBuddyGroupRequest
	(*DeleteBuddyGroupResponse)(nil),          // 23: management.DeleteBuddyGroupResponse
	(*MirrorRootInodeRequest)(nil),            // 24: management.MirrorRootInodeRequest
	(*MirrorRootInodeResponse)(nil),           // 25: management.MirrorRootInodeResponse
	(*GetNodesResponse_Node)(nil),             // 26: management.GetNodesResponse.Node
	(*GetNodesResponse_Node_Nic)(nil),         // 27: management.GetNodesResponse.Node.Nic
	(*GetTargetsResponse_Target)(nil),         // 28: management.GetTargetsResponse.Target
	(*GetPoolsResponse_StoragePool)(nil),      // 29: management.GetPoolsResponse.StoragePool
	(*GetBuddyGroupsResponse_BuddyGroup)(nil), // 30: management.GetBuddyGroupsResponse.BuddyGroup
	(*beegfs.EntityIdSet)(nil),                // 31: beegfs.EntityIdSet
	(beegfs.EntityType)(0),                    // 32: beegfs.EntityType
	(beegfs.NodeType)(0),                      // 33: beegfs.NodeType
	(beegfs.NicType)(0),                       // 34: beegfs.NicType
	(beegfs.ReachabilityState)(0),             // 35: beegfs.ReachabilityState
	(beegfs.ConsistencyState)(0),              // 36: beegfs.ConsistencyState
	(beegfs.CapacityPool)(0),                  // 37: beegfs.CapacityPool
}
var file_management_proto_depIdxs = []int32{
	31, // 0: management.SetAliasRequest.entity_id:type_name -> beegfs.EntityIdSet
	32, // 1: management.SetAliasRequest.entity_type:type_name -> beegfs.EntityType
	26, // 2: management.GetNodesResponse.nodes:type_name -> management.GetNodesResponse.Node
	31, // 3: management.GetNodesResponse.meta_root_node:type_name -> beegfs.EntityIdSet
	31, // 4: management.DeleteNodeRequest.node:type_name -> beegfs.EntityIdSet
	31, // 5: management.DeleteNodeResponse.node:type_name -> beegfs.EntityIdSet
	28, // 6: management.GetTargetsResponse.targets:type_name -> management.GetTargetsResponse.Target
	31, // 7: management.DeleteTargetRequest.target:type_name -> beegfs.EntityIdSet
	31, // 8: management.DeleteTargetResponse.target:type_name -> beegfs.EntityIdSet
	29, // 9: management.GetPoolsResponse.pools:type_name -> management.GetPoolsResponse.StoragePool
	33, // 10: management.CreatePoolRequest.node_type:type_name -> beegfs.NodeType
	31, // 11: management.CreatePoolRequest.targets:type_name -> beegfs.EntityIdSet
	31, // 12: management.CreatePoolRequest.buddy_groups:type_name -> beegfs.EntityIdSet
	31, // 13: management.CreatePoolResponse.pool:type_name -> beegfs.EntityIdSet
	31, // 14: management.AssignPoolRequest.pool:type_name -> beegfs.EntityIdSet
	31, // 15: management.AssignPoolRequest.targets:type_name -> beegfs.EntityIdSet
	31, // 16: management.AssignPoolRequest.buddy_groups:type_name -> beegfs.EntityIdSet
	31, // 17: management.AssignPoolResponse.pool:type_name -> beegfs.EntityIdSet
	31, // 18: management.DeletePoolRequest.pool:type_name -> beegfs.EntityIdSet
	31, // 19: management.DeletePoolResponse.pool:type_name -> beegfs.EntityIdSet
	30, // 20: management.GetBuddyGroupsResponse.buddy_groups:type_name -> management.GetBuddyGroupsResponse.BuddyGroup
	33, // 21: management.CreateBuddyGroupRequest.node_type:type_name -> beegfs.NodeType
	31, // 22: management.CreateBuddyGroupRequest.primary_target:type_name -> beegfs.EntityIdSet
	31, // 23: management.CreateBuddyGroupRequest.secondary_target:type_name -> beegfs.EntityIdSet
	31, // 24: management.CreateBuddyGroupResponse.group:type_name -> beegfs.EntityIdSet
	31, // 25: management.DeleteBuddyGroupRequest.group:type_name -> beegfs.EntityIdSet
	31, // 26: management.DeleteBuddyGroupResponse.group:type_name -> beegfs.EntityIdSet
	31, // 27: management.GetNodesResponse.Node.id:type_name -> beegfs.EntityIdSet
	33, // 28: management.GetNodesResponse.Node.node_type:type_name -> beegfs.NodeType
	27, // 29: management.GetNodesResponse.Node.nics:type_name -> management.GetNodesResponse.Node.Nic
	34, // 30: management.GetNodesResponse.Node.Nic.nic_type:type_name -> beegfs.NicType
	31, // 31: management.GetTargetsResponse.Target.id:type_name -> beegfs.EntityIdSet
	33, // 32: management.GetTargetsResponse.Target.node_type:type_name -> beegfs.NodeType
	35, // 33: management.GetTargetsResponse.Target.reachability_state:type_name -> beegfs.ReachabilityState
	36, // 34: management.GetTargetsResponse.Target.consistency_state:type_name -> beegfs.ConsistencyState
	37, // 35: management.GetTargetsResponse.Target.cap_pool:type_name -> beegfs.CapacityPool
	31, // 36: management.GetTargetsResponse.Target.node:type_name -> beegfs.EntityIdSet
	31, // 37: management.GetTargetsResponse.Target.storage_pool:type_name -> beegfs.EntityIdSet
	31, // 38: management.GetPoolsResponse.StoragePool.id:type_name -> beegfs.EntityIdSet
	31, // 39: management.GetPoolsResponse.StoragePool.targets:type_name -> beegfs.EntityIdSet
	31, // 40: management.GetPoolsResponse.StoragePool.buddy_groups:type_name -> beegfs.EntityIdSet
	31, // 41: management.GetBuddyGroupsResponse.BuddyGroup.id:type_name -> beegfs.EntityIdSet
	33, // 42: management.GetBuddyGroupsResponse.BuddyGroup.node_type:type_name -> beegfs.NodeType
	31, // 43: management.GetBuddyGroupsResponse.BuddyGroup.primary_target:type_name -> beegfs.EntityIdSet
	31, // 44: management.GetBuddyGroupsResponse.BuddyGroup.secondary_target:type_name -> beegfs.EntityIdSet
	36, // 45: management.GetBuddyGroupsResponse.BuddyGroup.primary_consistency_state:type_name -> beegfs.ConsistencyState
	36, // 46: management.GetBuddyGroupsResponse.BuddyGroup.secondary_consistency_state:type_name -> beegfs.ConsistencyState
	31, // 47: management.GetBuddyGroupsResponse.BuddyGroup.storage_pool:type_name -> beegfs.EntityIdSet
	0,  // 48: management.Management.SetAlias:input_type -> management.SetAliasRequest
	2,  // 49: management.Management.GetNodes:input_type -> management.GetNodesRequest
	4,  // 50: management.Management.DeleteNode:input_type -> management.DeleteNodeRequest
	6,  // 51: management.Management.GetTargets:input_type -> management.GetTargetsRequest
	8,  // 52: management.Management.DeleteTarget:input_type -> management.DeleteTargetRequest
	10, // 53: management.Management.GetPools:input_type -> management.GetPoolsRequest
	12, // 54: management.Management.CreatePool:input_type -> management.CreatePoolRequest
	14, // 55: management.Management.AssignPool:input_type -> management.AssignPoolRequest
	16, // 56: management.Management.DeletePool:input_type -> management.DeletePoolRequest
	18, // 57: management.Management.GetBuddyGroups:input_type -> management.GetBuddyGroupsRequest
	20, // 58: management.Management.CreateBuddyGroup:input_type -> management.CreateBuddyGroupRequest
	22, // 59: management.Management.DeleteBuddyGroup:input_type -> management.DeleteBuddyGroupRequest
	24, // 60: management.Management.MirrorRootInode:input_type -> management.MirrorRootInodeRequest
	1,  // 61: management.Management.SetAlias:output_type -> management.SetAliasResponse
	3,  // 62: management.Management.GetNodes:output_type -> management.GetNodesResponse
	5,  // 63: management.Management.DeleteNode:output_type -> management.DeleteNodeResponse
	7,  // 64: management.Management.GetTargets:output_type -> management.GetTargetsResponse
	9,  // 65: management.Management.DeleteTarget:output_type -> management.DeleteTargetResponse
	11, // 66: management.Management.GetPools:output_type -> management.GetPoolsResponse
	13, // 67: management.Management.CreatePool:output_type -> management.CreatePoolResponse
	15, // 68: management.Management.AssignPool:output_type -> management.AssignPoolResponse
	17, // 69: management.Management.DeletePool:output_type -> management.DeletePoolResponse
	19, // 70: management.Management.GetBuddyGroups:output_type -> management.GetBuddyGroupsResponse
	21, // 71: management.Management.CreateBuddyGroup:output_type -> management.CreateBuddyGroupResponse
	23, // 72: management.Management.DeleteBuddyGroup:output_type -> management.DeleteBuddyGroupResponse
	25, // 73: management.Management.MirrorRootInode:output_type -> management.MirrorRootInodeResponse
	61, // [61:74] is the sub-list for method output_type
	48, // [48:61] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_management_proto_init() }
func file_management_proto_init() {
	if File_management_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_management_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SetAliasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SetAliasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetTargetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetTargetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetPoolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AssignPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*AssignPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GetBuddyGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GetBuddyGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CreateBuddyGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CreateBuddyGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteBuddyGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteBuddyGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*MirrorRootInodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*MirrorRootInodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetNodesResponse_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*GetNodesResponse_Node_Nic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetTargetsResponse_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*GetPoolsResponse_StoragePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*GetBuddyGroupsResponse_BuddyGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_management_proto_msgTypes[3].OneofWrappers = []any{}
	file_management_proto_msgTypes[4].OneofWrappers = []any{}
	file_management_proto_msgTypes[5].OneofWrappers = []any{}
	file_management_proto_msgTypes[8].OneofWrappers = []any{}
	file_management_proto_msgTypes[9].OneofWrappers = []any{}
	file_management_proto_msgTypes[12].OneofWrappers = []any{}
	file_management_proto_msgTypes[13].OneofWrappers = []any{}
	file_management_proto_msgTypes[14].OneofWrappers = []any{}
	file_management_proto_msgTypes[15].OneofWrappers = []any{}
	file_management_proto_msgTypes[16].OneofWrappers = []any{}
	file_management_proto_msgTypes[17].OneofWrappers = []any{}
	file_management_proto_msgTypes[20].OneofWrappers = []any{}
	file_management_proto_msgTypes[21].OneofWrappers = []any{}
	file_management_proto_msgTypes[22].OneofWrappers = []any{}
	file_management_proto_msgTypes[23].OneofWrappers = []any{}
	file_management_proto_msgTypes[28].OneofWrappers = []any{}
	file_management_proto_msgTypes[30].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_management_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_management_proto_goTypes,
		DependencyIndexes: file_management_proto_depIdxs,
		MessageInfos:      file_management_proto_msgTypes,
	}.Build()
	File_management_proto = out.File
	file_management_proto_rawDesc = nil
	file_management_proto_goTypes = nil
	file_management_proto_depIdxs = nil
}
