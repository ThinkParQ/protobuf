// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: management.proto

package management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Management_GetNodes_FullMethodName        = "/management.Management/GetNodes"
	Management_GetTargets_FullMethodName      = "/management.Management/GetTargets"
	Management_GetBuddyGroups_FullMethodName  = "/management.Management/GetBuddyGroups"
	Management_GetStoragePools_FullMethodName = "/management.Management/GetStoragePools"
	Management_SetAlias_FullMethodName        = "/management.Management/SetAlias"
)

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementClient interface {
	// Gets the full list of BeeGFS nodes
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
	// Gets the full list of BeeGFS targets
	GetTargets(ctx context.Context, in *GetTargetsRequest, opts ...grpc.CallOption) (*GetTargetsResponse, error)
	// Gets the full list of BeeGFS buddbeegfsy groups
	GetBuddyGroups(ctx context.Context, in *GetBuddyGroupsRequest, opts ...grpc.CallOption) (*GetBuddyGroupsResponse, error)
	// Gets the full list of BeeGFS storage pools
	GetStoragePools(ctx context.Context, in *GetStoragePoolsRequest, opts ...grpc.CallOption) (*GetStoragePoolsResponse, error)
	// Sets an entity alias
	SetAlias(ctx context.Context, in *SetAliasRequest, opts ...grpc.CallOption) (*SetAliasResponse, error)
}

type managementClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementClient(cc grpc.ClientConnInterface) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, Management_GetNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetTargets(ctx context.Context, in *GetTargetsRequest, opts ...grpc.CallOption) (*GetTargetsResponse, error) {
	out := new(GetTargetsResponse)
	err := c.cc.Invoke(ctx, Management_GetTargets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetBuddyGroups(ctx context.Context, in *GetBuddyGroupsRequest, opts ...grpc.CallOption) (*GetBuddyGroupsResponse, error) {
	out := new(GetBuddyGroupsResponse)
	err := c.cc.Invoke(ctx, Management_GetBuddyGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetStoragePools(ctx context.Context, in *GetStoragePoolsRequest, opts ...grpc.CallOption) (*GetStoragePoolsResponse, error) {
	out := new(GetStoragePoolsResponse)
	err := c.cc.Invoke(ctx, Management_GetStoragePools_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) SetAlias(ctx context.Context, in *SetAliasRequest, opts ...grpc.CallOption) (*SetAliasResponse, error) {
	out := new(SetAliasResponse)
	err := c.cc.Invoke(ctx, Management_SetAlias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServer is the server API for Management service.
// All implementations must embed UnimplementedManagementServer
// for forward compatibility
type ManagementServer interface {
	// Gets the full list of BeeGFS nodes
	GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
	// Gets the full list of BeeGFS targets
	GetTargets(context.Context, *GetTargetsRequest) (*GetTargetsResponse, error)
	// Gets the full list of BeeGFS buddbeegfsy groups
	GetBuddyGroups(context.Context, *GetBuddyGroupsRequest) (*GetBuddyGroupsResponse, error)
	// Gets the full list of BeeGFS storage pools
	GetStoragePools(context.Context, *GetStoragePoolsRequest) (*GetStoragePoolsResponse, error)
	// Sets an entity alias
	SetAlias(context.Context, *SetAliasRequest) (*SetAliasResponse, error)
	mustEmbedUnimplementedManagementServer()
}

// UnimplementedManagementServer must be embedded to have forward compatible implementations.
type UnimplementedManagementServer struct {
}

func (UnimplementedManagementServer) GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedManagementServer) GetTargets(context.Context, *GetTargetsRequest) (*GetTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargets not implemented")
}
func (UnimplementedManagementServer) GetBuddyGroups(context.Context, *GetBuddyGroupsRequest) (*GetBuddyGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuddyGroups not implemented")
}
func (UnimplementedManagementServer) GetStoragePools(context.Context, *GetStoragePoolsRequest) (*GetStoragePoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoragePools not implemented")
}
func (UnimplementedManagementServer) SetAlias(context.Context, *SetAliasRequest) (*SetAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAlias not implemented")
}
func (UnimplementedManagementServer) mustEmbedUnimplementedManagementServer() {}

// UnsafeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServer will
// result in compilation errors.
type UnsafeManagementServer interface {
	mustEmbedUnimplementedManagementServer()
}

func RegisterManagementServer(s grpc.ServiceRegistrar, srv ManagementServer) {
	s.RegisterService(&Management_ServiceDesc, srv)
}

func _Management_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetTargets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetTargets(ctx, req.(*GetTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetBuddyGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuddyGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetBuddyGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetBuddyGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetBuddyGroups(ctx, req.(*GetBuddyGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetStoragePools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoragePoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetStoragePools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetStoragePools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetStoragePools(ctx, req.(*GetStoragePoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_SetAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).SetAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_SetAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).SetAlias(ctx, req.(*SetAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Management_ServiceDesc is the grpc.ServiceDesc for Management service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Management_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodes",
			Handler:    _Management_GetNodes_Handler,
		},
		{
			MethodName: "GetTargets",
			Handler:    _Management_GetTargets_Handler,
		},
		{
			MethodName: "GetBuddyGroups",
			Handler:    _Management_GetBuddyGroups_Handler,
		},
		{
			MethodName: "GetStoragePools",
			Handler:    _Management_GetStoragePools_Handler,
		},
		{
			MethodName: "SetAlias",
			Handler:    _Management_SetAlias_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management.proto",
}
