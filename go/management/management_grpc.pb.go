// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: management.proto

package management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Management_SetAlias_FullMethodName              = "/management.Management/SetAlias"
	Management_GetNodes_FullMethodName              = "/management.Management/GetNodes"
	Management_DeleteNode_FullMethodName            = "/management.Management/DeleteNode"
	Management_GetTargets_FullMethodName            = "/management.Management/GetTargets"
	Management_DeleteTarget_FullMethodName          = "/management.Management/DeleteTarget"
	Management_SetTargetState_FullMethodName        = "/management.Management/SetTargetState"
	Management_GetPools_FullMethodName              = "/management.Management/GetPools"
	Management_CreatePool_FullMethodName            = "/management.Management/CreatePool"
	Management_AssignPool_FullMethodName            = "/management.Management/AssignPool"
	Management_DeletePool_FullMethodName            = "/management.Management/DeletePool"
	Management_GetBuddyGroups_FullMethodName        = "/management.Management/GetBuddyGroups"
	Management_CreateBuddyGroup_FullMethodName      = "/management.Management/CreateBuddyGroup"
	Management_DeleteBuddyGroup_FullMethodName      = "/management.Management/DeleteBuddyGroup"
	Management_MirrorRootInode_FullMethodName       = "/management.Management/MirrorRootInode"
	Management_SetDefaultQuotaLimits_FullMethodName = "/management.Management/SetDefaultQuotaLimits"
	Management_SetQuotaLimits_FullMethodName        = "/management.Management/SetQuotaLimits"
	Management_GetQuotaLimits_FullMethodName        = "/management.Management/GetQuotaLimits"
	Management_GetQuotaUsage_FullMethodName         = "/management.Management/GetQuotaUsage"
	Management_GetLicense_FullMethodName            = "/management.Management/GetLicense"
)

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementClient interface {
	SetAlias(ctx context.Context, in *SetAliasRequest, opts ...grpc.CallOption) (*SetAliasResponse, error)
	// Nodes
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error)
	// Targets
	GetTargets(ctx context.Context, in *GetTargetsRequest, opts ...grpc.CallOption) (*GetTargetsResponse, error)
	DeleteTarget(ctx context.Context, in *DeleteTargetRequest, opts ...grpc.CallOption) (*DeleteTargetResponse, error)
	// Manually set a target consistency state
	SetTargetState(ctx context.Context, in *SetTargetStateRequest, opts ...grpc.CallOption) (*SetTargetStateResponse, error)
	// (Storage) pools
	GetPools(ctx context.Context, in *GetPoolsRequest, opts ...grpc.CallOption) (*GetPoolsResponse, error)
	CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc.CallOption) (*CreatePoolResponse, error)
	AssignPool(ctx context.Context, in *AssignPoolRequest, opts ...grpc.CallOption) (*AssignPoolResponse, error)
	DeletePool(ctx context.Context, in *DeletePoolRequest, opts ...grpc.CallOption) (*DeletePoolResponse, error)
	// Buddy groups
	GetBuddyGroups(ctx context.Context, in *GetBuddyGroupsRequest, opts ...grpc.CallOption) (*GetBuddyGroupsResponse, error)
	CreateBuddyGroup(ctx context.Context, in *CreateBuddyGroupRequest, opts ...grpc.CallOption) (*CreateBuddyGroupResponse, error)
	DeleteBuddyGroup(ctx context.Context, in *DeleteBuddyGroupRequest, opts ...grpc.CallOption) (*DeleteBuddyGroupResponse, error)
	MirrorRootInode(ctx context.Context, in *MirrorRootInodeRequest, opts ...grpc.CallOption) (*MirrorRootInodeResponse, error)
	// Quota
	SetDefaultQuotaLimits(ctx context.Context, in *SetDefaultQuotaLimitsRequest, opts ...grpc.CallOption) (*SetDefaultQuotaLimitsResponse, error)
	SetQuotaLimits(ctx context.Context, in *SetQuotaLimitsRequest, opts ...grpc.CallOption) (*SetQuotaLimitsResponse, error)
	GetQuotaLimits(ctx context.Context, in *GetQuotaLimitsRequest, opts ...grpc.CallOption) (Management_GetQuotaLimitsClient, error)
	GetQuotaUsage(ctx context.Context, in *GetQuotaUsageRequest, opts ...grpc.CallOption) (Management_GetQuotaUsageClient, error)
	// Licensing
	GetLicense(ctx context.Context, in *GetLicenseRequest, opts ...grpc.CallOption) (*GetLicenseResponse, error)
}

type managementClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementClient(cc grpc.ClientConnInterface) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) SetAlias(ctx context.Context, in *SetAliasRequest, opts ...grpc.CallOption) (*SetAliasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAliasResponse)
	err := c.cc.Invoke(ctx, Management_SetAlias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, Management_GetNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNodeResponse)
	err := c.cc.Invoke(ctx, Management_DeleteNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetTargets(ctx context.Context, in *GetTargetsRequest, opts ...grpc.CallOption) (*GetTargetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTargetsResponse)
	err := c.cc.Invoke(ctx, Management_GetTargets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteTarget(ctx context.Context, in *DeleteTargetRequest, opts ...grpc.CallOption) (*DeleteTargetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTargetResponse)
	err := c.cc.Invoke(ctx, Management_DeleteTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) SetTargetState(ctx context.Context, in *SetTargetStateRequest, opts ...grpc.CallOption) (*SetTargetStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTargetStateResponse)
	err := c.cc.Invoke(ctx, Management_SetTargetState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetPools(ctx context.Context, in *GetPoolsRequest, opts ...grpc.CallOption) (*GetPoolsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPoolsResponse)
	err := c.cc.Invoke(ctx, Management_GetPools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc.CallOption) (*CreatePoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePoolResponse)
	err := c.cc.Invoke(ctx, Management_CreatePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) AssignPool(ctx context.Context, in *AssignPoolRequest, opts ...grpc.CallOption) (*AssignPoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignPoolResponse)
	err := c.cc.Invoke(ctx, Management_AssignPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeletePool(ctx context.Context, in *DeletePoolRequest, opts ...grpc.CallOption) (*DeletePoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePoolResponse)
	err := c.cc.Invoke(ctx, Management_DeletePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetBuddyGroups(ctx context.Context, in *GetBuddyGroupsRequest, opts ...grpc.CallOption) (*GetBuddyGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBuddyGroupsResponse)
	err := c.cc.Invoke(ctx, Management_GetBuddyGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CreateBuddyGroup(ctx context.Context, in *CreateBuddyGroupRequest, opts ...grpc.CallOption) (*CreateBuddyGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBuddyGroupResponse)
	err := c.cc.Invoke(ctx, Management_CreateBuddyGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteBuddyGroup(ctx context.Context, in *DeleteBuddyGroupRequest, opts ...grpc.CallOption) (*DeleteBuddyGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBuddyGroupResponse)
	err := c.cc.Invoke(ctx, Management_DeleteBuddyGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) MirrorRootInode(ctx context.Context, in *MirrorRootInodeRequest, opts ...grpc.CallOption) (*MirrorRootInodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MirrorRootInodeResponse)
	err := c.cc.Invoke(ctx, Management_MirrorRootInode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) SetDefaultQuotaLimits(ctx context.Context, in *SetDefaultQuotaLimitsRequest, opts ...grpc.CallOption) (*SetDefaultQuotaLimitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDefaultQuotaLimitsResponse)
	err := c.cc.Invoke(ctx, Management_SetDefaultQuotaLimits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) SetQuotaLimits(ctx context.Context, in *SetQuotaLimitsRequest, opts ...grpc.CallOption) (*SetQuotaLimitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetQuotaLimitsResponse)
	err := c.cc.Invoke(ctx, Management_SetQuotaLimits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetQuotaLimits(ctx context.Context, in *GetQuotaLimitsRequest, opts ...grpc.CallOption) (Management_GetQuotaLimitsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Management_ServiceDesc.Streams[0], Management_GetQuotaLimits_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &managementGetQuotaLimitsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Management_GetQuotaLimitsClient interface {
	Recv() (*GetQuotaLimitsResponse, error)
	grpc.ClientStream
}

type managementGetQuotaLimitsClient struct {
	grpc.ClientStream
}

func (x *managementGetQuotaLimitsClient) Recv() (*GetQuotaLimitsResponse, error) {
	m := new(GetQuotaLimitsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managementClient) GetQuotaUsage(ctx context.Context, in *GetQuotaUsageRequest, opts ...grpc.CallOption) (Management_GetQuotaUsageClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Management_ServiceDesc.Streams[1], Management_GetQuotaUsage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &managementGetQuotaUsageClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Management_GetQuotaUsageClient interface {
	Recv() (*GetQuotaUsageResponse, error)
	grpc.ClientStream
}

type managementGetQuotaUsageClient struct {
	grpc.ClientStream
}

func (x *managementGetQuotaUsageClient) Recv() (*GetQuotaUsageResponse, error) {
	m := new(GetQuotaUsageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managementClient) GetLicense(ctx context.Context, in *GetLicenseRequest, opts ...grpc.CallOption) (*GetLicenseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLicenseResponse)
	err := c.cc.Invoke(ctx, Management_GetLicense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServer is the server API for Management service.
// All implementations must embed UnimplementedManagementServer
// for forward compatibility
type ManagementServer interface {
	SetAlias(context.Context, *SetAliasRequest) (*SetAliasResponse, error)
	// Nodes
	GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
	DeleteNode(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error)
	// Targets
	GetTargets(context.Context, *GetTargetsRequest) (*GetTargetsResponse, error)
	DeleteTarget(context.Context, *DeleteTargetRequest) (*DeleteTargetResponse, error)
	// Manually set a target consistency state
	SetTargetState(context.Context, *SetTargetStateRequest) (*SetTargetStateResponse, error)
	// (Storage) pools
	GetPools(context.Context, *GetPoolsRequest) (*GetPoolsResponse, error)
	CreatePool(context.Context, *CreatePoolRequest) (*CreatePoolResponse, error)
	AssignPool(context.Context, *AssignPoolRequest) (*AssignPoolResponse, error)
	DeletePool(context.Context, *DeletePoolRequest) (*DeletePoolResponse, error)
	// Buddy groups
	GetBuddyGroups(context.Context, *GetBuddyGroupsRequest) (*GetBuddyGroupsResponse, error)
	CreateBuddyGroup(context.Context, *CreateBuddyGroupRequest) (*CreateBuddyGroupResponse, error)
	DeleteBuddyGroup(context.Context, *DeleteBuddyGroupRequest) (*DeleteBuddyGroupResponse, error)
	MirrorRootInode(context.Context, *MirrorRootInodeRequest) (*MirrorRootInodeResponse, error)
	// Quota
	SetDefaultQuotaLimits(context.Context, *SetDefaultQuotaLimitsRequest) (*SetDefaultQuotaLimitsResponse, error)
	SetQuotaLimits(context.Context, *SetQuotaLimitsRequest) (*SetQuotaLimitsResponse, error)
	GetQuotaLimits(*GetQuotaLimitsRequest, Management_GetQuotaLimitsServer) error
	GetQuotaUsage(*GetQuotaUsageRequest, Management_GetQuotaUsageServer) error
	// Licensing
	GetLicense(context.Context, *GetLicenseRequest) (*GetLicenseResponse, error)
	mustEmbedUnimplementedManagementServer()
}

// UnimplementedManagementServer must be embedded to have forward compatible implementations.
type UnimplementedManagementServer struct {
}

func (UnimplementedManagementServer) SetAlias(context.Context, *SetAliasRequest) (*SetAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAlias not implemented")
}
func (UnimplementedManagementServer) GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedManagementServer) DeleteNode(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedManagementServer) GetTargets(context.Context, *GetTargetsRequest) (*GetTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargets not implemented")
}
func (UnimplementedManagementServer) DeleteTarget(context.Context, *DeleteTargetRequest) (*DeleteTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTarget not implemented")
}
func (UnimplementedManagementServer) SetTargetState(context.Context, *SetTargetStateRequest) (*SetTargetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTargetState not implemented")
}
func (UnimplementedManagementServer) GetPools(context.Context, *GetPoolsRequest) (*GetPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPools not implemented")
}
func (UnimplementedManagementServer) CreatePool(context.Context, *CreatePoolRequest) (*CreatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePool not implemented")
}
func (UnimplementedManagementServer) AssignPool(context.Context, *AssignPoolRequest) (*AssignPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPool not implemented")
}
func (UnimplementedManagementServer) DeletePool(context.Context, *DeletePoolRequest) (*DeletePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePool not implemented")
}
func (UnimplementedManagementServer) GetBuddyGroups(context.Context, *GetBuddyGroupsRequest) (*GetBuddyGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuddyGroups not implemented")
}
func (UnimplementedManagementServer) CreateBuddyGroup(context.Context, *CreateBuddyGroupRequest) (*CreateBuddyGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuddyGroup not implemented")
}
func (UnimplementedManagementServer) DeleteBuddyGroup(context.Context, *DeleteBuddyGroupRequest) (*DeleteBuddyGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBuddyGroup not implemented")
}
func (UnimplementedManagementServer) MirrorRootInode(context.Context, *MirrorRootInodeRequest) (*MirrorRootInodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MirrorRootInode not implemented")
}
func (UnimplementedManagementServer) SetDefaultQuotaLimits(context.Context, *SetDefaultQuotaLimitsRequest) (*SetDefaultQuotaLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultQuotaLimits not implemented")
}
func (UnimplementedManagementServer) SetQuotaLimits(context.Context, *SetQuotaLimitsRequest) (*SetQuotaLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetQuotaLimits not implemented")
}
func (UnimplementedManagementServer) GetQuotaLimits(*GetQuotaLimitsRequest, Management_GetQuotaLimitsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetQuotaLimits not implemented")
}
func (UnimplementedManagementServer) GetQuotaUsage(*GetQuotaUsageRequest, Management_GetQuotaUsageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetQuotaUsage not implemented")
}
func (UnimplementedManagementServer) GetLicense(context.Context, *GetLicenseRequest) (*GetLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLicense not implemented")
}
func (UnimplementedManagementServer) mustEmbedUnimplementedManagementServer() {}

// UnsafeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServer will
// result in compilation errors.
type UnsafeManagementServer interface {
	mustEmbedUnimplementedManagementServer()
}

func RegisterManagementServer(s grpc.ServiceRegistrar, srv ManagementServer) {
	s.RegisterService(&Management_ServiceDesc, srv)
}

func _Management_SetAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).SetAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_SetAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).SetAlias(ctx, req.(*SetAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_DeleteNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteNode(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetTargets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetTargets(ctx, req.(*GetTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_DeleteTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteTarget(ctx, req.(*DeleteTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_SetTargetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTargetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).SetTargetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_SetTargetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).SetTargetState(ctx, req.(*SetTargetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetPools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetPools(ctx, req.(*GetPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CreatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CreatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CreatePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CreatePool(ctx, req.(*CreatePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_AssignPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).AssignPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_AssignPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).AssignPool(ctx, req.(*AssignPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeletePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeletePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_DeletePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeletePool(ctx, req.(*DeletePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetBuddyGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuddyGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetBuddyGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetBuddyGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetBuddyGroups(ctx, req.(*GetBuddyGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CreateBuddyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuddyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CreateBuddyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CreateBuddyGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CreateBuddyGroup(ctx, req.(*CreateBuddyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteBuddyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBuddyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteBuddyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_DeleteBuddyGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteBuddyGroup(ctx, req.(*DeleteBuddyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_MirrorRootInode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorRootInodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).MirrorRootInode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_MirrorRootInode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).MirrorRootInode(ctx, req.(*MirrorRootInodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_SetDefaultQuotaLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultQuotaLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).SetDefaultQuotaLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_SetDefaultQuotaLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).SetDefaultQuotaLimits(ctx, req.(*SetDefaultQuotaLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_SetQuotaLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetQuotaLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).SetQuotaLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_SetQuotaLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).SetQuotaLimits(ctx, req.(*SetQuotaLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetQuotaLimits_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetQuotaLimitsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagementServer).GetQuotaLimits(m, &managementGetQuotaLimitsServer{ServerStream: stream})
}

type Management_GetQuotaLimitsServer interface {
	Send(*GetQuotaLimitsResponse) error
	grpc.ServerStream
}

type managementGetQuotaLimitsServer struct {
	grpc.ServerStream
}

func (x *managementGetQuotaLimitsServer) Send(m *GetQuotaLimitsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Management_GetQuotaUsage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetQuotaUsageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagementServer).GetQuotaUsage(m, &managementGetQuotaUsageServer{ServerStream: stream})
}

type Management_GetQuotaUsageServer interface {
	Send(*GetQuotaUsageResponse) error
	grpc.ServerStream
}

type managementGetQuotaUsageServer struct {
	grpc.ServerStream
}

func (x *managementGetQuotaUsageServer) Send(m *GetQuotaUsageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Management_GetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetLicense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetLicense(ctx, req.(*GetLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Management_ServiceDesc is the grpc.ServiceDesc for Management service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Management_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAlias",
			Handler:    _Management_SetAlias_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _Management_GetNodes_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _Management_DeleteNode_Handler,
		},
		{
			MethodName: "GetTargets",
			Handler:    _Management_GetTargets_Handler,
		},
		{
			MethodName: "DeleteTarget",
			Handler:    _Management_DeleteTarget_Handler,
		},
		{
			MethodName: "SetTargetState",
			Handler:    _Management_SetTargetState_Handler,
		},
		{
			MethodName: "GetPools",
			Handler:    _Management_GetPools_Handler,
		},
		{
			MethodName: "CreatePool",
			Handler:    _Management_CreatePool_Handler,
		},
		{
			MethodName: "AssignPool",
			Handler:    _Management_AssignPool_Handler,
		},
		{
			MethodName: "DeletePool",
			Handler:    _Management_DeletePool_Handler,
		},
		{
			MethodName: "GetBuddyGroups",
			Handler:    _Management_GetBuddyGroups_Handler,
		},
		{
			MethodName: "CreateBuddyGroup",
			Handler:    _Management_CreateBuddyGroup_Handler,
		},
		{
			MethodName: "DeleteBuddyGroup",
			Handler:    _Management_DeleteBuddyGroup_Handler,
		},
		{
			MethodName: "MirrorRootInode",
			Handler:    _Management_MirrorRootInode_Handler,
		},
		{
			MethodName: "SetDefaultQuotaLimits",
			Handler:    _Management_SetDefaultQuotaLimits_Handler,
		},
		{
			MethodName: "SetQuotaLimits",
			Handler:    _Management_SetQuotaLimits_Handler,
		},
		{
			MethodName: "GetLicense",
			Handler:    _Management_GetLicense_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetQuotaLimits",
			Handler:       _Management_GetQuotaLimits_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetQuotaUsage",
			Handler:       _Management_GetQuotaUsage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "management.proto",
}
