// Package Flex contains common messages used across multiple Flex services.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: flex.proto

package flex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkerNode_UpdateConfig_FullMethodName   = "/flex.WorkerNode/UpdateConfig"
	WorkerNode_Heartbeat_FullMethodName      = "/flex.WorkerNode/Heartbeat"
	WorkerNode_SubmitWork_FullMethodName     = "/flex.WorkerNode/SubmitWork"
	WorkerNode_UpdateWork_FullMethodName     = "/flex.WorkerNode/UpdateWork"
	WorkerNode_BulkUpdateWork_FullMethodName = "/flex.WorkerNode/BulkUpdateWork"
)

// WorkerNodeClient is the client API for WorkerNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A WorkerNode is able to handle one or more types of work requests.
type WorkerNodeClient interface {
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	SubmitWork(ctx context.Context, in *SubmitWorkRequest, opts ...grpc.CallOption) (*SubmitWorkResponse, error)
	// UpdateWork is used to change the state of existing work, such as cancelling work at a users
	// request.
	UpdateWork(ctx context.Context, in *UpdateWorkRequest, opts ...grpc.CallOption) (*UpdateWorkResponse, error)
	// Used to change the state of all WRs assigned to a particular node. This is typically only
	// used when initially connecting to a node, or if we want to drain the WRs assigned to a node
	// if it is being removed.
	BulkUpdateWork(ctx context.Context, in *BulkUpdateWorkRequest, opts ...grpc.CallOption) (*BulkUpdateWorkResponse, error)
}

type workerNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerNodeClient(cc grpc.ClientConnInterface) WorkerNodeClient {
	return &workerNodeClient{cc}
}

func (c *workerNodeClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConfigResponse)
	err := c.cc.Invoke(ctx, WorkerNode_UpdateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerNodeClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, WorkerNode_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerNodeClient) SubmitWork(ctx context.Context, in *SubmitWorkRequest, opts ...grpc.CallOption) (*SubmitWorkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitWorkResponse)
	err := c.cc.Invoke(ctx, WorkerNode_SubmitWork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerNodeClient) UpdateWork(ctx context.Context, in *UpdateWorkRequest, opts ...grpc.CallOption) (*UpdateWorkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkResponse)
	err := c.cc.Invoke(ctx, WorkerNode_UpdateWork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerNodeClient) BulkUpdateWork(ctx context.Context, in *BulkUpdateWorkRequest, opts ...grpc.CallOption) (*BulkUpdateWorkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkUpdateWorkResponse)
	err := c.cc.Invoke(ctx, WorkerNode_BulkUpdateWork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerNodeServer is the server API for WorkerNode service.
// All implementations must embed UnimplementedWorkerNodeServer
// for forward compatibility.
//
// A WorkerNode is able to handle one or more types of work requests.
type WorkerNodeServer interface {
	UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	SubmitWork(context.Context, *SubmitWorkRequest) (*SubmitWorkResponse, error)
	// UpdateWork is used to change the state of existing work, such as cancelling work at a users
	// request.
	UpdateWork(context.Context, *UpdateWorkRequest) (*UpdateWorkResponse, error)
	// Used to change the state of all WRs assigned to a particular node. This is typically only
	// used when initially connecting to a node, or if we want to drain the WRs assigned to a node
	// if it is being removed.
	BulkUpdateWork(context.Context, *BulkUpdateWorkRequest) (*BulkUpdateWorkResponse, error)
	mustEmbedUnimplementedWorkerNodeServer()
}

// UnimplementedWorkerNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkerNodeServer struct{}

func (UnimplementedWorkerNodeServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedWorkerNodeServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedWorkerNodeServer) SubmitWork(context.Context, *SubmitWorkRequest) (*SubmitWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWork not implemented")
}
func (UnimplementedWorkerNodeServer) UpdateWork(context.Context, *UpdateWorkRequest) (*UpdateWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWork not implemented")
}
func (UnimplementedWorkerNodeServer) BulkUpdateWork(context.Context, *BulkUpdateWorkRequest) (*BulkUpdateWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdateWork not implemented")
}
func (UnimplementedWorkerNodeServer) mustEmbedUnimplementedWorkerNodeServer() {}
func (UnimplementedWorkerNodeServer) testEmbeddedByValue()                    {}

// UnsafeWorkerNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerNodeServer will
// result in compilation errors.
type UnsafeWorkerNodeServer interface {
	mustEmbedUnimplementedWorkerNodeServer()
}

func RegisterWorkerNodeServer(s grpc.ServiceRegistrar, srv WorkerNodeServer) {
	// If the following call pancis, it indicates UnimplementedWorkerNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkerNode_ServiceDesc, srv)
}

func _WorkerNode_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerNodeServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerNode_UpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerNodeServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerNode_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerNodeServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerNode_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerNodeServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerNode_SubmitWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerNodeServer).SubmitWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerNode_SubmitWork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerNodeServer).SubmitWork(ctx, req.(*SubmitWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerNode_UpdateWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerNodeServer).UpdateWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerNode_UpdateWork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerNodeServer).UpdateWork(ctx, req.(*UpdateWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerNode_BulkUpdateWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerNodeServer).BulkUpdateWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerNode_BulkUpdateWork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerNodeServer).BulkUpdateWork(ctx, req.(*BulkUpdateWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerNode_ServiceDesc is the grpc.ServiceDesc for WorkerNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flex.WorkerNode",
	HandlerType: (*WorkerNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateConfig",
			Handler:    _WorkerNode_UpdateConfig_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _WorkerNode_Heartbeat_Handler,
		},
		{
			MethodName: "SubmitWork",
			Handler:    _WorkerNode_SubmitWork_Handler,
		},
		{
			MethodName: "UpdateWork",
			Handler:    _WorkerNode_UpdateWork_Handler,
		},
		{
			MethodName: "BulkUpdateWork",
			Handler:    _WorkerNode_BulkUpdateWork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flex.proto",
}
