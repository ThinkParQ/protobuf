// Package Flex contains common messages used across multiple Flex services.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.26.1
// source: flex.proto

package flex

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateWorkRequest_NewState int32

const (
	// This state has no semantic value and the state should never be UNSPECIFIED unless there
	// is a bug.
	UpdateWorkRequest_UNSPECIFIED UpdateWorkRequest_NewState = 0
	// Cancelled work requests are also deleted from the worker node.
	UpdateWorkRequest_CANCELLED UpdateWorkRequest_NewState = 1
)

// Enum value maps for UpdateWorkRequest_NewState.
var (
	UpdateWorkRequest_NewState_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "CANCELLED",
	}
	UpdateWorkRequest_NewState_value = map[string]int32{
		"UNSPECIFIED": 0,
		"CANCELLED":   1,
	}
)

func (x UpdateWorkRequest_NewState) Enum() *UpdateWorkRequest_NewState {
	p := new(UpdateWorkRequest_NewState)
	*p = x
	return p
}

func (x UpdateWorkRequest_NewState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateWorkRequest_NewState) Descriptor() protoreflect.EnumDescriptor {
	return file_flex_proto_enumTypes[0].Descriptor()
}

func (UpdateWorkRequest_NewState) Type() protoreflect.EnumType {
	return &file_flex_proto_enumTypes[0]
}

func (x UpdateWorkRequest_NewState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateWorkRequest_NewState.Descriptor instead.
func (UpdateWorkRequest_NewState) EnumDescriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{5, 0}
}

// TODO: https://github.com/ThinkParQ/bee-sync/issues/5
// Allow bulk updates to work requests
type BulkUpdateWorkRequest_NewState int32

const (
	// This state has no semantic value and the state should never be UNSPECIFIED unless there
	// is a bug.
	BulkUpdateWorkRequest_UNSPECIFIED BulkUpdateWorkRequest_NewState = 0
	BulkUpdateWorkRequest_UNCHANGED   BulkUpdateWorkRequest_NewState = 1
)

// Enum value maps for BulkUpdateWorkRequest_NewState.
var (
	BulkUpdateWorkRequest_NewState_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "UNCHANGED",
	}
	BulkUpdateWorkRequest_NewState_value = map[string]int32{
		"UNSPECIFIED": 0,
		"UNCHANGED":   1,
	}
)

func (x BulkUpdateWorkRequest_NewState) Enum() *BulkUpdateWorkRequest_NewState {
	p := new(BulkUpdateWorkRequest_NewState)
	*p = x
	return p
}

func (x BulkUpdateWorkRequest_NewState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BulkUpdateWorkRequest_NewState) Descriptor() protoreflect.EnumDescriptor {
	return file_flex_proto_enumTypes[1].Descriptor()
}

func (BulkUpdateWorkRequest_NewState) Type() protoreflect.EnumType {
	return &file_flex_proto_enumTypes[1]
}

func (x BulkUpdateWorkRequest_NewState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BulkUpdateWorkRequest_NewState.Descriptor instead.
func (BulkUpdateWorkRequest_NewState) EnumDescriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{7, 0}
}

type SyncJob_Operation int32

const (
	SyncJob_UNSPECIFIED SyncJob_Operation = 0
	SyncJob_UPLOAD      SyncJob_Operation = 1
	SyncJob_DOWNLOAD    SyncJob_Operation = 2
)

// Enum value maps for SyncJob_Operation.
var (
	SyncJob_Operation_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "UPLOAD",
		2: "DOWNLOAD",
	}
	SyncJob_Operation_value = map[string]int32{
		"UNSPECIFIED": 0,
		"UPLOAD":      1,
		"DOWNLOAD":    2,
	}
)

func (x SyncJob_Operation) Enum() *SyncJob_Operation {
	p := new(SyncJob_Operation)
	*p = x
	return p
}

func (x SyncJob_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJob_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_flex_proto_enumTypes[2].Descriptor()
}

func (SyncJob_Operation) Type() protoreflect.EnumType {
	return &file_flex_proto_enumTypes[2]
}

func (x SyncJob_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncJob_Operation.Descriptor instead.
func (SyncJob_Operation) EnumDescriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{11, 0}
}

type Work_State int32

const (
	// This state has no semantic value and the state should never be UNSPECIFIED unless there
	// is a bug.
	Work_UNSPECIFIED Work_State = 0
	// When the state of a request cannot be definitely determined.
	// For example if BeeRemote cannot contact a worker node.
	Work_UNKNOWN Work_State = 1
	// BeeRemote may use this state if the work request has definitely never been assigned to
	// any worker nodes and is safe to cancel without checking with all worker nodes first.
	Work_CREATED Work_State = 2
	// When the worker node has accepted a request but is waiting on cycles to run it.
	Work_SCHEDULED Work_State = 3
	// When a worker node is actively running a request.
	Work_RUNNING Work_State = 4
	// A user manually requested the job be paused.
	// TODO: https://github.com/ThinkParQ/bee-remote/issues/16
	// PAUSED = 5;
	//
	// ERROR indicates one or more transient/ephemeral error(s) occurred carrying out the
	// request, but the worker node is still retrying the request. Once the allowed number of
	// retries or retry timeout is exceed, the work request will fail.
	Work_ERROR Work_State = 6
	// FAILED indicates one or more unrecoverable errors occurred carrying out this request.
	// Typically requests fail due to some condition that requires user intervention, such as
	// updating the RST configuration, but can also fail if they exceeds the allowed number of
	// retries or retry timeout. Once work reaches this state and a response is sent to
	// BeeRemote, the worker node should no longer have a record or be acting on this request.
	// In other words, this is a terminal state for requests from the worker node's perspective.
	Work_FAILED Work_State = 7
	// Work requests may be cancelled manually be a user. Once work reaches this state and a
	// response is sent to BeeRemote, the worker node should no longer have a record or be
	// acting on this request.
	Work_CANCELLED Work_State = 8
	// If the work request completed successfully. Once work reaches this state and a response
	// is sent to BeeRemote, the worker node should no longer have a record or be acting on this
	// request.
	Work_COMPLETED Work_State = 9
)

// Enum value maps for Work_State.
var (
	Work_State_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "UNKNOWN",
		2: "CREATED",
		3: "SCHEDULED",
		4: "RUNNING",
		6: "ERROR",
		7: "FAILED",
		8: "CANCELLED",
		9: "COMPLETED",
	}
	Work_State_value = map[string]int32{
		"UNSPECIFIED": 0,
		"UNKNOWN":     1,
		"CREATED":     2,
		"SCHEDULED":   3,
		"RUNNING":     4,
		"ERROR":       6,
		"FAILED":      7,
		"CANCELLED":   8,
		"COMPLETED":   9,
	}
)

func (x Work_State) Enum() *Work_State {
	p := new(Work_State)
	*p = x
	return p
}

func (x Work_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Work_State) Descriptor() protoreflect.EnumDescriptor {
	return file_flex_proto_enumTypes[3].Descriptor()
}

func (Work_State) Type() protoreflect.EnumType {
	return &file_flex_proto_enumTypes[3]
}

func (x Work_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Work_State.Descriptor instead.
func (Work_State) EnumDescriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{12, 0}
}

type UpdateConfigResponse_Result int32

const (
	UpdateConfigResponse_UNSPECIFIED UpdateConfigResponse_Result = 0 // Should not be used. Exists only as the default if there is a programming error.
	UpdateConfigResponse_SUCCESS     UpdateConfigResponse_Result = 1 // The configuration was successfully updated.
	UpdateConfigResponse_PARTIAL     UpdateConfigResponse_Result = 2 // The configuration was partially updated (see the message for details).
	UpdateConfigResponse_FAILURE     UpdateConfigResponse_Result = 3 // The configuration was not updated.
)

// Enum value maps for UpdateConfigResponse_Result.
var (
	UpdateConfigResponse_Result_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SUCCESS",
		2: "PARTIAL",
		3: "FAILURE",
	}
	UpdateConfigResponse_Result_value = map[string]int32{
		"UNSPECIFIED": 0,
		"SUCCESS":     1,
		"PARTIAL":     2,
		"FAILURE":     3,
	}
)

func (x UpdateConfigResponse_Result) Enum() *UpdateConfigResponse_Result {
	p := new(UpdateConfigResponse_Result)
	*p = x
	return p
}

func (x UpdateConfigResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateConfigResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_flex_proto_enumTypes[4].Descriptor()
}

func (UpdateConfigResponse_Result) Type() protoreflect.EnumType {
	return &file_flex_proto_enumTypes[4]
}

func (x UpdateConfigResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateConfigResponse_Result.Descriptor instead.
func (UpdateConfigResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{14, 0}
}

type HeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeStats bool `protobuf:"varint,1,opt,name=include_stats,json=includeStats,proto3" json:"include_stats,omitempty"`
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{0}
}

func (x *HeartbeatRequest) GetIncludeStats() bool {
	if x != nil {
		return x.IncludeStats
	}
	return false
}

type HeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReady   bool       `protobuf:"varint,1,opt,name=is_ready,json=isReady,proto3" json:"is_ready,omitempty"`
	NodeStats *NodeStats `protobuf:"bytes,2,opt,name=node_stats,json=nodeStats,proto3" json:"node_stats,omitempty"`
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{1}
}

func (x *HeartbeatResponse) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

func (x *HeartbeatResponse) GetNodeStats() *NodeStats {
	if x != nil {
		return x.NodeStats
	}
	return nil
}

type NodeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ActiveRequests int64                  `protobuf:"varint,2,opt,name=active_requests,json=activeRequests,proto3" json:"active_requests,omitempty"`
}

func (x *NodeStats) Reset() {
	*x = NodeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStats) ProtoMessage() {}

func (x *NodeStats) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStats.ProtoReflect.Descriptor instead.
func (*NodeStats) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{2}
}

func (x *NodeStats) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NodeStats) GetActiveRequests() int64 {
	if x != nil {
		return x.ActiveRequests
	}
	return 0
}

type SubmitWorkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *WorkRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *SubmitWorkRequest) Reset() {
	*x = SubmitWorkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitWorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitWorkRequest) ProtoMessage() {}

func (x *SubmitWorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitWorkRequest.ProtoReflect.Descriptor instead.
func (*SubmitWorkRequest) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitWorkRequest) GetRequest() *WorkRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type SubmitWorkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Work *Work `protobuf:"bytes,1,opt,name=work,proto3" json:"work,omitempty"`
}

func (x *SubmitWorkResponse) Reset() {
	*x = SubmitWorkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitWorkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitWorkResponse) ProtoMessage() {}

func (x *SubmitWorkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitWorkResponse.ProtoReflect.Descriptor instead.
func (*SubmitWorkResponse) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{4}
}

func (x *SubmitWorkResponse) GetWork() *Work {
	if x != nil {
		return x.Work
	}
	return nil
}

// Used to change the state of a single work request.
// The server will respond with a RequestStatus.
type UpdateWorkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId     string                     `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	RequestId string                     `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	NewState  UpdateWorkRequest_NewState `protobuf:"varint,3,opt,name=new_state,json=newState,proto3,enum=flex.UpdateWorkRequest_NewState" json:"new_state,omitempty"`
}

func (x *UpdateWorkRequest) Reset() {
	*x = UpdateWorkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkRequest) ProtoMessage() {}

func (x *UpdateWorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkRequest) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateWorkRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *UpdateWorkRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *UpdateWorkRequest) GetNewState() UpdateWorkRequest_NewState {
	if x != nil {
		return x.NewState
	}
	return UpdateWorkRequest_UNSPECIFIED
}

type UpdateWorkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Work *Work `protobuf:"bytes,1,opt,name=work,proto3" json:"work,omitempty"`
}

func (x *UpdateWorkResponse) Reset() {
	*x = UpdateWorkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkResponse) ProtoMessage() {}

func (x *UpdateWorkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkResponse.ProtoReflect.Descriptor instead.
func (*UpdateWorkResponse) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateWorkResponse) GetWork() *Work {
	if x != nil {
		return x.Work
	}
	return nil
}

// Used to change the state of all work assigned to a particular node. This is typically only used
// when initially connecting to a node, or if we want to drain the work assigned to a node if it is
// being removed.
type BulkUpdateWorkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewState BulkUpdateWorkRequest_NewState `protobuf:"varint,1,opt,name=new_state,json=newState,proto3,enum=flex.BulkUpdateWorkRequest_NewState" json:"new_state,omitempty"`
}

func (x *BulkUpdateWorkRequest) Reset() {
	*x = BulkUpdateWorkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateWorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateWorkRequest) ProtoMessage() {}

func (x *BulkUpdateWorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateWorkRequest.ProtoReflect.Descriptor instead.
func (*BulkUpdateWorkRequest) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{7}
}

func (x *BulkUpdateWorkRequest) GetNewState() BulkUpdateWorkRequest_NewState {
	if x != nil {
		return x.NewState
	}
	return BulkUpdateWorkRequest_UNSPECIFIED
}

// This is a bulk operation details about individual work entries is not returned. Instead the
// response reflects if all outstanding work was successfully moved to the new state.
type BulkUpdateWorkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BulkUpdateWorkResponse) Reset() {
	*x = BulkUpdateWorkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateWorkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateWorkResponse) ProtoMessage() {}

func (x *BulkUpdateWorkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateWorkResponse.ProtoReflect.Descriptor instead.
func (*BulkUpdateWorkResponse) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{8}
}

func (x *BulkUpdateWorkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BulkUpdateWorkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// BeeRemote assigns work for a job to one or more worker nodes.
type WorkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId     string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Used as the upload ID for multipart uploads, or any other time
	// an external identifer is needed to coordinate a distributed transfer.
	ExternalId          string               `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Path                string               `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Segment             *WorkRequest_Segment `protobuf:"bytes,5,opt,name=segment,proto3" json:"segment,omitempty"`
	RemoteStorageTarget string               `protobuf:"bytes,6,opt,name=remote_storage_target,json=remoteStorageTarget,proto3" json:"remote_storage_target,omitempty"`
	// Types that are assignable to Type:
	//
	//	*WorkRequest_Mock
	//	*WorkRequest_Sync
	Type isWorkRequest_Type `protobuf_oneof:"Type"`
}

func (x *WorkRequest) Reset() {
	*x = WorkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkRequest) ProtoMessage() {}

func (x *WorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkRequest.ProtoReflect.Descriptor instead.
func (*WorkRequest) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{9}
}

func (x *WorkRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *WorkRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *WorkRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *WorkRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WorkRequest) GetSegment() *WorkRequest_Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

func (x *WorkRequest) GetRemoteStorageTarget() string {
	if x != nil {
		return x.RemoteStorageTarget
	}
	return ""
}

func (m *WorkRequest) GetType() isWorkRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *WorkRequest) GetMock() *MockJob {
	if x, ok := x.GetType().(*WorkRequest_Mock); ok {
		return x.Mock
	}
	return nil
}

func (x *WorkRequest) GetSync() *SyncJob {
	if x, ok := x.GetType().(*WorkRequest_Sync); ok {
		return x.Sync
	}
	return nil
}

type isWorkRequest_Type interface {
	isWorkRequest_Type()
}

type WorkRequest_Mock struct {
	Mock *MockJob `protobuf:"bytes,10,opt,name=mock,proto3,oneof"`
}

type WorkRequest_Sync struct {
	Sync *SyncJob `protobuf:"bytes,11,opt,name=sync,proto3,oneof"`
}

func (*WorkRequest_Mock) isWorkRequest_Type() {}

func (*WorkRequest_Sync) isWorkRequest_Type() {}

type MockJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumTestSegments int32  `protobuf:"varint,1,opt,name=num_test_segments,json=numTestSegments,proto3" json:"num_test_segments,omitempty"`
	FileSize        int64  `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	ExternalId      string `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	ShouldFail      bool   `protobuf:"varint,4,opt,name=should_fail,json=shouldFail,proto3" json:"should_fail,omitempty"`
	CanRetry        bool   `protobuf:"varint,5,opt,name=can_retry,json=canRetry,proto3" json:"can_retry,omitempty"`
}

func (x *MockJob) Reset() {
	*x = MockJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockJob) ProtoMessage() {}

func (x *MockJob) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockJob.ProtoReflect.Descriptor instead.
func (*MockJob) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{10}
}

func (x *MockJob) GetNumTestSegments() int32 {
	if x != nil {
		return x.NumTestSegments
	}
	return 0
}

func (x *MockJob) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *MockJob) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *MockJob) GetShouldFail() bool {
	if x != nil {
		return x.ShouldFail
	}
	return false
}

func (x *MockJob) GetCanRetry() bool {
	if x != nil {
		return x.CanRetry
	}
	return false
}

// A SyncJob is WHAT work needs to be done. It is populated based on the
// file system modification event or by a user describing some work that needs
// to be done. It does not carry any details about HOW the request will be
// fufilled (that is part of the generated SyncRequest).
type SyncJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation SyncJob_Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=flex.SyncJob_Operation" json:"operation,omitempty"`
	// When an object already exists in BeeGFS (for downloads) an error is returned by default, or
	// it can be optionally overwritten. This currently does nothing for uploads, the object is
	// always uploaded and overwritten unless the S3 bucket has object versioning enabled.
	Overwrite bool `protobuf:"varint,2,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	// By default the RemotePath (object ID/file path) in the RST is the same as the local path in
	// BeeGFS. However for downloads, if the names/paths differ, the remote path can be specified,
	// for example to restore a file in an RST to a different location in BeeGFS. This currently is
	// ignored for uploads.
	RemotePath string `protobuf:"bytes,3,opt,name=remote_path,json=remotePath,proto3" json:"remote_path,omitempty"`
}

func (x *SyncJob) Reset() {
	*x = SyncJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncJob) ProtoMessage() {}

func (x *SyncJob) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncJob.ProtoReflect.Descriptor instead.
func (*SyncJob) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{11}
}

func (x *SyncJob) GetOperation() SyncJob_Operation {
	if x != nil {
		return x.Operation
	}
	return SyncJob_UNSPECIFIED
}

func (x *SyncJob) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

func (x *SyncJob) GetRemotePath() string {
	if x != nil {
		return x.RemotePath
	}
	return ""
}

// Currently while requests types are specific to a particular worker node type,
// we use the same work type for all nodes. This is what allow us to return
// work results to BeeRemote using a generic unary RPC, instead of having to
// establish a long-lived streaming RPC with each worker node to return work
// results of a specific type.
type Work struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	JobId     string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// The work status is only ever updated by BeeSync with two exceptions: (1) if a request
	// was never scheduled, the work state should be CREATED with the message indicating the
	// last RPC error returned trying to assign the WR to a BeeSync node. (2) If a request was
	// assigned to a BeeSync node but BeeRemote cannot retrieve the status, the work state
	// should be set to "Unknown" with a message indicating the last RPC error that was returned
	// trying to retrieve the results from the BeeSync node. When the state/message are set by
	// BeeRemote the message should always clearly indicate "error communicating to node" to clearly
	// distinguish when the state was set locally by BeeRemote or by the remote BeeSync node.
	Status *Work_Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// Each work request is split into one or more parts so data can be
	// transferred in parallel on each assigned node.
	Parts []*Work_Part `protobuf:"bytes,5,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *Work) Reset() {
	*x = Work{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Work) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Work) ProtoMessage() {}

func (x *Work) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Work.ProtoReflect.Descriptor instead.
func (*Work) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{12}
}

func (x *Work) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Work) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *Work) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Work) GetStatus() *Work_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Work) GetParts() []*Work_Part {
	if x != nil {
		return x.Parts
	}
	return nil
}

// We use a common configuration update request/response types for all worker
// node types.
type UpdateConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// While worker nodes could infer BeeRemote network details, it is better we
	// explicitly tell them where to send work results. Especially if we want to
	// send and receive work requests on different interfaces or ports.
	BeeRemote *BeeRemoteNode `protobuf:"bytes,1,opt,name=bee_remote,json=beeRemote,proto3" json:"bee_remote,omitempty"`
	// All RemoteStorageTarget(s) that should be configured need to be included in
	// each message. Any that are not included will be deleted.
	Rsts []*RemoteStorageTarget `protobuf:"bytes,2,rep,name=rsts,proto3" json:"rsts,omitempty"`
}

func (x *UpdateConfigRequest) Reset() {
	*x = UpdateConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigRequest) ProtoMessage() {}

func (x *UpdateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigRequest) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateConfigRequest) GetBeeRemote() *BeeRemoteNode {
	if x != nil {
		return x.BeeRemote
	}
	return nil
}

func (x *UpdateConfigRequest) GetRsts() []*RemoteStorageTarget {
	if x != nil {
		return x.Rsts
	}
	return nil
}

type UpdateConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result UpdateConfigResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flex.UpdateConfigResponse_Result" json:"result,omitempty"`
	// Message should be used to return any additional details, particularly to aid in troubleshooting.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateConfigResponse) Reset() {
	*x = UpdateConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigResponse) ProtoMessage() {}

func (x *UpdateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigResponse) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateConfigResponse) GetResult() UpdateConfigResponse_Result {
	if x != nil {
		return x.Result
	}
	return UpdateConfigResponse_UNSPECIFIED
}

func (x *UpdateConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BeeRemoteNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *BeeRemoteNode) Reset() {
	*x = BeeRemoteNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeeRemoteNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeeRemoteNode) ProtoMessage() {}

func (x *BeeRemoteNode) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeeRemoteNode.ProtoReflect.Descriptor instead.
func (*BeeRemoteNode) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{15}
}

func (x *BeeRemoteNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BeeRemoteNode) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Remote Storage Targets (RSTs) describe where data should be stored or
// retrieved from. Different BeeRemote worker nodes like BeeSync nodes should
// support one or more RST types. This is not currently enforced anywhere by the
// protobuf defined structs. When submitting job requests it is the callers
// responsibility to ensure the reference RST and job type are compatible.
// Otherwise BeeRemote will reject the job.
//
// Note while there is a lot of data contained in RemoteStorageTarget, gRPC will
// not serialize fields to the wire unless they are set.
// https://protobuf.dev/programming-guides/proto3/#specifying-field-rules This
// allows us to define all possible fields that may need to be sent to BeeSync
// to configure different target types, without extra overhead.
type RemoteStorageTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Policies *RemoteStorageTarget_Policies `protobuf:"bytes,3,opt,name=policies,proto3" json:"policies,omitempty"`
	// Type defines fields required to figure out "where" to transfer content.
	// IMPORTANT: When adding a new RST type before it can be configured by
	// BeeRemote/other it must also be added to the rst.SupportedRSTTypes map in
	// so it can be used with config.SetRSTTypeHook() to allow its configuration
	// to be unmarshalled into the Go structs generated by protoc. See the notes
	// in the rst package for additional details.
	//
	// Types that are assignable to Type:
	//
	//	*RemoteStorageTarget_S3_
	//	*RemoteStorageTarget_Posix
	//	*RemoteStorageTarget_Azure_
	//	*RemoteStorageTarget_Mock
	Type isRemoteStorageTarget_Type `protobuf_oneof:"type"`
}

func (x *RemoteStorageTarget) Reset() {
	*x = RemoteStorageTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget) ProtoMessage() {}

func (x *RemoteStorageTarget) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{16}
}

func (x *RemoteStorageTarget) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RemoteStorageTarget) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoteStorageTarget) GetPolicies() *RemoteStorageTarget_Policies {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (m *RemoteStorageTarget) GetType() isRemoteStorageTarget_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RemoteStorageTarget) GetS3() *RemoteStorageTarget_S3 {
	if x, ok := x.GetType().(*RemoteStorageTarget_S3_); ok {
		return x.S3
	}
	return nil
}

func (x *RemoteStorageTarget) GetPosix() *RemoteStorageTarget_POSIX {
	if x, ok := x.GetType().(*RemoteStorageTarget_Posix); ok {
		return x.Posix
	}
	return nil
}

func (x *RemoteStorageTarget) GetAzure() *RemoteStorageTarget_Azure {
	if x, ok := x.GetType().(*RemoteStorageTarget_Azure_); ok {
		return x.Azure
	}
	return nil
}

func (x *RemoteStorageTarget) GetMock() string {
	if x, ok := x.GetType().(*RemoteStorageTarget_Mock); ok {
		return x.Mock
	}
	return ""
}

type isRemoteStorageTarget_Type interface {
	isRemoteStorageTarget_Type()
}

type RemoteStorageTarget_S3_ struct {
	S3 *RemoteStorageTarget_S3 `protobuf:"bytes,4,opt,name=s3,proto3,oneof"`
}

type RemoteStorageTarget_Posix struct {
	Posix *RemoteStorageTarget_POSIX `protobuf:"bytes,5,opt,name=posix,proto3,oneof"`
}

type RemoteStorageTarget_Azure_ struct {
	Azure *RemoteStorageTarget_Azure `protobuf:"bytes,6,opt,name=azure,proto3,oneof"`
}

type RemoteStorageTarget_Mock struct {
	Mock string `protobuf:"bytes,7,opt,name=mock,proto3,oneof"`
}

func (*RemoteStorageTarget_S3_) isRemoteStorageTarget_Type() {}

func (*RemoteStorageTarget_Posix) isRemoteStorageTarget_Type() {}

func (*RemoteStorageTarget_Azure_) isRemoteStorageTarget_Type() {}

func (*RemoteStorageTarget_Mock) isRemoteStorageTarget_Type() {}

// A segment indicates what portion of the file a particular worker node should
// work on. Segments can be divided into one or more parts, which can be used to
// execute the requested operation in parallel if supported by the RST type.
type WorkRequest_Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffsetStart int64 `protobuf:"varint,1,opt,name=offset_start,json=offsetStart,proto3" json:"offset_start,omitempty"`
	// Inclusive of the last offset.
	OffsetStop int64 `protobuf:"varint,2,opt,name=offset_stop,json=offsetStop,proto3" json:"offset_stop,omitempty"`
	// The amount of data in each part is calculated based on the offset start/stop.
	PartsStart int32 `protobuf:"varint,3,opt,name=parts_start,json=partsStart,proto3" json:"parts_start,omitempty"`
	// Inclusive of the last part.
	PartsStop int32 `protobuf:"varint,4,opt,name=parts_stop,json=partsStop,proto3" json:"parts_stop,omitempty"`
}

func (x *WorkRequest_Segment) Reset() {
	*x = WorkRequest_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkRequest_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkRequest_Segment) ProtoMessage() {}

func (x *WorkRequest_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkRequest_Segment.ProtoReflect.Descriptor instead.
func (*WorkRequest_Segment) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{9, 0}
}

func (x *WorkRequest_Segment) GetOffsetStart() int64 {
	if x != nil {
		return x.OffsetStart
	}
	return 0
}

func (x *WorkRequest_Segment) GetOffsetStop() int64 {
	if x != nil {
		return x.OffsetStop
	}
	return 0
}

func (x *WorkRequest_Segment) GetPartsStart() int32 {
	if x != nil {
		return x.PartsStart
	}
	return 0
}

func (x *WorkRequest_Segment) GetPartsStop() int32 {
	if x != nil {
		return x.PartsStop
	}
	return 0
}

type Work_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State Work_State `protobuf:"varint,1,opt,name=state,proto3,enum=flex.Work_State" json:"state,omitempty"`
	// See the guidelines for handling messages on Job.Status.Message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Work_Status) Reset() {
	*x = Work_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Work_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Work_Status) ProtoMessage() {}

func (x *Work_Status) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Work_Status.ProtoReflect.Descriptor instead.
func (*Work_Status) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Work_Status) GetState() Work_State {
	if x != nil {
		return x.State
	}
	return Work_UNSPECIFIED
}

func (x *Work_Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// A part is not the same as a segment. A segment is some part of a larger
// operation assigned to a particular worker node, and each segment is
// divided into one or more parts allowing operations to be executed in
// parallel on a worker node. We use a standard part definition for all RST
// types. The use of the fields in Part will vary depending on the type.
type Work_Part struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartNumber  int32 `protobuf:"varint,1,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	OffsetStart int64 `protobuf:"varint,2,opt,name=offset_start,json=offsetStart,proto3" json:"offset_start,omitempty"`
	OffsetStop  int64 `protobuf:"varint,3,opt,name=offset_stop,json=offsetStop,proto3" json:"offset_stop,omitempty"`
	// ETags primarily verify the completeness and sequence of the upload. They do indirectly
	// verify parts were received correctly since ETags are generated based on the received
	// parts data.
	EntityTag string `protobuf:"bytes,4,opt,name=entity_tag,json=entityTag,proto3" json:"entity_tag,omitempty"`
	// The SHA-256 checksum of the data contained in this part. Note the checksum differs from
	// the ETag in that it is an application layer integrity check of the part's content.
	ChecksumSha256 string `protobuf:"bytes,5,opt,name=checksum_sha256,json=checksumSha256,proto3" json:"checksum_sha256,omitempty"`
	Completed      bool   `protobuf:"varint,6,opt,name=completed,proto3" json:"completed,omitempty"`
}

func (x *Work_Part) Reset() {
	*x = Work_Part{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Work_Part) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Work_Part) ProtoMessage() {}

func (x *Work_Part) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Work_Part.ProtoReflect.Descriptor instead.
func (*Work_Part) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{12, 1}
}

func (x *Work_Part) GetPartNumber() int32 {
	if x != nil {
		return x.PartNumber
	}
	return 0
}

func (x *Work_Part) GetOffsetStart() int64 {
	if x != nil {
		return x.OffsetStart
	}
	return 0
}

func (x *Work_Part) GetOffsetStop() int64 {
	if x != nil {
		return x.OffsetStop
	}
	return 0
}

func (x *Work_Part) GetEntityTag() string {
	if x != nil {
		return x.EntityTag
	}
	return ""
}

func (x *Work_Part) GetChecksumSha256() string {
	if x != nil {
		return x.ChecksumSha256
	}
	return ""
}

func (x *Work_Part) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

type RemoteStorageTarget_Policies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the file size is larger than this, BeeRemote handles creating/finishing the multipart
	// upload (if applicable) and will assign the job to multiple worker nodes. If the file size
	// is smaller than this, BeeRemote immediately assigns the job to a single worker node that
	// handles creating/finishing the multipart upload (if needed).
	FastStartMaxSize int64 `protobuf:"varint,1,opt,name=fast_start_max_size,json=fastStartMaxSize,proto3" json:"fast_start_max_size,omitempty"`
}

func (x *RemoteStorageTarget_Policies) Reset() {
	*x = RemoteStorageTarget_Policies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget_Policies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_Policies) ProtoMessage() {}

func (x *RemoteStorageTarget_Policies) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget_Policies.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget_Policies) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{16, 0}
}

func (x *RemoteStorageTarget_Policies) GetFastStartMaxSize() int64 {
	if x != nil {
		return x.FastStartMaxSize
	}
	return 0
}

// The S3 type uses the AWS S3 SDK under the hood. To support non-AWS S3
// services we implement the EndPointResolverWithOptions interface to
// provide custom endpoint resolving behavior. By specifying the
// endpoint_url and optionally the parition_id and region we can support
// local S3 services like MinIO and theoretically other cloud providers like
// Azure or GCP.
type RemoteStorageTarget_S3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Endpoints should be formatted like: https://<ip-or-hostname>:<port>.
	// Ex: https://localhost:9000.
	// Because we are overriding the default AWS S3 SDK behavior an endpoint
	// must always be specified, even when using AWS.
	EndpointUrl string `protobuf:"bytes,1,opt,name=endpoint_url,json=endpointUrl,proto3" json:"endpoint_url,omitempty"`
	// AWS infrastructure is divided into partitions, with each partition
	// as a grouping of regions. Partition ID may not make sense for all
	// S3 services, and can sometimes be omitted (for example with MinIO).
	// https://docs.aws.amazon.com/sdk-for-go/api/aws/endpoints/#pkg-constants
	PartitionId string `protobuf:"bytes,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Region can sometimes be omitted (for example with MinIO).
	Region    string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Bucket    string `protobuf:"bytes,4,opt,name=bucket,proto3" json:"bucket,omitempty"`
	AccessKey string `protobuf:"bytes,5,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey string `protobuf:"bytes,6,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
}

func (x *RemoteStorageTarget_S3) Reset() {
	*x = RemoteStorageTarget_S3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget_S3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_S3) ProtoMessage() {}

func (x *RemoteStorageTarget_S3) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget_S3.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget_S3) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{16, 1}
}

func (x *RemoteStorageTarget_S3) GetEndpointUrl() string {
	if x != nil {
		return x.EndpointUrl
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type RemoteStorageTarget_Azure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S3      *RemoteStorageTarget_S3 `protobuf:"bytes,1,opt,name=s3,proto3" json:"s3,omitempty"`
	Account string                  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *RemoteStorageTarget_Azure) Reset() {
	*x = RemoteStorageTarget_Azure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget_Azure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_Azure) ProtoMessage() {}

func (x *RemoteStorageTarget_Azure) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget_Azure.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget_Azure) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{16, 2}
}

func (x *RemoteStorageTarget_Azure) GetS3() *RemoteStorageTarget_S3 {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *RemoteStorageTarget_Azure) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type RemoteStorageTarget_POSIX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *RemoteStorageTarget_POSIX) Reset() {
	*x = RemoteStorageTarget_POSIX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flex_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget_POSIX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_POSIX) ProtoMessage() {}

func (x *RemoteStorageTarget_POSIX) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget_POSIX.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget_POSIX) Descriptor() ([]byte, []int) {
	return file_flex_proto_rawDescGZIP(), []int{16, 3}
}

func (x *RemoteStorageTarget_POSIX) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_flex_proto protoreflect.FileDescriptor

var file_flex_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x66, 0x6c,
	0x65, 0x78, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x5e, 0x0a, 0x11,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x2e, 0x0a, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x6e, 0x0a, 0x09,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x40, 0x0a, 0x11,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x34,
	0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x04,
	0x77, 0x6f, 0x72, 0x6b, 0x22, 0xb4, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x2a, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x22, 0x34, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x04, 0x77, 0x6f, 0x72,
	0x6b, 0x22, 0x86, 0x01, 0x0a, 0x15, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x6e,
	0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2a,
	0x0a, 0x08, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55,
	0x4e, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x01, 0x22, 0x4c, 0x0a, 0x16, 0x42, 0x75,
	0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc3, 0x03, 0x0a, 0x0b, 0x57, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x04,
	0x6d, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x6c, 0x65,
	0x78, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x63,
	0x6b, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x48, 0x00,
	0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x1a, 0x8d, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x73,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb1,
	0x01, 0x0a, 0x07, 0x4d, 0x6f, 0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75,
	0x6d, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x12, 0x35,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x36, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02, 0x22, 0xc8, 0x04, 0x0a,
	0x04, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x65, 0x78,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x73, 0x1a, 0x4a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6c, 0x65,
	0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xd1, 0x01,
	0x0a, 0x04, 0x50, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x53, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x22, 0x83, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x09, 0x22, 0x78, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x0a, 0x62, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x42, 0x65, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x62, 0x65, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x04, 0x72, 0x73, 0x74,
	0x73, 0x22, 0xad, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x65,
	0x78, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x40, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x03, 0x22, 0x39, 0x0a, 0x0d, 0x42, 0x65, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x9d, 0x05, 0x0a,
	0x13, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x65,
	0x78, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e,
	0x53, 0x33, 0x48, 0x00, 0x52, 0x02, 0x73, 0x33, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x69,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x2e, 0x50, 0x4f, 0x53, 0x49, 0x58, 0x48, 0x00, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x69,
	0x78, 0x12, 0x37, 0x0a, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x6d, 0x6f,
	0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x63, 0x6b,
	0x1a, 0x39, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13,
	0x66, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x61, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0xb8, 0x01, 0x0a, 0x02,
	0x53, 0x33, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x4f, 0x0a, 0x05, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x12,
	0x2c, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c,
	0x65, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x33, 0x52, 0x02, 0x73, 0x33, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1b, 0x0a, 0x05, 0x50, 0x4f, 0x53, 0x49, 0x58,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0xe0, 0x02, 0x0a,
	0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x2e, 0x66, 0x6c,
	0x65, 0x78, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12,
	0x16, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x17,
	0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x12,
	0x17, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x12, 0x1b, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68,
	0x69, 0x6e, 0x6b, 0x70, 0x61, 0x72, 0x71, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x6c, 0x65, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flex_proto_rawDescOnce sync.Once
	file_flex_proto_rawDescData = file_flex_proto_rawDesc
)

func file_flex_proto_rawDescGZIP() []byte {
	file_flex_proto_rawDescOnce.Do(func() {
		file_flex_proto_rawDescData = protoimpl.X.CompressGZIP(file_flex_proto_rawDescData)
	})
	return file_flex_proto_rawDescData
}

var file_flex_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_flex_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_flex_proto_goTypes = []interface{}{
	(UpdateWorkRequest_NewState)(0),      // 0: flex.UpdateWorkRequest.NewState
	(BulkUpdateWorkRequest_NewState)(0),  // 1: flex.BulkUpdateWorkRequest.NewState
	(SyncJob_Operation)(0),               // 2: flex.SyncJob.Operation
	(Work_State)(0),                      // 3: flex.Work.State
	(UpdateConfigResponse_Result)(0),     // 4: flex.UpdateConfigResponse.Result
	(*HeartbeatRequest)(nil),             // 5: flex.HeartbeatRequest
	(*HeartbeatResponse)(nil),            // 6: flex.HeartbeatResponse
	(*NodeStats)(nil),                    // 7: flex.NodeStats
	(*SubmitWorkRequest)(nil),            // 8: flex.SubmitWorkRequest
	(*SubmitWorkResponse)(nil),           // 9: flex.SubmitWorkResponse
	(*UpdateWorkRequest)(nil),            // 10: flex.UpdateWorkRequest
	(*UpdateWorkResponse)(nil),           // 11: flex.UpdateWorkResponse
	(*BulkUpdateWorkRequest)(nil),        // 12: flex.BulkUpdateWorkRequest
	(*BulkUpdateWorkResponse)(nil),       // 13: flex.BulkUpdateWorkResponse
	(*WorkRequest)(nil),                  // 14: flex.WorkRequest
	(*MockJob)(nil),                      // 15: flex.MockJob
	(*SyncJob)(nil),                      // 16: flex.SyncJob
	(*Work)(nil),                         // 17: flex.Work
	(*UpdateConfigRequest)(nil),          // 18: flex.UpdateConfigRequest
	(*UpdateConfigResponse)(nil),         // 19: flex.UpdateConfigResponse
	(*BeeRemoteNode)(nil),                // 20: flex.BeeRemoteNode
	(*RemoteStorageTarget)(nil),          // 21: flex.RemoteStorageTarget
	(*WorkRequest_Segment)(nil),          // 22: flex.WorkRequest.Segment
	(*Work_Status)(nil),                  // 23: flex.Work.Status
	(*Work_Part)(nil),                    // 24: flex.Work.Part
	(*RemoteStorageTarget_Policies)(nil), // 25: flex.RemoteStorageTarget.Policies
	(*RemoteStorageTarget_S3)(nil),       // 26: flex.RemoteStorageTarget.S3
	(*RemoteStorageTarget_Azure)(nil),    // 27: flex.RemoteStorageTarget.Azure
	(*RemoteStorageTarget_POSIX)(nil),    // 28: flex.RemoteStorageTarget.POSIX
	(*timestamppb.Timestamp)(nil),        // 29: google.protobuf.Timestamp
}
var file_flex_proto_depIdxs = []int32{
	7,  // 0: flex.HeartbeatResponse.node_stats:type_name -> flex.NodeStats
	29, // 1: flex.NodeStats.timestamp:type_name -> google.protobuf.Timestamp
	14, // 2: flex.SubmitWorkRequest.request:type_name -> flex.WorkRequest
	17, // 3: flex.SubmitWorkResponse.work:type_name -> flex.Work
	0,  // 4: flex.UpdateWorkRequest.new_state:type_name -> flex.UpdateWorkRequest.NewState
	17, // 5: flex.UpdateWorkResponse.work:type_name -> flex.Work
	1,  // 6: flex.BulkUpdateWorkRequest.new_state:type_name -> flex.BulkUpdateWorkRequest.NewState
	22, // 7: flex.WorkRequest.segment:type_name -> flex.WorkRequest.Segment
	15, // 8: flex.WorkRequest.mock:type_name -> flex.MockJob
	16, // 9: flex.WorkRequest.sync:type_name -> flex.SyncJob
	2,  // 10: flex.SyncJob.operation:type_name -> flex.SyncJob.Operation
	23, // 11: flex.Work.status:type_name -> flex.Work.Status
	24, // 12: flex.Work.parts:type_name -> flex.Work.Part
	20, // 13: flex.UpdateConfigRequest.bee_remote:type_name -> flex.BeeRemoteNode
	21, // 14: flex.UpdateConfigRequest.rsts:type_name -> flex.RemoteStorageTarget
	4,  // 15: flex.UpdateConfigResponse.result:type_name -> flex.UpdateConfigResponse.Result
	25, // 16: flex.RemoteStorageTarget.policies:type_name -> flex.RemoteStorageTarget.Policies
	26, // 17: flex.RemoteStorageTarget.s3:type_name -> flex.RemoteStorageTarget.S3
	28, // 18: flex.RemoteStorageTarget.posix:type_name -> flex.RemoteStorageTarget.POSIX
	27, // 19: flex.RemoteStorageTarget.azure:type_name -> flex.RemoteStorageTarget.Azure
	3,  // 20: flex.Work.Status.state:type_name -> flex.Work.State
	26, // 21: flex.RemoteStorageTarget.Azure.s3:type_name -> flex.RemoteStorageTarget.S3
	18, // 22: flex.WorkerNode.UpdateConfig:input_type -> flex.UpdateConfigRequest
	5,  // 23: flex.WorkerNode.Heartbeat:input_type -> flex.HeartbeatRequest
	8,  // 24: flex.WorkerNode.SubmitWork:input_type -> flex.SubmitWorkRequest
	10, // 25: flex.WorkerNode.UpdateWork:input_type -> flex.UpdateWorkRequest
	12, // 26: flex.WorkerNode.BulkUpdateWork:input_type -> flex.BulkUpdateWorkRequest
	19, // 27: flex.WorkerNode.UpdateConfig:output_type -> flex.UpdateConfigResponse
	6,  // 28: flex.WorkerNode.Heartbeat:output_type -> flex.HeartbeatResponse
	9,  // 29: flex.WorkerNode.SubmitWork:output_type -> flex.SubmitWorkResponse
	11, // 30: flex.WorkerNode.UpdateWork:output_type -> flex.UpdateWorkResponse
	13, // 31: flex.WorkerNode.BulkUpdateWork:output_type -> flex.BulkUpdateWorkResponse
	27, // [27:32] is the sub-list for method output_type
	22, // [22:27] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_flex_proto_init() }
func file_flex_proto_init() {
	if File_flex_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flex_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitWorkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitWorkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateWorkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateWorkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Work); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeeRemoteNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkRequest_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Work_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Work_Part); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget_Policies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget_S3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget_Azure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flex_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget_POSIX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flex_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*WorkRequest_Mock)(nil),
		(*WorkRequest_Sync)(nil),
	}
	file_flex_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*RemoteStorageTarget_S3_)(nil),
		(*RemoteStorageTarget_Posix)(nil),
		(*RemoteStorageTarget_Azure_)(nil),
		(*RemoteStorageTarget_Mock)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flex_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flex_proto_goTypes,
		DependencyIndexes: file_flex_proto_depIdxs,
		EnumInfos:         file_flex_proto_enumTypes,
		MessageInfos:      file_flex_proto_msgTypes,
	}.Build()
	File_flex_proto = out.File
	file_flex_proto_rawDesc = nil
	file_flex_proto_goTypes = nil
	file_flex_proto_depIdxs = nil
}
