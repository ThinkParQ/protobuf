// Package Flex contains common messages used across multiple Flex services.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.2
// source: flex.proto

//go:build protoopaque

package flex

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateWorkRequest_NewState int32

const (
	// This state has no semantic value and the state should never be UNSPECIFIED unless there
	// is a bug.
	UpdateWorkRequest_UNSPECIFIED UpdateWorkRequest_NewState = 0
	// Cancelled work requests are also deleted from the worker node.
	UpdateWorkRequest_CANCELLED UpdateWorkRequest_NewState = 1
)

// Enum value maps for UpdateWorkRequest_NewState.
var (
	UpdateWorkRequest_NewState_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "CANCELLED",
	}
	UpdateWorkRequest_NewState_value = map[string]int32{
		"UNSPECIFIED": 0,
		"CANCELLED":   1,
	}
)

func (x UpdateWorkRequest_NewState) Enum() *UpdateWorkRequest_NewState {
	p := new(UpdateWorkRequest_NewState)
	*p = x
	return p
}

func (x UpdateWorkRequest_NewState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateWorkRequest_NewState) Descriptor() protoreflect.EnumDescriptor {
	return file_flex_proto_enumTypes[0].Descriptor()
}

func (UpdateWorkRequest_NewState) Type() protoreflect.EnumType {
	return &file_flex_proto_enumTypes[0]
}

func (x UpdateWorkRequest_NewState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// TODO: https://github.com/ThinkParQ/bee-sync/issues/5
// Allow bulk updates to work requests
type BulkUpdateWorkRequest_NewState int32

const (
	// This state has no semantic value and the state should never be UNSPECIFIED unless there
	// is a bug.
	BulkUpdateWorkRequest_UNSPECIFIED BulkUpdateWorkRequest_NewState = 0
	BulkUpdateWorkRequest_UNCHANGED   BulkUpdateWorkRequest_NewState = 1
)

// Enum value maps for BulkUpdateWorkRequest_NewState.
var (
	BulkUpdateWorkRequest_NewState_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "UNCHANGED",
	}
	BulkUpdateWorkRequest_NewState_value = map[string]int32{
		"UNSPECIFIED": 0,
		"UNCHANGED":   1,
	}
)

func (x BulkUpdateWorkRequest_NewState) Enum() *BulkUpdateWorkRequest_NewState {
	p := new(BulkUpdateWorkRequest_NewState)
	*p = x
	return p
}

func (x BulkUpdateWorkRequest_NewState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BulkUpdateWorkRequest_NewState) Descriptor() protoreflect.EnumDescriptor {
	return file_flex_proto_enumTypes[1].Descriptor()
}

func (BulkUpdateWorkRequest_NewState) Type() protoreflect.EnumType {
	return &file_flex_proto_enumTypes[1]
}

func (x BulkUpdateWorkRequest_NewState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type SyncJob_Operation int32

const (
	SyncJob_UNSPECIFIED SyncJob_Operation = 0
	SyncJob_UPLOAD      SyncJob_Operation = 1
	SyncJob_DOWNLOAD    SyncJob_Operation = 2
)

// Enum value maps for SyncJob_Operation.
var (
	SyncJob_Operation_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "UPLOAD",
		2: "DOWNLOAD",
	}
	SyncJob_Operation_value = map[string]int32{
		"UNSPECIFIED": 0,
		"UPLOAD":      1,
		"DOWNLOAD":    2,
	}
)

func (x SyncJob_Operation) Enum() *SyncJob_Operation {
	p := new(SyncJob_Operation)
	*p = x
	return p
}

func (x SyncJob_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJob_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_flex_proto_enumTypes[2].Descriptor()
}

func (SyncJob_Operation) Type() protoreflect.EnumType {
	return &file_flex_proto_enumTypes[2]
}

func (x SyncJob_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type Work_State int32

const (
	// This state has no semantic value and the state should never be UNSPECIFIED unless there
	// is a bug.
	Work_UNSPECIFIED Work_State = 0
	// When the state of a request cannot be definitely determined.
	// For example if BeeRemote cannot contact a worker node.
	Work_UNKNOWN Work_State = 1
	// BeeRemote may use this state if the work request has definitely never been assigned to
	// any worker nodes and is safe to cancel without checking with all worker nodes first.
	Work_CREATED Work_State = 2
	// When the worker node has accepted a request but is waiting on cycles to run it.
	Work_SCHEDULED Work_State = 3
	// When a worker node is actively running a request.
	Work_RUNNING Work_State = 4
	// A user manually requested the job be paused.
	// TODO: https://github.com/ThinkParQ/bee-remote/issues/16
	// PAUSED = 5;
	//
	// ERROR indicates one or more transient/ephemeral error(s) occurred carrying out the
	// request, but the worker node is still retrying the request. Once the allowed number of
	// retries or retry timeout is exceed, the work request will fail.
	Work_ERROR Work_State = 6
	// FAILED indicates one or more unrecoverable errors occurred carrying out this request.
	// Typically requests fail due to some condition that requires user intervention, such as
	// updating the RST configuration, but can also fail if they exceeds the allowed number of
	// retries or retry timeout. Once work reaches this state and a response is sent to
	// BeeRemote, the worker node should no longer have a record or be acting on this request.
	// In other words, this is a terminal state for requests from the worker node's perspective.
	Work_FAILED Work_State = 7
	// Work requests may be cancelled manually be a user. Once work reaches this state and a
	// response is sent to BeeRemote, the worker node should no longer have a record or be
	// acting on this request.
	Work_CANCELLED Work_State = 8
	// If the work request completed successfully. Once work reaches this state and a response
	// is sent to BeeRemote, the worker node should no longer have a record or be acting on this
	// request.
	Work_COMPLETED Work_State = 9
)

// Enum value maps for Work_State.
var (
	Work_State_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "UNKNOWN",
		2: "CREATED",
		3: "SCHEDULED",
		4: "RUNNING",
		6: "ERROR",
		7: "FAILED",
		8: "CANCELLED",
		9: "COMPLETED",
	}
	Work_State_value = map[string]int32{
		"UNSPECIFIED": 0,
		"UNKNOWN":     1,
		"CREATED":     2,
		"SCHEDULED":   3,
		"RUNNING":     4,
		"ERROR":       6,
		"FAILED":      7,
		"CANCELLED":   8,
		"COMPLETED":   9,
	}
)

func (x Work_State) Enum() *Work_State {
	p := new(Work_State)
	*p = x
	return p
}

func (x Work_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Work_State) Descriptor() protoreflect.EnumDescriptor {
	return file_flex_proto_enumTypes[3].Descriptor()
}

func (Work_State) Type() protoreflect.EnumType {
	return &file_flex_proto_enumTypes[3]
}

func (x Work_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type UpdateConfigResponse_Result int32

const (
	UpdateConfigResponse_UNSPECIFIED UpdateConfigResponse_Result = 0 // Should not be used. Exists only as the default if there is a programming error.
	UpdateConfigResponse_SUCCESS     UpdateConfigResponse_Result = 1 // The configuration was successfully updated.
	UpdateConfigResponse_PARTIAL     UpdateConfigResponse_Result = 2 // The configuration was partially updated (see the message for details).
	UpdateConfigResponse_FAILURE     UpdateConfigResponse_Result = 3 // The configuration was not updated.
)

// Enum value maps for UpdateConfigResponse_Result.
var (
	UpdateConfigResponse_Result_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SUCCESS",
		2: "PARTIAL",
		3: "FAILURE",
	}
	UpdateConfigResponse_Result_value = map[string]int32{
		"UNSPECIFIED": 0,
		"SUCCESS":     1,
		"PARTIAL":     2,
		"FAILURE":     3,
	}
)

func (x UpdateConfigResponse_Result) Enum() *UpdateConfigResponse_Result {
	p := new(UpdateConfigResponse_Result)
	*p = x
	return p
}

func (x UpdateConfigResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateConfigResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_flex_proto_enumTypes[4].Descriptor()
}

func (UpdateConfigResponse_Result) Type() protoreflect.EnumType {
	return &file_flex_proto_enumTypes[4]
}

func (x UpdateConfigResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type HeartbeatRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_IncludeStats bool                   `protobuf:"varint,1,opt,name=include_stats,json=includeStats,proto3" json:"include_stats,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	mi := &file_flex_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HeartbeatRequest) GetIncludeStats() bool {
	if x != nil {
		return x.xxx_hidden_IncludeStats
	}
	return false
}

func (x *HeartbeatRequest) SetIncludeStats(v bool) {
	x.xxx_hidden_IncludeStats = v
}

type HeartbeatRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	IncludeStats bool
}

func (b0 HeartbeatRequest_builder) Build() *HeartbeatRequest {
	m0 := &HeartbeatRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_IncludeStats = b.IncludeStats
	return m0
}

type HeartbeatResponse struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_IsReady   bool                   `protobuf:"varint,1,opt,name=is_ready,json=isReady,proto3" json:"is_ready,omitempty"`
	xxx_hidden_NodeStats *NodeStats             `protobuf:"bytes,2,opt,name=node_stats,json=nodeStats,proto3" json:"node_stats,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	mi := &file_flex_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HeartbeatResponse) GetIsReady() bool {
	if x != nil {
		return x.xxx_hidden_IsReady
	}
	return false
}

func (x *HeartbeatResponse) GetNodeStats() *NodeStats {
	if x != nil {
		return x.xxx_hidden_NodeStats
	}
	return nil
}

func (x *HeartbeatResponse) SetIsReady(v bool) {
	x.xxx_hidden_IsReady = v
}

func (x *HeartbeatResponse) SetNodeStats(v *NodeStats) {
	x.xxx_hidden_NodeStats = v
}

func (x *HeartbeatResponse) HasNodeStats() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_NodeStats != nil
}

func (x *HeartbeatResponse) ClearNodeStats() {
	x.xxx_hidden_NodeStats = nil
}

type HeartbeatResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	IsReady   bool
	NodeStats *NodeStats
}

func (b0 HeartbeatResponse_builder) Build() *HeartbeatResponse {
	m0 := &HeartbeatResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_IsReady = b.IsReady
	x.xxx_hidden_NodeStats = b.NodeStats
	return m0
}

type NodeStats struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Timestamp      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	xxx_hidden_ActiveRequests int64                  `protobuf:"varint,2,opt,name=active_requests,json=activeRequests,proto3" json:"active_requests,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *NodeStats) Reset() {
	*x = NodeStats{}
	mi := &file_flex_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStats) ProtoMessage() {}

func (x *NodeStats) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *NodeStats) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return nil
}

func (x *NodeStats) GetActiveRequests() int64 {
	if x != nil {
		return x.xxx_hidden_ActiveRequests
	}
	return 0
}

func (x *NodeStats) SetTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_Timestamp = v
}

func (x *NodeStats) SetActiveRequests(v int64) {
	x.xxx_hidden_ActiveRequests = v
}

func (x *NodeStats) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timestamp != nil
}

func (x *NodeStats) ClearTimestamp() {
	x.xxx_hidden_Timestamp = nil
}

type NodeStats_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Timestamp      *timestamppb.Timestamp
	ActiveRequests int64
}

func (b0 NodeStats_builder) Build() *NodeStats {
	m0 := &NodeStats{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Timestamp = b.Timestamp
	x.xxx_hidden_ActiveRequests = b.ActiveRequests
	return m0
}

type SubmitWorkRequest struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Request *WorkRequest           `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SubmitWorkRequest) Reset() {
	*x = SubmitWorkRequest{}
	mi := &file_flex_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitWorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitWorkRequest) ProtoMessage() {}

func (x *SubmitWorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SubmitWorkRequest) GetRequest() *WorkRequest {
	if x != nil {
		return x.xxx_hidden_Request
	}
	return nil
}

func (x *SubmitWorkRequest) SetRequest(v *WorkRequest) {
	x.xxx_hidden_Request = v
}

func (x *SubmitWorkRequest) HasRequest() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Request != nil
}

func (x *SubmitWorkRequest) ClearRequest() {
	x.xxx_hidden_Request = nil
}

type SubmitWorkRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Request *WorkRequest
}

func (b0 SubmitWorkRequest_builder) Build() *SubmitWorkRequest {
	m0 := &SubmitWorkRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Request = b.Request
	return m0
}

type SubmitWorkResponse struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Work *Work                  `protobuf:"bytes,1,opt,name=work,proto3" json:"work,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SubmitWorkResponse) Reset() {
	*x = SubmitWorkResponse{}
	mi := &file_flex_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitWorkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitWorkResponse) ProtoMessage() {}

func (x *SubmitWorkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SubmitWorkResponse) GetWork() *Work {
	if x != nil {
		return x.xxx_hidden_Work
	}
	return nil
}

func (x *SubmitWorkResponse) SetWork(v *Work) {
	x.xxx_hidden_Work = v
}

func (x *SubmitWorkResponse) HasWork() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Work != nil
}

func (x *SubmitWorkResponse) ClearWork() {
	x.xxx_hidden_Work = nil
}

type SubmitWorkResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Work *Work
}

func (b0 SubmitWorkResponse_builder) Build() *SubmitWorkResponse {
	m0 := &SubmitWorkResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Work = b.Work
	return m0
}

// Used to change the state of a single work request.
// The server will respond with a RequestStatus.
type UpdateWorkRequest struct {
	state                protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_JobId     string                     `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	xxx_hidden_RequestId string                     `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	xxx_hidden_NewState  UpdateWorkRequest_NewState `protobuf:"varint,3,opt,name=new_state,json=newState,proto3,enum=flex.UpdateWorkRequest_NewState" json:"new_state,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateWorkRequest) Reset() {
	*x = UpdateWorkRequest{}
	mi := &file_flex_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkRequest) ProtoMessage() {}

func (x *UpdateWorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateWorkRequest) GetJobId() string {
	if x != nil {
		return x.xxx_hidden_JobId
	}
	return ""
}

func (x *UpdateWorkRequest) GetRequestId() string {
	if x != nil {
		return x.xxx_hidden_RequestId
	}
	return ""
}

func (x *UpdateWorkRequest) GetNewState() UpdateWorkRequest_NewState {
	if x != nil {
		return x.xxx_hidden_NewState
	}
	return UpdateWorkRequest_UNSPECIFIED
}

func (x *UpdateWorkRequest) SetJobId(v string) {
	x.xxx_hidden_JobId = v
}

func (x *UpdateWorkRequest) SetRequestId(v string) {
	x.xxx_hidden_RequestId = v
}

func (x *UpdateWorkRequest) SetNewState(v UpdateWorkRequest_NewState) {
	x.xxx_hidden_NewState = v
}

type UpdateWorkRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	JobId     string
	RequestId string
	NewState  UpdateWorkRequest_NewState
}

func (b0 UpdateWorkRequest_builder) Build() *UpdateWorkRequest {
	m0 := &UpdateWorkRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_JobId = b.JobId
	x.xxx_hidden_RequestId = b.RequestId
	x.xxx_hidden_NewState = b.NewState
	return m0
}

type UpdateWorkResponse struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Work *Work                  `protobuf:"bytes,1,opt,name=work,proto3" json:"work,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateWorkResponse) Reset() {
	*x = UpdateWorkResponse{}
	mi := &file_flex_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWorkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkResponse) ProtoMessage() {}

func (x *UpdateWorkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateWorkResponse) GetWork() *Work {
	if x != nil {
		return x.xxx_hidden_Work
	}
	return nil
}

func (x *UpdateWorkResponse) SetWork(v *Work) {
	x.xxx_hidden_Work = v
}

func (x *UpdateWorkResponse) HasWork() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Work != nil
}

func (x *UpdateWorkResponse) ClearWork() {
	x.xxx_hidden_Work = nil
}

type UpdateWorkResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Work *Work
}

func (b0 UpdateWorkResponse_builder) Build() *UpdateWorkResponse {
	m0 := &UpdateWorkResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Work = b.Work
	return m0
}

// Used to change the state of all work assigned to a particular node. This is typically only used
// when initially connecting to a node, or if we want to drain the work assigned to a node if it is
// being removed.
type BulkUpdateWorkRequest struct {
	state               protoimpl.MessageState         `protogen:"opaque.v1"`
	xxx_hidden_NewState BulkUpdateWorkRequest_NewState `protobuf:"varint,1,opt,name=new_state,json=newState,proto3,enum=flex.BulkUpdateWorkRequest_NewState" json:"new_state,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *BulkUpdateWorkRequest) Reset() {
	*x = BulkUpdateWorkRequest{}
	mi := &file_flex_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BulkUpdateWorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateWorkRequest) ProtoMessage() {}

func (x *BulkUpdateWorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BulkUpdateWorkRequest) GetNewState() BulkUpdateWorkRequest_NewState {
	if x != nil {
		return x.xxx_hidden_NewState
	}
	return BulkUpdateWorkRequest_UNSPECIFIED
}

func (x *BulkUpdateWorkRequest) SetNewState(v BulkUpdateWorkRequest_NewState) {
	x.xxx_hidden_NewState = v
}

type BulkUpdateWorkRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	NewState BulkUpdateWorkRequest_NewState
}

func (b0 BulkUpdateWorkRequest_builder) Build() *BulkUpdateWorkRequest {
	m0 := &BulkUpdateWorkRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_NewState = b.NewState
	return m0
}

// This is a bulk operation details about individual work entries is not returned. Instead the
// response reflects if all outstanding work was successfully moved to the new state.
type BulkUpdateWorkResponse struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	xxx_hidden_Message string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BulkUpdateWorkResponse) Reset() {
	*x = BulkUpdateWorkResponse{}
	mi := &file_flex_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BulkUpdateWorkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateWorkResponse) ProtoMessage() {}

func (x *BulkUpdateWorkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BulkUpdateWorkResponse) GetSuccess() bool {
	if x != nil {
		return x.xxx_hidden_Success
	}
	return false
}

func (x *BulkUpdateWorkResponse) GetMessage() string {
	if x != nil {
		return x.xxx_hidden_Message
	}
	return ""
}

func (x *BulkUpdateWorkResponse) SetSuccess(v bool) {
	x.xxx_hidden_Success = v
}

func (x *BulkUpdateWorkResponse) SetMessage(v string) {
	x.xxx_hidden_Message = v
}

type BulkUpdateWorkResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Success bool
	Message string
}

func (b0 BulkUpdateWorkResponse_builder) Build() *BulkUpdateWorkResponse {
	m0 := &BulkUpdateWorkResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Success = b.Success
	x.xxx_hidden_Message = b.Message
	return m0
}

// JobLockedInfo contains require information that must be determined prior to calling a job request for
// file. This will be produced by sync's job builder but can be produced anywhere it makes sense such as
// in ctl.
type JobLockedInfo struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_WriteLocked  bool                   `protobuf:"varint,1,opt,name=write_locked,json=writeLocked,proto3" json:"write_locked,omitempty"`
	xxx_hidden_Exists       bool                   `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
	xxx_hidden_Size         int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	xxx_hidden_Mode         uint32                 `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
	xxx_hidden_Mtime        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=mtime,proto3" json:"mtime,omitempty"`
	xxx_hidden_RemoteSize   int64                  `protobuf:"varint,6,opt,name=remote_size,json=remoteSize,proto3" json:"remote_size,omitempty"`
	xxx_hidden_RemoteMtime  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=remote_mtime,json=remoteMtime,proto3" json:"remote_mtime,omitempty"`
	xxx_hidden_StubUrlRstId uint32                 `protobuf:"varint,8,opt,name=stub_url_rst_id,json=stubUrlRstId,proto3" json:"stub_url_rst_id,omitempty"`
	xxx_hidden_StubUrlPath  string                 `protobuf:"bytes,9,opt,name=stub_url_path,json=stubUrlPath,proto3" json:"stub_url_path,omitempty"`
	xxx_hidden_ExternalId   string                 `protobuf:"bytes,10,opt,name=externalId,proto3" json:"externalId,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *JobLockedInfo) Reset() {
	*x = JobLockedInfo{}
	mi := &file_flex_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobLockedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobLockedInfo) ProtoMessage() {}

func (x *JobLockedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *JobLockedInfo) GetWriteLocked() bool {
	if x != nil {
		return x.xxx_hidden_WriteLocked
	}
	return false
}

func (x *JobLockedInfo) GetExists() bool {
	if x != nil {
		return x.xxx_hidden_Exists
	}
	return false
}

func (x *JobLockedInfo) GetSize() int64 {
	if x != nil {
		return x.xxx_hidden_Size
	}
	return 0
}

func (x *JobLockedInfo) GetMode() uint32 {
	if x != nil {
		return x.xxx_hidden_Mode
	}
	return 0
}

func (x *JobLockedInfo) GetMtime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Mtime
	}
	return nil
}

func (x *JobLockedInfo) GetRemoteSize() int64 {
	if x != nil {
		return x.xxx_hidden_RemoteSize
	}
	return 0
}

func (x *JobLockedInfo) GetRemoteMtime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_RemoteMtime
	}
	return nil
}

func (x *JobLockedInfo) GetStubUrlRstId() uint32 {
	if x != nil {
		return x.xxx_hidden_StubUrlRstId
	}
	return 0
}

func (x *JobLockedInfo) GetStubUrlPath() string {
	if x != nil {
		return x.xxx_hidden_StubUrlPath
	}
	return ""
}

func (x *JobLockedInfo) GetExternalId() string {
	if x != nil {
		return x.xxx_hidden_ExternalId
	}
	return ""
}

func (x *JobLockedInfo) SetWriteLocked(v bool) {
	x.xxx_hidden_WriteLocked = v
}

func (x *JobLockedInfo) SetExists(v bool) {
	x.xxx_hidden_Exists = v
}

func (x *JobLockedInfo) SetSize(v int64) {
	x.xxx_hidden_Size = v
}

func (x *JobLockedInfo) SetMode(v uint32) {
	x.xxx_hidden_Mode = v
}

func (x *JobLockedInfo) SetMtime(v *timestamppb.Timestamp) {
	x.xxx_hidden_Mtime = v
}

func (x *JobLockedInfo) SetRemoteSize(v int64) {
	x.xxx_hidden_RemoteSize = v
}

func (x *JobLockedInfo) SetRemoteMtime(v *timestamppb.Timestamp) {
	x.xxx_hidden_RemoteMtime = v
}

func (x *JobLockedInfo) SetStubUrlRstId(v uint32) {
	x.xxx_hidden_StubUrlRstId = v
}

func (x *JobLockedInfo) SetStubUrlPath(v string) {
	x.xxx_hidden_StubUrlPath = v
}

func (x *JobLockedInfo) SetExternalId(v string) {
	x.xxx_hidden_ExternalId = v
}

func (x *JobLockedInfo) HasMtime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Mtime != nil
}

func (x *JobLockedInfo) HasRemoteMtime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_RemoteMtime != nil
}

func (x *JobLockedInfo) ClearMtime() {
	x.xxx_hidden_Mtime = nil
}

func (x *JobLockedInfo) ClearRemoteMtime() {
	x.xxx_hidden_RemoteMtime = nil
}

type JobLockedInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// locked indicates the file read-only or read-write lock has already been obtained.
	WriteLocked bool
	Exists      bool
	// Size of the local file.
	Size int64
	// File mode of the local file
	Mode uint32
	// Last modified time of the local file.
	Mtime *timestamppb.Timestamp
	// Size of the remote file or object.
	RemoteSize int64
	// Last beegfs_mtime of the remote file or object.
	RemoteMtime *timestamppb.Timestamp
	// If stub_url is not empty then path is for a stub file with the provided rst url.
	StubUrlRstId uint32
	StubUrlPath  string
	ExternalId   string
}

func (b0 JobLockedInfo_builder) Build() *JobLockedInfo {
	m0 := &JobLockedInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_WriteLocked = b.WriteLocked
	x.xxx_hidden_Exists = b.Exists
	x.xxx_hidden_Size = b.Size
	x.xxx_hidden_Mode = b.Mode
	x.xxx_hidden_Mtime = b.Mtime
	x.xxx_hidden_RemoteSize = b.RemoteSize
	x.xxx_hidden_RemoteMtime = b.RemoteMtime
	x.xxx_hidden_StubUrlRstId = b.StubUrlRstId
	x.xxx_hidden_StubUrlPath = b.StubUrlPath
	x.xxx_hidden_ExternalId = b.ExternalId
	return m0
}

type JobRequestCfg struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_RemoteStorageTarget uint32                 `protobuf:"varint,1,opt,name=remoteStorageTarget,proto3" json:"remoteStorageTarget,omitempty"`
	xxx_hidden_Path                string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	xxx_hidden_RemotePath          string                 `protobuf:"bytes,3,opt,name=remotePath,proto3" json:"remotePath,omitempty"`
	xxx_hidden_Download            bool                   `protobuf:"varint,4,opt,name=download,proto3" json:"download,omitempty"`
	xxx_hidden_StubLocal           bool                   `protobuf:"varint,5,opt,name=stub_local,json=stubLocal,proto3" json:"stub_local,omitempty"`
	xxx_hidden_Overwrite           bool                   `protobuf:"varint,6,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	xxx_hidden_Flatten             bool                   `protobuf:"varint,7,opt,name=flatten,proto3" json:"flatten,omitempty"`
	xxx_hidden_Force               bool                   `protobuf:"varint,8,opt,name=force,proto3" json:"force,omitempty"`
	xxx_hidden_LockedInfo          *JobLockedInfo         `protobuf:"bytes,9,opt,name=locked_info,json=lockedInfo,proto3" json:"locked_info,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *JobRequestCfg) Reset() {
	*x = JobRequestCfg{}
	mi := &file_flex_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobRequestCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRequestCfg) ProtoMessage() {}

func (x *JobRequestCfg) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *JobRequestCfg) GetRemoteStorageTarget() uint32 {
	if x != nil {
		return x.xxx_hidden_RemoteStorageTarget
	}
	return 0
}

func (x *JobRequestCfg) GetPath() string {
	if x != nil {
		return x.xxx_hidden_Path
	}
	return ""
}

func (x *JobRequestCfg) GetRemotePath() string {
	if x != nil {
		return x.xxx_hidden_RemotePath
	}
	return ""
}

func (x *JobRequestCfg) GetDownload() bool {
	if x != nil {
		return x.xxx_hidden_Download
	}
	return false
}

func (x *JobRequestCfg) GetStubLocal() bool {
	if x != nil {
		return x.xxx_hidden_StubLocal
	}
	return false
}

func (x *JobRequestCfg) GetOverwrite() bool {
	if x != nil {
		return x.xxx_hidden_Overwrite
	}
	return false
}

func (x *JobRequestCfg) GetFlatten() bool {
	if x != nil {
		return x.xxx_hidden_Flatten
	}
	return false
}

func (x *JobRequestCfg) GetForce() bool {
	if x != nil {
		return x.xxx_hidden_Force
	}
	return false
}

func (x *JobRequestCfg) GetLockedInfo() *JobLockedInfo {
	if x != nil {
		return x.xxx_hidden_LockedInfo
	}
	return nil
}

func (x *JobRequestCfg) SetRemoteStorageTarget(v uint32) {
	x.xxx_hidden_RemoteStorageTarget = v
}

func (x *JobRequestCfg) SetPath(v string) {
	x.xxx_hidden_Path = v
}

func (x *JobRequestCfg) SetRemotePath(v string) {
	x.xxx_hidden_RemotePath = v
}

func (x *JobRequestCfg) SetDownload(v bool) {
	x.xxx_hidden_Download = v
}

func (x *JobRequestCfg) SetStubLocal(v bool) {
	x.xxx_hidden_StubLocal = v
}

func (x *JobRequestCfg) SetOverwrite(v bool) {
	x.xxx_hidden_Overwrite = v
}

func (x *JobRequestCfg) SetFlatten(v bool) {
	x.xxx_hidden_Flatten = v
}

func (x *JobRequestCfg) SetForce(v bool) {
	x.xxx_hidden_Force = v
}

func (x *JobRequestCfg) SetLockedInfo(v *JobLockedInfo) {
	x.xxx_hidden_LockedInfo = v
}

func (x *JobRequestCfg) HasLockedInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LockedInfo != nil
}

func (x *JobRequestCfg) ClearLockedInfo() {
	x.xxx_hidden_LockedInfo = nil
}

type JobRequestCfg_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	RemoteStorageTarget uint32
	Path                string
	RemotePath          string
	Download            bool
	StubLocal           bool
	Overwrite           bool
	Flatten             bool
	Force               bool
	LockedInfo          *JobLockedInfo
}

func (b0 JobRequestCfg_builder) Build() *JobRequestCfg {
	m0 := &JobRequestCfg{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_RemoteStorageTarget = b.RemoteStorageTarget
	x.xxx_hidden_Path = b.Path
	x.xxx_hidden_RemotePath = b.RemotePath
	x.xxx_hidden_Download = b.Download
	x.xxx_hidden_StubLocal = b.StubLocal
	x.xxx_hidden_Overwrite = b.Overwrite
	x.xxx_hidden_Flatten = b.Flatten
	x.xxx_hidden_Force = b.Force
	x.xxx_hidden_LockedInfo = b.LockedInfo
	return m0
}

// BeeRemote assigns work for a job to one or more worker nodes.
type WorkRequest struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_JobId               string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	xxx_hidden_RequestId           string                 `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	xxx_hidden_ExternalId          string                 `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	xxx_hidden_Path                string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	xxx_hidden_Segment             *WorkRequest_Segment   `protobuf:"bytes,5,opt,name=segment,proto3" json:"segment,omitempty"`
	xxx_hidden_RemoteStorageTarget uint32                 `protobuf:"varint,6,opt,name=remote_storage_target,json=remoteStorageTarget,proto3" json:"remote_storage_target,omitempty"`
	xxx_hidden_Type                isWorkRequest_Type     `protobuf_oneof:"Type"`
	xxx_hidden_StubLocal           bool                   `protobuf:"varint,8,opt,name=stub_local,json=stubLocal,proto3" json:"stub_local,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *WorkRequest) Reset() {
	*x = WorkRequest{}
	mi := &file_flex_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkRequest) ProtoMessage() {}

func (x *WorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WorkRequest) GetJobId() string {
	if x != nil {
		return x.xxx_hidden_JobId
	}
	return ""
}

func (x *WorkRequest) GetRequestId() string {
	if x != nil {
		return x.xxx_hidden_RequestId
	}
	return ""
}

func (x *WorkRequest) GetExternalId() string {
	if x != nil {
		return x.xxx_hidden_ExternalId
	}
	return ""
}

func (x *WorkRequest) GetPath() string {
	if x != nil {
		return x.xxx_hidden_Path
	}
	return ""
}

func (x *WorkRequest) GetSegment() *WorkRequest_Segment {
	if x != nil {
		return x.xxx_hidden_Segment
	}
	return nil
}

func (x *WorkRequest) GetRemoteStorageTarget() uint32 {
	if x != nil {
		return x.xxx_hidden_RemoteStorageTarget
	}
	return 0
}

func (x *WorkRequest) GetMock() *MockJob {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*workRequest_Mock); ok {
			return x.Mock
		}
	}
	return nil
}

func (x *WorkRequest) GetSync() *SyncJob {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*workRequest_Sync); ok {
			return x.Sync
		}
	}
	return nil
}

func (x *WorkRequest) GetBuilder() *BuilderJob {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*workRequest_Builder); ok {
			return x.Builder
		}
	}
	return nil
}

func (x *WorkRequest) GetStubLocal() bool {
	if x != nil {
		return x.xxx_hidden_StubLocal
	}
	return false
}

func (x *WorkRequest) SetJobId(v string) {
	x.xxx_hidden_JobId = v
}

func (x *WorkRequest) SetRequestId(v string) {
	x.xxx_hidden_RequestId = v
}

func (x *WorkRequest) SetExternalId(v string) {
	x.xxx_hidden_ExternalId = v
}

func (x *WorkRequest) SetPath(v string) {
	x.xxx_hidden_Path = v
}

func (x *WorkRequest) SetSegment(v *WorkRequest_Segment) {
	x.xxx_hidden_Segment = v
}

func (x *WorkRequest) SetRemoteStorageTarget(v uint32) {
	x.xxx_hidden_RemoteStorageTarget = v
}

func (x *WorkRequest) SetMock(v *MockJob) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &workRequest_Mock{v}
}

func (x *WorkRequest) SetSync(v *SyncJob) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &workRequest_Sync{v}
}

func (x *WorkRequest) SetBuilder(v *BuilderJob) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &workRequest_Builder{v}
}

func (x *WorkRequest) SetStubLocal(v bool) {
	x.xxx_hidden_StubLocal = v
}

func (x *WorkRequest) HasSegment() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Segment != nil
}

func (x *WorkRequest) HasType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Type != nil
}

func (x *WorkRequest) HasMock() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*workRequest_Mock)
	return ok
}

func (x *WorkRequest) HasSync() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*workRequest_Sync)
	return ok
}

func (x *WorkRequest) HasBuilder() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*workRequest_Builder)
	return ok
}

func (x *WorkRequest) ClearSegment() {
	x.xxx_hidden_Segment = nil
}

func (x *WorkRequest) ClearType() {
	x.xxx_hidden_Type = nil
}

func (x *WorkRequest) ClearMock() {
	if _, ok := x.xxx_hidden_Type.(*workRequest_Mock); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *WorkRequest) ClearSync() {
	if _, ok := x.xxx_hidden_Type.(*workRequest_Sync); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *WorkRequest) ClearBuilder() {
	if _, ok := x.xxx_hidden_Type.(*workRequest_Builder); ok {
		x.xxx_hidden_Type = nil
	}
}

const WorkRequest_Type_not_set_case case_WorkRequest_Type = 0
const WorkRequest_Mock_case case_WorkRequest_Type = 10
const WorkRequest_Sync_case case_WorkRequest_Type = 11
const WorkRequest_Builder_case case_WorkRequest_Type = 12

func (x *WorkRequest) WhichType() case_WorkRequest_Type {
	if x == nil {
		return WorkRequest_Type_not_set_case
	}
	switch x.xxx_hidden_Type.(type) {
	case *workRequest_Mock:
		return WorkRequest_Mock_case
	case *workRequest_Sync:
		return WorkRequest_Sync_case
	case *workRequest_Builder:
		return WorkRequest_Builder_case
	default:
		return WorkRequest_Type_not_set_case
	}
}

type WorkRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	JobId     string
	RequestId string
	// Used as the upload ID for multipart uploads, or any other time
	// an external identifier is needed to coordinate a distributed transfer.
	ExternalId          string
	Path                string
	Segment             *WorkRequest_Segment
	RemoteStorageTarget uint32
	// Fields of oneof xxx_hidden_Type:
	Mock    *MockJob
	Sync    *SyncJob
	Builder *BuilderJob
	// -- end of xxx_hidden_Type
	// When stub_local is set the local file with be a stub file
	StubLocal bool
}

func (b0 WorkRequest_builder) Build() *WorkRequest {
	m0 := &WorkRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_JobId = b.JobId
	x.xxx_hidden_RequestId = b.RequestId
	x.xxx_hidden_ExternalId = b.ExternalId
	x.xxx_hidden_Path = b.Path
	x.xxx_hidden_Segment = b.Segment
	x.xxx_hidden_RemoteStorageTarget = b.RemoteStorageTarget
	if b.Mock != nil {
		x.xxx_hidden_Type = &workRequest_Mock{b.Mock}
	}
	if b.Sync != nil {
		x.xxx_hidden_Type = &workRequest_Sync{b.Sync}
	}
	if b.Builder != nil {
		x.xxx_hidden_Type = &workRequest_Builder{b.Builder}
	}
	x.xxx_hidden_StubLocal = b.StubLocal
	return m0
}

type case_WorkRequest_Type protoreflect.FieldNumber

func (x case_WorkRequest_Type) String() string {
	md := file_flex_proto_msgTypes[11].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isWorkRequest_Type interface {
	isWorkRequest_Type()
}

type workRequest_Mock struct {
	Mock *MockJob `protobuf:"bytes,10,opt,name=mock,proto3,oneof"`
}

type workRequest_Sync struct {
	Sync *SyncJob `protobuf:"bytes,11,opt,name=sync,proto3,oneof"`
}

type workRequest_Builder struct {
	Builder *BuilderJob `protobuf:"bytes,12,opt,name=builder,proto3,oneof"`
}

func (*workRequest_Mock) isWorkRequest_Type() {}

func (*workRequest_Sync) isWorkRequest_Type() {}

func (*workRequest_Builder) isWorkRequest_Type() {}

// JobBuilderJob is a special type of job that creates job requests of any time.
type BuilderJob struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Cfg *JobRequestCfg         `protobuf:"bytes,1,opt,name=cfg,proto3" json:"cfg,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BuilderJob) Reset() {
	*x = BuilderJob{}
	mi := &file_flex_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuilderJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuilderJob) ProtoMessage() {}

func (x *BuilderJob) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BuilderJob) GetCfg() *JobRequestCfg {
	if x != nil {
		return x.xxx_hidden_Cfg
	}
	return nil
}

func (x *BuilderJob) SetCfg(v *JobRequestCfg) {
	x.xxx_hidden_Cfg = v
}

func (x *BuilderJob) HasCfg() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Cfg != nil
}

func (x *BuilderJob) ClearCfg() {
	x.xxx_hidden_Cfg = nil
}

type BuilderJob_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Cfg *JobRequestCfg
}

func (b0 BuilderJob_builder) Build() *BuilderJob {
	m0 := &BuilderJob{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Cfg = b.Cfg
	return m0
}

type MockJob struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_NumTestSegments int32                  `protobuf:"varint,1,opt,name=num_test_segments,json=numTestSegments,proto3" json:"num_test_segments,omitempty"`
	xxx_hidden_FileSize        int64                  `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	xxx_hidden_ExternalId      string                 `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	xxx_hidden_ShouldFail      bool                   `protobuf:"varint,4,opt,name=should_fail,json=shouldFail,proto3" json:"should_fail,omitempty"`
	xxx_hidden_LockedInfo      *JobLockedInfo         `protobuf:"bytes,6,opt,name=locked_info,json=lockedInfo,proto3" json:"locked_info,omitempty"`
	xxx_hidden_Cfg             *JobRequestCfg         `protobuf:"bytes,7,opt,name=cfg,proto3" json:"cfg,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *MockJob) Reset() {
	*x = MockJob{}
	mi := &file_flex_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MockJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockJob) ProtoMessage() {}

func (x *MockJob) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MockJob) GetNumTestSegments() int32 {
	if x != nil {
		return x.xxx_hidden_NumTestSegments
	}
	return 0
}

func (x *MockJob) GetFileSize() int64 {
	if x != nil {
		return x.xxx_hidden_FileSize
	}
	return 0
}

func (x *MockJob) GetExternalId() string {
	if x != nil {
		return x.xxx_hidden_ExternalId
	}
	return ""
}

func (x *MockJob) GetShouldFail() bool {
	if x != nil {
		return x.xxx_hidden_ShouldFail
	}
	return false
}

func (x *MockJob) GetLockedInfo() *JobLockedInfo {
	if x != nil {
		return x.xxx_hidden_LockedInfo
	}
	return nil
}

func (x *MockJob) GetCfg() *JobRequestCfg {
	if x != nil {
		return x.xxx_hidden_Cfg
	}
	return nil
}

func (x *MockJob) SetNumTestSegments(v int32) {
	x.xxx_hidden_NumTestSegments = v
}

func (x *MockJob) SetFileSize(v int64) {
	x.xxx_hidden_FileSize = v
}

func (x *MockJob) SetExternalId(v string) {
	x.xxx_hidden_ExternalId = v
}

func (x *MockJob) SetShouldFail(v bool) {
	x.xxx_hidden_ShouldFail = v
}

func (x *MockJob) SetLockedInfo(v *JobLockedInfo) {
	x.xxx_hidden_LockedInfo = v
}

func (x *MockJob) SetCfg(v *JobRequestCfg) {
	x.xxx_hidden_Cfg = v
}

func (x *MockJob) HasLockedInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LockedInfo != nil
}

func (x *MockJob) HasCfg() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Cfg != nil
}

func (x *MockJob) ClearLockedInfo() {
	x.xxx_hidden_LockedInfo = nil
}

func (x *MockJob) ClearCfg() {
	x.xxx_hidden_Cfg = nil
}

type MockJob_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	NumTestSegments int32
	FileSize        int64
	ExternalId      string
	ShouldFail      bool
	LockedInfo      *JobLockedInfo
	Cfg             *JobRequestCfg
}

func (b0 MockJob_builder) Build() *MockJob {
	m0 := &MockJob{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_NumTestSegments = b.NumTestSegments
	x.xxx_hidden_FileSize = b.FileSize
	x.xxx_hidden_ExternalId = b.ExternalId
	x.xxx_hidden_ShouldFail = b.ShouldFail
	x.xxx_hidden_LockedInfo = b.LockedInfo
	x.xxx_hidden_Cfg = b.Cfg
	return m0
}

// A SyncJob is WHAT work needs to be done. It is populated based on the
// file system modification event or by a user describing some work that needs
// to be done. It does not carry any details about HOW the request will be
// fufilled (that is part of the generated SyncRequest).
type SyncJob struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Operation  SyncJob_Operation      `protobuf:"varint,1,opt,name=operation,proto3,enum=flex.SyncJob_Operation" json:"operation,omitempty"`
	xxx_hidden_Overwrite  bool                   `protobuf:"varint,2,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	xxx_hidden_RemotePath string                 `protobuf:"bytes,3,opt,name=remote_path,json=remotePath,proto3" json:"remote_path,omitempty"`
	xxx_hidden_Flatten    bool                   `protobuf:"varint,5,opt,name=flatten,proto3" json:"flatten,omitempty"`
	xxx_hidden_LockedInfo *JobLockedInfo         `protobuf:"bytes,6,opt,name=locked_info,json=lockedInfo,proto3" json:"locked_info,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SyncJob) Reset() {
	*x = SyncJob{}
	mi := &file_flex_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncJob) ProtoMessage() {}

func (x *SyncJob) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SyncJob) GetOperation() SyncJob_Operation {
	if x != nil {
		return x.xxx_hidden_Operation
	}
	return SyncJob_UNSPECIFIED
}

func (x *SyncJob) GetOverwrite() bool {
	if x != nil {
		return x.xxx_hidden_Overwrite
	}
	return false
}

func (x *SyncJob) GetRemotePath() string {
	if x != nil {
		return x.xxx_hidden_RemotePath
	}
	return ""
}

func (x *SyncJob) GetFlatten() bool {
	if x != nil {
		return x.xxx_hidden_Flatten
	}
	return false
}

func (x *SyncJob) GetLockedInfo() *JobLockedInfo {
	if x != nil {
		return x.xxx_hidden_LockedInfo
	}
	return nil
}

func (x *SyncJob) SetOperation(v SyncJob_Operation) {
	x.xxx_hidden_Operation = v
}

func (x *SyncJob) SetOverwrite(v bool) {
	x.xxx_hidden_Overwrite = v
}

func (x *SyncJob) SetRemotePath(v string) {
	x.xxx_hidden_RemotePath = v
}

func (x *SyncJob) SetFlatten(v bool) {
	x.xxx_hidden_Flatten = v
}

func (x *SyncJob) SetLockedInfo(v *JobLockedInfo) {
	x.xxx_hidden_LockedInfo = v
}

func (x *SyncJob) HasLockedInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LockedInfo != nil
}

func (x *SyncJob) ClearLockedInfo() {
	x.xxx_hidden_LockedInfo = nil
}

type SyncJob_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Operation SyncJob_Operation
	// When an object already exists in BeeGFS (for downloads) an error is returned by default, or
	// it can be optionally overwritten. This currently does nothing for uploads, the object is
	// always uploaded and overwritten unless the S3 bucket has object versioning enabled.
	Overwrite bool
	// By default the RemotePath (object ID/file path) in the RST is the same as the local path in
	// BeeGFS. However for downloads, if the names/paths differ, the remote path can be specified,
	// for example to restore a file in an RST to a different location in BeeGFS. This currently is
	// ignored for uploads.
	RemotePath string
	// By default the remote directory structure will be preserved on downloads unless flatten is
	// set. If the flag is set then the directory delimiter will be replaced with an underscore.
	Flatten    bool
	LockedInfo *JobLockedInfo
}

func (b0 SyncJob_builder) Build() *SyncJob {
	m0 := &SyncJob{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Operation = b.Operation
	x.xxx_hidden_Overwrite = b.Overwrite
	x.xxx_hidden_RemotePath = b.RemotePath
	x.xxx_hidden_Flatten = b.Flatten
	x.xxx_hidden_LockedInfo = b.LockedInfo
	return m0
}

// Currently while requests types are specific to a particular worker node type,
// we use the same work type for all nodes. This is what allow us to return
// work results to BeeRemote using a generic unary RPC, instead of having to
// establish a long-lived streaming RPC with each worker node to return work
// results of a specific type.
type Work struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Path       string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	xxx_hidden_JobId      string                 `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	xxx_hidden_RequestId  string                 `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	xxx_hidden_Status     *Work_Status           `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	xxx_hidden_Parts      *[]*Work_Part          `protobuf:"bytes,5,rep,name=parts,proto3" json:"parts,omitempty"`
	xxx_hidden_JobBuilder bool                   `protobuf:"varint,6,opt,name=job_builder,json=jobBuilder,proto3" json:"job_builder,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Work) Reset() {
	*x = Work{}
	mi := &file_flex_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Work) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Work) ProtoMessage() {}

func (x *Work) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Work) GetPath() string {
	if x != nil {
		return x.xxx_hidden_Path
	}
	return ""
}

func (x *Work) GetJobId() string {
	if x != nil {
		return x.xxx_hidden_JobId
	}
	return ""
}

func (x *Work) GetRequestId() string {
	if x != nil {
		return x.xxx_hidden_RequestId
	}
	return ""
}

func (x *Work) GetStatus() *Work_Status {
	if x != nil {
		return x.xxx_hidden_Status
	}
	return nil
}

func (x *Work) GetParts() []*Work_Part {
	if x != nil {
		if x.xxx_hidden_Parts != nil {
			return *x.xxx_hidden_Parts
		}
	}
	return nil
}

func (x *Work) GetJobBuilder() bool {
	if x != nil {
		return x.xxx_hidden_JobBuilder
	}
	return false
}

func (x *Work) SetPath(v string) {
	x.xxx_hidden_Path = v
}

func (x *Work) SetJobId(v string) {
	x.xxx_hidden_JobId = v
}

func (x *Work) SetRequestId(v string) {
	x.xxx_hidden_RequestId = v
}

func (x *Work) SetStatus(v *Work_Status) {
	x.xxx_hidden_Status = v
}

func (x *Work) SetParts(v []*Work_Part) {
	x.xxx_hidden_Parts = &v
}

func (x *Work) SetJobBuilder(v bool) {
	x.xxx_hidden_JobBuilder = v
}

func (x *Work) HasStatus() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Status != nil
}

func (x *Work) ClearStatus() {
	x.xxx_hidden_Status = nil
}

type Work_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Path      string
	JobId     string
	RequestId string
	// The work status is only ever updated by BeeSync with two exceptions: (1) if a request
	// was never scheduled, the work state should be CREATED with the message indicating the
	// last RPC error returned trying to assign the WR to a BeeSync node. (2) If a request was
	// assigned to a BeeSync node but BeeRemote cannot retrieve the status, the work state
	// should be set to "Unknown" with a message indicating the last RPC error that was returned
	// trying to retrieve the results from the BeeSync node. When the state/message are set by
	// BeeRemote the message should always clearly indicate "error communicating to node" to clearly
	// distinguish when the state was set locally by BeeRemote or by the remote BeeSync node.
	Status *Work_Status
	// Each work request is split into one or more parts so data can be
	// transferred in parallel on each assigned node.
	Parts []*Work_Part
	// Indicates whether the work is a job builder task.
	JobBuilder bool
}

func (b0 Work_builder) Build() *Work {
	m0 := &Work{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Path = b.Path
	x.xxx_hidden_JobId = b.JobId
	x.xxx_hidden_RequestId = b.RequestId
	x.xxx_hidden_Status = b.Status
	x.xxx_hidden_Parts = &b.Parts
	x.xxx_hidden_JobBuilder = b.JobBuilder
	return m0
}

// We use a common configuration update request/response types for all worker
// node types.
type UpdateConfigRequest struct {
	state                protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_BeeRemote *BeeRemoteNode          `protobuf:"bytes,1,opt,name=bee_remote,json=beeRemote,proto3" json:"bee_remote,omitempty"`
	xxx_hidden_Rsts      *[]*RemoteStorageTarget `protobuf:"bytes,2,rep,name=rsts,proto3" json:"rsts,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateConfigRequest) Reset() {
	*x = UpdateConfigRequest{}
	mi := &file_flex_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigRequest) ProtoMessage() {}

func (x *UpdateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateConfigRequest) GetBeeRemote() *BeeRemoteNode {
	if x != nil {
		return x.xxx_hidden_BeeRemote
	}
	return nil
}

func (x *UpdateConfigRequest) GetRsts() []*RemoteStorageTarget {
	if x != nil {
		if x.xxx_hidden_Rsts != nil {
			return *x.xxx_hidden_Rsts
		}
	}
	return nil
}

func (x *UpdateConfigRequest) SetBeeRemote(v *BeeRemoteNode) {
	x.xxx_hidden_BeeRemote = v
}

func (x *UpdateConfigRequest) SetRsts(v []*RemoteStorageTarget) {
	x.xxx_hidden_Rsts = &v
}

func (x *UpdateConfigRequest) HasBeeRemote() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_BeeRemote != nil
}

func (x *UpdateConfigRequest) ClearBeeRemote() {
	x.xxx_hidden_BeeRemote = nil
}

type UpdateConfigRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// While worker nodes could infer BeeRemote network details, it is better we
	// explicitly tell them where to send work results. Especially if we want to
	// send and receive work requests on different interfaces or ports.
	BeeRemote *BeeRemoteNode
	// All RemoteStorageTarget(s) that should be configured need to be included in
	// each message. Any that are not included will be deleted.
	Rsts []*RemoteStorageTarget
}

func (b0 UpdateConfigRequest_builder) Build() *UpdateConfigRequest {
	m0 := &UpdateConfigRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_BeeRemote = b.BeeRemote
	x.xxx_hidden_Rsts = &b.Rsts
	return m0
}

type UpdateConfigResponse struct {
	state              protoimpl.MessageState      `protogen:"opaque.v1"`
	xxx_hidden_Result  UpdateConfigResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flex.UpdateConfigResponse_Result" json:"result,omitempty"`
	xxx_hidden_Message string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateConfigResponse) Reset() {
	*x = UpdateConfigResponse{}
	mi := &file_flex_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigResponse) ProtoMessage() {}

func (x *UpdateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateConfigResponse) GetResult() UpdateConfigResponse_Result {
	if x != nil {
		return x.xxx_hidden_Result
	}
	return UpdateConfigResponse_UNSPECIFIED
}

func (x *UpdateConfigResponse) GetMessage() string {
	if x != nil {
		return x.xxx_hidden_Message
	}
	return ""
}

func (x *UpdateConfigResponse) SetResult(v UpdateConfigResponse_Result) {
	x.xxx_hidden_Result = v
}

func (x *UpdateConfigResponse) SetMessage(v string) {
	x.xxx_hidden_Message = v
}

type UpdateConfigResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Result UpdateConfigResponse_Result
	// Message should be used to return any additional details, particularly to aid in troubleshooting.
	Message string
}

func (b0 UpdateConfigResponse_builder) Build() *UpdateConfigResponse {
	m0 := &UpdateConfigResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Result = b.Result
	x.xxx_hidden_Message = b.Message
	return m0
}

type BeeRemoteNode struct {
	state                                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id                          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_Address                     string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	xxx_hidden_Mount                       string                 `protobuf:"bytes,3,opt,name=mount,proto3" json:"mount,omitempty"`
	xxx_hidden_MgmtdAddress                string                 `protobuf:"bytes,4,opt,name=mgmtd_address,json=mgmtdAddress,proto3" json:"mgmtd_address,omitempty"`
	xxx_hidden_MgmtdTlsCertFile            string                 `protobuf:"bytes,5,opt,name=mgmtd_tls_cert_file,json=mgmtdTlsCertFile,proto3" json:"mgmtd_tls_cert_file,omitempty"`
	xxx_hidden_MgmtdTlsDisableVerification bool                   `protobuf:"varint,6,opt,name=mgmtd_tls_disable_verification,json=mgmtdTlsDisableVerification,proto3" json:"mgmtd_tls_disable_verification,omitempty"`
	xxx_hidden_MgmtdTlsDisable             bool                   `protobuf:"varint,7,opt,name=mgmtd_tls_disable,json=mgmtdTlsDisable,proto3" json:"mgmtd_tls_disable,omitempty"`
	xxx_hidden_AuthFile                    string                 `protobuf:"bytes,8,opt,name=auth_file,json=authFile,proto3" json:"auth_file,omitempty"`
	xxx_hidden_AuthDisable                 bool                   `protobuf:"varint,9,opt,name=auth_disable,json=authDisable,proto3" json:"auth_disable,omitempty"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *BeeRemoteNode) Reset() {
	*x = BeeRemoteNode{}
	mi := &file_flex_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeeRemoteNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeeRemoteNode) ProtoMessage() {}

func (x *BeeRemoteNode) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BeeRemoteNode) GetId() string {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return ""
}

func (x *BeeRemoteNode) GetAddress() string {
	if x != nil {
		return x.xxx_hidden_Address
	}
	return ""
}

func (x *BeeRemoteNode) GetMount() string {
	if x != nil {
		return x.xxx_hidden_Mount
	}
	return ""
}

func (x *BeeRemoteNode) GetMgmtdAddress() string {
	if x != nil {
		return x.xxx_hidden_MgmtdAddress
	}
	return ""
}

func (x *BeeRemoteNode) GetMgmtdTlsCertFile() string {
	if x != nil {
		return x.xxx_hidden_MgmtdTlsCertFile
	}
	return ""
}

func (x *BeeRemoteNode) GetMgmtdTlsDisableVerification() bool {
	if x != nil {
		return x.xxx_hidden_MgmtdTlsDisableVerification
	}
	return false
}

func (x *BeeRemoteNode) GetMgmtdTlsDisable() bool {
	if x != nil {
		return x.xxx_hidden_MgmtdTlsDisable
	}
	return false
}

func (x *BeeRemoteNode) GetAuthFile() string {
	if x != nil {
		return x.xxx_hidden_AuthFile
	}
	return ""
}

func (x *BeeRemoteNode) GetAuthDisable() bool {
	if x != nil {
		return x.xxx_hidden_AuthDisable
	}
	return false
}

func (x *BeeRemoteNode) SetId(v string) {
	x.xxx_hidden_Id = v
}

func (x *BeeRemoteNode) SetAddress(v string) {
	x.xxx_hidden_Address = v
}

func (x *BeeRemoteNode) SetMount(v string) {
	x.xxx_hidden_Mount = v
}

func (x *BeeRemoteNode) SetMgmtdAddress(v string) {
	x.xxx_hidden_MgmtdAddress = v
}

func (x *BeeRemoteNode) SetMgmtdTlsCertFile(v string) {
	x.xxx_hidden_MgmtdTlsCertFile = v
}

func (x *BeeRemoteNode) SetMgmtdTlsDisableVerification(v bool) {
	x.xxx_hidden_MgmtdTlsDisableVerification = v
}

func (x *BeeRemoteNode) SetMgmtdTlsDisable(v bool) {
	x.xxx_hidden_MgmtdTlsDisable = v
}

func (x *BeeRemoteNode) SetAuthFile(v string) {
	x.xxx_hidden_AuthFile = v
}

func (x *BeeRemoteNode) SetAuthDisable(v bool) {
	x.xxx_hidden_AuthDisable = v
}

type BeeRemoteNode_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id                          string
	Address                     string
	Mount                       string
	MgmtdAddress                string
	MgmtdTlsCertFile            string
	MgmtdTlsDisableVerification bool
	MgmtdTlsDisable             bool
	AuthFile                    string
	AuthDisable                 bool
}

func (b0 BeeRemoteNode_builder) Build() *BeeRemoteNode {
	m0 := &BeeRemoteNode{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Address = b.Address
	x.xxx_hidden_Mount = b.Mount
	x.xxx_hidden_MgmtdAddress = b.MgmtdAddress
	x.xxx_hidden_MgmtdTlsCertFile = b.MgmtdTlsCertFile
	x.xxx_hidden_MgmtdTlsDisableVerification = b.MgmtdTlsDisableVerification
	x.xxx_hidden_MgmtdTlsDisable = b.MgmtdTlsDisable
	x.xxx_hidden_AuthFile = b.AuthFile
	x.xxx_hidden_AuthDisable = b.AuthDisable
	return m0
}

// Remote Storage Targets (RSTs) describe where data should be stored or
// retrieved from. Different BeeRemote worker nodes like BeeSync nodes should
// support one or more RST types. This is not currently enforced anywhere by the
// protobuf defined structs. When submitting job requests it is the callers
// responsibility to ensure the reference RST and job type are compatible.
// Otherwise BeeRemote will reject the job.
//
// Note while there is a lot of data contained in RemoteStorageTarget, gRPC will
// not serialize fields to the wire unless they are set.
// https://protobuf.dev/programming-guides/proto3/#specifying-field-rules This
// allows us to define all possible fields that may need to be sent to BeeSync
// to configure different target types, without extra overhead.
type RemoteStorageTarget struct {
	state               protoimpl.MessageState        `protogen:"opaque.v1"`
	xxx_hidden_Id       uint32                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	xxx_hidden_Name     string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	xxx_hidden_Policies *RemoteStorageTarget_Policies `protobuf:"bytes,3,opt,name=policies,proto3" json:"policies,omitempty"`
	xxx_hidden_Type     isRemoteStorageTarget_Type    `protobuf_oneof:"type"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RemoteStorageTarget) Reset() {
	*x = RemoteStorageTarget{}
	mi := &file_flex_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteStorageTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget) ProtoMessage() {}

func (x *RemoteStorageTarget) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RemoteStorageTarget) GetId() uint32 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *RemoteStorageTarget) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *RemoteStorageTarget) GetPolicies() *RemoteStorageTarget_Policies {
	if x != nil {
		return x.xxx_hidden_Policies
	}
	return nil
}

func (x *RemoteStorageTarget) GetS3() *RemoteStorageTarget_S3 {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*remoteStorageTarget_S3_); ok {
			return x.S3
		}
	}
	return nil
}

func (x *RemoteStorageTarget) GetPosix() *RemoteStorageTarget_POSIX {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*remoteStorageTarget_Posix); ok {
			return x.Posix
		}
	}
	return nil
}

func (x *RemoteStorageTarget) GetAzure() *RemoteStorageTarget_Azure {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*remoteStorageTarget_Azure_); ok {
			return x.Azure
		}
	}
	return nil
}

func (x *RemoteStorageTarget) GetMock() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*remoteStorageTarget_Mock); ok {
			return x.Mock
		}
	}
	return ""
}

func (x *RemoteStorageTarget) SetId(v uint32) {
	x.xxx_hidden_Id = v
}

func (x *RemoteStorageTarget) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *RemoteStorageTarget) SetPolicies(v *RemoteStorageTarget_Policies) {
	x.xxx_hidden_Policies = v
}

func (x *RemoteStorageTarget) SetS3(v *RemoteStorageTarget_S3) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &remoteStorageTarget_S3_{v}
}

func (x *RemoteStorageTarget) SetPosix(v *RemoteStorageTarget_POSIX) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &remoteStorageTarget_Posix{v}
}

func (x *RemoteStorageTarget) SetAzure(v *RemoteStorageTarget_Azure) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &remoteStorageTarget_Azure_{v}
}

func (x *RemoteStorageTarget) SetMock(v string) {
	x.xxx_hidden_Type = &remoteStorageTarget_Mock{v}
}

func (x *RemoteStorageTarget) HasPolicies() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Policies != nil
}

func (x *RemoteStorageTarget) HasType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Type != nil
}

func (x *RemoteStorageTarget) HasS3() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*remoteStorageTarget_S3_)
	return ok
}

func (x *RemoteStorageTarget) HasPosix() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*remoteStorageTarget_Posix)
	return ok
}

func (x *RemoteStorageTarget) HasAzure() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*remoteStorageTarget_Azure_)
	return ok
}

func (x *RemoteStorageTarget) HasMock() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*remoteStorageTarget_Mock)
	return ok
}

func (x *RemoteStorageTarget) ClearPolicies() {
	x.xxx_hidden_Policies = nil
}

func (x *RemoteStorageTarget) ClearType() {
	x.xxx_hidden_Type = nil
}

func (x *RemoteStorageTarget) ClearS3() {
	if _, ok := x.xxx_hidden_Type.(*remoteStorageTarget_S3_); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *RemoteStorageTarget) ClearPosix() {
	if _, ok := x.xxx_hidden_Type.(*remoteStorageTarget_Posix); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *RemoteStorageTarget) ClearAzure() {
	if _, ok := x.xxx_hidden_Type.(*remoteStorageTarget_Azure_); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *RemoteStorageTarget) ClearMock() {
	if _, ok := x.xxx_hidden_Type.(*remoteStorageTarget_Mock); ok {
		x.xxx_hidden_Type = nil
	}
}

const RemoteStorageTarget_Type_not_set_case case_RemoteStorageTarget_Type = 0
const RemoteStorageTarget_S3_case case_RemoteStorageTarget_Type = 4
const RemoteStorageTarget_Posix_case case_RemoteStorageTarget_Type = 5
const RemoteStorageTarget_Azure_case case_RemoteStorageTarget_Type = 6
const RemoteStorageTarget_Mock_case case_RemoteStorageTarget_Type = 7

func (x *RemoteStorageTarget) WhichType() case_RemoteStorageTarget_Type {
	if x == nil {
		return RemoteStorageTarget_Type_not_set_case
	}
	switch x.xxx_hidden_Type.(type) {
	case *remoteStorageTarget_S3_:
		return RemoteStorageTarget_S3_case
	case *remoteStorageTarget_Posix:
		return RemoteStorageTarget_Posix_case
	case *remoteStorageTarget_Azure_:
		return RemoteStorageTarget_Azure_case
	case *remoteStorageTarget_Mock:
		return RemoteStorageTarget_Mock_case
	default:
		return RemoteStorageTarget_Type_not_set_case
	}
}

type RemoteStorageTarget_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       uint32
	Name     string
	Policies *RemoteStorageTarget_Policies
	// Type defines fields required to figure out "where" to transfer content.
	// IMPORTANT: When adding a new RST type before it can be configured by
	// BeeRemote/other it must also be added to the rst.SupportedRSTTypes map in
	// so it can be used with config.SetRSTTypeHook() to allow its configuration
	// to be unmarshalled into the Go structs generated by protoc. See the notes
	// in the rst package for additional details.

	// Fields of oneof xxx_hidden_Type:
	S3    *RemoteStorageTarget_S3
	Posix *RemoteStorageTarget_POSIX
	Azure *RemoteStorageTarget_Azure
	Mock  *string
	// -- end of xxx_hidden_Type
}

func (b0 RemoteStorageTarget_builder) Build() *RemoteStorageTarget {
	m0 := &RemoteStorageTarget{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Name = b.Name
	x.xxx_hidden_Policies = b.Policies
	if b.S3 != nil {
		x.xxx_hidden_Type = &remoteStorageTarget_S3_{b.S3}
	}
	if b.Posix != nil {
		x.xxx_hidden_Type = &remoteStorageTarget_Posix{b.Posix}
	}
	if b.Azure != nil {
		x.xxx_hidden_Type = &remoteStorageTarget_Azure_{b.Azure}
	}
	if b.Mock != nil {
		x.xxx_hidden_Type = &remoteStorageTarget_Mock{*b.Mock}
	}
	return m0
}

type case_RemoteStorageTarget_Type protoreflect.FieldNumber

func (x case_RemoteStorageTarget_Type) String() string {
	md := file_flex_proto_msgTypes[19].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isRemoteStorageTarget_Type interface {
	isRemoteStorageTarget_Type()
}

type remoteStorageTarget_S3_ struct {
	S3 *RemoteStorageTarget_S3 `protobuf:"bytes,4,opt,name=s3,proto3,oneof"`
}

type remoteStorageTarget_Posix struct {
	Posix *RemoteStorageTarget_POSIX `protobuf:"bytes,5,opt,name=posix,proto3,oneof"`
}

type remoteStorageTarget_Azure_ struct {
	Azure *RemoteStorageTarget_Azure `protobuf:"bytes,6,opt,name=azure,proto3,oneof"`
}

type remoteStorageTarget_Mock struct {
	Mock string `protobuf:"bytes,7,opt,name=mock,proto3,oneof"`
}

func (*remoteStorageTarget_S3_) isRemoteStorageTarget_Type() {}

func (*remoteStorageTarget_Posix) isRemoteStorageTarget_Type() {}

func (*remoteStorageTarget_Azure_) isRemoteStorageTarget_Type() {}

func (*remoteStorageTarget_Mock) isRemoteStorageTarget_Type() {}

// A segment indicates what portion of the file a particular worker node should
// work on. Segments can be divided into one or more parts, which can be used to
// execute the requested operation in parallel if supported by the RST type.
type WorkRequest_Segment struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_OffsetStart int64                  `protobuf:"varint,1,opt,name=offset_start,json=offsetStart,proto3" json:"offset_start,omitempty"`
	xxx_hidden_OffsetStop  int64                  `protobuf:"varint,2,opt,name=offset_stop,json=offsetStop,proto3" json:"offset_stop,omitempty"`
	xxx_hidden_PartsStart  int32                  `protobuf:"varint,3,opt,name=parts_start,json=partsStart,proto3" json:"parts_start,omitempty"`
	xxx_hidden_PartsStop   int32                  `protobuf:"varint,4,opt,name=parts_stop,json=partsStop,proto3" json:"parts_stop,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *WorkRequest_Segment) Reset() {
	*x = WorkRequest_Segment{}
	mi := &file_flex_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkRequest_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkRequest_Segment) ProtoMessage() {}

func (x *WorkRequest_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WorkRequest_Segment) GetOffsetStart() int64 {
	if x != nil {
		return x.xxx_hidden_OffsetStart
	}
	return 0
}

func (x *WorkRequest_Segment) GetOffsetStop() int64 {
	if x != nil {
		return x.xxx_hidden_OffsetStop
	}
	return 0
}

func (x *WorkRequest_Segment) GetPartsStart() int32 {
	if x != nil {
		return x.xxx_hidden_PartsStart
	}
	return 0
}

func (x *WorkRequest_Segment) GetPartsStop() int32 {
	if x != nil {
		return x.xxx_hidden_PartsStop
	}
	return 0
}

func (x *WorkRequest_Segment) SetOffsetStart(v int64) {
	x.xxx_hidden_OffsetStart = v
}

func (x *WorkRequest_Segment) SetOffsetStop(v int64) {
	x.xxx_hidden_OffsetStop = v
}

func (x *WorkRequest_Segment) SetPartsStart(v int32) {
	x.xxx_hidden_PartsStart = v
}

func (x *WorkRequest_Segment) SetPartsStop(v int32) {
	x.xxx_hidden_PartsStop = v
}

type WorkRequest_Segment_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	OffsetStart int64
	// Inclusive of the last offset.
	OffsetStop int64
	// The amount of data in each part is calculated based on the offset start/stop.
	PartsStart int32
	// Inclusive of the last part.
	PartsStop int32
}

func (b0 WorkRequest_Segment_builder) Build() *WorkRequest_Segment {
	m0 := &WorkRequest_Segment{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_OffsetStart = b.OffsetStart
	x.xxx_hidden_OffsetStop = b.OffsetStop
	x.xxx_hidden_PartsStart = b.PartsStart
	x.xxx_hidden_PartsStop = b.PartsStop
	return m0
}

type Work_Status struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_State   Work_State             `protobuf:"varint,1,opt,name=state,proto3,enum=flex.Work_State" json:"state,omitempty"`
	xxx_hidden_Message string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Work_Status) Reset() {
	*x = Work_Status{}
	mi := &file_flex_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Work_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Work_Status) ProtoMessage() {}

func (x *Work_Status) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Work_Status) GetState() Work_State {
	if x != nil {
		return x.xxx_hidden_State
	}
	return Work_UNSPECIFIED
}

func (x *Work_Status) GetMessage() string {
	if x != nil {
		return x.xxx_hidden_Message
	}
	return ""
}

func (x *Work_Status) SetState(v Work_State) {
	x.xxx_hidden_State = v
}

func (x *Work_Status) SetMessage(v string) {
	x.xxx_hidden_Message = v
}

type Work_Status_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	State Work_State
	// See the guidelines for handling messages on Job.Status.Message.
	Message string
}

func (b0 Work_Status_builder) Build() *Work_Status {
	m0 := &Work_Status{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_State = b.State
	x.xxx_hidden_Message = b.Message
	return m0
}

// A part is not the same as a segment. A segment is some part of a larger
// operation assigned to a particular worker node, and each segment is
// divided into one or more parts allowing operations to be executed in
// parallel on a worker node. We use a standard part definition for all RST
// types. The use of the fields in Part will vary depending on the type.
type Work_Part struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_PartNumber     int32                  `protobuf:"varint,1,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	xxx_hidden_OffsetStart    int64                  `protobuf:"varint,2,opt,name=offset_start,json=offsetStart,proto3" json:"offset_start,omitempty"`
	xxx_hidden_OffsetStop     int64                  `protobuf:"varint,3,opt,name=offset_stop,json=offsetStop,proto3" json:"offset_stop,omitempty"`
	xxx_hidden_EntityTag      string                 `protobuf:"bytes,4,opt,name=entity_tag,json=entityTag,proto3" json:"entity_tag,omitempty"`
	xxx_hidden_ChecksumSha256 string                 `protobuf:"bytes,5,opt,name=checksum_sha256,json=checksumSha256,proto3" json:"checksum_sha256,omitempty"`
	xxx_hidden_Completed      bool                   `protobuf:"varint,6,opt,name=completed,proto3" json:"completed,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Work_Part) Reset() {
	*x = Work_Part{}
	mi := &file_flex_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Work_Part) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Work_Part) ProtoMessage() {}

func (x *Work_Part) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Work_Part) GetPartNumber() int32 {
	if x != nil {
		return x.xxx_hidden_PartNumber
	}
	return 0
}

func (x *Work_Part) GetOffsetStart() int64 {
	if x != nil {
		return x.xxx_hidden_OffsetStart
	}
	return 0
}

func (x *Work_Part) GetOffsetStop() int64 {
	if x != nil {
		return x.xxx_hidden_OffsetStop
	}
	return 0
}

func (x *Work_Part) GetEntityTag() string {
	if x != nil {
		return x.xxx_hidden_EntityTag
	}
	return ""
}

func (x *Work_Part) GetChecksumSha256() string {
	if x != nil {
		return x.xxx_hidden_ChecksumSha256
	}
	return ""
}

func (x *Work_Part) GetCompleted() bool {
	if x != nil {
		return x.xxx_hidden_Completed
	}
	return false
}

func (x *Work_Part) SetPartNumber(v int32) {
	x.xxx_hidden_PartNumber = v
}

func (x *Work_Part) SetOffsetStart(v int64) {
	x.xxx_hidden_OffsetStart = v
}

func (x *Work_Part) SetOffsetStop(v int64) {
	x.xxx_hidden_OffsetStop = v
}

func (x *Work_Part) SetEntityTag(v string) {
	x.xxx_hidden_EntityTag = v
}

func (x *Work_Part) SetChecksumSha256(v string) {
	x.xxx_hidden_ChecksumSha256 = v
}

func (x *Work_Part) SetCompleted(v bool) {
	x.xxx_hidden_Completed = v
}

type Work_Part_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	PartNumber  int32
	OffsetStart int64
	OffsetStop  int64
	// ETags primarily verify the completeness and sequence of the upload. They do indirectly
	// verify parts were received correctly since ETags are generated based on the received
	// parts data.
	EntityTag string
	// The SHA-256 checksum of the data contained in this part. Note the checksum differs from
	// the ETag in that it is an application layer integrity check of the part's content.
	ChecksumSha256 string
	Completed      bool
}

func (b0 Work_Part_builder) Build() *Work_Part {
	m0 := &Work_Part{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_PartNumber = b.PartNumber
	x.xxx_hidden_OffsetStart = b.OffsetStart
	x.xxx_hidden_OffsetStop = b.OffsetStop
	x.xxx_hidden_EntityTag = b.EntityTag
	x.xxx_hidden_ChecksumSha256 = b.ChecksumSha256
	x.xxx_hidden_Completed = b.Completed
	return m0
}

type RemoteStorageTarget_Policies struct {
	state                       protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FastStartMaxSize int64                  `protobuf:"varint,1,opt,name=fast_start_max_size,json=fastStartMaxSize,proto3" json:"fast_start_max_size,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *RemoteStorageTarget_Policies) Reset() {
	*x = RemoteStorageTarget_Policies{}
	mi := &file_flex_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteStorageTarget_Policies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_Policies) ProtoMessage() {}

func (x *RemoteStorageTarget_Policies) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RemoteStorageTarget_Policies) GetFastStartMaxSize() int64 {
	if x != nil {
		return x.xxx_hidden_FastStartMaxSize
	}
	return 0
}

func (x *RemoteStorageTarget_Policies) SetFastStartMaxSize(v int64) {
	x.xxx_hidden_FastStartMaxSize = v
}

type RemoteStorageTarget_Policies_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// If the file size is larger than this, BeeRemote handles creating/finishing the multipart
	// upload (if applicable) and will assign the job to multiple worker nodes. If the file size
	// is smaller than this, BeeRemote immediately assigns the job to a single worker node that
	// handles creating/finishing the multipart upload (if needed).
	FastStartMaxSize int64
}

func (b0 RemoteStorageTarget_Policies_builder) Build() *RemoteStorageTarget_Policies {
	m0 := &RemoteStorageTarget_Policies{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_FastStartMaxSize = b.FastStartMaxSize
	return m0
}

// The S3 type uses the AWS S3 SDK under the hood. To support non-AWS S3
// services we implement the EndPointResolverWithOptions interface to
// provide custom endpoint resolving behavior. By specifying the
// endpoint_url and optionally the parition_id and region we can support
// local S3 services like MinIO and theoretically other cloud providers like
// Azure or GCP.
type RemoteStorageTarget_S3 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_EndpointUrl string                 `protobuf:"bytes,1,opt,name=endpoint_url,json=endpointUrl,proto3" json:"endpoint_url,omitempty"`
	xxx_hidden_PartitionId string                 `protobuf:"bytes,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	xxx_hidden_Region      string                 `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	xxx_hidden_Bucket      string                 `protobuf:"bytes,4,opt,name=bucket,proto3" json:"bucket,omitempty"`
	xxx_hidden_AccessKey   string                 `protobuf:"bytes,5,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	xxx_hidden_SecretKey   string                 `protobuf:"bytes,6,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RemoteStorageTarget_S3) Reset() {
	*x = RemoteStorageTarget_S3{}
	mi := &file_flex_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteStorageTarget_S3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_S3) ProtoMessage() {}

func (x *RemoteStorageTarget_S3) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RemoteStorageTarget_S3) GetEndpointUrl() string {
	if x != nil {
		return x.xxx_hidden_EndpointUrl
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetPartitionId() string {
	if x != nil {
		return x.xxx_hidden_PartitionId
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetRegion() string {
	if x != nil {
		return x.xxx_hidden_Region
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetBucket() string {
	if x != nil {
		return x.xxx_hidden_Bucket
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetAccessKey() string {
	if x != nil {
		return x.xxx_hidden_AccessKey
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetSecretKey() string {
	if x != nil {
		return x.xxx_hidden_SecretKey
	}
	return ""
}

func (x *RemoteStorageTarget_S3) SetEndpointUrl(v string) {
	x.xxx_hidden_EndpointUrl = v
}

func (x *RemoteStorageTarget_S3) SetPartitionId(v string) {
	x.xxx_hidden_PartitionId = v
}

func (x *RemoteStorageTarget_S3) SetRegion(v string) {
	x.xxx_hidden_Region = v
}

func (x *RemoteStorageTarget_S3) SetBucket(v string) {
	x.xxx_hidden_Bucket = v
}

func (x *RemoteStorageTarget_S3) SetAccessKey(v string) {
	x.xxx_hidden_AccessKey = v
}

func (x *RemoteStorageTarget_S3) SetSecretKey(v string) {
	x.xxx_hidden_SecretKey = v
}

type RemoteStorageTarget_S3_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Endpoints should be formatted like: https://<ip-or-hostname>:<port>.
	// Ex: https://localhost:9000.
	// Because we are overriding the default AWS S3 SDK behavior an endpoint
	// must always be specified, even when using AWS.
	EndpointUrl string
	// AWS infrastructure is divided into partitions, with each partition
	// as a grouping of regions. Partition ID may not make sense for all
	// S3 services, and can sometimes be omitted (for example with MinIO).
	// https://docs.aws.amazon.com/sdk-for-go/api/aws/endpoints/#pkg-constants
	PartitionId string
	// Region can sometimes be omitted (for example with MinIO).
	Region    string
	Bucket    string
	AccessKey string
	SecretKey string
}

func (b0 RemoteStorageTarget_S3_builder) Build() *RemoteStorageTarget_S3 {
	m0 := &RemoteStorageTarget_S3{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_EndpointUrl = b.EndpointUrl
	x.xxx_hidden_PartitionId = b.PartitionId
	x.xxx_hidden_Region = b.Region
	x.xxx_hidden_Bucket = b.Bucket
	x.xxx_hidden_AccessKey = b.AccessKey
	x.xxx_hidden_SecretKey = b.SecretKey
	return m0
}

type RemoteStorageTarget_Azure struct {
	state              protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_S3      *RemoteStorageTarget_S3 `protobuf:"bytes,1,opt,name=s3,proto3" json:"s3,omitempty"`
	xxx_hidden_Account string                  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RemoteStorageTarget_Azure) Reset() {
	*x = RemoteStorageTarget_Azure{}
	mi := &file_flex_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteStorageTarget_Azure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_Azure) ProtoMessage() {}

func (x *RemoteStorageTarget_Azure) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RemoteStorageTarget_Azure) GetS3() *RemoteStorageTarget_S3 {
	if x != nil {
		return x.xxx_hidden_S3
	}
	return nil
}

func (x *RemoteStorageTarget_Azure) GetAccount() string {
	if x != nil {
		return x.xxx_hidden_Account
	}
	return ""
}

func (x *RemoteStorageTarget_Azure) SetS3(v *RemoteStorageTarget_S3) {
	x.xxx_hidden_S3 = v
}

func (x *RemoteStorageTarget_Azure) SetAccount(v string) {
	x.xxx_hidden_Account = v
}

func (x *RemoteStorageTarget_Azure) HasS3() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_S3 != nil
}

func (x *RemoteStorageTarget_Azure) ClearS3() {
	x.xxx_hidden_S3 = nil
}

type RemoteStorageTarget_Azure_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	S3      *RemoteStorageTarget_S3
	Account string
}

func (b0 RemoteStorageTarget_Azure_builder) Build() *RemoteStorageTarget_Azure {
	m0 := &RemoteStorageTarget_Azure{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_S3 = b.S3
	x.xxx_hidden_Account = b.Account
	return m0
}

type RemoteStorageTarget_POSIX struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Path string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RemoteStorageTarget_POSIX) Reset() {
	*x = RemoteStorageTarget_POSIX{}
	mi := &file_flex_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteStorageTarget_POSIX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_POSIX) ProtoMessage() {}

func (x *RemoteStorageTarget_POSIX) ProtoReflect() protoreflect.Message {
	mi := &file_flex_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RemoteStorageTarget_POSIX) GetPath() string {
	if x != nil {
		return x.xxx_hidden_Path
	}
	return ""
}

func (x *RemoteStorageTarget_POSIX) SetPath(v string) {
	x.xxx_hidden_Path = v
}

type RemoteStorageTarget_POSIX_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Path string
}

func (b0 RemoteStorageTarget_POSIX_builder) Build() *RemoteStorageTarget_POSIX {
	m0 := &RemoteStorageTarget_POSIX{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Path = b.Path
	return m0
}

var File_flex_proto protoreflect.FileDescriptor

var file_flex_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x66, 0x6c,
	0x65, 0x78, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x5e, 0x0a, 0x11,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x2e, 0x0a, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x6e, 0x0a, 0x09,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x40, 0x0a, 0x11,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x34,
	0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x04,
	0x77, 0x6f, 0x72, 0x6b, 0x22, 0xb4, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x2a, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x22, 0x34, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x04, 0x77, 0x6f, 0x72,
	0x6b, 0x22, 0x86, 0x01, 0x0a, 0x15, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x6e,
	0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2a,
	0x0a, 0x08, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55,
	0x4e, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x01, 0x22, 0x4c, 0x0a, 0x16, 0x42, 0x75,
	0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x0d, 0x4a, 0x6f, 0x62,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a,
	0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0f, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x72, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x75, 0x62, 0x55, 0x72,
	0x6c, 0x52, 0x73, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x75,
	0x72, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x74, 0x75, 0x62, 0x55, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xb4, 0x02, 0x0a, 0x0d, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x66, 0x67, 0x12, 0x30, 0x0a, 0x13,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x74, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x6c,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x4a, 0x6f, 0x62, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x90, 0x04, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x07,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x4a,
	0x6f, 0x62, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x79,
	0x6e, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12,
	0x2c, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x4a,
	0x6f, 0x62, 0x48, 0x00, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x74, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x1a, 0x8d, 0x01, 0x0a,
	0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x06, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x33, 0x0a, 0x0a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x4a,
	0x6f, 0x62, 0x12, 0x25, 0x0a, 0x03, 0x63, 0x66, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x66, 0x67, 0x52, 0x03, 0x63, 0x66, 0x67, 0x22, 0xf1, 0x01, 0x0a, 0x07, 0x4d, 0x6f,
	0x63, 0x6b, 0x4a, 0x6f, 0x62, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x46, 0x61, 0x69, 0x6c,
	0x12, 0x34, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x4a, 0x6f, 0x62,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x03, 0x63, 0x66, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x66, 0x67, 0x52, 0x03, 0x63, 0x66, 0x67, 0x22, 0x87, 0x02,
	0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x12, 0x35, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66,
	0x6c, 0x65, 0x78, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x4a, 0x6f, 0x62, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x36, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x57,
	0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02, 0x22, 0xe9, 0x04, 0x0a, 0x04, 0x57, 0x6f, 0x72, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6c, 0x65,
	0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6a, 0x6f, 0x62, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x1a, 0x4a, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xd1, 0x01, 0x0a, 0x04, 0x50, 0x61,
	0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x83, 0x01,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x09, 0x22, 0x78, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x62, 0x65,
	0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x42, 0x65, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x62, 0x65, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x72, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66,
	0x6c, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x04, 0x72, 0x73, 0x74, 0x73, 0x22, 0xad, 0x01,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x40, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x22, 0xd4, 0x02,
	0x0a, 0x0d, 0x42, 0x65, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x5f, 0x74, 0x6c,
	0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x5f, 0x74, 0x6c, 0x73,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x6d, 0x67, 0x6d,
	0x74, 0x64, 0x54, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x67, 0x6d, 0x74,
	0x64, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x67, 0x6d, 0x74, 0x64, 0x54, 0x6c, 0x73, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x9d, 0x05, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66,
	0x6c, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x33, 0x48, 0x00, 0x52, 0x02, 0x73, 0x33,
	0x12, 0x37, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x50, 0x4f, 0x53, 0x49, 0x58,
	0x48, 0x00, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x69, 0x78, 0x12, 0x37, 0x0a, 0x05, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x05, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x6d, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x63, 0x6b, 0x1a, 0x39, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x66, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x78, 0x53,
	0x69, 0x7a, 0x65, 0x1a, 0xb8, 0x01, 0x0a, 0x02, 0x53, 0x33, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x4f,
	0x0a, 0x05, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x53,
	0x33, 0x52, 0x02, 0x73, 0x33, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x1b, 0x0a, 0x05, 0x50, 0x4f, 0x53, 0x49, 0x58, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x32, 0xe0, 0x02, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x19, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x16, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x17, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x17, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x42, 0x75,
	0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x1b, 0x2e, 0x66,
	0x6c, 0x65, 0x78, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x66, 0x6c, 0x65, 0x78,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x70, 0x61, 0x72, 0x71, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x6c, 0x65, 0x78,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_flex_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_flex_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_flex_proto_goTypes = []any{
	(UpdateWorkRequest_NewState)(0),      // 0: flex.UpdateWorkRequest.NewState
	(BulkUpdateWorkRequest_NewState)(0),  // 1: flex.BulkUpdateWorkRequest.NewState
	(SyncJob_Operation)(0),               // 2: flex.SyncJob.Operation
	(Work_State)(0),                      // 3: flex.Work.State
	(UpdateConfigResponse_Result)(0),     // 4: flex.UpdateConfigResponse.Result
	(*HeartbeatRequest)(nil),             // 5: flex.HeartbeatRequest
	(*HeartbeatResponse)(nil),            // 6: flex.HeartbeatResponse
	(*NodeStats)(nil),                    // 7: flex.NodeStats
	(*SubmitWorkRequest)(nil),            // 8: flex.SubmitWorkRequest
	(*SubmitWorkResponse)(nil),           // 9: flex.SubmitWorkResponse
	(*UpdateWorkRequest)(nil),            // 10: flex.UpdateWorkRequest
	(*UpdateWorkResponse)(nil),           // 11: flex.UpdateWorkResponse
	(*BulkUpdateWorkRequest)(nil),        // 12: flex.BulkUpdateWorkRequest
	(*BulkUpdateWorkResponse)(nil),       // 13: flex.BulkUpdateWorkResponse
	(*JobLockedInfo)(nil),                // 14: flex.JobLockedInfo
	(*JobRequestCfg)(nil),                // 15: flex.JobRequestCfg
	(*WorkRequest)(nil),                  // 16: flex.WorkRequest
	(*BuilderJob)(nil),                   // 17: flex.BuilderJob
	(*MockJob)(nil),                      // 18: flex.MockJob
	(*SyncJob)(nil),                      // 19: flex.SyncJob
	(*Work)(nil),                         // 20: flex.Work
	(*UpdateConfigRequest)(nil),          // 21: flex.UpdateConfigRequest
	(*UpdateConfigResponse)(nil),         // 22: flex.UpdateConfigResponse
	(*BeeRemoteNode)(nil),                // 23: flex.BeeRemoteNode
	(*RemoteStorageTarget)(nil),          // 24: flex.RemoteStorageTarget
	(*WorkRequest_Segment)(nil),          // 25: flex.WorkRequest.Segment
	(*Work_Status)(nil),                  // 26: flex.Work.Status
	(*Work_Part)(nil),                    // 27: flex.Work.Part
	(*RemoteStorageTarget_Policies)(nil), // 28: flex.RemoteStorageTarget.Policies
	(*RemoteStorageTarget_S3)(nil),       // 29: flex.RemoteStorageTarget.S3
	(*RemoteStorageTarget_Azure)(nil),    // 30: flex.RemoteStorageTarget.Azure
	(*RemoteStorageTarget_POSIX)(nil),    // 31: flex.RemoteStorageTarget.POSIX
	(*timestamppb.Timestamp)(nil),        // 32: google.protobuf.Timestamp
}
var file_flex_proto_depIdxs = []int32{
	7,  // 0: flex.HeartbeatResponse.node_stats:type_name -> flex.NodeStats
	32, // 1: flex.NodeStats.timestamp:type_name -> google.protobuf.Timestamp
	16, // 2: flex.SubmitWorkRequest.request:type_name -> flex.WorkRequest
	20, // 3: flex.SubmitWorkResponse.work:type_name -> flex.Work
	0,  // 4: flex.UpdateWorkRequest.new_state:type_name -> flex.UpdateWorkRequest.NewState
	20, // 5: flex.UpdateWorkResponse.work:type_name -> flex.Work
	1,  // 6: flex.BulkUpdateWorkRequest.new_state:type_name -> flex.BulkUpdateWorkRequest.NewState
	32, // 7: flex.JobLockedInfo.mtime:type_name -> google.protobuf.Timestamp
	32, // 8: flex.JobLockedInfo.remote_mtime:type_name -> google.protobuf.Timestamp
	14, // 9: flex.JobRequestCfg.locked_info:type_name -> flex.JobLockedInfo
	25, // 10: flex.WorkRequest.segment:type_name -> flex.WorkRequest.Segment
	18, // 11: flex.WorkRequest.mock:type_name -> flex.MockJob
	19, // 12: flex.WorkRequest.sync:type_name -> flex.SyncJob
	17, // 13: flex.WorkRequest.builder:type_name -> flex.BuilderJob
	15, // 14: flex.BuilderJob.cfg:type_name -> flex.JobRequestCfg
	14, // 15: flex.MockJob.locked_info:type_name -> flex.JobLockedInfo
	15, // 16: flex.MockJob.cfg:type_name -> flex.JobRequestCfg
	2,  // 17: flex.SyncJob.operation:type_name -> flex.SyncJob.Operation
	14, // 18: flex.SyncJob.locked_info:type_name -> flex.JobLockedInfo
	26, // 19: flex.Work.status:type_name -> flex.Work.Status
	27, // 20: flex.Work.parts:type_name -> flex.Work.Part
	23, // 21: flex.UpdateConfigRequest.bee_remote:type_name -> flex.BeeRemoteNode
	24, // 22: flex.UpdateConfigRequest.rsts:type_name -> flex.RemoteStorageTarget
	4,  // 23: flex.UpdateConfigResponse.result:type_name -> flex.UpdateConfigResponse.Result
	28, // 24: flex.RemoteStorageTarget.policies:type_name -> flex.RemoteStorageTarget.Policies
	29, // 25: flex.RemoteStorageTarget.s3:type_name -> flex.RemoteStorageTarget.S3
	31, // 26: flex.RemoteStorageTarget.posix:type_name -> flex.RemoteStorageTarget.POSIX
	30, // 27: flex.RemoteStorageTarget.azure:type_name -> flex.RemoteStorageTarget.Azure
	3,  // 28: flex.Work.Status.state:type_name -> flex.Work.State
	29, // 29: flex.RemoteStorageTarget.Azure.s3:type_name -> flex.RemoteStorageTarget.S3
	21, // 30: flex.WorkerNode.UpdateConfig:input_type -> flex.UpdateConfigRequest
	5,  // 31: flex.WorkerNode.Heartbeat:input_type -> flex.HeartbeatRequest
	8,  // 32: flex.WorkerNode.SubmitWork:input_type -> flex.SubmitWorkRequest
	10, // 33: flex.WorkerNode.UpdateWork:input_type -> flex.UpdateWorkRequest
	12, // 34: flex.WorkerNode.BulkUpdateWork:input_type -> flex.BulkUpdateWorkRequest
	22, // 35: flex.WorkerNode.UpdateConfig:output_type -> flex.UpdateConfigResponse
	6,  // 36: flex.WorkerNode.Heartbeat:output_type -> flex.HeartbeatResponse
	9,  // 37: flex.WorkerNode.SubmitWork:output_type -> flex.SubmitWorkResponse
	11, // 38: flex.WorkerNode.UpdateWork:output_type -> flex.UpdateWorkResponse
	13, // 39: flex.WorkerNode.BulkUpdateWork:output_type -> flex.BulkUpdateWorkResponse
	35, // [35:40] is the sub-list for method output_type
	30, // [30:35] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_flex_proto_init() }
func file_flex_proto_init() {
	if File_flex_proto != nil {
		return
	}
	file_flex_proto_msgTypes[11].OneofWrappers = []any{
		(*workRequest_Mock)(nil),
		(*workRequest_Sync)(nil),
		(*workRequest_Builder)(nil),
	}
	file_flex_proto_msgTypes[19].OneofWrappers = []any{
		(*remoteStorageTarget_S3_)(nil),
		(*remoteStorageTarget_Posix)(nil),
		(*remoteStorageTarget_Azure_)(nil),
		(*remoteStorageTarget_Mock)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flex_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flex_proto_goTypes,
		DependencyIndexes: file_flex_proto_depIdxs,
		EnumInfos:         file_flex_proto_enumTypes,
		MessageInfos:      file_flex_proto_msgTypes,
	}.Build()
	File_flex_proto = out.File
	file_flex_proto_rawDesc = nil
	file_flex_proto_goTypes = nil
	file_flex_proto_depIdxs = nil
}
