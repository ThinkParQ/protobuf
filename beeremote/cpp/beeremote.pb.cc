// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beeremote.proto

#include "beeremote.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_beegfs_2fbeegfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobMetadata_beegfs_2fbeegfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beegfs_2fbeegfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestStatus_beegfs_2fbeegfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beeremote_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JobFilter_beeremote_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beeremote_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobRequest_beeremote_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beeremote_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JobResponse_beeremote_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beesync_2fbeesync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncJob_beesync_2fbeesync_2eproto;
namespace beeremote {
class JobRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobRequest> _instance;
  const ::beesync::SyncJob* sync_;
} _JobRequest_default_instance_;
class JobResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobResponse> _instance;
} _JobResponse_default_instance_;
class MultiJobRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiJobRequest> _instance;
} _MultiJobRequest_default_instance_;
class JobFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobFilter> _instance;
} _JobFilter_default_instance_;
class MultiJobResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiJobResponse> _instance;
} _MultiJobResponse_default_instance_;
}  // namespace beeremote
static void InitDefaultsscc_info_JobFilter_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_JobFilter_default_instance_;
    new (ptr) ::beeremote::JobFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::JobFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JobFilter_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_JobFilter_beeremote_2eproto}, {
      &scc_info_RequestStatus_beegfs_2fbeegfs_2eproto.base,
      &scc_info_JobRequest_beeremote_2eproto.base,}};

static void InitDefaultsscc_info_JobRequest_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_JobRequest_default_instance_;
    new (ptr) ::beeremote::JobRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::JobRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobRequest_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JobRequest_beeremote_2eproto}, {
      &scc_info_SyncJob_beesync_2fbeesync_2eproto.base,}};

static void InitDefaultsscc_info_JobResponse_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_JobResponse_default_instance_;
    new (ptr) ::beeremote::JobResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::JobResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JobResponse_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_JobResponse_beeremote_2eproto}, {
      &scc_info_JobMetadata_beegfs_2fbeegfs_2eproto.base,
      &scc_info_JobRequest_beeremote_2eproto.base,}};

static void InitDefaultsscc_info_MultiJobRequest_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_MultiJobRequest_default_instance_;
    new (ptr) ::beeremote::MultiJobRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::MultiJobRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiJobRequest_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiJobRequest_beeremote_2eproto}, {
      &scc_info_JobFilter_beeremote_2eproto.base,}};

static void InitDefaultsscc_info_MultiJobResponse_beeremote_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beeremote::_MultiJobResponse_default_instance_;
    new (ptr) ::beeremote::MultiJobResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beeremote::MultiJobResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiJobResponse_beeremote_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiJobResponse_beeremote_2eproto}, {
      &scc_info_JobResponse_beeremote_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_beeremote_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_beeremote_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_beeremote_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_beeremote_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::JobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::beeremote::JobRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beeremote::JobRequest, path_),
  PROTOBUF_FIELD_OFFSET(::beeremote::JobRequest, name_),
  PROTOBUF_FIELD_OFFSET(::beeremote::JobRequest, priority_),
  offsetof(::beeremote::JobRequestDefaultTypeInternal, sync_),
  PROTOBUF_FIELD_OFFSET(::beeremote::JobRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::JobResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beeremote::JobResponse, metadata_),
  PROTOBUF_FIELD_OFFSET(::beeremote::JobResponse, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::MultiJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beeremote::MultiJobRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::beeremote::MultiJobRequest, page_number_),
  PROTOBUF_FIELD_OFFSET(::beeremote::MultiJobRequest, results_per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::JobFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beeremote::JobFilter, id_),
  PROTOBUF_FIELD_OFFSET(::beeremote::JobFilter, status_),
  PROTOBUF_FIELD_OFFSET(::beeremote::JobFilter, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beeremote::MultiJobResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beeremote::MultiJobResponse, jobs_),
  PROTOBUF_FIELD_OFFSET(::beeremote::MultiJobResponse, page_number_),
  PROTOBUF_FIELD_OFFSET(::beeremote::MultiJobResponse, total_pages_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::beeremote::JobRequest)},
  { 10, -1, sizeof(::beeremote::JobResponse)},
  { 17, -1, sizeof(::beeremote::MultiJobRequest)},
  { 25, -1, sizeof(::beeremote::JobFilter)},
  { 33, -1, sizeof(::beeremote::MultiJobResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_JobRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_JobResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_MultiJobRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_JobFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beeremote::_MultiJobResponse_default_instance_),
};

const char descriptor_table_protodef_beeremote_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017beeremote.proto\022\tbeeremote\032\025beesync/be"
  "esync.proto\032\023beegfs/beegfs.proto\"d\n\nJobR"
  "equest\022\014\n\004path\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\020\n\010pr"
  "iority\030\003 \001(\005\022 \n\004sync\030\n \001(\0132\020.beesync.Syn"
  "cJobH\000B\006\n\004type\"\\\n\013JobResponse\022%\n\010metadat"
  "a\030\001 \001(\0132\023.beegfs.JobMetadata\022&\n\007request\030"
  "\002 \001(\0132\025.beeremote.JobRequest\"f\n\017MultiJob"
  "Request\022$\n\006filter\030\001 \001(\0132\024.beeremote.JobF"
  "ilter\022\023\n\013page_number\030\002 \001(\005\022\030\n\020results_pe"
  "r_page\030\003 \001(\005\"f\n\tJobFilter\022\n\n\002id\030\001 \003(\t\022%\n"
  "\006status\030\002 \003(\0132\025.beegfs.RequestStatus\022&\n\007"
  "request\030\003 \003(\0132\025.beeremote.JobRequest\"b\n\020"
  "MultiJobResponse\022$\n\004jobs\030\001 \003(\0132\026.beeremo"
  "te.JobResponse\022\023\n\013page_number\030\002 \001(\005\022\023\n\013t"
  "otal_pages\030\003 \001(\0052\230\002\n\tBeeRemote\022:\n\tSubmit"
  "Job\022\025.beeremote.JobRequest\032\026.beeremote.J"
  "obResponse\022B\n\007GetJobs\022\032.beeremote.MultiJ"
  "obRequest\032\033.beeremote.MultiJobResponse\022D"
  "\n\tPauseJobs\022\032.beeremote.MultiJobRequest\032"
  "\033.beeremote.MultiJobResponse\022E\n\nCancelJo"
  "bs\022\032.beeremote.MultiJobRequest\032\033.beeremo"
  "te.MultiJobResponseB6Z4github.com/thinkp"
  "arq/protobuf/beeremote/go;beeremoteb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_beeremote_2eproto_deps[2] = {
  &::descriptor_table_beegfs_2fbeegfs_2eproto,
  &::descriptor_table_beesync_2fbeesync_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_beeremote_2eproto_sccs[5] = {
  &scc_info_JobFilter_beeremote_2eproto.base,
  &scc_info_JobRequest_beeremote_2eproto.base,
  &scc_info_JobResponse_beeremote_2eproto.base,
  &scc_info_MultiJobRequest_beeremote_2eproto.base,
  &scc_info_MultiJobResponse_beeremote_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_beeremote_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_beeremote_2eproto = {
  false, false, descriptor_table_protodef_beeremote_2eproto, "beeremote.proto", 923,
  &descriptor_table_beeremote_2eproto_once, descriptor_table_beeremote_2eproto_sccs, descriptor_table_beeremote_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_beeremote_2eproto::offsets,
  file_level_metadata_beeremote_2eproto, 5, file_level_enum_descriptors_beeremote_2eproto, file_level_service_descriptors_beeremote_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_beeremote_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_beeremote_2eproto)), true);
namespace beeremote {

// ===================================================================

void JobRequest::InitAsDefaultInstance() {
  ::beeremote::_JobRequest_default_instance_.sync_ = const_cast< ::beesync::SyncJob*>(
      ::beesync::SyncJob::internal_default_instance());
}
class JobRequest::_Internal {
 public:
  static const ::beesync::SyncJob& sync(const JobRequest* msg);
};

const ::beesync::SyncJob&
JobRequest::_Internal::sync(const JobRequest* msg) {
  return *msg->type_.sync_;
}
void JobRequest::set_allocated_sync(::beesync::SyncJob* sync) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (sync) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync)->GetArena();
    if (message_arena != submessage_arena) {
      sync = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync, submessage_arena);
    }
    set_has_sync();
    type_.sync_ = sync;
  }
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobRequest.sync)
}
void JobRequest::clear_sync() {
  if (_internal_has_sync()) {
    if (GetArena() == nullptr) {
      delete type_.sync_;
    }
    clear_has_type();
  }
}
JobRequest::JobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.JobRequest)
}
JobRequest::JobRequest(const JobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  priority_ = from.priority_;
  clear_has_type();
  switch (from.type_case()) {
    case kSync: {
      _internal_mutable_sync()->::beesync::SyncJob::MergeFrom(from._internal_sync());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:beeremote.JobRequest)
}

void JobRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobRequest_beeremote_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  priority_ = 0;
  clear_has_type();
}

JobRequest::~JobRequest() {
  // @@protoc_insertion_point(destructor:beeremote.JobRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_type()) {
    clear_type();
  }
}

void JobRequest::ArenaDtor(void* object) {
  JobRequest* _this = reinterpret_cast< JobRequest* >(object);
  (void)_this;
}
void JobRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobRequest& JobRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobRequest_beeremote_2eproto.base);
  return *internal_default_instance();
}


void JobRequest::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:beeremote.JobRequest)
  switch (type_case()) {
    case kSync: {
      if (GetArena() == nullptr) {
        delete type_.sync_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void JobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.JobRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  priority_ = 0;
  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.JobRequest.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.JobRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .beesync.SyncJob sync = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.JobRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.JobRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.JobRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_priority(), target);
  }

  // .beesync.SyncJob sync = 10;
  if (_internal_has_sync()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::sync(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.JobRequest)
  return target;
}

size_t JobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.JobRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority());
  }

  switch (type_case()) {
    // .beesync.SyncJob sync = 10;
    case kSync: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.sync_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.JobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JobRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.JobRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.JobRequest)
    MergeFrom(*source);
  }
}

void JobRequest::MergeFrom(const JobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.JobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  switch (from.type_case()) {
    case kSync: {
      _internal_mutable_sync()->::beesync::SyncJob::MergeFrom(from._internal_sync());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void JobRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.JobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobRequest::CopyFrom(const JobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.JobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobRequest::IsInitialized() const {
  return true;
}

void JobRequest::InternalSwap(JobRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(priority_, other->priority_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobResponse::InitAsDefaultInstance() {
  ::beeremote::_JobResponse_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::beegfs::JobMetadata*>(
      ::beegfs::JobMetadata::internal_default_instance());
  ::beeremote::_JobResponse_default_instance_._instance.get_mutable()->request_ = const_cast< ::beeremote::JobRequest*>(
      ::beeremote::JobRequest::internal_default_instance());
}
class JobResponse::_Internal {
 public:
  static const ::beegfs::JobMetadata& metadata(const JobResponse* msg);
  static const ::beeremote::JobRequest& request(const JobResponse* msg);
};

const ::beegfs::JobMetadata&
JobResponse::_Internal::metadata(const JobResponse* msg) {
  return *msg->metadata_;
}
const ::beeremote::JobRequest&
JobResponse::_Internal::request(const JobResponse* msg) {
  return *msg->request_;
}
void JobResponse::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
JobResponse::JobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.JobResponse)
}
JobResponse::JobResponse(const JobResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::beegfs::JobMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_request()) {
    request_ = new ::beeremote::JobRequest(*from.request_);
  } else {
    request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:beeremote.JobResponse)
}

void JobResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobResponse_beeremote_2eproto.base);
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(request_));
}

JobResponse::~JobResponse() {
  // @@protoc_insertion_point(destructor:beeremote.JobResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JobResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete request_;
}

void JobResponse::ArenaDtor(void* object) {
  JobResponse* _this = reinterpret_cast< JobResponse* >(object);
  (void)_this;
}
void JobResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JobResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobResponse& JobResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobResponse_beeremote_2eproto.base);
  return *internal_default_instance();
}


void JobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.JobResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .beegfs.JobMetadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .beeremote.JobRequest request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.JobResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .beegfs.JobMetadata metadata = 1;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // .beeremote.JobRequest request = 2;
  if (this->has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.JobResponse)
  return target;
}

size_t JobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.JobResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .beegfs.JobMetadata metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .beeremote.JobRequest request = 2;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.JobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JobResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.JobResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.JobResponse)
    MergeFrom(*source);
  }
}

void JobResponse::MergeFrom(const JobResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.JobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_metadata()) {
    _internal_mutable_metadata()->::beegfs::JobMetadata::MergeFrom(from._internal_metadata());
  }
  if (from.has_request()) {
    _internal_mutable_request()->::beeremote::JobRequest::MergeFrom(from._internal_request());
  }
}

void JobResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.JobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobResponse::CopyFrom(const JobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.JobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobResponse::IsInitialized() const {
  return true;
}

void JobResponse::InternalSwap(JobResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JobResponse, request_)
      + sizeof(JobResponse::request_)
      - PROTOBUF_FIELD_OFFSET(JobResponse, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JobResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiJobRequest::InitAsDefaultInstance() {
  ::beeremote::_MultiJobRequest_default_instance_._instance.get_mutable()->filter_ = const_cast< ::beeremote::JobFilter*>(
      ::beeremote::JobFilter::internal_default_instance());
}
class MultiJobRequest::_Internal {
 public:
  static const ::beeremote::JobFilter& filter(const MultiJobRequest* msg);
};

const ::beeremote::JobFilter&
MultiJobRequest::_Internal::filter(const MultiJobRequest* msg) {
  return *msg->filter_;
}
MultiJobRequest::MultiJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.MultiJobRequest)
}
MultiJobRequest::MultiJobRequest(const MultiJobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::beeremote::JobFilter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  ::memcpy(&page_number_, &from.page_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&results_per_page_) -
    reinterpret_cast<char*>(&page_number_)) + sizeof(results_per_page_));
  // @@protoc_insertion_point(copy_constructor:beeremote.MultiJobRequest)
}

void MultiJobRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiJobRequest_beeremote_2eproto.base);
  ::memset(&filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_per_page_) -
      reinterpret_cast<char*>(&filter_)) + sizeof(results_per_page_));
}

MultiJobRequest::~MultiJobRequest() {
  // @@protoc_insertion_point(destructor:beeremote.MultiJobRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiJobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete filter_;
}

void MultiJobRequest::ArenaDtor(void* object) {
  MultiJobRequest* _this = reinterpret_cast< MultiJobRequest* >(object);
  (void)_this;
}
void MultiJobRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiJobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiJobRequest& MultiJobRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiJobRequest_beeremote_2eproto.base);
  return *internal_default_instance();
}


void MultiJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.MultiJobRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  ::memset(&page_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_per_page_) -
      reinterpret_cast<char*>(&page_number_)) + sizeof(results_per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiJobRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .beeremote.JobFilter filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 results_per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          results_per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiJobRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.MultiJobRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .beeremote.JobFilter filter = 1;
  if (this->has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filter(this), target, stream);
  }

  // int32 page_number = 2;
  if (this->page_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_number(), target);
  }

  // int32 results_per_page = 3;
  if (this->results_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_results_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.MultiJobRequest)
  return target;
}

size_t MultiJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.MultiJobRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .beeremote.JobFilter filter = 1;
  if (this->has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  // int32 page_number = 2;
  if (this->page_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page_number());
  }

  // int32 results_per_page = 3;
  if (this->results_per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_results_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiJobRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.MultiJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiJobRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiJobRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.MultiJobRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.MultiJobRequest)
    MergeFrom(*source);
  }
}

void MultiJobRequest::MergeFrom(const MultiJobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.MultiJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_filter()) {
    _internal_mutable_filter()->::beeremote::JobFilter::MergeFrom(from._internal_filter());
  }
  if (from.page_number() != 0) {
    _internal_set_page_number(from._internal_page_number());
  }
  if (from.results_per_page() != 0) {
    _internal_set_results_per_page(from._internal_results_per_page());
  }
}

void MultiJobRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.MultiJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiJobRequest::CopyFrom(const MultiJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.MultiJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiJobRequest::IsInitialized() const {
  return true;
}

void MultiJobRequest::InternalSwap(MultiJobRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiJobRequest, results_per_page_)
      + sizeof(MultiJobRequest::results_per_page_)
      - PROTOBUF_FIELD_OFFSET(MultiJobRequest, filter_)>(
          reinterpret_cast<char*>(&filter_),
          reinterpret_cast<char*>(&other->filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiJobRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobFilter::InitAsDefaultInstance() {
}
class JobFilter::_Internal {
 public:
};

void JobFilter::clear_status() {
  status_.Clear();
}
JobFilter::JobFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  id_(arena),
  status_(arena),
  request_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.JobFilter)
}
JobFilter::JobFilter(const JobFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      id_(from.id_),
      status_(from.status_),
      request_(from.request_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:beeremote.JobFilter)
}

void JobFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobFilter_beeremote_2eproto.base);
}

JobFilter::~JobFilter() {
  // @@protoc_insertion_point(destructor:beeremote.JobFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JobFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JobFilter::ArenaDtor(void* object) {
  JobFilter* _this = reinterpret_cast< JobFilter* >(object);
  (void)_this;
}
void JobFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JobFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobFilter& JobFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobFilter_beeremote_2eproto.base);
  return *internal_default_instance();
}


void JobFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.JobFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.Clear();
  status_.Clear();
  request_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beeremote.JobFilter.id"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .beegfs.RequestStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .beeremote.JobRequest request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.JobFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string id = 1;
  for (int i = 0, n = this->_internal_id_size(); i < n; i++) {
    const auto& s = this->_internal_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beeremote.JobFilter.id");
    target = stream->WriteString(1, s, target);
  }

  // repeated .beegfs.RequestStatus status = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_status(i), target, stream);
  }

  // repeated .beeremote.JobRequest request = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_request_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_request(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.JobFilter)
  return target;
}

size_t JobFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.JobFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(id_.size());
  for (int i = 0, n = id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      id_.Get(i));
  }

  // repeated .beegfs.RequestStatus status = 2;
  total_size += 1UL * this->_internal_status_size();
  for (const auto& msg : this->status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .beeremote.JobRequest request = 3;
  total_size += 1UL * this->_internal_request_size();
  for (const auto& msg : this->request_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.JobFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const JobFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.JobFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.JobFilter)
    MergeFrom(*source);
  }
}

void JobFilter::MergeFrom(const JobFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.JobFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
  status_.MergeFrom(from.status_);
  request_.MergeFrom(from.request_);
}

void JobFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.JobFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobFilter::CopyFrom(const JobFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.JobFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobFilter::IsInitialized() const {
  return true;
}

void JobFilter::InternalSwap(JobFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.InternalSwap(&other->id_);
  status_.InternalSwap(&other->status_);
  request_.InternalSwap(&other->request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiJobResponse::InitAsDefaultInstance() {
}
class MultiJobResponse::_Internal {
 public:
};

MultiJobResponse::MultiJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  jobs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beeremote.MultiJobResponse)
}
MultiJobResponse::MultiJobResponse(const MultiJobResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      jobs_(from.jobs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&page_number_, &from.page_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_pages_) -
    reinterpret_cast<char*>(&page_number_)) + sizeof(total_pages_));
  // @@protoc_insertion_point(copy_constructor:beeremote.MultiJobResponse)
}

void MultiJobResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiJobResponse_beeremote_2eproto.base);
  ::memset(&page_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_pages_) -
      reinterpret_cast<char*>(&page_number_)) + sizeof(total_pages_));
}

MultiJobResponse::~MultiJobResponse() {
  // @@protoc_insertion_point(destructor:beeremote.MultiJobResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiJobResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiJobResponse::ArenaDtor(void* object) {
  MultiJobResponse* _this = reinterpret_cast< MultiJobResponse* >(object);
  (void)_this;
}
void MultiJobResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiJobResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiJobResponse& MultiJobResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiJobResponse_beeremote_2eproto.base);
  return *internal_default_instance();
}


void MultiJobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:beeremote.MultiJobResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jobs_.Clear();
  ::memset(&page_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_pages_) -
      reinterpret_cast<char*>(&page_number_)) + sizeof(total_pages_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiJobResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .beeremote.JobResponse jobs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 page_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_pages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiJobResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beeremote.MultiJobResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .beeremote.JobResponse jobs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_jobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_jobs(i), target, stream);
  }

  // int32 page_number = 2;
  if (this->page_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_number(), target);
  }

  // int32 total_pages = 3;
  if (this->total_pages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_pages(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beeremote.MultiJobResponse)
  return target;
}

size_t MultiJobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beeremote.MultiJobResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .beeremote.JobResponse jobs = 1;
  total_size += 1UL * this->_internal_jobs_size();
  for (const auto& msg : this->jobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 page_number = 2;
  if (this->page_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page_number());
  }

  // int32 total_pages = 3;
  if (this->total_pages() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_pages());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiJobResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beeremote.MultiJobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiJobResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiJobResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beeremote.MultiJobResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beeremote.MultiJobResponse)
    MergeFrom(*source);
  }
}

void MultiJobResponse::MergeFrom(const MultiJobResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beeremote.MultiJobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jobs_.MergeFrom(from.jobs_);
  if (from.page_number() != 0) {
    _internal_set_page_number(from._internal_page_number());
  }
  if (from.total_pages() != 0) {
    _internal_set_total_pages(from._internal_total_pages());
  }
}

void MultiJobResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beeremote.MultiJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiJobResponse::CopyFrom(const MultiJobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beeremote.MultiJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiJobResponse::IsInitialized() const {
  return true;
}

void MultiJobResponse::InternalSwap(MultiJobResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  jobs_.InternalSwap(&other->jobs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiJobResponse, total_pages_)
      + sizeof(MultiJobResponse::total_pages_)
      - PROTOBUF_FIELD_OFFSET(MultiJobResponse, page_number_)>(
          reinterpret_cast<char*>(&page_number_),
          reinterpret_cast<char*>(&other->page_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiJobResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace beeremote
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::beeremote::JobRequest* Arena::CreateMaybeMessage< ::beeremote::JobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::JobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::JobResponse* Arena::CreateMaybeMessage< ::beeremote::JobResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::JobResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::MultiJobRequest* Arena::CreateMaybeMessage< ::beeremote::MultiJobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::MultiJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::JobFilter* Arena::CreateMaybeMessage< ::beeremote::JobFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::JobFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::beeremote::MultiJobResponse* Arena::CreateMaybeMessage< ::beeremote::MultiJobResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beeremote::MultiJobResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
