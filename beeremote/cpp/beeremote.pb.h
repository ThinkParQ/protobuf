// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beeremote.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_beeremote_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_beeremote_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "beesync/beesync.pb.h"
#include "beegfs/beegfs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_beeremote_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_beeremote_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_beeremote_2eproto;
namespace beeremote {
class JobFilter;
class JobFilterDefaultTypeInternal;
extern JobFilterDefaultTypeInternal _JobFilter_default_instance_;
class JobRequest;
class JobRequestDefaultTypeInternal;
extern JobRequestDefaultTypeInternal _JobRequest_default_instance_;
class JobResponse;
class JobResponseDefaultTypeInternal;
extern JobResponseDefaultTypeInternal _JobResponse_default_instance_;
class MultiJobRequest;
class MultiJobRequestDefaultTypeInternal;
extern MultiJobRequestDefaultTypeInternal _MultiJobRequest_default_instance_;
class MultiJobResponse;
class MultiJobResponseDefaultTypeInternal;
extern MultiJobResponseDefaultTypeInternal _MultiJobResponse_default_instance_;
}  // namespace beeremote
PROTOBUF_NAMESPACE_OPEN
template<> ::beeremote::JobFilter* Arena::CreateMaybeMessage<::beeremote::JobFilter>(Arena*);
template<> ::beeremote::JobRequest* Arena::CreateMaybeMessage<::beeremote::JobRequest>(Arena*);
template<> ::beeremote::JobResponse* Arena::CreateMaybeMessage<::beeremote::JobResponse>(Arena*);
template<> ::beeremote::MultiJobRequest* Arena::CreateMaybeMessage<::beeremote::MultiJobRequest>(Arena*);
template<> ::beeremote::MultiJobResponse* Arena::CreateMaybeMessage<::beeremote::MultiJobResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace beeremote {

// ===================================================================

class JobRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.JobRequest) */ {
 public:
  inline JobRequest() : JobRequest(nullptr) {};
  virtual ~JobRequest();

  JobRequest(const JobRequest& from);
  JobRequest(JobRequest&& from) noexcept
    : JobRequest() {
    *this = ::std::move(from);
  }

  inline JobRequest& operator=(const JobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobRequest& operator=(JobRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobRequest& default_instance();

  enum RequestTypeCase {
    kSync = 10,
    REQUEST_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobRequest* internal_default_instance() {
    return reinterpret_cast<const JobRequest*>(
               &_JobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JobRequest& a, JobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JobRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobRequest* New() const final {
    return CreateMaybeMessage<JobRequest>(nullptr);
  }

  JobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobRequest& from);
  void MergeFrom(const JobRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.JobRequest";
  }
  protected:
  explicit JobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPriorityFieldNumber = 2,
    kSyncFieldNumber = 10,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 priority = 2;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .beesync.SyncRequest sync = 10;
  bool has_sync() const;
  private:
  bool _internal_has_sync() const;
  public:
  void clear_sync();
  const ::beesync::SyncRequest& sync() const;
  ::beesync::SyncRequest* release_sync();
  ::beesync::SyncRequest* mutable_sync();
  void set_allocated_sync(::beesync::SyncRequest* sync);
  private:
  const ::beesync::SyncRequest& _internal_sync() const;
  ::beesync::SyncRequest* _internal_mutable_sync();
  public:
  void unsafe_arena_set_allocated_sync(
      ::beesync::SyncRequest* sync);
  ::beesync::SyncRequest* unsafe_arena_release_sync();

  void clear_request_type();
  RequestTypeCase request_type_case() const;
  // @@protoc_insertion_point(class_scope:beeremote.JobRequest)
 private:
  class _Internal;
  void set_has_sync();

  inline bool has_request_type() const;
  inline void clear_has_request_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  union RequestTypeUnion {
    RequestTypeUnion() {}
    ::beesync::SyncRequest* sync_;
  } request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class JobResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.JobResponse) */ {
 public:
  inline JobResponse() : JobResponse(nullptr) {};
  virtual ~JobResponse();

  JobResponse(const JobResponse& from);
  JobResponse(JobResponse&& from) noexcept
    : JobResponse() {
    *this = ::std::move(from);
  }

  inline JobResponse& operator=(const JobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobResponse& operator=(JobResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobResponse* internal_default_instance() {
    return reinterpret_cast<const JobResponse*>(
               &_JobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(JobResponse& a, JobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JobResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobResponse* New() const final {
    return CreateMaybeMessage<JobResponse>(nullptr);
  }

  JobResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobResponse& from);
  void MergeFrom(const JobResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.JobResponse";
  }
  protected:
  explicit JobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kRequestFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .beegfs.JobStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::beegfs::JobStatus& status() const;
  ::beegfs::JobStatus* release_status();
  ::beegfs::JobStatus* mutable_status();
  void set_allocated_status(::beegfs::JobStatus* status);
  private:
  const ::beegfs::JobStatus& _internal_status() const;
  ::beegfs::JobStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::beegfs::JobStatus* status);
  ::beegfs::JobStatus* unsafe_arena_release_status();

  // .beeremote.JobRequest request = 3;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::beeremote::JobRequest& request() const;
  ::beeremote::JobRequest* release_request();
  ::beeremote::JobRequest* mutable_request();
  void set_allocated_request(::beeremote::JobRequest* request);
  private:
  const ::beeremote::JobRequest& _internal_request() const;
  ::beeremote::JobRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::beeremote::JobRequest* request);
  ::beeremote::JobRequest* unsafe_arena_release_request();

  // @@protoc_insertion_point(class_scope:beeremote.JobResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::beegfs::JobStatus* status_;
  ::beeremote::JobRequest* request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class MultiJobRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.MultiJobRequest) */ {
 public:
  inline MultiJobRequest() : MultiJobRequest(nullptr) {};
  virtual ~MultiJobRequest();

  MultiJobRequest(const MultiJobRequest& from);
  MultiJobRequest(MultiJobRequest&& from) noexcept
    : MultiJobRequest() {
    *this = ::std::move(from);
  }

  inline MultiJobRequest& operator=(const MultiJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiJobRequest& operator=(MultiJobRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiJobRequest* internal_default_instance() {
    return reinterpret_cast<const MultiJobRequest*>(
               &_MultiJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MultiJobRequest& a, MultiJobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiJobRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiJobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiJobRequest* New() const final {
    return CreateMaybeMessage<MultiJobRequest>(nullptr);
  }

  MultiJobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiJobRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiJobRequest& from);
  void MergeFrom(const MultiJobRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiJobRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.MultiJobRequest";
  }
  protected:
  explicit MultiJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
    kPageNumberFieldNumber = 2,
    kResultsPerPageFieldNumber = 3,
  };
  // .beeremote.JobFilter filter = 1;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::beeremote::JobFilter& filter() const;
  ::beeremote::JobFilter* release_filter();
  ::beeremote::JobFilter* mutable_filter();
  void set_allocated_filter(::beeremote::JobFilter* filter);
  private:
  const ::beeremote::JobFilter& _internal_filter() const;
  ::beeremote::JobFilter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::beeremote::JobFilter* filter);
  ::beeremote::JobFilter* unsafe_arena_release_filter();

  // int32 page_number = 2;
  void clear_page_number();
  ::PROTOBUF_NAMESPACE_ID::int32 page_number() const;
  void set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_number() const;
  void _internal_set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 results_per_page = 3;
  void clear_results_per_page();
  ::PROTOBUF_NAMESPACE_ID::int32 results_per_page() const;
  void set_results_per_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_results_per_page() const;
  void _internal_set_results_per_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:beeremote.MultiJobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::beeremote::JobFilter* filter_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 results_per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class JobFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.JobFilter) */ {
 public:
  inline JobFilter() : JobFilter(nullptr) {};
  virtual ~JobFilter();

  JobFilter(const JobFilter& from);
  JobFilter(JobFilter&& from) noexcept
    : JobFilter() {
    *this = ::std::move(from);
  }

  inline JobFilter& operator=(const JobFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobFilter& operator=(JobFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobFilter* internal_default_instance() {
    return reinterpret_cast<const JobFilter*>(
               &_JobFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JobFilter& a, JobFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(JobFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobFilter* New() const final {
    return CreateMaybeMessage<JobFilter>(nullptr);
  }

  JobFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobFilter& from);
  void MergeFrom(const JobFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.JobFilter";
  }
  protected:
  explicit JobFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kRequestFieldNumber = 3,
  };
  // repeated string id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  const std::string& id(int index) const;
  std::string* mutable_id(int index);
  void set_id(int index, const std::string& value);
  void set_id(int index, std::string&& value);
  void set_id(int index, const char* value);
  void set_id(int index, const char* value, size_t size);
  std::string* add_id();
  void add_id(const std::string& value);
  void add_id(std::string&& value);
  void add_id(const char* value);
  void add_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_id();
  private:
  const std::string& _internal_id(int index) const;
  std::string* _internal_add_id();
  public:

  // repeated .beegfs.JobStatus status = 2;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  ::beegfs::JobStatus* mutable_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::JobStatus >*
      mutable_status();
  private:
  const ::beegfs::JobStatus& _internal_status(int index) const;
  ::beegfs::JobStatus* _internal_add_status();
  public:
  const ::beegfs::JobStatus& status(int index) const;
  ::beegfs::JobStatus* add_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::JobStatus >&
      status() const;

  // repeated .beeremote.JobRequest request = 3;
  int request_size() const;
  private:
  int _internal_request_size() const;
  public:
  void clear_request();
  ::beeremote::JobRequest* mutable_request(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobRequest >*
      mutable_request();
  private:
  const ::beeremote::JobRequest& _internal_request(int index) const;
  ::beeremote::JobRequest* _internal_add_request();
  public:
  const ::beeremote::JobRequest& request(int index) const;
  ::beeremote::JobRequest* add_request();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobRequest >&
      request() const;

  // @@protoc_insertion_point(class_scope:beeremote.JobFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::JobStatus > status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobRequest > request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beeremote_2eproto;
};
// -------------------------------------------------------------------

class MultiJobResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beeremote.MultiJobResponse) */ {
 public:
  inline MultiJobResponse() : MultiJobResponse(nullptr) {};
  virtual ~MultiJobResponse();

  MultiJobResponse(const MultiJobResponse& from);
  MultiJobResponse(MultiJobResponse&& from) noexcept
    : MultiJobResponse() {
    *this = ::std::move(from);
  }

  inline MultiJobResponse& operator=(const MultiJobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiJobResponse& operator=(MultiJobResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiJobResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiJobResponse* internal_default_instance() {
    return reinterpret_cast<const MultiJobResponse*>(
               &_MultiJobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MultiJobResponse& a, MultiJobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiJobResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiJobResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiJobResponse* New() const final {
    return CreateMaybeMessage<MultiJobResponse>(nullptr);
  }

  MultiJobResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiJobResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiJobResponse& from);
  void MergeFrom(const MultiJobResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiJobResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beeremote.MultiJobResponse";
  }
  protected:
  explicit MultiJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beeremote_2eproto);
    return ::descriptor_table_beeremote_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobsFieldNumber = 1,
    kPageNumberFieldNumber = 2,
    kTotalPagesFieldNumber = 3,
  };
  // repeated .beeremote.JobResponse jobs = 1;
  int jobs_size() const;
  private:
  int _internal_jobs_size() const;
  public:
  void clear_jobs();
  ::beeremote::JobResponse* mutable_jobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResponse >*
      mutable_jobs();
  private:
  const ::beeremote::JobResponse& _internal_jobs(int index) const;
  ::beeremote::JobResponse* _internal_add_jobs();
  public:
  const ::beeremote::JobResponse& jobs(int index) const;
  ::beeremote::JobResponse* add_jobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResponse >&
      jobs() const;

  // int32 page_number = 2;
  void clear_page_number();
  ::PROTOBUF_NAMESPACE_ID::int32 page_number() const;
  void set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_number() const;
  void _internal_set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_pages = 3;
  void clear_total_pages();
  ::PROTOBUF_NAMESPACE_ID::int32 total_pages() const;
  void set_total_pages(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_pages() const;
  void _internal_set_total_pages(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:beeremote.MultiJobResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResponse > jobs_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_pages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beeremote_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JobRequest

// string name = 1;
inline void JobRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobRequest::name() const {
  // @@protoc_insertion_point(field_get:beeremote.JobRequest.name)
  return _internal_name();
}
inline void JobRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:beeremote.JobRequest.name)
}
inline std::string* JobRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:beeremote.JobRequest.name)
  return _internal_mutable_name();
}
inline const std::string& JobRequest::_internal_name() const {
  return name_.Get();
}
inline void JobRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.JobRequest.name)
}
inline void JobRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.JobRequest.name)
}
inline void JobRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.JobRequest.name)
}
inline std::string* JobRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobRequest::release_name() {
  // @@protoc_insertion_point(field_release:beeremote.JobRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobRequest.name)
}
inline std::string* JobRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.JobRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JobRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.JobRequest.name)
}

// int32 priority = 2;
inline void JobRequest::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobRequest::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobRequest::priority() const {
  // @@protoc_insertion_point(field_get:beeremote.JobRequest.priority)
  return _internal_priority();
}
inline void JobRequest::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void JobRequest::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:beeremote.JobRequest.priority)
}

// .beesync.SyncRequest sync = 10;
inline bool JobRequest::_internal_has_sync() const {
  return request_type_case() == kSync;
}
inline bool JobRequest::has_sync() const {
  return _internal_has_sync();
}
inline void JobRequest::set_has_sync() {
  _oneof_case_[0] = kSync;
}
inline ::beesync::SyncRequest* JobRequest::release_sync() {
  // @@protoc_insertion_point(field_release:beeremote.JobRequest.sync)
  if (_internal_has_sync()) {
    clear_has_request_type();
      ::beesync::SyncRequest* temp = request_type_.sync_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.sync_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::beesync::SyncRequest& JobRequest::_internal_sync() const {
  return _internal_has_sync()
      ? *request_type_.sync_
      : *reinterpret_cast< ::beesync::SyncRequest*>(&::beesync::_SyncRequest_default_instance_);
}
inline const ::beesync::SyncRequest& JobRequest::sync() const {
  // @@protoc_insertion_point(field_get:beeremote.JobRequest.sync)
  return _internal_sync();
}
inline ::beesync::SyncRequest* JobRequest::unsafe_arena_release_sync() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.JobRequest.sync)
  if (_internal_has_sync()) {
    clear_has_request_type();
    ::beesync::SyncRequest* temp = request_type_.sync_;
    request_type_.sync_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JobRequest::unsafe_arena_set_allocated_sync(::beesync::SyncRequest* sync) {
  clear_request_type();
  if (sync) {
    set_has_sync();
    request_type_.sync_ = sync;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.JobRequest.sync)
}
inline ::beesync::SyncRequest* JobRequest::_internal_mutable_sync() {
  if (!_internal_has_sync()) {
    clear_request_type();
    set_has_sync();
    request_type_.sync_ = CreateMaybeMessage< ::beesync::SyncRequest >(GetArena());
  }
  return request_type_.sync_;
}
inline ::beesync::SyncRequest* JobRequest::mutable_sync() {
  // @@protoc_insertion_point(field_mutable:beeremote.JobRequest.sync)
  return _internal_mutable_sync();
}

inline bool JobRequest::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
inline void JobRequest::clear_has_request_type() {
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
inline JobRequest::RequestTypeCase JobRequest::request_type_case() const {
  return JobRequest::RequestTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// JobResponse

// string id = 1;
inline void JobResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobResponse::id() const {
  // @@protoc_insertion_point(field_get:beeremote.JobResponse.id)
  return _internal_id();
}
inline void JobResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:beeremote.JobResponse.id)
}
inline std::string* JobResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:beeremote.JobResponse.id)
  return _internal_mutable_id();
}
inline const std::string& JobResponse::_internal_id() const {
  return id_.Get();
}
inline void JobResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beeremote.JobResponse.id)
}
inline void JobResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beeremote.JobResponse.id)
}
inline void JobResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beeremote.JobResponse.id)
}
inline std::string* JobResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobResponse::release_id() {
  // @@protoc_insertion_point(field_release:beeremote.JobResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobResponse.id)
}
inline std::string* JobResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.JobResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JobResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.JobResponse.id)
}

// .beegfs.JobStatus status = 2;
inline bool JobResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool JobResponse::has_status() const {
  return _internal_has_status();
}
inline const ::beegfs::JobStatus& JobResponse::_internal_status() const {
  const ::beegfs::JobStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::beegfs::JobStatus*>(
      &::beegfs::_JobStatus_default_instance_);
}
inline const ::beegfs::JobStatus& JobResponse::status() const {
  // @@protoc_insertion_point(field_get:beeremote.JobResponse.status)
  return _internal_status();
}
inline void JobResponse::unsafe_arena_set_allocated_status(
    ::beegfs::JobStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.JobResponse.status)
}
inline ::beegfs::JobStatus* JobResponse::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::beegfs::JobStatus* JobResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:beeremote.JobResponse.status)
  
  ::beegfs::JobStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::beegfs::JobStatus* JobResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::beegfs::JobStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::beegfs::JobStatus* JobResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:beeremote.JobResponse.status)
  return _internal_mutable_status();
}
inline void JobResponse::set_allocated_status(::beegfs::JobStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobResponse.status)
}

// .beeremote.JobRequest request = 3;
inline bool JobResponse::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool JobResponse::has_request() const {
  return _internal_has_request();
}
inline void JobResponse::clear_request() {
  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::beeremote::JobRequest& JobResponse::_internal_request() const {
  const ::beeremote::JobRequest* p = request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::beeremote::JobRequest*>(
      &::beeremote::_JobRequest_default_instance_);
}
inline const ::beeremote::JobRequest& JobResponse::request() const {
  // @@protoc_insertion_point(field_get:beeremote.JobResponse.request)
  return _internal_request();
}
inline void JobResponse::unsafe_arena_set_allocated_request(
    ::beeremote::JobRequest* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.JobResponse.request)
}
inline ::beeremote::JobRequest* JobResponse::release_request() {
  auto temp = unsafe_arena_release_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::beeremote::JobRequest* JobResponse::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:beeremote.JobResponse.request)
  
  ::beeremote::JobRequest* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::beeremote::JobRequest* JobResponse::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::beeremote::JobRequest>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::beeremote::JobRequest* JobResponse::mutable_request() {
  // @@protoc_insertion_point(field_mutable:beeremote.JobResponse.request)
  return _internal_mutable_request();
}
inline void JobResponse::set_allocated_request(::beeremote::JobRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobResponse.request)
}

// -------------------------------------------------------------------

// MultiJobRequest

// .beeremote.JobFilter filter = 1;
inline bool MultiJobRequest::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool MultiJobRequest::has_filter() const {
  return _internal_has_filter();
}
inline void MultiJobRequest::clear_filter() {
  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::beeremote::JobFilter& MultiJobRequest::_internal_filter() const {
  const ::beeremote::JobFilter* p = filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::beeremote::JobFilter*>(
      &::beeremote::_JobFilter_default_instance_);
}
inline const ::beeremote::JobFilter& MultiJobRequest::filter() const {
  // @@protoc_insertion_point(field_get:beeremote.MultiJobRequest.filter)
  return _internal_filter();
}
inline void MultiJobRequest::unsafe_arena_set_allocated_filter(
    ::beeremote::JobFilter* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.MultiJobRequest.filter)
}
inline ::beeremote::JobFilter* MultiJobRequest::release_filter() {
  auto temp = unsafe_arena_release_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::beeremote::JobFilter* MultiJobRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:beeremote.MultiJobRequest.filter)
  
  ::beeremote::JobFilter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::beeremote::JobFilter* MultiJobRequest::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::beeremote::JobFilter>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::beeremote::JobFilter* MultiJobRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:beeremote.MultiJobRequest.filter)
  return _internal_mutable_filter();
}
inline void MultiJobRequest::set_allocated_filter(::beeremote::JobFilter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:beeremote.MultiJobRequest.filter)
}

// int32 page_number = 2;
inline void MultiJobRequest::clear_page_number() {
  page_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiJobRequest::_internal_page_number() const {
  return page_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiJobRequest::page_number() const {
  // @@protoc_insertion_point(field_get:beeremote.MultiJobRequest.page_number)
  return _internal_page_number();
}
inline void MultiJobRequest::_internal_set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_number_ = value;
}
inline void MultiJobRequest::set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_number(value);
  // @@protoc_insertion_point(field_set:beeremote.MultiJobRequest.page_number)
}

// int32 results_per_page = 3;
inline void MultiJobRequest::clear_results_per_page() {
  results_per_page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiJobRequest::_internal_results_per_page() const {
  return results_per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiJobRequest::results_per_page() const {
  // @@protoc_insertion_point(field_get:beeremote.MultiJobRequest.results_per_page)
  return _internal_results_per_page();
}
inline void MultiJobRequest::_internal_set_results_per_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  results_per_page_ = value;
}
inline void MultiJobRequest::set_results_per_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_results_per_page(value);
  // @@protoc_insertion_point(field_set:beeremote.MultiJobRequest.results_per_page)
}

// -------------------------------------------------------------------

// JobFilter

// repeated string id = 1;
inline int JobFilter::_internal_id_size() const {
  return id_.size();
}
inline int JobFilter::id_size() const {
  return _internal_id_size();
}
inline void JobFilter::clear_id() {
  id_.Clear();
}
inline std::string* JobFilter::add_id() {
  // @@protoc_insertion_point(field_add_mutable:beeremote.JobFilter.id)
  return _internal_add_id();
}
inline const std::string& JobFilter::_internal_id(int index) const {
  return id_.Get(index);
}
inline const std::string& JobFilter::id(int index) const {
  // @@protoc_insertion_point(field_get:beeremote.JobFilter.id)
  return _internal_id(index);
}
inline std::string* JobFilter::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:beeremote.JobFilter.id)
  return id_.Mutable(index);
}
inline void JobFilter::set_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:beeremote.JobFilter.id)
  id_.Mutable(index)->assign(value);
}
inline void JobFilter::set_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:beeremote.JobFilter.id)
  id_.Mutable(index)->assign(std::move(value));
}
inline void JobFilter::set_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:beeremote.JobFilter.id)
}
inline void JobFilter::set_id(int index, const char* value, size_t size) {
  id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:beeremote.JobFilter.id)
}
inline std::string* JobFilter::_internal_add_id() {
  return id_.Add();
}
inline void JobFilter::add_id(const std::string& value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:beeremote.JobFilter.id)
}
inline void JobFilter::add_id(std::string&& value) {
  id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:beeremote.JobFilter.id)
}
inline void JobFilter::add_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:beeremote.JobFilter.id)
}
inline void JobFilter::add_id(const char* value, size_t size) {
  id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:beeremote.JobFilter.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JobFilter::id() const {
  // @@protoc_insertion_point(field_list:beeremote.JobFilter.id)
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JobFilter::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:beeremote.JobFilter.id)
  return &id_;
}

// repeated .beegfs.JobStatus status = 2;
inline int JobFilter::_internal_status_size() const {
  return status_.size();
}
inline int JobFilter::status_size() const {
  return _internal_status_size();
}
inline ::beegfs::JobStatus* JobFilter::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:beeremote.JobFilter.status)
  return status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::JobStatus >*
JobFilter::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:beeremote.JobFilter.status)
  return &status_;
}
inline const ::beegfs::JobStatus& JobFilter::_internal_status(int index) const {
  return status_.Get(index);
}
inline const ::beegfs::JobStatus& JobFilter::status(int index) const {
  // @@protoc_insertion_point(field_get:beeremote.JobFilter.status)
  return _internal_status(index);
}
inline ::beegfs::JobStatus* JobFilter::_internal_add_status() {
  return status_.Add();
}
inline ::beegfs::JobStatus* JobFilter::add_status() {
  // @@protoc_insertion_point(field_add:beeremote.JobFilter.status)
  return _internal_add_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::JobStatus >&
JobFilter::status() const {
  // @@protoc_insertion_point(field_list:beeremote.JobFilter.status)
  return status_;
}

// repeated .beeremote.JobRequest request = 3;
inline int JobFilter::_internal_request_size() const {
  return request_.size();
}
inline int JobFilter::request_size() const {
  return _internal_request_size();
}
inline void JobFilter::clear_request() {
  request_.Clear();
}
inline ::beeremote::JobRequest* JobFilter::mutable_request(int index) {
  // @@protoc_insertion_point(field_mutable:beeremote.JobFilter.request)
  return request_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobRequest >*
JobFilter::mutable_request() {
  // @@protoc_insertion_point(field_mutable_list:beeremote.JobFilter.request)
  return &request_;
}
inline const ::beeremote::JobRequest& JobFilter::_internal_request(int index) const {
  return request_.Get(index);
}
inline const ::beeremote::JobRequest& JobFilter::request(int index) const {
  // @@protoc_insertion_point(field_get:beeremote.JobFilter.request)
  return _internal_request(index);
}
inline ::beeremote::JobRequest* JobFilter::_internal_add_request() {
  return request_.Add();
}
inline ::beeremote::JobRequest* JobFilter::add_request() {
  // @@protoc_insertion_point(field_add:beeremote.JobFilter.request)
  return _internal_add_request();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobRequest >&
JobFilter::request() const {
  // @@protoc_insertion_point(field_list:beeremote.JobFilter.request)
  return request_;
}

// -------------------------------------------------------------------

// MultiJobResponse

// repeated .beeremote.JobResponse jobs = 1;
inline int MultiJobResponse::_internal_jobs_size() const {
  return jobs_.size();
}
inline int MultiJobResponse::jobs_size() const {
  return _internal_jobs_size();
}
inline void MultiJobResponse::clear_jobs() {
  jobs_.Clear();
}
inline ::beeremote::JobResponse* MultiJobResponse::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:beeremote.MultiJobResponse.jobs)
  return jobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResponse >*
MultiJobResponse::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:beeremote.MultiJobResponse.jobs)
  return &jobs_;
}
inline const ::beeremote::JobResponse& MultiJobResponse::_internal_jobs(int index) const {
  return jobs_.Get(index);
}
inline const ::beeremote::JobResponse& MultiJobResponse::jobs(int index) const {
  // @@protoc_insertion_point(field_get:beeremote.MultiJobResponse.jobs)
  return _internal_jobs(index);
}
inline ::beeremote::JobResponse* MultiJobResponse::_internal_add_jobs() {
  return jobs_.Add();
}
inline ::beeremote::JobResponse* MultiJobResponse::add_jobs() {
  // @@protoc_insertion_point(field_add:beeremote.MultiJobResponse.jobs)
  return _internal_add_jobs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beeremote::JobResponse >&
MultiJobResponse::jobs() const {
  // @@protoc_insertion_point(field_list:beeremote.MultiJobResponse.jobs)
  return jobs_;
}

// int32 page_number = 2;
inline void MultiJobResponse::clear_page_number() {
  page_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiJobResponse::_internal_page_number() const {
  return page_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiJobResponse::page_number() const {
  // @@protoc_insertion_point(field_get:beeremote.MultiJobResponse.page_number)
  return _internal_page_number();
}
inline void MultiJobResponse::_internal_set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_number_ = value;
}
inline void MultiJobResponse::set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_number(value);
  // @@protoc_insertion_point(field_set:beeremote.MultiJobResponse.page_number)
}

// int32 total_pages = 3;
inline void MultiJobResponse::clear_total_pages() {
  total_pages_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiJobResponse::_internal_total_pages() const {
  return total_pages_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiJobResponse::total_pages() const {
  // @@protoc_insertion_point(field_get:beeremote.MultiJobResponse.total_pages)
  return _internal_total_pages();
}
inline void MultiJobResponse::_internal_set_total_pages(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_pages_ = value;
}
inline void MultiJobResponse::set_total_pages(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_pages(value);
  // @@protoc_insertion_point(field_set:beeremote.MultiJobResponse.total_pages)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace beeremote

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_beeremote_2eproto
