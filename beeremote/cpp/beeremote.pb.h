// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beeremote.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_beeremote_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_beeremote_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "beesync/beesync.pb.h"
#include "beegfs/beegfs.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_beeremote_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_beeremote_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_beeremote_2eproto;
namespace beeremote {
class GetJobsRequest;
struct GetJobsRequestDefaultTypeInternal;
extern GetJobsRequestDefaultTypeInternal _GetJobsRequest_default_instance_;
class GetJobsResponse;
struct GetJobsResponseDefaultTypeInternal;
extern GetJobsResponseDefaultTypeInternal _GetJobsResponse_default_instance_;
class JobFilter;
struct JobFilterDefaultTypeInternal;
extern JobFilterDefaultTypeInternal _JobFilter_default_instance_;
class JobRequest;
struct JobRequestDefaultTypeInternal;
extern JobRequestDefaultTypeInternal _JobRequest_default_instance_;
class JobResponse;
struct JobResponseDefaultTypeInternal;
extern JobResponseDefaultTypeInternal _JobResponse_default_instance_;
class UpdateJobRequest;
struct UpdateJobRequestDefaultTypeInternal;
extern UpdateJobRequestDefaultTypeInternal _UpdateJobRequest_default_instance_;
class UpdateJobResponse;
struct UpdateJobResponseDefaultTypeInternal;
extern UpdateJobResponseDefaultTypeInternal _UpdateJobResponse_default_instance_;
}  // namespace beeremote
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace beeremote {

// ===================================================================


// -------------------------------------------------------------------

class JobRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beeremote.JobRequest) */ {
 public:
  inline JobRequest() : JobRequest(nullptr) {}
  ~JobRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JobRequest(::google::protobuf::internal::ConstantInitialized);

  JobRequest(const JobRequest& from);
  JobRequest(JobRequest&& from) noexcept
    : JobRequest() {
    *this = ::std::move(from);
  }

  inline JobRequest& operator=(const JobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobRequest& operator=(JobRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobRequest& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kSync = 10,
    TYPE_NOT_SET = 0,
  };

  static inline const JobRequest* internal_default_instance() {
    return reinterpret_cast<const JobRequest*>(
               &_JobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JobRequest& a, JobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JobRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JobRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JobRequest& from) {
    JobRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beeremote.JobRequest";
  }
  protected:
  explicit JobRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kNameFieldNumber = 2,
    kPriorityFieldNumber = 3,
    kSyncFieldNumber = 10,
  };
  // string path = 1;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 priority = 3;
  void clear_priority() ;
  ::int32_t priority() const;
  void set_priority(::int32_t value);

  private:
  ::int32_t _internal_priority() const;
  void _internal_set_priority(::int32_t value);

  public:
  // .beesync.SyncJob sync = 10;
  bool has_sync() const;
  private:
  bool _internal_has_sync() const;

  public:
  void clear_sync() ;
  const ::beesync::SyncJob& sync() const;
  PROTOBUF_NODISCARD ::beesync::SyncJob* release_sync();
  ::beesync::SyncJob* mutable_sync();
  void set_allocated_sync(::beesync::SyncJob* value);
  void unsafe_arena_set_allocated_sync(::beesync::SyncJob* value);
  ::beesync::SyncJob* unsafe_arena_release_sync();

  private:
  const ::beesync::SyncJob& _internal_sync() const;
  ::beesync::SyncJob* _internal_mutable_sync();

  public:
  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:beeremote.JobRequest)
 private:
  class _Internal;
  void set_has_sync();

  inline bool has_type() const;
  inline void clear_has_type();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 37, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t priority_;
    union TypeUnion {
      constexpr TypeUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::beesync::SyncJob* sync_;
    } type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beeremote_2eproto;
};// -------------------------------------------------------------------

class JobResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beeremote.JobResponse) */ {
 public:
  inline JobResponse() : JobResponse(nullptr) {}
  ~JobResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JobResponse(::google::protobuf::internal::ConstantInitialized);

  JobResponse(const JobResponse& from);
  JobResponse(JobResponse&& from) noexcept
    : JobResponse() {
    *this = ::std::move(from);
  }

  inline JobResponse& operator=(const JobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobResponse& operator=(JobResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobResponse* internal_default_instance() {
    return reinterpret_cast<const JobResponse*>(
               &_JobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(JobResponse& a, JobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JobResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JobResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JobResponse& from) {
    JobResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beeremote.JobResponse";
  }
  protected:
  explicit JobResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kRequestFieldNumber = 2,
  };
  // .beegfs.JobMetadata metadata = 1;
  bool has_metadata() const;
  void clear_metadata() ;
  const ::beegfs::JobMetadata& metadata() const;
  PROTOBUF_NODISCARD ::beegfs::JobMetadata* release_metadata();
  ::beegfs::JobMetadata* mutable_metadata();
  void set_allocated_metadata(::beegfs::JobMetadata* value);
  void unsafe_arena_set_allocated_metadata(::beegfs::JobMetadata* value);
  ::beegfs::JobMetadata* unsafe_arena_release_metadata();

  private:
  const ::beegfs::JobMetadata& _internal_metadata() const;
  ::beegfs::JobMetadata* _internal_mutable_metadata();

  public:
  // .beeremote.JobRequest request = 2;
  bool has_request() const;
  void clear_request() ;
  const ::beeremote::JobRequest& request() const;
  PROTOBUF_NODISCARD ::beeremote::JobRequest* release_request();
  ::beeremote::JobRequest* mutable_request();
  void set_allocated_request(::beeremote::JobRequest* value);
  void unsafe_arena_set_allocated_request(::beeremote::JobRequest* value);
  ::beeremote::JobRequest* unsafe_arena_release_request();

  private:
  const ::beeremote::JobRequest& _internal_request() const;
  ::beeremote::JobRequest* _internal_mutable_request();

  public:
  // @@protoc_insertion_point(class_scope:beeremote.JobResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::beegfs::JobMetadata* metadata_;
    ::beeremote::JobRequest* request_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beeremote_2eproto;
};// -------------------------------------------------------------------

class UpdateJobRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beeremote.UpdateJobRequest) */ {
 public:
  inline UpdateJobRequest() : UpdateJobRequest(nullptr) {}
  ~UpdateJobRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateJobRequest(::google::protobuf::internal::ConstantInitialized);

  UpdateJobRequest(const UpdateJobRequest& from);
  UpdateJobRequest(UpdateJobRequest&& from) noexcept
    : UpdateJobRequest() {
    *this = ::std::move(from);
  }

  inline UpdateJobRequest& operator=(const UpdateJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateJobRequest& operator=(UpdateJobRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateJobRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateJobRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateJobRequest*>(
               &_UpdateJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateJobRequest& a, UpdateJobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateJobRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateJobRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateJobRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateJobRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateJobRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateJobRequest& from) {
    UpdateJobRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateJobRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beeremote.UpdateJobRequest";
  }
  protected:
  explicit UpdateJobRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kJobIDFieldNumber = 2,
    kNewStateFieldNumber = 3,
  };
  // string path = 1;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // string jobID = 2;
  void clear_jobid() ;
  const std::string& jobid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_jobid(Arg_&& arg, Args_... args);
  std::string* mutable_jobid();
  PROTOBUF_NODISCARD std::string* release_jobid();
  void set_allocated_jobid(std::string* ptr);

  private:
  const std::string& _internal_jobid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jobid(
      const std::string& value);
  std::string* _internal_mutable_jobid();

  public:
  // .beegfs.NewState newState = 3;
  void clear_newstate() ;
  ::beegfs::NewState newstate() const;
  void set_newstate(::beegfs::NewState value);

  private:
  ::beegfs::NewState _internal_newstate() const;
  void _internal_set_newstate(::beegfs::NewState value);

  public:
  // @@protoc_insertion_point(class_scope:beeremote.UpdateJobRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 44, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr jobid_;
    int newstate_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beeremote_2eproto;
};// -------------------------------------------------------------------

class UpdateJobResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beeremote.UpdateJobResponse) */ {
 public:
  inline UpdateJobResponse() : UpdateJobResponse(nullptr) {}
  ~UpdateJobResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateJobResponse(::google::protobuf::internal::ConstantInitialized);

  UpdateJobResponse(const UpdateJobResponse& from);
  UpdateJobResponse(UpdateJobResponse&& from) noexcept
    : UpdateJobResponse() {
    *this = ::std::move(from);
  }

  inline UpdateJobResponse& operator=(const UpdateJobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateJobResponse& operator=(UpdateJobResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateJobResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateJobResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateJobResponse*>(
               &_UpdateJobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateJobResponse& a, UpdateJobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateJobResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateJobResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateJobResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateJobResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateJobResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateJobResponse& from) {
    UpdateJobResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateJobResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beeremote.UpdateJobResponse";
  }
  protected:
  explicit UpdateJobResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kOkFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool ok = 1;
  void clear_ok() ;
  bool ok() const;
  void set_ok(bool value);

  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);

  public:
  // @@protoc_insertion_point(class_scope:beeremote.UpdateJobResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 43, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool ok_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beeremote_2eproto;
};// -------------------------------------------------------------------

class GetJobsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beeremote.GetJobsRequest) */ {
 public:
  inline GetJobsRequest() : GetJobsRequest(nullptr) {}
  ~GetJobsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetJobsRequest(::google::protobuf::internal::ConstantInitialized);

  GetJobsRequest(const GetJobsRequest& from);
  GetJobsRequest(GetJobsRequest&& from) noexcept
    : GetJobsRequest() {
    *this = ::std::move(from);
  }

  inline GetJobsRequest& operator=(const GetJobsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetJobsRequest& operator=(GetJobsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetJobsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetJobsRequest* internal_default_instance() {
    return reinterpret_cast<const GetJobsRequest*>(
               &_GetJobsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetJobsRequest& a, GetJobsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetJobsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetJobsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetJobsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetJobsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetJobsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetJobsRequest& from) {
    GetJobsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJobsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beeremote.GetJobsRequest";
  }
  protected:
  explicit GetJobsRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
    kPageNumberFieldNumber = 2,
    kResultsPerPageFieldNumber = 3,
  };
  // .beeremote.JobFilter filter = 1;
  bool has_filter() const;
  void clear_filter() ;
  const ::beeremote::JobFilter& filter() const;
  PROTOBUF_NODISCARD ::beeremote::JobFilter* release_filter();
  ::beeremote::JobFilter* mutable_filter();
  void set_allocated_filter(::beeremote::JobFilter* value);
  void unsafe_arena_set_allocated_filter(::beeremote::JobFilter* value);
  ::beeremote::JobFilter* unsafe_arena_release_filter();

  private:
  const ::beeremote::JobFilter& _internal_filter() const;
  ::beeremote::JobFilter* _internal_mutable_filter();

  public:
  // int32 page_number = 2;
  void clear_page_number() ;
  ::int32_t page_number() const;
  void set_page_number(::int32_t value);

  private:
  ::int32_t _internal_page_number() const;
  void _internal_set_page_number(::int32_t value);

  public:
  // int32 results_per_page = 3;
  void clear_results_per_page() ;
  ::int32_t results_per_page() const;
  void set_results_per_page(::int32_t value);

  private:
  ::int32_t _internal_results_per_page() const;
  void _internal_set_results_per_page(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:beeremote.GetJobsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::beeremote::JobFilter* filter_;
    ::int32_t page_number_;
    ::int32_t results_per_page_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beeremote_2eproto;
};// -------------------------------------------------------------------

class JobFilter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beeremote.JobFilter) */ {
 public:
  inline JobFilter() : JobFilter(nullptr) {}
  ~JobFilter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JobFilter(::google::protobuf::internal::ConstantInitialized);

  JobFilter(const JobFilter& from);
  JobFilter(JobFilter&& from) noexcept
    : JobFilter() {
    *this = ::std::move(from);
  }

  inline JobFilter& operator=(const JobFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobFilter& operator=(JobFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobFilter* internal_default_instance() {
    return reinterpret_cast<const JobFilter*>(
               &_JobFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(JobFilter& a, JobFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(JobFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobFilter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobFilter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobFilter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JobFilter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JobFilter& from) {
    JobFilter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobFilter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beeremote.JobFilter";
  }
  protected:
  explicit JobFilter(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kRequestFieldNumber = 3,
  };
  // repeated string id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;

  public:
  void clear_id() ;
  const std::string& id(int index) const;
  std::string* mutable_id(int index);
  void set_id(int index, const std::string& value);
  void set_id(int index, std::string&& value);
  void set_id(int index, const char* value);
  void set_id(int index, const char* value, std::size_t size);
  void set_id(int index, absl::string_view value);
  std::string* add_id();
  void add_id(const std::string& value);
  void add_id(std::string&& value);
  void add_id(const char* value);
  void add_id(const char* value, std::size_t size);
  void add_id(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_id();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_id();

  public:
  // repeated .beegfs.RequestStatus status = 2;
  int status_size() const;
  private:
  int _internal_status_size() const;

  public:
  void clear_status() ;
  ::beegfs::RequestStatus* mutable_status(int index);
  ::google::protobuf::RepeatedPtrField< ::beegfs::RequestStatus >*
      mutable_status();
  private:
  const ::google::protobuf::RepeatedPtrField<::beegfs::RequestStatus>& _internal_status() const;
  ::google::protobuf::RepeatedPtrField<::beegfs::RequestStatus>* _internal_mutable_status();
  public:
  const ::beegfs::RequestStatus& status(int index) const;
  ::beegfs::RequestStatus* add_status();
  const ::google::protobuf::RepeatedPtrField< ::beegfs::RequestStatus >&
      status() const;
  // repeated .beeremote.JobRequest request = 3;
  int request_size() const;
  private:
  int _internal_request_size() const;

  public:
  void clear_request() ;
  ::beeremote::JobRequest* mutable_request(int index);
  ::google::protobuf::RepeatedPtrField< ::beeremote::JobRequest >*
      mutable_request();
  private:
  const ::google::protobuf::RepeatedPtrField<::beeremote::JobRequest>& _internal_request() const;
  ::google::protobuf::RepeatedPtrField<::beeremote::JobRequest>* _internal_mutable_request();
  public:
  const ::beeremote::JobRequest& request(int index) const;
  ::beeremote::JobRequest* add_request();
  const ::google::protobuf::RepeatedPtrField< ::beeremote::JobRequest >&
      request() const;
  // @@protoc_insertion_point(class_scope:beeremote.JobFilter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 2, 30, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> id_;
    ::google::protobuf::RepeatedPtrField< ::beegfs::RequestStatus > status_;
    ::google::protobuf::RepeatedPtrField< ::beeremote::JobRequest > request_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beeremote_2eproto;
};// -------------------------------------------------------------------

class GetJobsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beeremote.GetJobsResponse) */ {
 public:
  inline GetJobsResponse() : GetJobsResponse(nullptr) {}
  ~GetJobsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetJobsResponse(::google::protobuf::internal::ConstantInitialized);

  GetJobsResponse(const GetJobsResponse& from);
  GetJobsResponse(GetJobsResponse&& from) noexcept
    : GetJobsResponse() {
    *this = ::std::move(from);
  }

  inline GetJobsResponse& operator=(const GetJobsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetJobsResponse& operator=(GetJobsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetJobsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetJobsResponse* internal_default_instance() {
    return reinterpret_cast<const GetJobsResponse*>(
               &_GetJobsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetJobsResponse& a, GetJobsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetJobsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetJobsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetJobsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetJobsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetJobsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetJobsResponse& from) {
    GetJobsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJobsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beeremote.GetJobsResponse";
  }
  protected:
  explicit GetJobsResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobsFieldNumber = 1,
    kPageNumberFieldNumber = 2,
    kTotalPagesFieldNumber = 3,
  };
  // repeated .beeremote.JobResponse jobs = 1;
  int jobs_size() const;
  private:
  int _internal_jobs_size() const;

  public:
  void clear_jobs() ;
  ::beeremote::JobResponse* mutable_jobs(int index);
  ::google::protobuf::RepeatedPtrField< ::beeremote::JobResponse >*
      mutable_jobs();
  private:
  const ::google::protobuf::RepeatedPtrField<::beeremote::JobResponse>& _internal_jobs() const;
  ::google::protobuf::RepeatedPtrField<::beeremote::JobResponse>* _internal_mutable_jobs();
  public:
  const ::beeremote::JobResponse& jobs(int index) const;
  ::beeremote::JobResponse* add_jobs();
  const ::google::protobuf::RepeatedPtrField< ::beeremote::JobResponse >&
      jobs() const;
  // int32 page_number = 2;
  void clear_page_number() ;
  ::int32_t page_number() const;
  void set_page_number(::int32_t value);

  private:
  ::int32_t _internal_page_number() const;
  void _internal_set_page_number(::int32_t value);

  public:
  // int32 total_pages = 3;
  void clear_total_pages() ;
  ::int32_t total_pages() const;
  void set_total_pages(::int32_t value);

  private:
  ::int32_t _internal_total_pages() const;
  void _internal_set_total_pages(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:beeremote.GetJobsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::beeremote::JobResponse > jobs_;
    ::int32_t page_number_;
    ::int32_t total_pages_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beeremote_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// JobRequest

// string path = 1;
inline void JobRequest::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& JobRequest::path() const {
  // @@protoc_insertion_point(field_get:beeremote.JobRequest.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JobRequest::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beeremote.JobRequest.path)
}
inline std::string* JobRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:beeremote.JobRequest.path)
  return _s;
}
inline const std::string& JobRequest::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void JobRequest::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* JobRequest::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* JobRequest::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beeremote.JobRequest.path)
  return _impl_.path_.Release();
}
inline void JobRequest::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobRequest.path)
}

// string name = 2;
inline void JobRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& JobRequest::name() const {
  // @@protoc_insertion_point(field_get:beeremote.JobRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JobRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beeremote.JobRequest.name)
}
inline std::string* JobRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:beeremote.JobRequest.name)
  return _s;
}
inline const std::string& JobRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void JobRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* JobRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* JobRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beeremote.JobRequest.name)
  return _impl_.name_.Release();
}
inline void JobRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobRequest.name)
}

// int32 priority = 3;
inline void JobRequest::clear_priority() {
  _impl_.priority_ = 0;
}
inline ::int32_t JobRequest::priority() const {
  // @@protoc_insertion_point(field_get:beeremote.JobRequest.priority)
  return _internal_priority();
}
inline void JobRequest::set_priority(::int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:beeremote.JobRequest.priority)
}
inline ::int32_t JobRequest::_internal_priority() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.priority_;
}
inline void JobRequest::_internal_set_priority(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.priority_ = value;
}

// .beesync.SyncJob sync = 10;
inline bool JobRequest::has_sync() const {
  return type_case() == kSync;
}
inline bool JobRequest::_internal_has_sync() const {
  return type_case() == kSync;
}
inline void JobRequest::set_has_sync() {
  _impl_._oneof_case_[0] = kSync;
}
inline ::beesync::SyncJob* JobRequest::release_sync() {
  // @@protoc_insertion_point(field_release:beeremote.JobRequest.sync)
  if (type_case() == kSync) {
    clear_has_type();
    ::beesync::SyncJob* temp = _impl_.type_.sync_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.sync_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::beesync::SyncJob& JobRequest::_internal_sync() const {
  return type_case() == kSync
      ? *_impl_.type_.sync_
      : reinterpret_cast<::beesync::SyncJob&>(::beesync::_SyncJob_default_instance_);
}
inline const ::beesync::SyncJob& JobRequest::sync() const {
  // @@protoc_insertion_point(field_get:beeremote.JobRequest.sync)
  return _internal_sync();
}
inline ::beesync::SyncJob* JobRequest::unsafe_arena_release_sync() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beeremote.JobRequest.sync)
  if (type_case() == kSync) {
    clear_has_type();
    ::beesync::SyncJob* temp = _impl_.type_.sync_;
    _impl_.type_.sync_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JobRequest::unsafe_arena_set_allocated_sync(::beesync::SyncJob* sync) {
  clear_type();
  if (sync) {
    set_has_sync();
    _impl_.type_.sync_ = sync;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.JobRequest.sync)
}
inline ::beesync::SyncJob* JobRequest::_internal_mutable_sync() {
  if (type_case() != kSync) {
    clear_type();
    set_has_sync();
    _impl_.type_.sync_ = CreateMaybeMessage< ::beesync::SyncJob >(GetArenaForAllocation());
  }
  return _impl_.type_.sync_;
}
inline ::beesync::SyncJob* JobRequest::mutable_sync() {
  ::beesync::SyncJob* _msg = _internal_mutable_sync();
  // @@protoc_insertion_point(field_mutable:beeremote.JobRequest.sync)
  return _msg;
}

inline bool JobRequest::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void JobRequest::clear_has_type() {
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}
inline JobRequest::TypeCase JobRequest::type_case() const {
  return JobRequest::TypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// JobResponse

// .beegfs.JobMetadata metadata = 1;
inline bool JobResponse::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline const ::beegfs::JobMetadata& JobResponse::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::beegfs::JobMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::beegfs::JobMetadata&>(::beegfs::_JobMetadata_default_instance_);
}
inline const ::beegfs::JobMetadata& JobResponse::metadata() const {
  // @@protoc_insertion_point(field_get:beeremote.JobResponse.metadata)
  return _internal_metadata();
}
inline void JobResponse::unsafe_arena_set_allocated_metadata(::beegfs::JobMetadata* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = reinterpret_cast<::beegfs::JobMetadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.JobResponse.metadata)
}
inline ::beegfs::JobMetadata* JobResponse::release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::beegfs::JobMetadata* released = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::beegfs::JobMetadata* JobResponse::unsafe_arena_release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beeremote.JobResponse.metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::beegfs::JobMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::beegfs::JobMetadata* JobResponse::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::beegfs::JobMetadata>(GetArenaForAllocation());
    _impl_.metadata_ = reinterpret_cast<::beegfs::JobMetadata*>(p);
  }
  return _impl_.metadata_;
}
inline ::beegfs::JobMetadata* JobResponse::mutable_metadata() {
  ::beegfs::JobMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:beeremote.JobResponse.metadata)
  return _msg;
}
inline void JobResponse::set_allocated_metadata(::beegfs::JobMetadata* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.metadata_ = reinterpret_cast<::beegfs::JobMetadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobResponse.metadata)
}

// .beeremote.JobRequest request = 2;
inline bool JobResponse::has_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.request_ != nullptr);
  return value;
}
inline void JobResponse::clear_request() {
  if (_impl_.request_ != nullptr) _impl_.request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::beeremote::JobRequest& JobResponse::_internal_request() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::beeremote::JobRequest* p = _impl_.request_;
  return p != nullptr ? *p : reinterpret_cast<const ::beeremote::JobRequest&>(::beeremote::_JobRequest_default_instance_);
}
inline const ::beeremote::JobRequest& JobResponse::request() const {
  // @@protoc_insertion_point(field_get:beeremote.JobResponse.request)
  return _internal_request();
}
inline void JobResponse::unsafe_arena_set_allocated_request(::beeremote::JobRequest* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.request_);
  }
  _impl_.request_ = reinterpret_cast<::beeremote::JobRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.JobResponse.request)
}
inline ::beeremote::JobRequest* JobResponse::release_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::beeremote::JobRequest* released = _impl_.request_;
  _impl_.request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::beeremote::JobRequest* JobResponse::unsafe_arena_release_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beeremote.JobResponse.request)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::beeremote::JobRequest* temp = _impl_.request_;
  _impl_.request_ = nullptr;
  return temp;
}
inline ::beeremote::JobRequest* JobResponse::_internal_mutable_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.request_ == nullptr) {
    auto* p = CreateMaybeMessage<::beeremote::JobRequest>(GetArenaForAllocation());
    _impl_.request_ = reinterpret_cast<::beeremote::JobRequest*>(p);
  }
  return _impl_.request_;
}
inline ::beeremote::JobRequest* JobResponse::mutable_request() {
  ::beeremote::JobRequest* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:beeremote.JobResponse.request)
  return _msg;
}
inline void JobResponse::set_allocated_request(::beeremote::JobRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::beeremote::JobRequest*>(_impl_.request_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::beeremote::JobRequest*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.request_ = reinterpret_cast<::beeremote::JobRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:beeremote.JobResponse.request)
}

// -------------------------------------------------------------------

// UpdateJobRequest

// string path = 1;
inline void UpdateJobRequest::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& UpdateJobRequest::path() const {
  // @@protoc_insertion_point(field_get:beeremote.UpdateJobRequest.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateJobRequest::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beeremote.UpdateJobRequest.path)
}
inline std::string* UpdateJobRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:beeremote.UpdateJobRequest.path)
  return _s;
}
inline const std::string& UpdateJobRequest::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void UpdateJobRequest::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateJobRequest::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* UpdateJobRequest::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beeremote.UpdateJobRequest.path)
  return _impl_.path_.Release();
}
inline void UpdateJobRequest::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beeremote.UpdateJobRequest.path)
}

// string jobID = 2;
inline void UpdateJobRequest::clear_jobid() {
  _impl_.jobid_.ClearToEmpty();
}
inline const std::string& UpdateJobRequest::jobid() const {
  // @@protoc_insertion_point(field_get:beeremote.UpdateJobRequest.jobID)
  return _internal_jobid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateJobRequest::set_jobid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.jobid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beeremote.UpdateJobRequest.jobID)
}
inline std::string* UpdateJobRequest::mutable_jobid() {
  std::string* _s = _internal_mutable_jobid();
  // @@protoc_insertion_point(field_mutable:beeremote.UpdateJobRequest.jobID)
  return _s;
}
inline const std::string& UpdateJobRequest::_internal_jobid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jobid_.Get();
}
inline void UpdateJobRequest::_internal_set_jobid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.jobid_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateJobRequest::_internal_mutable_jobid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.jobid_.Mutable( GetArenaForAllocation());
}
inline std::string* UpdateJobRequest::release_jobid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beeremote.UpdateJobRequest.jobID)
  return _impl_.jobid_.Release();
}
inline void UpdateJobRequest::set_allocated_jobid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.jobid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.jobid_.IsDefault()) {
          _impl_.jobid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beeremote.UpdateJobRequest.jobID)
}

// .beegfs.NewState newState = 3;
inline void UpdateJobRequest::clear_newstate() {
  _impl_.newstate_ = 0;
}
inline ::beegfs::NewState UpdateJobRequest::newstate() const {
  // @@protoc_insertion_point(field_get:beeremote.UpdateJobRequest.newState)
  return _internal_newstate();
}
inline void UpdateJobRequest::set_newstate(::beegfs::NewState value) {
  _internal_set_newstate(value);
  // @@protoc_insertion_point(field_set:beeremote.UpdateJobRequest.newState)
}
inline ::beegfs::NewState UpdateJobRequest::_internal_newstate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::beegfs::NewState>(_impl_.newstate_);
}
inline void UpdateJobRequest::_internal_set_newstate(::beegfs::NewState value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.newstate_ = value;
}

// -------------------------------------------------------------------

// UpdateJobResponse

// bool ok = 1;
inline void UpdateJobResponse::clear_ok() {
  _impl_.ok_ = false;
}
inline bool UpdateJobResponse::ok() const {
  // @@protoc_insertion_point(field_get:beeremote.UpdateJobResponse.ok)
  return _internal_ok();
}
inline void UpdateJobResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:beeremote.UpdateJobResponse.ok)
}
inline bool UpdateJobResponse::_internal_ok() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ok_;
}
inline void UpdateJobResponse::_internal_set_ok(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ok_ = value;
}

// string message = 2;
inline void UpdateJobResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UpdateJobResponse::message() const {
  // @@protoc_insertion_point(field_get:beeremote.UpdateJobResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateJobResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beeremote.UpdateJobResponse.message)
}
inline std::string* UpdateJobResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:beeremote.UpdateJobResponse.message)
  return _s;
}
inline const std::string& UpdateJobResponse::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void UpdateJobResponse::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateJobResponse::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* UpdateJobResponse::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beeremote.UpdateJobResponse.message)
  return _impl_.message_.Release();
}
inline void UpdateJobResponse::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beeremote.UpdateJobResponse.message)
}

// -------------------------------------------------------------------

// GetJobsRequest

// .beeremote.JobFilter filter = 1;
inline bool GetJobsRequest::has_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filter_ != nullptr);
  return value;
}
inline void GetJobsRequest::clear_filter() {
  if (_impl_.filter_ != nullptr) _impl_.filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::beeremote::JobFilter& GetJobsRequest::_internal_filter() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::beeremote::JobFilter* p = _impl_.filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::beeremote::JobFilter&>(::beeremote::_JobFilter_default_instance_);
}
inline const ::beeremote::JobFilter& GetJobsRequest::filter() const {
  // @@protoc_insertion_point(field_get:beeremote.GetJobsRequest.filter)
  return _internal_filter();
}
inline void GetJobsRequest::unsafe_arena_set_allocated_filter(::beeremote::JobFilter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.filter_);
  }
  _impl_.filter_ = reinterpret_cast<::beeremote::JobFilter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beeremote.GetJobsRequest.filter)
}
inline ::beeremote::JobFilter* GetJobsRequest::release_filter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::beeremote::JobFilter* released = _impl_.filter_;
  _impl_.filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::beeremote::JobFilter* GetJobsRequest::unsafe_arena_release_filter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beeremote.GetJobsRequest.filter)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::beeremote::JobFilter* temp = _impl_.filter_;
  _impl_.filter_ = nullptr;
  return temp;
}
inline ::beeremote::JobFilter* GetJobsRequest::_internal_mutable_filter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::beeremote::JobFilter>(GetArenaForAllocation());
    _impl_.filter_ = reinterpret_cast<::beeremote::JobFilter*>(p);
  }
  return _impl_.filter_;
}
inline ::beeremote::JobFilter* GetJobsRequest::mutable_filter() {
  ::beeremote::JobFilter* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:beeremote.GetJobsRequest.filter)
  return _msg;
}
inline void GetJobsRequest::set_allocated_filter(::beeremote::JobFilter* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::beeremote::JobFilter*>(_impl_.filter_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::beeremote::JobFilter*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.filter_ = reinterpret_cast<::beeremote::JobFilter*>(value);
  // @@protoc_insertion_point(field_set_allocated:beeremote.GetJobsRequest.filter)
}

// int32 page_number = 2;
inline void GetJobsRequest::clear_page_number() {
  _impl_.page_number_ = 0;
}
inline ::int32_t GetJobsRequest::page_number() const {
  // @@protoc_insertion_point(field_get:beeremote.GetJobsRequest.page_number)
  return _internal_page_number();
}
inline void GetJobsRequest::set_page_number(::int32_t value) {
  _internal_set_page_number(value);
  // @@protoc_insertion_point(field_set:beeremote.GetJobsRequest.page_number)
}
inline ::int32_t GetJobsRequest::_internal_page_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.page_number_;
}
inline void GetJobsRequest::_internal_set_page_number(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_number_ = value;
}

// int32 results_per_page = 3;
inline void GetJobsRequest::clear_results_per_page() {
  _impl_.results_per_page_ = 0;
}
inline ::int32_t GetJobsRequest::results_per_page() const {
  // @@protoc_insertion_point(field_get:beeremote.GetJobsRequest.results_per_page)
  return _internal_results_per_page();
}
inline void GetJobsRequest::set_results_per_page(::int32_t value) {
  _internal_set_results_per_page(value);
  // @@protoc_insertion_point(field_set:beeremote.GetJobsRequest.results_per_page)
}
inline ::int32_t GetJobsRequest::_internal_results_per_page() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.results_per_page_;
}
inline void GetJobsRequest::_internal_set_results_per_page(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.results_per_page_ = value;
}

// -------------------------------------------------------------------

// JobFilter

// repeated string id = 1;
inline int JobFilter::_internal_id_size() const {
  return _internal_id().size();
}
inline int JobFilter::id_size() const {
  return _internal_id_size();
}
inline void JobFilter::clear_id() {
  _internal_mutable_id()->Clear();
}
inline std::string* JobFilter::add_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_id()->Add();
  // @@protoc_insertion_point(field_add_mutable:beeremote.JobFilter.id)
  return _s;
}
inline const std::string& JobFilter::id(int index) const {
  // @@protoc_insertion_point(field_get:beeremote.JobFilter.id)
  return _internal_id().Get(index);
}
inline std::string* JobFilter::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:beeremote.JobFilter.id)
  return _internal_mutable_id()->Mutable(index);
}
inline void JobFilter::set_id(int index, const std::string& value) {
  _internal_mutable_id()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:beeremote.JobFilter.id)
}
inline void JobFilter::set_id(int index, std::string&& value) {
  _internal_mutable_id()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:beeremote.JobFilter.id)
}
inline void JobFilter::set_id(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_id()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:beeremote.JobFilter.id)
}
inline void JobFilter::set_id(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_id()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:beeremote.JobFilter.id)
}
inline void JobFilter::set_id(int index, absl::string_view value) {
  _internal_mutable_id()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:beeremote.JobFilter.id)
}
inline void JobFilter::add_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_id()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:beeremote.JobFilter.id)
}
inline void JobFilter::add_id(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_id()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:beeremote.JobFilter.id)
}
inline void JobFilter::add_id(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_id()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:beeremote.JobFilter.id)
}
inline void JobFilter::add_id(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_id()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:beeremote.JobFilter.id)
}
inline void JobFilter::add_id(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_id()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:beeremote.JobFilter.id)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
JobFilter::id() const {
  // @@protoc_insertion_point(field_list:beeremote.JobFilter.id)
  return _internal_id();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* JobFilter::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:beeremote.JobFilter.id)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_id();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
JobFilter::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
JobFilter::_internal_mutable_id() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.id_;
}

// repeated .beegfs.RequestStatus status = 2;
inline int JobFilter::_internal_status_size() const {
  return _internal_status().size();
}
inline int JobFilter::status_size() const {
  return _internal_status_size();
}
inline ::beegfs::RequestStatus* JobFilter::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:beeremote.JobFilter.status)
  return _internal_mutable_status()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::beegfs::RequestStatus >*
JobFilter::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:beeremote.JobFilter.status)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_status();
}
inline const ::beegfs::RequestStatus& JobFilter::status(int index) const {
  // @@protoc_insertion_point(field_get:beeremote.JobFilter.status)
    return _internal_status().Get(index);
}
inline ::beegfs::RequestStatus* JobFilter::add_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::beegfs::RequestStatus* _add = _internal_mutable_status()->Add();
  // @@protoc_insertion_point(field_add:beeremote.JobFilter.status)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::beegfs::RequestStatus >&
JobFilter::status() const {
  // @@protoc_insertion_point(field_list:beeremote.JobFilter.status)
  return _internal_status();
}
inline const ::google::protobuf::RepeatedPtrField<::beegfs::RequestStatus>&
JobFilter::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_;
}
inline ::google::protobuf::RepeatedPtrField<::beegfs::RequestStatus>*
JobFilter::_internal_mutable_status() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.status_;
}

// repeated .beeremote.JobRequest request = 3;
inline int JobFilter::_internal_request_size() const {
  return _internal_request().size();
}
inline int JobFilter::request_size() const {
  return _internal_request_size();
}
inline void JobFilter::clear_request() {
  _internal_mutable_request()->Clear();
}
inline ::beeremote::JobRequest* JobFilter::mutable_request(int index) {
  // @@protoc_insertion_point(field_mutable:beeremote.JobFilter.request)
  return _internal_mutable_request()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::beeremote::JobRequest >*
JobFilter::mutable_request() {
  // @@protoc_insertion_point(field_mutable_list:beeremote.JobFilter.request)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_request();
}
inline const ::beeremote::JobRequest& JobFilter::request(int index) const {
  // @@protoc_insertion_point(field_get:beeremote.JobFilter.request)
    return _internal_request().Get(index);
}
inline ::beeremote::JobRequest* JobFilter::add_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::beeremote::JobRequest* _add = _internal_mutable_request()->Add();
  // @@protoc_insertion_point(field_add:beeremote.JobFilter.request)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::beeremote::JobRequest >&
JobFilter::request() const {
  // @@protoc_insertion_point(field_list:beeremote.JobFilter.request)
  return _internal_request();
}
inline const ::google::protobuf::RepeatedPtrField<::beeremote::JobRequest>&
JobFilter::_internal_request() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.request_;
}
inline ::google::protobuf::RepeatedPtrField<::beeremote::JobRequest>*
JobFilter::_internal_mutable_request() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.request_;
}

// -------------------------------------------------------------------

// GetJobsResponse

// repeated .beeremote.JobResponse jobs = 1;
inline int GetJobsResponse::_internal_jobs_size() const {
  return _internal_jobs().size();
}
inline int GetJobsResponse::jobs_size() const {
  return _internal_jobs_size();
}
inline void GetJobsResponse::clear_jobs() {
  _internal_mutable_jobs()->Clear();
}
inline ::beeremote::JobResponse* GetJobsResponse::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:beeremote.GetJobsResponse.jobs)
  return _internal_mutable_jobs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::beeremote::JobResponse >*
GetJobsResponse::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:beeremote.GetJobsResponse.jobs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_jobs();
}
inline const ::beeremote::JobResponse& GetJobsResponse::jobs(int index) const {
  // @@protoc_insertion_point(field_get:beeremote.GetJobsResponse.jobs)
    return _internal_jobs().Get(index);
}
inline ::beeremote::JobResponse* GetJobsResponse::add_jobs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::beeremote::JobResponse* _add = _internal_mutable_jobs()->Add();
  // @@protoc_insertion_point(field_add:beeremote.GetJobsResponse.jobs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::beeremote::JobResponse >&
GetJobsResponse::jobs() const {
  // @@protoc_insertion_point(field_list:beeremote.GetJobsResponse.jobs)
  return _internal_jobs();
}
inline const ::google::protobuf::RepeatedPtrField<::beeremote::JobResponse>&
GetJobsResponse::_internal_jobs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jobs_;
}
inline ::google::protobuf::RepeatedPtrField<::beeremote::JobResponse>*
GetJobsResponse::_internal_mutable_jobs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.jobs_;
}

// int32 page_number = 2;
inline void GetJobsResponse::clear_page_number() {
  _impl_.page_number_ = 0;
}
inline ::int32_t GetJobsResponse::page_number() const {
  // @@protoc_insertion_point(field_get:beeremote.GetJobsResponse.page_number)
  return _internal_page_number();
}
inline void GetJobsResponse::set_page_number(::int32_t value) {
  _internal_set_page_number(value);
  // @@protoc_insertion_point(field_set:beeremote.GetJobsResponse.page_number)
}
inline ::int32_t GetJobsResponse::_internal_page_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.page_number_;
}
inline void GetJobsResponse::_internal_set_page_number(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_number_ = value;
}

// int32 total_pages = 3;
inline void GetJobsResponse::clear_total_pages() {
  _impl_.total_pages_ = 0;
}
inline ::int32_t GetJobsResponse::total_pages() const {
  // @@protoc_insertion_point(field_get:beeremote.GetJobsResponse.total_pages)
  return _internal_total_pages();
}
inline void GetJobsResponse::set_total_pages(::int32_t value) {
  _internal_set_total_pages(value);
  // @@protoc_insertion_point(field_set:beeremote.GetJobsResponse.total_pages)
}
inline ::int32_t GetJobsResponse::_internal_total_pages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_pages_;
}
inline void GetJobsResponse::_internal_set_total_pages(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_pages_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace beeremote


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_beeremote_2eproto_2epb_2eh
