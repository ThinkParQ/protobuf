// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: beeremote.proto

package beeremote

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BeeRemoteClient is the client API for BeeRemote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeeRemoteClient interface {
	SubmitJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error)
	UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error)
	GetJobs(ctx context.Context, in *GetJobsRequest, opts ...grpc.CallOption) (*GetJobsResponse, error)
}

type beeRemoteClient struct {
	cc grpc.ClientConnInterface
}

func NewBeeRemoteClient(cc grpc.ClientConnInterface) BeeRemoteClient {
	return &beeRemoteClient{cc}
}

func (c *beeRemoteClient) SubmitJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/beeremote.BeeRemote/SubmitJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeRemoteClient) UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error) {
	out := new(UpdateJobResponse)
	err := c.cc.Invoke(ctx, "/beeremote.BeeRemote/UpdateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeRemoteClient) GetJobs(ctx context.Context, in *GetJobsRequest, opts ...grpc.CallOption) (*GetJobsResponse, error) {
	out := new(GetJobsResponse)
	err := c.cc.Invoke(ctx, "/beeremote.BeeRemote/GetJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeeRemoteServer is the server API for BeeRemote service.
// All implementations must embed UnimplementedBeeRemoteServer
// for forward compatibility
type BeeRemoteServer interface {
	SubmitJob(context.Context, *JobRequest) (*JobResponse, error)
	UpdateJob(context.Context, *UpdateJobRequest) (*UpdateJobResponse, error)
	GetJobs(context.Context, *GetJobsRequest) (*GetJobsResponse, error)
	mustEmbedUnimplementedBeeRemoteServer()
}

// UnimplementedBeeRemoteServer must be embedded to have forward compatible implementations.
type UnimplementedBeeRemoteServer struct {
}

func (UnimplementedBeeRemoteServer) SubmitJob(context.Context, *JobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitJob not implemented")
}
func (UnimplementedBeeRemoteServer) UpdateJob(context.Context, *UpdateJobRequest) (*UpdateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (UnimplementedBeeRemoteServer) GetJobs(context.Context, *GetJobsRequest) (*GetJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (UnimplementedBeeRemoteServer) mustEmbedUnimplementedBeeRemoteServer() {}

// UnsafeBeeRemoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeeRemoteServer will
// result in compilation errors.
type UnsafeBeeRemoteServer interface {
	mustEmbedUnimplementedBeeRemoteServer()
}

func RegisterBeeRemoteServer(s grpc.ServiceRegistrar, srv BeeRemoteServer) {
	s.RegisterService(&BeeRemote_ServiceDesc, srv)
}

func _BeeRemote_SubmitJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeRemoteServer).SubmitJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beeremote.BeeRemote/SubmitJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeRemoteServer).SubmitJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeRemote_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeRemoteServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beeremote.BeeRemote/UpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeRemoteServer).UpdateJob(ctx, req.(*UpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeRemote_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeRemoteServer).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beeremote.BeeRemote/GetJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeRemoteServer).GetJobs(ctx, req.(*GetJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeeRemote_ServiceDesc is the grpc.ServiceDesc for BeeRemote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeeRemote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "beeremote.BeeRemote",
	HandlerType: (*BeeRemoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitJob",
			Handler:    _BeeRemote_SubmitJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _BeeRemote_UpdateJob_Handler,
		},
		{
			MethodName: "GetJobs",
			Handler:    _BeeRemote_GetJobs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "beeremote.proto",
}
