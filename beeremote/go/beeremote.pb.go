// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.3
// source: beeremote.proto

package beeremote

import (
	_go1 "github.com/thinkparq/protobuf/beegfs/go"
	_go "github.com/thinkparq/protobuf/beesync/go"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A JobRequest contains all the information necessary for BeeRemote to trigger
// a job on the appropriate worker node(s) (like BeeSync nodes) based on the
// particular request_type specified by the user. It is the external request
// so it does not include automatically generated fields like the job ID or
// anything about the work request(s) used to execute the job.
type JobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// An arbitrary name for a job can be specified.
	// Job names are optional and not need to be unique.
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Priority int32  `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	// Types that are assignable to Type:
	//
	//	*JobRequest_Sync
	Type isJobRequest_Type `protobuf_oneof:"type"`
}

func (x *JobRequest) Reset() {
	*x = JobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRequest) ProtoMessage() {}

func (x *JobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRequest.ProtoReflect.Descriptor instead.
func (*JobRequest) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{0}
}

func (x *JobRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *JobRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (m *JobRequest) GetType() isJobRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *JobRequest) GetSync() *_go.SyncJob {
	if x, ok := x.GetType().(*JobRequest_Sync); ok {
		return x.Sync
	}
	return nil
}

type isJobRequest_Type interface {
	isJobRequest_Type()
}

type JobRequest_Sync struct {
	Sync *_go.SyncJob `protobuf:"bytes,10,opt,name=sync,proto3,oneof"`
}

func (*JobRequest_Sync) isJobRequest_Type() {}

// A JobResponse is used to return information about a job to a user.
type JobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *_go1.JobMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Request  *JobRequest       `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *JobResponse) Reset() {
	*x = JobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResponse) ProtoMessage() {}

func (x *JobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResponse.ProtoReflect.Descriptor instead.
func (*JobResponse) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{1}
}

func (x *JobResponse) GetMetadata() *_go1.JobMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *JobResponse) GetRequest() *JobRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type UpdateJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path     string        `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	JobID    string        `protobuf:"bytes,2,opt,name=jobID,proto3" json:"jobID,omitempty"`
	NewState _go1.NewState `protobuf:"varint,3,opt,name=newState,proto3,enum=beegfs.NewState" json:"newState,omitempty"`
}

func (x *UpdateJobRequest) Reset() {
	*x = UpdateJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobRequest) ProtoMessage() {}

func (x *UpdateJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobRequest.ProtoReflect.Descriptor instead.
func (*UpdateJobRequest) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateJobRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *UpdateJobRequest) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *UpdateJobRequest) GetNewState() _go1.NewState {
	if x != nil {
		return x.NewState
	}
	return _go1.NewState(0)
}

// Updating jobs happens asynchronously. The caller should use GetJobs to check
// on the status of the request. This message carries any errors that happened
// executing the request.
type UpdateJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If !ok the caller can inspect message to see what error(s) happened.
	Ok      bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateJobResponse) Reset() {
	*x = UpdateJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobResponse) ProtoMessage() {}

func (x *UpdateJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobResponse.ProtoReflect.Descriptor instead.
func (*UpdateJobResponse) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateJobResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *UpdateJobResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Messages used to interact with one or more jobs.
type GetJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *JobFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// If more than results_per_page are returned we'll use pagination.
	PageNumber int32 `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	// If unspecified we'll cap the number of results returned at some
	// reasonable number. We'll alway impose an absolute maximum so we don't end
	// up with very large messages.
	ResultsPerPage int32 `protobuf:"varint,3,opt,name=results_per_page,json=resultsPerPage,proto3" json:"results_per_page,omitempty"`
}

func (x *GetJobsRequest) Reset() {
	*x = GetJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobsRequest) ProtoMessage() {}

func (x *GetJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobsRequest.ProtoReflect.Descriptor instead.
func (*GetJobsRequest) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{4}
}

func (x *GetJobsRequest) GetFilter() *JobFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetJobsRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetJobsRequest) GetResultsPerPage() int32 {
	if x != nil {
		return x.ResultsPerPage
	}
	return 0
}

// Returns job(s) that match all specified fields.
// Any subset of fields (including all or none) can be set.
// An empty JobFilter can be used to return all jobs.
// When returning all jobs use of pagination is recommended.
type JobFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A single ID can be specified to return at most one job.
	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	// Only Job(s) matching all set fields will be returned.
	Status []*_go1.RequestStatus `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty"`
	// We can filter by any fields in the JobRequest.
	// This includes filtering on fields for specific request_types.
	Request []*JobRequest `protobuf:"bytes,3,rep,name=request,proto3" json:"request,omitempty"`
}

func (x *JobFilter) Reset() {
	*x = JobFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobFilter) ProtoMessage() {}

func (x *JobFilter) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobFilter.ProtoReflect.Descriptor instead.
func (*JobFilter) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{5}
}

func (x *JobFilter) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *JobFilter) GetStatus() []*_go1.RequestStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *JobFilter) GetRequest() []*JobRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

// Return results using pagination to avoid overly large message sizes.
type GetJobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs       []*JobResponse `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	PageNumber int32          `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	TotalPages int32          `protobuf:"varint,3,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
}

func (x *GetJobsResponse) Reset() {
	*x = GetJobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beeremote_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobsResponse) ProtoMessage() {}

func (x *GetJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beeremote_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobsResponse.ProtoReflect.Descriptor instead.
func (*GetJobsResponse) Descriptor() ([]byte, []int) {
	return file_beeremote_proto_rawDescGZIP(), []int{6}
}

func (x *GetJobsResponse) GetJobs() []*JobResponse {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *GetJobsResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetJobsResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

var File_beeremote_proto protoreflect.FileDescriptor

var file_beeremote_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x1a, 0x15, 0x62, 0x65,
	0x65, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x62, 0x65, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2f, 0x62, 0x65, 0x65, 0x67,
	0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x04, 0x73,
	0x79, 0x6e, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x65, 0x73,
	0x79, 0x6e, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x04, 0x73,
	0x79, 0x6e, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6f, 0x0a, 0x0b, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62,
	0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6a, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x6e, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62,
	0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3d, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a,
	0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x50, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x22, 0x7b, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2f, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x7f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x32, 0xd1, 0x01, 0x0a, 0x09, 0x42, 0x65, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12,
	0x3a, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x15, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x1b, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x19,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x70, 0x61, 0x72, 0x71, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2f, 0x67, 0x6f, 0x3b, 0x62, 0x65, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_beeremote_proto_rawDescOnce sync.Once
	file_beeremote_proto_rawDescData = file_beeremote_proto_rawDesc
)

func file_beeremote_proto_rawDescGZIP() []byte {
	file_beeremote_proto_rawDescOnce.Do(func() {
		file_beeremote_proto_rawDescData = protoimpl.X.CompressGZIP(file_beeremote_proto_rawDescData)
	})
	return file_beeremote_proto_rawDescData
}

var file_beeremote_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_beeremote_proto_goTypes = []interface{}{
	(*JobRequest)(nil),         // 0: beeremote.JobRequest
	(*JobResponse)(nil),        // 1: beeremote.JobResponse
	(*UpdateJobRequest)(nil),   // 2: beeremote.UpdateJobRequest
	(*UpdateJobResponse)(nil),  // 3: beeremote.UpdateJobResponse
	(*GetJobsRequest)(nil),     // 4: beeremote.GetJobsRequest
	(*JobFilter)(nil),          // 5: beeremote.JobFilter
	(*GetJobsResponse)(nil),    // 6: beeremote.GetJobsResponse
	(*_go.SyncJob)(nil),        // 7: beesync.SyncJob
	(*_go1.JobMetadata)(nil),   // 8: beegfs.JobMetadata
	(_go1.NewState)(0),         // 9: beegfs.NewState
	(*_go1.RequestStatus)(nil), // 10: beegfs.RequestStatus
}
var file_beeremote_proto_depIdxs = []int32{
	7,  // 0: beeremote.JobRequest.sync:type_name -> beesync.SyncJob
	8,  // 1: beeremote.JobResponse.metadata:type_name -> beegfs.JobMetadata
	0,  // 2: beeremote.JobResponse.request:type_name -> beeremote.JobRequest
	9,  // 3: beeremote.UpdateJobRequest.newState:type_name -> beegfs.NewState
	5,  // 4: beeremote.GetJobsRequest.filter:type_name -> beeremote.JobFilter
	10, // 5: beeremote.JobFilter.status:type_name -> beegfs.RequestStatus
	0,  // 6: beeremote.JobFilter.request:type_name -> beeremote.JobRequest
	1,  // 7: beeremote.GetJobsResponse.jobs:type_name -> beeremote.JobResponse
	0,  // 8: beeremote.BeeRemote.SubmitJob:input_type -> beeremote.JobRequest
	2,  // 9: beeremote.BeeRemote.UpdateJob:input_type -> beeremote.UpdateJobRequest
	4,  // 10: beeremote.BeeRemote.GetJobs:input_type -> beeremote.GetJobsRequest
	1,  // 11: beeremote.BeeRemote.SubmitJob:output_type -> beeremote.JobResponse
	3,  // 12: beeremote.BeeRemote.UpdateJob:output_type -> beeremote.UpdateJobResponse
	6,  // 13: beeremote.BeeRemote.GetJobs:output_type -> beeremote.GetJobsResponse
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_beeremote_proto_init() }
func file_beeremote_proto_init() {
	if File_beeremote_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_beeremote_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beeremote_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_beeremote_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*JobRequest_Sync)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beeremote_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_beeremote_proto_goTypes,
		DependencyIndexes: file_beeremote_proto_depIdxs,
		MessageInfos:      file_beeremote_proto_msgTypes,
	}.Build()
	File_beeremote_proto = out.File
	file_beeremote_proto_rawDesc = nil
	file_beeremote_proto_goTypes = nil
	file_beeremote_proto_depIdxs = nil
}
