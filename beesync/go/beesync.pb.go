// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.3
// source: beesync.proto

package beesync

import (
	_go "github.com/thinkparq/protobuf/beegfs/go"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConfigUpdateResponse_Result int32

const (
	ConfigUpdateResponse_UNKNOWN ConfigUpdateResponse_Result = 0 // Should not be used. Exists only as the default if there is a programming error.
	ConfigUpdateResponse_SUCCESS ConfigUpdateResponse_Result = 1 // The configuration was succesfully updated.
	ConfigUpdateResponse_PARTIAL ConfigUpdateResponse_Result = 2 // The configuration was partially updated (see the message for details).
	ConfigUpdateResponse_FAILURE ConfigUpdateResponse_Result = 3 // The configuration was not updated.
)

// Enum value maps for ConfigUpdateResponse_Result.
var (
	ConfigUpdateResponse_Result_name = map[int32]string{
		0: "UNKNOWN",
		1: "SUCCESS",
		2: "PARTIAL",
		3: "FAILURE",
	}
	ConfigUpdateResponse_Result_value = map[string]int32{
		"UNKNOWN": 0,
		"SUCCESS": 1,
		"PARTIAL": 2,
		"FAILURE": 3,
	}
)

func (x ConfigUpdateResponse_Result) Enum() *ConfigUpdateResponse_Result {
	p := new(ConfigUpdateResponse_Result)
	*p = x
	return p
}

func (x ConfigUpdateResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigUpdateResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_beesync_proto_enumTypes[0].Descriptor()
}

func (ConfigUpdateResponse_Result) Type() protoreflect.EnumType {
	return &file_beesync_proto_enumTypes[0]
}

func (x ConfigUpdateResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigUpdateResponse_Result.Descriptor instead.
func (ConfigUpdateResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_beesync_proto_rawDescGZIP(), []int{1, 0}
}

type SyncJob_Operation int32

const (
	SyncJob_UNKNOWN  SyncJob_Operation = 0
	SyncJob_UPLOAD   SyncJob_Operation = 1
	SyncJob_DOWNLOAD SyncJob_Operation = 2
)

// Enum value maps for SyncJob_Operation.
var (
	SyncJob_Operation_name = map[int32]string{
		0: "UNKNOWN",
		1: "UPLOAD",
		2: "DOWNLOAD",
	}
	SyncJob_Operation_value = map[string]int32{
		"UNKNOWN":  0,
		"UPLOAD":   1,
		"DOWNLOAD": 2,
	}
)

func (x SyncJob_Operation) Enum() *SyncJob_Operation {
	p := new(SyncJob_Operation)
	*p = x
	return p
}

func (x SyncJob_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncJob_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_beesync_proto_enumTypes[1].Descriptor()
}

func (SyncJob_Operation) Type() protoreflect.EnumType {
	return &file_beesync_proto_enumTypes[1]
}

func (x SyncJob_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncJob_Operation.Descriptor instead.
func (SyncJob_Operation) EnumDescriptor() ([]byte, []int) {
	return file_beesync_proto_rawDescGZIP(), []int{2, 0}
}

// All RemoteStorageTarget(s) that should be configured need to be included in
// each message. Any that are not included will be deleted.
type ConfigUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rsts []*RemoteStorageTarget `protobuf:"bytes,1,rep,name=rsts,proto3" json:"rsts,omitempty"`
}

func (x *ConfigUpdateRequest) Reset() {
	*x = ConfigUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beesync_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigUpdateRequest) ProtoMessage() {}

func (x *ConfigUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beesync_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigUpdateRequest.ProtoReflect.Descriptor instead.
func (*ConfigUpdateRequest) Descriptor() ([]byte, []int) {
	return file_beesync_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigUpdateRequest) GetRsts() []*RemoteStorageTarget {
	if x != nil {
		return x.Rsts
	}
	return nil
}

type ConfigUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ConfigUpdateResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=beesync.ConfigUpdateResponse_Result" json:"result,omitempty"`
	// Message should be used to return any additional details, particuarly to aid in troubleshooting.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ConfigUpdateResponse) Reset() {
	*x = ConfigUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beesync_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigUpdateResponse) ProtoMessage() {}

func (x *ConfigUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_beesync_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigUpdateResponse.ProtoReflect.Descriptor instead.
func (*ConfigUpdateResponse) Descriptor() ([]byte, []int) {
	return file_beesync_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigUpdateResponse) GetResult() ConfigUpdateResponse_Result {
	if x != nil {
		return x.Result
	}
	return ConfigUpdateResponse_UNKNOWN
}

func (x *ConfigUpdateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// A SyncJob is WHAT work needs to be done. It is populated based on the
// file system modification event or by a user describing some work that needs
// to be done. It does not carry any details about HOW the request will be
// fufilled (that is part of the generated SyncRequest).
type SyncJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation SyncJob_Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=beesync.SyncJob_Operation" json:"operation,omitempty"`
	// This is the string based ID, NOT an actual reference to an RST.
	// This ensures we don't have to include the full RST configuration,
	// every time we send a Entry (commonly as part of a Job).
	RemoteStorageTarget string `protobuf:"bytes,2,opt,name=remote_storage_target,json=remoteStorageTarget,proto3" json:"remote_storage_target,omitempty"`
}

func (x *SyncJob) Reset() {
	*x = SyncJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beesync_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncJob) ProtoMessage() {}

func (x *SyncJob) ProtoReflect() protoreflect.Message {
	mi := &file_beesync_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncJob.ProtoReflect.Descriptor instead.
func (*SyncJob) Descriptor() ([]byte, []int) {
	return file_beesync_proto_rawDescGZIP(), []int{2}
}

func (x *SyncJob) GetOperation() SyncJob_Operation {
	if x != nil {
		return x.Operation
	}
	return SyncJob_UNKNOWN
}

func (x *SyncJob) GetRemoteStorageTarget() string {
	if x != nil {
		return x.RemoteStorageTarget
	}
	return ""
}

// A SyncRequest describes HOW a SyncJob should be carried out. It encapsulates
// the details of the part of a SyncJob assigned to a particular BeeSync node
// along with its state including the auto generated ID, segment, and status
// fields. It is expected the fields in a SyncRequest will be populated over
// time as the job progresses. For example when BeeRemote initially starts a job
// Segment will not be set so BeeSync can determine if it should determine this
// (based on file size and autostart_max_size), or if it needs to send the job
// back to BeeRemote so it can determine if the job should be distributed across
// multiple nodes. Therefore it is critical to understand the concept of field
// presence in proto3: https://protobuf.dev/programming-guides/field_presence/
// TL;DR - Generally expect fields to default to the language specific default
// values for each type for any fields that were not set by the server.
type SyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string           `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Metadata  *_go.JobMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Path      string           `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Job       *SyncJob         `protobuf:"bytes,4,opt,name=job,proto3" json:"job,omitempty"`
	Segment   *Segment         `protobuf:"bytes,5,opt,name=segment,proto3" json:"segment,omitempty"`
}

func (x *SyncRequest) Reset() {
	*x = SyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beesync_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRequest) ProtoMessage() {}

func (x *SyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_beesync_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRequest.ProtoReflect.Descriptor instead.
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return file_beesync_proto_rawDescGZIP(), []int{3}
}

func (x *SyncRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SyncRequest) GetMetadata() *_go.JobMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SyncRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SyncRequest) GetJob() *SyncJob {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *SyncRequest) GetSegment() *Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

// A segment indicates what portion of a file transfer a particular BeeSync node should work on.
type Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffsetStart int64 `protobuf:"varint,1,opt,name=offset_start,json=offsetStart,proto3" json:"offset_start,omitempty"`
	OffsetStop  int64 `protobuf:"varint,2,opt,name=offset_stop,json=offsetStop,proto3" json:"offset_stop,omitempty"`
	// Method defines fields required to figure out "what" and "how" to transfer content.
	//
	// Types that are assignable to Method:
	//
	//	*Segment_Default
	//	*Segment_S3_
	Method isSegment_Method `protobuf_oneof:"method"`
}

func (x *Segment) Reset() {
	*x = Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beesync_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_beesync_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_beesync_proto_rawDescGZIP(), []int{4}
}

func (x *Segment) GetOffsetStart() int64 {
	if x != nil {
		return x.OffsetStart
	}
	return 0
}

func (x *Segment) GetOffsetStop() int64 {
	if x != nil {
		return x.OffsetStop
	}
	return 0
}

func (m *Segment) GetMethod() isSegment_Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (x *Segment) GetDefault() bool {
	if x, ok := x.GetMethod().(*Segment_Default); ok {
		return x.Default
	}
	return false
}

func (x *Segment) GetS3() *Segment_S3 {
	if x, ok := x.GetMethod().(*Segment_S3_); ok {
		return x.S3
	}
	return nil
}

type isSegment_Method interface {
	isSegment_Method()
}

type Segment_Default struct {
	Default bool `protobuf:"varint,3,opt,name=default,proto3,oneof"`
}

type Segment_S3_ struct {
	S3 *Segment_S3 `protobuf:"bytes,4,opt,name=s3,proto3,oneof"`
}

func (*Segment_Default) isSegment_Method() {}

func (*Segment_S3_) isSegment_Method() {}

// Note while there is a lot of data contained in RemoteStorageTarget,
// gRPC will not serialize fields to the wire unless they are set.
// https://protobuf.dev/programming-guides/proto3/#specifying-field-rules
// This allows us to define all possible fields that may need to be sent
// to BeeSync to configure different target types, without extra overhead.
type RemoteStorageTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Policies *RemoteStorageTarget_Policies `protobuf:"bytes,3,opt,name=policies,proto3" json:"policies,omitempty"`
	// Type defines fields required to figure out "where" to transfer content.
	// IMPORTANT: When adding a new RST type before it can be configured by
	// BeeRemote it must also be added to the supportedRSTTypes map in
	// config.SetRSTTypeHook() to allow its configuration to be unmarshalled
	// into the Go structs generated by protoc.
	//
	// Types that are assignable to Type:
	//
	//	*RemoteStorageTarget_S3_
	//	*RemoteStorageTarget_Posix
	//	*RemoteStorageTarget_Azure_
	Type isRemoteStorageTarget_Type `protobuf_oneof:"type"`
}

func (x *RemoteStorageTarget) Reset() {
	*x = RemoteStorageTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beesync_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget) ProtoMessage() {}

func (x *RemoteStorageTarget) ProtoReflect() protoreflect.Message {
	mi := &file_beesync_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget) Descriptor() ([]byte, []int) {
	return file_beesync_proto_rawDescGZIP(), []int{5}
}

func (x *RemoteStorageTarget) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RemoteStorageTarget) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoteStorageTarget) GetPolicies() *RemoteStorageTarget_Policies {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (m *RemoteStorageTarget) GetType() isRemoteStorageTarget_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RemoteStorageTarget) GetS3() *RemoteStorageTarget_S3 {
	if x, ok := x.GetType().(*RemoteStorageTarget_S3_); ok {
		return x.S3
	}
	return nil
}

func (x *RemoteStorageTarget) GetPosix() *RemoteStorageTarget_POSIX {
	if x, ok := x.GetType().(*RemoteStorageTarget_Posix); ok {
		return x.Posix
	}
	return nil
}

func (x *RemoteStorageTarget) GetAzure() *RemoteStorageTarget_Azure {
	if x, ok := x.GetType().(*RemoteStorageTarget_Azure_); ok {
		return x.Azure
	}
	return nil
}

type isRemoteStorageTarget_Type interface {
	isRemoteStorageTarget_Type()
}

type RemoteStorageTarget_S3_ struct {
	S3 *RemoteStorageTarget_S3 `protobuf:"bytes,4,opt,name=s3,proto3,oneof"`
}

type RemoteStorageTarget_Posix struct {
	Posix *RemoteStorageTarget_POSIX `protobuf:"bytes,5,opt,name=posix,proto3,oneof"`
}

type RemoteStorageTarget_Azure_ struct {
	Azure *RemoteStorageTarget_Azure `protobuf:"bytes,6,opt,name=azure,proto3,oneof"`
}

func (*RemoteStorageTarget_S3_) isRemoteStorageTarget_Type() {}

func (*RemoteStorageTarget_Posix) isRemoteStorageTarget_Type() {}

func (*RemoteStorageTarget_Azure_) isRemoteStorageTarget_Type() {}

// BeeSync calculates the amount of data to write in each part based on offset_start and offset_stop.
type Segment_S3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MultipartId    string                       `protobuf:"bytes,1,opt,name=multipart_id,json=multipartId,proto3" json:"multipart_id,omitempty"`
	PartsStart     int32                        `protobuf:"varint,2,opt,name=parts_start,json=partsStart,proto3" json:"parts_start,omitempty"`
	PartsStop      int32                        `protobuf:"varint,3,opt,name=parts_stop,json=partsStop,proto3" json:"parts_stop,omitempty"`
	CompletedParts []*Segment_S3_CompletedParts `protobuf:"bytes,4,rep,name=completed_parts,json=completedParts,proto3" json:"completed_parts,omitempty"`
}

func (x *Segment_S3) Reset() {
	*x = Segment_S3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beesync_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment_S3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment_S3) ProtoMessage() {}

func (x *Segment_S3) ProtoReflect() protoreflect.Message {
	mi := &file_beesync_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment_S3.ProtoReflect.Descriptor instead.
func (*Segment_S3) Descriptor() ([]byte, []int) {
	return file_beesync_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Segment_S3) GetMultipartId() string {
	if x != nil {
		return x.MultipartId
	}
	return ""
}

func (x *Segment_S3) GetPartsStart() int32 {
	if x != nil {
		return x.PartsStart
	}
	return 0
}

func (x *Segment_S3) GetPartsStop() int32 {
	if x != nil {
		return x.PartsStop
	}
	return 0
}

func (x *Segment_S3) GetCompletedParts() []*Segment_S3_CompletedParts {
	if x != nil {
		return x.CompletedParts
	}
	return nil
}

type Segment_S3_CompletedParts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartNumber int32  `protobuf:"varint,1,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	EntityTag  string `protobuf:"bytes,2,opt,name=entity_tag,json=entityTag,proto3" json:"entity_tag,omitempty"`
	Checksum   string `protobuf:"bytes,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *Segment_S3_CompletedParts) Reset() {
	*x = Segment_S3_CompletedParts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beesync_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment_S3_CompletedParts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment_S3_CompletedParts) ProtoMessage() {}

func (x *Segment_S3_CompletedParts) ProtoReflect() protoreflect.Message {
	mi := &file_beesync_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment_S3_CompletedParts.ProtoReflect.Descriptor instead.
func (*Segment_S3_CompletedParts) Descriptor() ([]byte, []int) {
	return file_beesync_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *Segment_S3_CompletedParts) GetPartNumber() int32 {
	if x != nil {
		return x.PartNumber
	}
	return 0
}

func (x *Segment_S3_CompletedParts) GetEntityTag() string {
	if x != nil {
		return x.EntityTag
	}
	return ""
}

func (x *Segment_S3_CompletedParts) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

// TODO: consider if defining policies would be more flexible as a map.
// These could change a lot early on, and defining them here creates a contract
// we won't ever remove/change them.
type RemoteStorageTarget_Policies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalFlock         bool   `protobuf:"varint,1,opt,name=local_flock,json=localFlock,proto3" json:"local_flock,omitempty"`
	RemoteFlock        bool   `protobuf:"varint,2,opt,name=remote_flock,json=remoteFlock,proto3" json:"remote_flock,omitempty"`
	KeepDirStructure   bool   `protobuf:"varint,3,opt,name=keep_dir_structure,json=keepDirStructure,proto3" json:"keep_dir_structure,omitempty"`
	KeepBeegfsMetadata bool   `protobuf:"varint,4,opt,name=keep_beegfs_metadata,json=keepBeegfsMetadata,proto3" json:"keep_beegfs_metadata,omitempty"` // If BeeGFS metadata should be stored as extended attributes/metadata (if supported).
	AutostartMaxSize   uint32 `protobuf:"varint,5,opt,name=autostart_max_size,json=autostartMaxSize,proto3" json:"autostart_max_size,omitempty"`       // If the file is smaller than this, we will start the job automatically.
}

func (x *RemoteStorageTarget_Policies) Reset() {
	*x = RemoteStorageTarget_Policies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beesync_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget_Policies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_Policies) ProtoMessage() {}

func (x *RemoteStorageTarget_Policies) ProtoReflect() protoreflect.Message {
	mi := &file_beesync_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget_Policies.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget_Policies) Descriptor() ([]byte, []int) {
	return file_beesync_proto_rawDescGZIP(), []int{5, 0}
}

func (x *RemoteStorageTarget_Policies) GetLocalFlock() bool {
	if x != nil {
		return x.LocalFlock
	}
	return false
}

func (x *RemoteStorageTarget_Policies) GetRemoteFlock() bool {
	if x != nil {
		return x.RemoteFlock
	}
	return false
}

func (x *RemoteStorageTarget_Policies) GetKeepDirStructure() bool {
	if x != nil {
		return x.KeepDirStructure
	}
	return false
}

func (x *RemoteStorageTarget_Policies) GetKeepBeegfsMetadata() bool {
	if x != nil {
		return x.KeepBeegfsMetadata
	}
	return false
}

func (x *RemoteStorageTarget_Policies) GetAutostartMaxSize() uint32 {
	if x != nil {
		return x.AutostartMaxSize
	}
	return 0
}

type RemoteStorageTarget_S3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket    string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Region    string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Endpoint  string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	AccessKey string `protobuf:"bytes,4,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey string `protobuf:"bytes,5,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
}

func (x *RemoteStorageTarget_S3) Reset() {
	*x = RemoteStorageTarget_S3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beesync_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget_S3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_S3) ProtoMessage() {}

func (x *RemoteStorageTarget_S3) ProtoReflect() protoreflect.Message {
	mi := &file_beesync_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget_S3.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget_S3) Descriptor() ([]byte, []int) {
	return file_beesync_proto_rawDescGZIP(), []int{5, 1}
}

func (x *RemoteStorageTarget_S3) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type RemoteStorageTarget_Azure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S3      *RemoteStorageTarget_S3 `protobuf:"bytes,1,opt,name=s3,proto3" json:"s3,omitempty"`
	Account string                  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *RemoteStorageTarget_Azure) Reset() {
	*x = RemoteStorageTarget_Azure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beesync_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget_Azure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_Azure) ProtoMessage() {}

func (x *RemoteStorageTarget_Azure) ProtoReflect() protoreflect.Message {
	mi := &file_beesync_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget_Azure.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget_Azure) Descriptor() ([]byte, []int) {
	return file_beesync_proto_rawDescGZIP(), []int{5, 2}
}

func (x *RemoteStorageTarget_Azure) GetS3() *RemoteStorageTarget_S3 {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *RemoteStorageTarget_Azure) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type RemoteStorageTarget_POSIX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *RemoteStorageTarget_POSIX) Reset() {
	*x = RemoteStorageTarget_POSIX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beesync_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget_POSIX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_POSIX) ProtoMessage() {}

func (x *RemoteStorageTarget_POSIX) ProtoReflect() protoreflect.Message {
	mi := &file_beesync_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget_POSIX.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget_POSIX) Descriptor() ([]byte, []int) {
	return file_beesync_proto_rawDescGZIP(), []int{5, 3}
}

func (x *RemoteStorageTarget_POSIX) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_beesync_proto protoreflect.FileDescriptor

var file_beesync_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x65, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x62, 0x65, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x1a, 0x13, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73,
	0x2f, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x47, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x72, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x04, 0x72, 0x73, 0x74, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x62, 0x65, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x03, 0x22, 0xab, 0x01, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f,
	0x62, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22,
	0x32, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x4c,
	0x4f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41,
	0x44, 0x10, 0x02, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x4a, 0x6f,
	0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x2a, 0x0a, 0x07, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62,
	0x65, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xbf, 0x03, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x65, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x33, 0x48, 0x00, 0x52, 0x02, 0x73, 0x33, 0x1a, 0xa2, 0x02, 0x0a, 0x02, 0x53,
	0x33, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x73,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x73,
	0x53, 0x74, 0x6f, 0x70, 0x12, 0x4b, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x62, 0x65, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x73, 0x1a, 0x6c, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x42,
	0x08, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x90, 0x06, 0x0a, 0x13, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x65, 0x65, 0x73, 0x79, 0x6e,
	0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x65, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x2e, 0x53, 0x33, 0x48, 0x00, 0x52, 0x02, 0x73, 0x33, 0x12, 0x3a, 0x0a, 0x05, 0x70,
	0x6f, 0x73, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x65, 0x65,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x50, 0x4f, 0x53, 0x49, 0x58, 0x48, 0x00,
	0x52, 0x05, 0x70, 0x6f, 0x73, 0x69, 0x78, 0x12, 0x3a, 0x0a, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x65, 0x65, 0x73, 0x79, 0x6e, 0x63,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x05, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x1a, 0xdc, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x69, 0x72,
	0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x44, 0x69, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x62, 0x65, 0x65, 0x67, 0x66,
	0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x42, 0x65, 0x65, 0x67, 0x66, 0x73, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x1a, 0x8e, 0x01, 0x0a, 0x02, 0x53, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x1a, 0x52, 0x0a, 0x05, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x02,
	0x73, 0x33, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x65, 0x65, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x33, 0x52, 0x02, 0x73, 0x33, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1b, 0x0a, 0x05, 0x50, 0x4f, 0x53, 0x49, 0x58,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x99, 0x02, 0x0a,
	0x07, 0x42, 0x65, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x4b, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x73, 0x79, 0x6e, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x65, 0x65,
	0x67, 0x66, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x1a, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x70, 0x61, 0x72, 0x71,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x62, 0x65, 0x65, 0x73, 0x79, 0x6e,
	0x63, 0x2f, 0x67, 0x6f, 0x3b, 0x62, 0x65, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_beesync_proto_rawDescOnce sync.Once
	file_beesync_proto_rawDescData = file_beesync_proto_rawDesc
)

func file_beesync_proto_rawDescGZIP() []byte {
	file_beesync_proto_rawDescOnce.Do(func() {
		file_beesync_proto_rawDescData = protoimpl.X.CompressGZIP(file_beesync_proto_rawDescData)
	})
	return file_beesync_proto_rawDescData
}

var file_beesync_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_beesync_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_beesync_proto_goTypes = []interface{}{
	(ConfigUpdateResponse_Result)(0),     // 0: beesync.ConfigUpdateResponse.Result
	(SyncJob_Operation)(0),               // 1: beesync.SyncJob.Operation
	(*ConfigUpdateRequest)(nil),          // 2: beesync.ConfigUpdateRequest
	(*ConfigUpdateResponse)(nil),         // 3: beesync.ConfigUpdateResponse
	(*SyncJob)(nil),                      // 4: beesync.SyncJob
	(*SyncRequest)(nil),                  // 5: beesync.SyncRequest
	(*Segment)(nil),                      // 6: beesync.Segment
	(*RemoteStorageTarget)(nil),          // 7: beesync.RemoteStorageTarget
	(*Segment_S3)(nil),                   // 8: beesync.Segment.S3
	(*Segment_S3_CompletedParts)(nil),    // 9: beesync.Segment.S3.CompletedParts
	(*RemoteStorageTarget_Policies)(nil), // 10: beesync.RemoteStorageTarget.Policies
	(*RemoteStorageTarget_S3)(nil),       // 11: beesync.RemoteStorageTarget.S3
	(*RemoteStorageTarget_Azure)(nil),    // 12: beesync.RemoteStorageTarget.Azure
	(*RemoteStorageTarget_POSIX)(nil),    // 13: beesync.RemoteStorageTarget.POSIX
	(*_go.JobMetadata)(nil),              // 14: beegfs.JobMetadata
	(*_go.UpdateWorkRequest)(nil),        // 15: beegfs.UpdateWorkRequest
	(*_go.UpdateWorkRequests)(nil),       // 16: beegfs.UpdateWorkRequests
	(*_go.WorkResponse)(nil),             // 17: beegfs.WorkResponse
}
var file_beesync_proto_depIdxs = []int32{
	7,  // 0: beesync.ConfigUpdateRequest.rsts:type_name -> beesync.RemoteStorageTarget
	0,  // 1: beesync.ConfigUpdateResponse.result:type_name -> beesync.ConfigUpdateResponse.Result
	1,  // 2: beesync.SyncJob.operation:type_name -> beesync.SyncJob.Operation
	14, // 3: beesync.SyncRequest.metadata:type_name -> beegfs.JobMetadata
	4,  // 4: beesync.SyncRequest.job:type_name -> beesync.SyncJob
	6,  // 5: beesync.SyncRequest.segment:type_name -> beesync.Segment
	8,  // 6: beesync.Segment.s3:type_name -> beesync.Segment.S3
	10, // 7: beesync.RemoteStorageTarget.policies:type_name -> beesync.RemoteStorageTarget.Policies
	11, // 8: beesync.RemoteStorageTarget.s3:type_name -> beesync.RemoteStorageTarget.S3
	13, // 9: beesync.RemoteStorageTarget.posix:type_name -> beesync.RemoteStorageTarget.POSIX
	12, // 10: beesync.RemoteStorageTarget.azure:type_name -> beesync.RemoteStorageTarget.Azure
	9,  // 11: beesync.Segment.S3.completed_parts:type_name -> beesync.Segment.S3.CompletedParts
	11, // 12: beesync.RemoteStorageTarget.Azure.s3:type_name -> beesync.RemoteStorageTarget.S3
	2,  // 13: beesync.BeeSync.UpdateConfig:input_type -> beesync.ConfigUpdateRequest
	5,  // 14: beesync.BeeSync.WorkRequest:input_type -> beesync.SyncRequest
	15, // 15: beesync.BeeSync.UpdateWorkRequest:input_type -> beegfs.UpdateWorkRequest
	16, // 16: beesync.BeeSync.NodeStream:input_type -> beegfs.UpdateWorkRequests
	3,  // 17: beesync.BeeSync.UpdateConfig:output_type -> beesync.ConfigUpdateResponse
	17, // 18: beesync.BeeSync.WorkRequest:output_type -> beegfs.WorkResponse
	17, // 19: beesync.BeeSync.UpdateWorkRequest:output_type -> beegfs.WorkResponse
	17, // 20: beesync.BeeSync.NodeStream:output_type -> beegfs.WorkResponse
	17, // [17:21] is the sub-list for method output_type
	13, // [13:17] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_beesync_proto_init() }
func file_beesync_proto_init() {
	if File_beesync_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_beesync_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beesync_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beesync_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beesync_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beesync_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beesync_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beesync_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment_S3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beesync_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment_S3_CompletedParts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beesync_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget_Policies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beesync_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget_S3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beesync_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget_Azure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beesync_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget_POSIX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_beesync_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Segment_Default)(nil),
		(*Segment_S3_)(nil),
	}
	file_beesync_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*RemoteStorageTarget_S3_)(nil),
		(*RemoteStorageTarget_Posix)(nil),
		(*RemoteStorageTarget_Azure_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beesync_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_beesync_proto_goTypes,
		DependencyIndexes: file_beesync_proto_depIdxs,
		EnumInfos:         file_beesync_proto_enumTypes,
		MessageInfos:      file_beesync_proto_msgTypes,
	}.Build()
	File_beesync_proto = out.File
	file_beesync_proto_rawDesc = nil
	file_beesync_proto_goTypes = nil
	file_beesync_proto_depIdxs = nil
}
