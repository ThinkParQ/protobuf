// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: beesync.proto

package beesync

import (
	context "context"
	_go "github.com/thinkparq/protobuf/beegfs/go"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BeeSyncClient is the client API for BeeSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeeSyncClient interface {
	UpdateConfig(ctx context.Context, in *ConfigUpdateRequest, opts ...grpc.CallOption) (*ConfigUpdateResponse, error)
	WorkRequest(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*_go.WorkResponse, error)
	// UpdateWorkRequest is used to change the state of existing work requests,
	// including cancelling them at a users request, or cancelling after an unclean
	// start where there are entries in the request journal we need to ensure don't
	// have outstanding work requests that we don't know about anymore.
	UpdateWorkRequest(ctx context.Context, in *_go.UpdateWorkRequest, opts ...grpc.CallOption) (*_go.WorkResponse, error)
	// BeeRemote keeps track of the state of each worker node by establishing a
	// bidirectional RPC stream with each node. When first connecting BeeRemote
	// sends an UpdateWorkRequests message letting the worker node know what to
	// do with any outstanding work requests it has. This allows all or a subset
	// of requests to be invalidated if they were cancelled while the node was
	// disconnected. After the state of existing requests has been negotiated,
	// BeeSync will start streaming back work responses for outstanding and new
	// work requests. By using a bidirectional stream BeeSync is able to
	// asynchronously return Work Responses without needing needing to be
	// configured to talk to BeeRemote (such as the IP address).
	NodeStream(ctx context.Context, in *_go.UpdateWorkRequests, opts ...grpc.CallOption) (BeeSync_NodeStreamClient, error)
}

type beeSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewBeeSyncClient(cc grpc.ClientConnInterface) BeeSyncClient {
	return &beeSyncClient{cc}
}

func (c *beeSyncClient) UpdateConfig(ctx context.Context, in *ConfigUpdateRequest, opts ...grpc.CallOption) (*ConfigUpdateResponse, error) {
	out := new(ConfigUpdateResponse)
	err := c.cc.Invoke(ctx, "/beesync.BeeSync/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeSyncClient) WorkRequest(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*_go.WorkResponse, error) {
	out := new(_go.WorkResponse)
	err := c.cc.Invoke(ctx, "/beesync.BeeSync/WorkRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeSyncClient) UpdateWorkRequest(ctx context.Context, in *_go.UpdateWorkRequest, opts ...grpc.CallOption) (*_go.WorkResponse, error) {
	out := new(_go.WorkResponse)
	err := c.cc.Invoke(ctx, "/beesync.BeeSync/UpdateWorkRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeSyncClient) NodeStream(ctx context.Context, in *_go.UpdateWorkRequests, opts ...grpc.CallOption) (BeeSync_NodeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &BeeSync_ServiceDesc.Streams[0], "/beesync.BeeSync/NodeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &beeSyncNodeStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BeeSync_NodeStreamClient interface {
	Recv() (*_go.WorkResponse, error)
	grpc.ClientStream
}

type beeSyncNodeStreamClient struct {
	grpc.ClientStream
}

func (x *beeSyncNodeStreamClient) Recv() (*_go.WorkResponse, error) {
	m := new(_go.WorkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BeeSyncServer is the server API for BeeSync service.
// All implementations must embed UnimplementedBeeSyncServer
// for forward compatibility
type BeeSyncServer interface {
	UpdateConfig(context.Context, *ConfigUpdateRequest) (*ConfigUpdateResponse, error)
	WorkRequest(context.Context, *SyncRequest) (*_go.WorkResponse, error)
	// UpdateWorkRequest is used to change the state of existing work requests,
	// including cancelling them at a users request, or cancelling after an unclean
	// start where there are entries in the request journal we need to ensure don't
	// have outstanding work requests that we don't know about anymore.
	UpdateWorkRequest(context.Context, *_go.UpdateWorkRequest) (*_go.WorkResponse, error)
	// BeeRemote keeps track of the state of each worker node by establishing a
	// bidirectional RPC stream with each node. When first connecting BeeRemote
	// sends an UpdateWorkRequests message letting the worker node know what to
	// do with any outstanding work requests it has. This allows all or a subset
	// of requests to be invalidated if they were cancelled while the node was
	// disconnected. After the state of existing requests has been negotiated,
	// BeeSync will start streaming back work responses for outstanding and new
	// work requests. By using a bidirectional stream BeeSync is able to
	// asynchronously return Work Responses without needing needing to be
	// configured to talk to BeeRemote (such as the IP address).
	NodeStream(*_go.UpdateWorkRequests, BeeSync_NodeStreamServer) error
	mustEmbedUnimplementedBeeSyncServer()
}

// UnimplementedBeeSyncServer must be embedded to have forward compatible implementations.
type UnimplementedBeeSyncServer struct {
}

func (UnimplementedBeeSyncServer) UpdateConfig(context.Context, *ConfigUpdateRequest) (*ConfigUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedBeeSyncServer) WorkRequest(context.Context, *SyncRequest) (*_go.WorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkRequest not implemented")
}
func (UnimplementedBeeSyncServer) UpdateWorkRequest(context.Context, *_go.UpdateWorkRequest) (*_go.WorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkRequest not implemented")
}
func (UnimplementedBeeSyncServer) NodeStream(*_go.UpdateWorkRequests, BeeSync_NodeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method NodeStream not implemented")
}
func (UnimplementedBeeSyncServer) mustEmbedUnimplementedBeeSyncServer() {}

// UnsafeBeeSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeeSyncServer will
// result in compilation errors.
type UnsafeBeeSyncServer interface {
	mustEmbedUnimplementedBeeSyncServer()
}

func RegisterBeeSyncServer(s grpc.ServiceRegistrar, srv BeeSyncServer) {
	s.RegisterService(&BeeSync_ServiceDesc, srv)
}

func _BeeSync_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeSyncServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beesync.BeeSync/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeSyncServer).UpdateConfig(ctx, req.(*ConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeSync_WorkRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeSyncServer).WorkRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beesync.BeeSync/WorkRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeSyncServer).WorkRequest(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeSync_UpdateWorkRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.UpdateWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeSyncServer).UpdateWorkRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beesync.BeeSync/UpdateWorkRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeSyncServer).UpdateWorkRequest(ctx, req.(*_go.UpdateWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeSync_NodeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(_go.UpdateWorkRequests)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BeeSyncServer).NodeStream(m, &beeSyncNodeStreamServer{stream})
}

type BeeSync_NodeStreamServer interface {
	Send(*_go.WorkResponse) error
	grpc.ServerStream
}

type beeSyncNodeStreamServer struct {
	grpc.ServerStream
}

func (x *beeSyncNodeStreamServer) Send(m *_go.WorkResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BeeSync_ServiceDesc is the grpc.ServiceDesc for BeeSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeeSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "beesync.BeeSync",
	HandlerType: (*BeeSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateConfig",
			Handler:    _BeeSync_UpdateConfig_Handler,
		},
		{
			MethodName: "WorkRequest",
			Handler:    _BeeSync_WorkRequest_Handler,
		},
		{
			MethodName: "UpdateWorkRequest",
			Handler:    _BeeSync_UpdateWorkRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NodeStream",
			Handler:       _BeeSync_NodeStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "beesync.proto",
}
