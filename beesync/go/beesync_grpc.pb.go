// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: beesync.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BeeSyncClient is the client API for BeeSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeeSyncClient interface {
	UpdateConfig(ctx context.Context, in *ConfigUpdateRequest, opts ...grpc.CallOption) (*ConfigUpdateResponse, error)
	JobRequests(ctx context.Context, opts ...grpc.CallOption) (BeeSync_JobRequestsClient, error)
}

type beeSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewBeeSyncClient(cc grpc.ClientConnInterface) BeeSyncClient {
	return &beeSyncClient{cc}
}

func (c *beeSyncClient) UpdateConfig(ctx context.Context, in *ConfigUpdateRequest, opts ...grpc.CallOption) (*ConfigUpdateResponse, error) {
	out := new(ConfigUpdateResponse)
	err := c.cc.Invoke(ctx, "/beesync.BeeSync/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeSyncClient) JobRequests(ctx context.Context, opts ...grpc.CallOption) (BeeSync_JobRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BeeSync_ServiceDesc.Streams[0], "/beesync.BeeSync/JobRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &beeSyncJobRequestsClient{stream}
	return x, nil
}

type BeeSync_JobRequestsClient interface {
	Send(*JobRequest) error
	Recv() (*JobResponse, error)
	grpc.ClientStream
}

type beeSyncJobRequestsClient struct {
	grpc.ClientStream
}

func (x *beeSyncJobRequestsClient) Send(m *JobRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *beeSyncJobRequestsClient) Recv() (*JobResponse, error) {
	m := new(JobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BeeSyncServer is the server API for BeeSync service.
// All implementations must embed UnimplementedBeeSyncServer
// for forward compatibility
type BeeSyncServer interface {
	UpdateConfig(context.Context, *ConfigUpdateRequest) (*ConfigUpdateResponse, error)
	JobRequests(BeeSync_JobRequestsServer) error
	mustEmbedUnimplementedBeeSyncServer()
}

// UnimplementedBeeSyncServer must be embedded to have forward compatible implementations.
type UnimplementedBeeSyncServer struct {
}

func (UnimplementedBeeSyncServer) UpdateConfig(context.Context, *ConfigUpdateRequest) (*ConfigUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedBeeSyncServer) JobRequests(BeeSync_JobRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method JobRequests not implemented")
}
func (UnimplementedBeeSyncServer) mustEmbedUnimplementedBeeSyncServer() {}

// UnsafeBeeSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeeSyncServer will
// result in compilation errors.
type UnsafeBeeSyncServer interface {
	mustEmbedUnimplementedBeeSyncServer()
}

func RegisterBeeSyncServer(s grpc.ServiceRegistrar, srv BeeSyncServer) {
	s.RegisterService(&BeeSync_ServiceDesc, srv)
}

func _BeeSync_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeSyncServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beesync.BeeSync/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeSyncServer).UpdateConfig(ctx, req.(*ConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeSync_JobRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BeeSyncServer).JobRequests(&beeSyncJobRequestsServer{stream})
}

type BeeSync_JobRequestsServer interface {
	Send(*JobResponse) error
	Recv() (*JobRequest, error)
	grpc.ServerStream
}

type beeSyncJobRequestsServer struct {
	grpc.ServerStream
}

func (x *beeSyncJobRequestsServer) Send(m *JobResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *beeSyncJobRequestsServer) Recv() (*JobRequest, error) {
	m := new(JobRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BeeSync_ServiceDesc is the grpc.ServiceDesc for BeeSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeeSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "beesync.BeeSync",
	HandlerType: (*BeeSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateConfig",
			Handler:    _BeeSync_UpdateConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JobRequests",
			Handler:       _BeeSync_JobRequests_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "beesync.proto",
}
