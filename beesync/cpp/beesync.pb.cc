// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beesync.proto

#include "beesync.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_beegfs_2fbeegfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Entry_beegfs_2fbeegfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beegfs_2fbeegfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobMetadata_beegfs_2fbeegfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beegfs_2fbeegfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RemoteStorageTarget_beegfs_2fbeegfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beesync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Segment_beesync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beesync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Segment_S3_beesync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beesync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Segment_S3_CompletedParts_beesync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beesync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncJob_beesync_2eproto;
namespace beesync {
class ConfigUpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigUpdateRequest> _instance;
} _ConfigUpdateRequest_default_instance_;
class ConfigUpdateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigUpdateResponse> _instance;
} _ConfigUpdateResponse_default_instance_;
class SyncJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncJob> _instance;
} _SyncJob_default_instance_;
class WorkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkRequest> _instance;
} _WorkRequest_default_instance_;
class Segment_S3_CompletedPartsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Segment_S3_CompletedParts> _instance;
} _Segment_S3_CompletedParts_default_instance_;
class Segment_S3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Segment_S3> _instance;
} _Segment_S3_default_instance_;
class SegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Segment> _instance;
  bool default__;
  const ::beesync::Segment_S3* s3_;
} _Segment_default_instance_;
}  // namespace beesync
static void InitDefaultsscc_info_ConfigUpdateRequest_beesync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beesync::_ConfigUpdateRequest_default_instance_;
    new (ptr) ::beesync::ConfigUpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beesync::ConfigUpdateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConfigUpdateRequest_beesync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConfigUpdateRequest_beesync_2eproto}, {
      &scc_info_RemoteStorageTarget_beegfs_2fbeegfs_2eproto.base,}};

static void InitDefaultsscc_info_ConfigUpdateResponse_beesync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beesync::_ConfigUpdateResponse_default_instance_;
    new (ptr) ::beesync::ConfigUpdateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beesync::ConfigUpdateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigUpdateResponse_beesync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfigUpdateResponse_beesync_2eproto}, {}};

static void InitDefaultsscc_info_Segment_beesync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beesync::_Segment_default_instance_;
    new (ptr) ::beesync::Segment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beesync::Segment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Segment_beesync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Segment_beesync_2eproto}, {
      &scc_info_Segment_S3_beesync_2eproto.base,}};

static void InitDefaultsscc_info_Segment_S3_beesync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beesync::_Segment_S3_default_instance_;
    new (ptr) ::beesync::Segment_S3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beesync::Segment_S3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Segment_S3_beesync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Segment_S3_beesync_2eproto}, {
      &scc_info_Segment_S3_CompletedParts_beesync_2eproto.base,}};

static void InitDefaultsscc_info_Segment_S3_CompletedParts_beesync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beesync::_Segment_S3_CompletedParts_default_instance_;
    new (ptr) ::beesync::Segment_S3_CompletedParts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beesync::Segment_S3_CompletedParts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Segment_S3_CompletedParts_beesync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Segment_S3_CompletedParts_beesync_2eproto}, {}};

static void InitDefaultsscc_info_SyncJob_beesync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beesync::_SyncJob_default_instance_;
    new (ptr) ::beesync::SyncJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beesync::SyncJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncJob_beesync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SyncJob_beesync_2eproto}, {
      &scc_info_Entry_beegfs_2fbeegfs_2eproto.base,}};

static void InitDefaultsscc_info_WorkRequest_beesync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beesync::_WorkRequest_default_instance_;
    new (ptr) ::beesync::WorkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beesync::WorkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WorkRequest_beesync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_WorkRequest_beesync_2eproto}, {
      &scc_info_JobMetadata_beegfs_2fbeegfs_2eproto.base,
      &scc_info_SyncJob_beesync_2eproto.base,
      &scc_info_Segment_beesync_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_beesync_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_beesync_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_beesync_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_beesync_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beesync::ConfigUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beesync::ConfigUpdateRequest, rsts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beesync::ConfigUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beesync::ConfigUpdateResponse, result_),
  PROTOBUF_FIELD_OFFSET(::beesync::ConfigUpdateResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beesync::SyncJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beesync::SyncJob, entry_),
  PROTOBUF_FIELD_OFFSET(::beesync::SyncJob, operation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beesync::WorkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beesync::WorkRequest, metadata_),
  PROTOBUF_FIELD_OFFSET(::beesync::WorkRequest, job_),
  PROTOBUF_FIELD_OFFSET(::beesync::WorkRequest, segment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beesync::Segment_S3_CompletedParts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beesync::Segment_S3_CompletedParts, part_number_),
  PROTOBUF_FIELD_OFFSET(::beesync::Segment_S3_CompletedParts, entity_tag_),
  PROTOBUF_FIELD_OFFSET(::beesync::Segment_S3_CompletedParts, checksum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beesync::Segment_S3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beesync::Segment_S3, multipart_id_),
  PROTOBUF_FIELD_OFFSET(::beesync::Segment_S3, parts_start_),
  PROTOBUF_FIELD_OFFSET(::beesync::Segment_S3, parts_stop_),
  PROTOBUF_FIELD_OFFSET(::beesync::Segment_S3, completed_parts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beesync::Segment, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::beesync::Segment, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beesync::Segment, offset_start_),
  PROTOBUF_FIELD_OFFSET(::beesync::Segment, offset_stop_),
  offsetof(::beesync::SegmentDefaultTypeInternal, default__),
  offsetof(::beesync::SegmentDefaultTypeInternal, s3_),
  PROTOBUF_FIELD_OFFSET(::beesync::Segment, method_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::beesync::ConfigUpdateRequest)},
  { 6, -1, sizeof(::beesync::ConfigUpdateResponse)},
  { 13, -1, sizeof(::beesync::SyncJob)},
  { 20, -1, sizeof(::beesync::WorkRequest)},
  { 28, -1, sizeof(::beesync::Segment_S3_CompletedParts)},
  { 36, -1, sizeof(::beesync::Segment_S3)},
  { 45, -1, sizeof(::beesync::Segment)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beesync::_ConfigUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beesync::_ConfigUpdateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beesync::_SyncJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beesync::_WorkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beesync::_Segment_S3_CompletedParts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beesync::_Segment_S3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beesync::_Segment_default_instance_),
};

const char descriptor_table_protodef_beesync_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rbeesync.proto\022\007beesync\032\023beegfs/beegfs."
  "proto\"@\n\023ConfigUpdateRequest\022)\n\004rsts\030\001 \003"
  "(\0132\033.beegfs.RemoteStorageTarget\"\233\001\n\024Conf"
  "igUpdateResponse\0224\n\006result\030\001 \001(\0162$.beesy"
  "nc.ConfigUpdateResponse.Result\022\017\n\007messag"
  "e\030\002 \001(\t\"<\n\006Result\022\013\n\007UNKNOWN\020\000\022\013\n\007SUCCES"
  "S\020\001\022\013\n\007PARTIAL\020\002\022\013\n\007FAILURE\020\003\"\212\001\n\007SyncJo"
  "b\022\034\n\005entry\030\001 \001(\0132\r.beegfs.Entry\022-\n\topera"
  "tion\030\002 \001(\0162\032.beesync.SyncJob.Operation\"2"
  "\n\tOperation\022\013\n\007UNKNOWN\020\000\022\n\n\006UPLOAD\020\001\022\014\n\010"
  "DOWNLOAD\020\002\"v\n\013WorkRequest\022%\n\010metadata\030\001 "
  "\001(\0132\023.beegfs.JobMetadata\022\035\n\003job\030\002 \001(\0132\020."
  "beesync.SyncJob\022!\n\007segment\030\003 \001(\0132\020.beesy"
  "nc.Segment\"\304\002\n\007Segment\022\024\n\014offset_start\030\001"
  " \001(\003\022\023\n\013offset_stop\030\002 \001(\003\022\021\n\007default\030\003 \001"
  "(\010H\000\022!\n\002s3\030\004 \001(\0132\023.beesync.Segment.S3H\000\032"
  "\315\001\n\002S3\022\024\n\014multipart_id\030\001 \001(\t\022\023\n\013parts_st"
  "art\030\002 \001(\005\022\022\n\nparts_stop\030\003 \001(\005\022;\n\017complet"
  "ed_parts\030\004 \003(\0132\".beesync.Segment.S3.Comp"
  "letedParts\032K\n\016CompletedParts\022\023\n\013part_num"
  "ber\030\001 \001(\005\022\022\n\nentity_tag\030\002 \001(\t\022\020\n\010checksu"
  "m\030\003 \001(\tB\010\n\006method2\225\001\n\007BeeSync\022K\n\014UpdateC"
  "onfig\022\034.beesync.ConfigUpdateRequest\032\035.be"
  "esync.ConfigUpdateResponse\022=\n\013JobRequest"
  "s\022\024.beesync.WorkRequest\032\024.beegfs.WorkRes"
  "ponse(\0010\001B2Z0github.com/thinkparq/protob"
  "uf/beesync/go;beesyncb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_beesync_2eproto_deps[1] = {
  &::descriptor_table_beegfs_2fbeegfs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_beesync_2eproto_sccs[7] = {
  &scc_info_ConfigUpdateRequest_beesync_2eproto.base,
  &scc_info_ConfigUpdateResponse_beesync_2eproto.base,
  &scc_info_Segment_beesync_2eproto.base,
  &scc_info_Segment_S3_beesync_2eproto.base,
  &scc_info_Segment_S3_CompletedParts_beesync_2eproto.base,
  &scc_info_SyncJob_beesync_2eproto.base,
  &scc_info_WorkRequest_beesync_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_beesync_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_beesync_2eproto = {
  false, false, descriptor_table_protodef_beesync_2eproto, "beesync.proto", 1069,
  &descriptor_table_beesync_2eproto_once, descriptor_table_beesync_2eproto_sccs, descriptor_table_beesync_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_beesync_2eproto::offsets,
  file_level_metadata_beesync_2eproto, 7, file_level_enum_descriptors_beesync_2eproto, file_level_service_descriptors_beesync_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_beesync_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_beesync_2eproto)), true);
namespace beesync {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfigUpdateResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_beesync_2eproto);
  return file_level_enum_descriptors_beesync_2eproto[0];
}
bool ConfigUpdateResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConfigUpdateResponse_Result ConfigUpdateResponse::UNKNOWN;
constexpr ConfigUpdateResponse_Result ConfigUpdateResponse::SUCCESS;
constexpr ConfigUpdateResponse_Result ConfigUpdateResponse::PARTIAL;
constexpr ConfigUpdateResponse_Result ConfigUpdateResponse::FAILURE;
constexpr ConfigUpdateResponse_Result ConfigUpdateResponse::Result_MIN;
constexpr ConfigUpdateResponse_Result ConfigUpdateResponse::Result_MAX;
constexpr int ConfigUpdateResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SyncJob_Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_beesync_2eproto);
  return file_level_enum_descriptors_beesync_2eproto[1];
}
bool SyncJob_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SyncJob_Operation SyncJob::UNKNOWN;
constexpr SyncJob_Operation SyncJob::UPLOAD;
constexpr SyncJob_Operation SyncJob::DOWNLOAD;
constexpr SyncJob_Operation SyncJob::Operation_MIN;
constexpr SyncJob_Operation SyncJob::Operation_MAX;
constexpr int SyncJob::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ConfigUpdateRequest::InitAsDefaultInstance() {
}
class ConfigUpdateRequest::_Internal {
 public:
};

void ConfigUpdateRequest::clear_rsts() {
  rsts_.Clear();
}
ConfigUpdateRequest::ConfigUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rsts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beesync.ConfigUpdateRequest)
}
ConfigUpdateRequest::ConfigUpdateRequest(const ConfigUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rsts_(from.rsts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:beesync.ConfigUpdateRequest)
}

void ConfigUpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigUpdateRequest_beesync_2eproto.base);
}

ConfigUpdateRequest::~ConfigUpdateRequest() {
  // @@protoc_insertion_point(destructor:beesync.ConfigUpdateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConfigUpdateRequest::ArenaDtor(void* object) {
  ConfigUpdateRequest* _this = reinterpret_cast< ConfigUpdateRequest* >(object);
  (void)_this;
}
void ConfigUpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigUpdateRequest& ConfigUpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigUpdateRequest_beesync_2eproto.base);
  return *internal_default_instance();
}


void ConfigUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:beesync.ConfigUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rsts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .beegfs.RemoteStorageTarget rsts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rsts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigUpdateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beesync.ConfigUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .beegfs.RemoteStorageTarget rsts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rsts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rsts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beesync.ConfigUpdateRequest)
  return target;
}

size_t ConfigUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beesync.ConfigUpdateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .beegfs.RemoteStorageTarget rsts = 1;
  total_size += 1UL * this->_internal_rsts_size();
  for (const auto& msg : this->rsts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigUpdateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beesync.ConfigUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigUpdateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigUpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beesync.ConfigUpdateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beesync.ConfigUpdateRequest)
    MergeFrom(*source);
  }
}

void ConfigUpdateRequest::MergeFrom(const ConfigUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beesync.ConfigUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rsts_.MergeFrom(from.rsts_);
}

void ConfigUpdateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beesync.ConfigUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigUpdateRequest::CopyFrom(const ConfigUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beesync.ConfigUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigUpdateRequest::IsInitialized() const {
  return true;
}

void ConfigUpdateRequest::InternalSwap(ConfigUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rsts_.InternalSwap(&other->rsts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigUpdateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigUpdateResponse::InitAsDefaultInstance() {
}
class ConfigUpdateResponse::_Internal {
 public:
};

ConfigUpdateResponse::ConfigUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beesync.ConfigUpdateResponse)
}
ConfigUpdateResponse::ConfigUpdateResponse(const ConfigUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:beesync.ConfigUpdateResponse)
}

void ConfigUpdateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigUpdateResponse_beesync_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

ConfigUpdateResponse::~ConfigUpdateResponse() {
  // @@protoc_insertion_point(destructor:beesync.ConfigUpdateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigUpdateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigUpdateResponse::ArenaDtor(void* object) {
  ConfigUpdateResponse* _this = reinterpret_cast< ConfigUpdateResponse* >(object);
  (void)_this;
}
void ConfigUpdateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigUpdateResponse& ConfigUpdateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigUpdateResponse_beesync_2eproto.base);
  return *internal_default_instance();
}


void ConfigUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:beesync.ConfigUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigUpdateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .beesync.ConfigUpdateResponse.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::beesync::ConfigUpdateResponse_Result>(val));
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beesync.ConfigUpdateResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigUpdateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beesync.ConfigUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .beesync.ConfigUpdateResponse.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beesync.ConfigUpdateResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beesync.ConfigUpdateResponse)
  return target;
}

size_t ConfigUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beesync.ConfigUpdateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .beesync.ConfigUpdateResponse.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigUpdateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beesync.ConfigUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigUpdateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigUpdateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beesync.ConfigUpdateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beesync.ConfigUpdateResponse)
    MergeFrom(*source);
  }
}

void ConfigUpdateResponse::MergeFrom(const ConfigUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beesync.ConfigUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ConfigUpdateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beesync.ConfigUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigUpdateResponse::CopyFrom(const ConfigUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beesync.ConfigUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigUpdateResponse::IsInitialized() const {
  return true;
}

void ConfigUpdateResponse::InternalSwap(ConfigUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigUpdateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncJob::InitAsDefaultInstance() {
  ::beesync::_SyncJob_default_instance_._instance.get_mutable()->entry_ = const_cast< ::beegfs::Entry*>(
      ::beegfs::Entry::internal_default_instance());
}
class SyncJob::_Internal {
 public:
  static const ::beegfs::Entry& entry(const SyncJob* msg);
};

const ::beegfs::Entry&
SyncJob::_Internal::entry(const SyncJob* msg) {
  return *msg->entry_;
}
void SyncJob::clear_entry() {
  if (GetArena() == nullptr && entry_ != nullptr) {
    delete entry_;
  }
  entry_ = nullptr;
}
SyncJob::SyncJob(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beesync.SyncJob)
}
SyncJob::SyncJob(const SyncJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entry()) {
    entry_ = new ::beegfs::Entry(*from.entry_);
  } else {
    entry_ = nullptr;
  }
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:beesync.SyncJob)
}

void SyncJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncJob_beesync_2eproto.base);
  ::memset(&entry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_) -
      reinterpret_cast<char*>(&entry_)) + sizeof(operation_));
}

SyncJob::~SyncJob() {
  // @@protoc_insertion_point(destructor:beesync.SyncJob)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncJob::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete entry_;
}

void SyncJob::ArenaDtor(void* object) {
  SyncJob* _this = reinterpret_cast< SyncJob* >(object);
  (void)_this;
}
void SyncJob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncJob& SyncJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncJob_beesync_2eproto.base);
  return *internal_default_instance();
}


void SyncJob::Clear() {
// @@protoc_insertion_point(message_clear_start:beesync.SyncJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && entry_ != nullptr) {
    delete entry_;
  }
  entry_ = nullptr;
  operation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .beegfs.Entry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .beesync.SyncJob.Operation operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::beesync::SyncJob_Operation>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncJob::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beesync.SyncJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .beegfs.Entry entry = 1;
  if (this->has_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entry(this), target, stream);
  }

  // .beesync.SyncJob.Operation operation = 2;
  if (this->operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beesync.SyncJob)
  return target;
}

size_t SyncJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beesync.SyncJob)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .beegfs.Entry entry = 1;
  if (this->has_entry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entry_);
  }

  // .beesync.SyncJob.Operation operation = 2;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beesync.SyncJob)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beesync.SyncJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beesync.SyncJob)
    MergeFrom(*source);
  }
}

void SyncJob::MergeFrom(const SyncJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beesync.SyncJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_entry()) {
    _internal_mutable_entry()->::beegfs::Entry::MergeFrom(from._internal_entry());
  }
  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
}

void SyncJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beesync.SyncJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncJob::CopyFrom(const SyncJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beesync.SyncJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncJob::IsInitialized() const {
  return true;
}

void SyncJob::InternalSwap(SyncJob* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncJob, operation_)
      + sizeof(SyncJob::operation_)
      - PROTOBUF_FIELD_OFFSET(SyncJob, entry_)>(
          reinterpret_cast<char*>(&entry_),
          reinterpret_cast<char*>(&other->entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkRequest::InitAsDefaultInstance() {
  ::beesync::_WorkRequest_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::beegfs::JobMetadata*>(
      ::beegfs::JobMetadata::internal_default_instance());
  ::beesync::_WorkRequest_default_instance_._instance.get_mutable()->job_ = const_cast< ::beesync::SyncJob*>(
      ::beesync::SyncJob::internal_default_instance());
  ::beesync::_WorkRequest_default_instance_._instance.get_mutable()->segment_ = const_cast< ::beesync::Segment*>(
      ::beesync::Segment::internal_default_instance());
}
class WorkRequest::_Internal {
 public:
  static const ::beegfs::JobMetadata& metadata(const WorkRequest* msg);
  static const ::beesync::SyncJob& job(const WorkRequest* msg);
  static const ::beesync::Segment& segment(const WorkRequest* msg);
};

const ::beegfs::JobMetadata&
WorkRequest::_Internal::metadata(const WorkRequest* msg) {
  return *msg->metadata_;
}
const ::beesync::SyncJob&
WorkRequest::_Internal::job(const WorkRequest* msg) {
  return *msg->job_;
}
const ::beesync::Segment&
WorkRequest::_Internal::segment(const WorkRequest* msg) {
  return *msg->segment_;
}
void WorkRequest::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
WorkRequest::WorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beesync.WorkRequest)
}
WorkRequest::WorkRequest(const WorkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::beegfs::JobMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_job()) {
    job_ = new ::beesync::SyncJob(*from.job_);
  } else {
    job_ = nullptr;
  }
  if (from._internal_has_segment()) {
    segment_ = new ::beesync::Segment(*from.segment_);
  } else {
    segment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:beesync.WorkRequest)
}

void WorkRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkRequest_beesync_2eproto.base);
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&segment_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(segment_));
}

WorkRequest::~WorkRequest() {
  // @@protoc_insertion_point(destructor:beesync.WorkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete job_;
  if (this != internal_default_instance()) delete segment_;
}

void WorkRequest::ArenaDtor(void* object) {
  WorkRequest* _this = reinterpret_cast< WorkRequest* >(object);
  (void)_this;
}
void WorkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkRequest& WorkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkRequest_beesync_2eproto.base);
  return *internal_default_instance();
}


void WorkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:beesync.WorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArena() == nullptr && job_ != nullptr) {
    delete job_;
  }
  job_ = nullptr;
  if (GetArena() == nullptr && segment_ != nullptr) {
    delete segment_;
  }
  segment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .beegfs.JobMetadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .beesync.SyncJob job = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_job(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .beesync.Segment segment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_segment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beesync.WorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .beegfs.JobMetadata metadata = 1;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // .beesync.SyncJob job = 2;
  if (this->has_job()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::job(this), target, stream);
  }

  // .beesync.Segment segment = 3;
  if (this->has_segment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::segment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beesync.WorkRequest)
  return target;
}

size_t WorkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beesync.WorkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .beegfs.JobMetadata metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .beesync.SyncJob job = 2;
  if (this->has_job()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *job_);
  }

  // .beesync.Segment segment = 3;
  if (this->has_segment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *segment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beesync.WorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beesync.WorkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beesync.WorkRequest)
    MergeFrom(*source);
  }
}

void WorkRequest::MergeFrom(const WorkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beesync.WorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_metadata()) {
    _internal_mutable_metadata()->::beegfs::JobMetadata::MergeFrom(from._internal_metadata());
  }
  if (from.has_job()) {
    _internal_mutable_job()->::beesync::SyncJob::MergeFrom(from._internal_job());
  }
  if (from.has_segment()) {
    _internal_mutable_segment()->::beesync::Segment::MergeFrom(from._internal_segment());
  }
}

void WorkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beesync.WorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkRequest::CopyFrom(const WorkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beesync.WorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkRequest::IsInitialized() const {
  return true;
}

void WorkRequest::InternalSwap(WorkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkRequest, segment_)
      + sizeof(WorkRequest::segment_)
      - PROTOBUF_FIELD_OFFSET(WorkRequest, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Segment_S3_CompletedParts::InitAsDefaultInstance() {
}
class Segment_S3_CompletedParts::_Internal {
 public:
};

Segment_S3_CompletedParts::Segment_S3_CompletedParts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beesync.Segment.S3.CompletedParts)
}
Segment_S3_CompletedParts::Segment_S3_CompletedParts(const Segment_S3_CompletedParts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entity_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entity_tag().empty()) {
    entity_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_entity_tag(),
      GetArena());
  }
  checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_checksum().empty()) {
    checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_checksum(),
      GetArena());
  }
  part_number_ = from.part_number_;
  // @@protoc_insertion_point(copy_constructor:beesync.Segment.S3.CompletedParts)
}

void Segment_S3_CompletedParts::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Segment_S3_CompletedParts_beesync_2eproto.base);
  entity_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  part_number_ = 0;
}

Segment_S3_CompletedParts::~Segment_S3_CompletedParts() {
  // @@protoc_insertion_point(destructor:beesync.Segment.S3.CompletedParts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Segment_S3_CompletedParts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  entity_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checksum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Segment_S3_CompletedParts::ArenaDtor(void* object) {
  Segment_S3_CompletedParts* _this = reinterpret_cast< Segment_S3_CompletedParts* >(object);
  (void)_this;
}
void Segment_S3_CompletedParts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Segment_S3_CompletedParts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Segment_S3_CompletedParts& Segment_S3_CompletedParts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Segment_S3_CompletedParts_beesync_2eproto.base);
  return *internal_default_instance();
}


void Segment_S3_CompletedParts::Clear() {
// @@protoc_insertion_point(message_clear_start:beesync.Segment.S3.CompletedParts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checksum_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  part_number_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Segment_S3_CompletedParts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 part_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          part_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string entity_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_entity_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beesync.Segment.S3.CompletedParts.entity_tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string checksum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_checksum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beesync.Segment.S3.CompletedParts.checksum"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Segment_S3_CompletedParts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beesync.Segment.S3.CompletedParts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 part_number = 1;
  if (this->part_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_part_number(), target);
  }

  // string entity_tag = 2;
  if (this->entity_tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity_tag().data(), static_cast<int>(this->_internal_entity_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beesync.Segment.S3.CompletedParts.entity_tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_entity_tag(), target);
  }

  // string checksum = 3;
  if (this->checksum().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checksum().data(), static_cast<int>(this->_internal_checksum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beesync.Segment.S3.CompletedParts.checksum");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beesync.Segment.S3.CompletedParts)
  return target;
}

size_t Segment_S3_CompletedParts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beesync.Segment.S3.CompletedParts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_tag = 2;
  if (this->entity_tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_tag());
  }

  // string checksum = 3;
  if (this->checksum().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checksum());
  }

  // int32 part_number = 1;
  if (this->part_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_part_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Segment_S3_CompletedParts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beesync.Segment.S3.CompletedParts)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment_S3_CompletedParts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Segment_S3_CompletedParts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beesync.Segment.S3.CompletedParts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beesync.Segment.S3.CompletedParts)
    MergeFrom(*source);
  }
}

void Segment_S3_CompletedParts::MergeFrom(const Segment_S3_CompletedParts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beesync.Segment.S3.CompletedParts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_tag().size() > 0) {
    _internal_set_entity_tag(from._internal_entity_tag());
  }
  if (from.checksum().size() > 0) {
    _internal_set_checksum(from._internal_checksum());
  }
  if (from.part_number() != 0) {
    _internal_set_part_number(from._internal_part_number());
  }
}

void Segment_S3_CompletedParts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beesync.Segment.S3.CompletedParts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment_S3_CompletedParts::CopyFrom(const Segment_S3_CompletedParts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beesync.Segment.S3.CompletedParts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment_S3_CompletedParts::IsInitialized() const {
  return true;
}

void Segment_S3_CompletedParts::InternalSwap(Segment_S3_CompletedParts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entity_tag_.Swap(&other->entity_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checksum_.Swap(&other->checksum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(part_number_, other->part_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Segment_S3_CompletedParts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Segment_S3::InitAsDefaultInstance() {
}
class Segment_S3::_Internal {
 public:
};

Segment_S3::Segment_S3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  completed_parts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beesync.Segment.S3)
}
Segment_S3::Segment_S3(const Segment_S3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      completed_parts_(from.completed_parts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  multipart_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_multipart_id().empty()) {
    multipart_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_multipart_id(),
      GetArena());
  }
  ::memcpy(&parts_start_, &from.parts_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&parts_stop_) -
    reinterpret_cast<char*>(&parts_start_)) + sizeof(parts_stop_));
  // @@protoc_insertion_point(copy_constructor:beesync.Segment.S3)
}

void Segment_S3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Segment_S3_beesync_2eproto.base);
  multipart_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&parts_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parts_stop_) -
      reinterpret_cast<char*>(&parts_start_)) + sizeof(parts_stop_));
}

Segment_S3::~Segment_S3() {
  // @@protoc_insertion_point(destructor:beesync.Segment.S3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Segment_S3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  multipart_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Segment_S3::ArenaDtor(void* object) {
  Segment_S3* _this = reinterpret_cast< Segment_S3* >(object);
  (void)_this;
}
void Segment_S3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Segment_S3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Segment_S3& Segment_S3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Segment_S3_beesync_2eproto.base);
  return *internal_default_instance();
}


void Segment_S3::Clear() {
// @@protoc_insertion_point(message_clear_start:beesync.Segment.S3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  completed_parts_.Clear();
  multipart_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&parts_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parts_stop_) -
      reinterpret_cast<char*>(&parts_start_)) + sizeof(parts_stop_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Segment_S3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string multipart_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_multipart_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beesync.Segment.S3.multipart_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parts_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          parts_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parts_stop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          parts_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .beesync.Segment.S3.CompletedParts completed_parts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_completed_parts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Segment_S3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beesync.Segment.S3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string multipart_id = 1;
  if (this->multipart_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_multipart_id().data(), static_cast<int>(this->_internal_multipart_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beesync.Segment.S3.multipart_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_multipart_id(), target);
  }

  // int32 parts_start = 2;
  if (this->parts_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_parts_start(), target);
  }

  // int32 parts_stop = 3;
  if (this->parts_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_parts_stop(), target);
  }

  // repeated .beesync.Segment.S3.CompletedParts completed_parts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_completed_parts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_completed_parts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beesync.Segment.S3)
  return target;
}

size_t Segment_S3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beesync.Segment.S3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .beesync.Segment.S3.CompletedParts completed_parts = 4;
  total_size += 1UL * this->_internal_completed_parts_size();
  for (const auto& msg : this->completed_parts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string multipart_id = 1;
  if (this->multipart_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_multipart_id());
  }

  // int32 parts_start = 2;
  if (this->parts_start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parts_start());
  }

  // int32 parts_stop = 3;
  if (this->parts_stop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parts_stop());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Segment_S3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beesync.Segment.S3)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment_S3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Segment_S3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beesync.Segment.S3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beesync.Segment.S3)
    MergeFrom(*source);
  }
}

void Segment_S3::MergeFrom(const Segment_S3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beesync.Segment.S3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  completed_parts_.MergeFrom(from.completed_parts_);
  if (from.multipart_id().size() > 0) {
    _internal_set_multipart_id(from._internal_multipart_id());
  }
  if (from.parts_start() != 0) {
    _internal_set_parts_start(from._internal_parts_start());
  }
  if (from.parts_stop() != 0) {
    _internal_set_parts_stop(from._internal_parts_stop());
  }
}

void Segment_S3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beesync.Segment.S3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment_S3::CopyFrom(const Segment_S3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beesync.Segment.S3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment_S3::IsInitialized() const {
  return true;
}

void Segment_S3::InternalSwap(Segment_S3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  completed_parts_.InternalSwap(&other->completed_parts_);
  multipart_id_.Swap(&other->multipart_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Segment_S3, parts_stop_)
      + sizeof(Segment_S3::parts_stop_)
      - PROTOBUF_FIELD_OFFSET(Segment_S3, parts_start_)>(
          reinterpret_cast<char*>(&parts_start_),
          reinterpret_cast<char*>(&other->parts_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Segment_S3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Segment::InitAsDefaultInstance() {
  ::beesync::_Segment_default_instance_.default__ = false;
  ::beesync::_Segment_default_instance_.s3_ = const_cast< ::beesync::Segment_S3*>(
      ::beesync::Segment_S3::internal_default_instance());
}
class Segment::_Internal {
 public:
  static const ::beesync::Segment_S3& s3(const Segment* msg);
};

const ::beesync::Segment_S3&
Segment::_Internal::s3(const Segment* msg) {
  return *msg->method_.s3_;
}
void Segment::set_allocated_s3(::beesync::Segment_S3* s3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_method();
  if (s3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(s3);
    if (message_arena != submessage_arena) {
      s3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s3, submessage_arena);
    }
    set_has_s3();
    method_.s3_ = s3;
  }
  // @@protoc_insertion_point(field_set_allocated:beesync.Segment.s3)
}
Segment::Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beesync.Segment)
}
Segment::Segment(const Segment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_start_, &from.offset_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_stop_) -
    reinterpret_cast<char*>(&offset_start_)) + sizeof(offset_stop_));
  clear_has_method();
  switch (from.method_case()) {
    case kDefault: {
      _internal_set_default_(from._internal_default_());
      break;
    }
    case kS3: {
      _internal_mutable_s3()->::beesync::Segment_S3::MergeFrom(from._internal_s3());
      break;
    }
    case METHOD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:beesync.Segment)
}

void Segment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Segment_beesync_2eproto.base);
  ::memset(&offset_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_stop_) -
      reinterpret_cast<char*>(&offset_start_)) + sizeof(offset_stop_));
  clear_has_method();
}

Segment::~Segment() {
  // @@protoc_insertion_point(destructor:beesync.Segment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Segment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_method()) {
    clear_method();
  }
}

void Segment::ArenaDtor(void* object) {
  Segment* _this = reinterpret_cast< Segment* >(object);
  (void)_this;
}
void Segment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Segment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Segment& Segment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Segment_beesync_2eproto.base);
  return *internal_default_instance();
}


void Segment::clear_method() {
// @@protoc_insertion_point(one_of_clear_start:beesync.Segment)
  switch (method_case()) {
    case kDefault: {
      // No need to clear
      break;
    }
    case kS3: {
      if (GetArena() == nullptr) {
        delete method_.s3_;
      }
      break;
    }
    case METHOD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = METHOD_NOT_SET;
}


void Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:beesync.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_stop_) -
      reinterpret_cast<char*>(&offset_start_)) + sizeof(offset_stop_));
  clear_method();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Segment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 offset_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset_stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool default = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_default_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .beesync.Segment.S3 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_s3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Segment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beesync.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset_start = 1;
  if (this->offset_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_offset_start(), target);
  }

  // int64 offset_stop = 2;
  if (this->offset_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset_stop(), target);
  }

  // bool default = 3;
  if (_internal_has_default_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_default_(), target);
  }

  // .beesync.Segment.S3 s3 = 4;
  if (_internal_has_s3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::s3(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beesync.Segment)
  return target;
}

size_t Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beesync.Segment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset_start = 1;
  if (this->offset_start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset_start());
  }

  // int64 offset_stop = 2;
  if (this->offset_stop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset_stop());
  }

  switch (method_case()) {
    // bool default = 3;
    case kDefault: {
      total_size += 1 + 1;
      break;
    }
    // .beesync.Segment.S3 s3 = 4;
    case kS3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *method_.s3_);
      break;
    }
    case METHOD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Segment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beesync.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Segment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beesync.Segment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beesync.Segment)
    MergeFrom(*source);
  }
}

void Segment::MergeFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beesync.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset_start() != 0) {
    _internal_set_offset_start(from._internal_offset_start());
  }
  if (from.offset_stop() != 0) {
    _internal_set_offset_stop(from._internal_offset_stop());
  }
  switch (from.method_case()) {
    case kDefault: {
      _internal_set_default_(from._internal_default_());
      break;
    }
    case kS3: {
      _internal_mutable_s3()->::beesync::Segment_S3::MergeFrom(from._internal_s3());
      break;
    }
    case METHOD_NOT_SET: {
      break;
    }
  }
}

void Segment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beesync.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment::CopyFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beesync.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment::IsInitialized() const {
  return true;
}

void Segment::InternalSwap(Segment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Segment, offset_stop_)
      + sizeof(Segment::offset_stop_)
      - PROTOBUF_FIELD_OFFSET(Segment, offset_start_)>(
          reinterpret_cast<char*>(&offset_start_),
          reinterpret_cast<char*>(&other->offset_start_));
  swap(method_, other->method_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Segment::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace beesync
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::beesync::ConfigUpdateRequest* Arena::CreateMaybeMessage< ::beesync::ConfigUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beesync::ConfigUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::beesync::ConfigUpdateResponse* Arena::CreateMaybeMessage< ::beesync::ConfigUpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beesync::ConfigUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::beesync::SyncJob* Arena::CreateMaybeMessage< ::beesync::SyncJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beesync::SyncJob >(arena);
}
template<> PROTOBUF_NOINLINE ::beesync::WorkRequest* Arena::CreateMaybeMessage< ::beesync::WorkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beesync::WorkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::beesync::Segment_S3_CompletedParts* Arena::CreateMaybeMessage< ::beesync::Segment_S3_CompletedParts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beesync::Segment_S3_CompletedParts >(arena);
}
template<> PROTOBUF_NOINLINE ::beesync::Segment_S3* Arena::CreateMaybeMessage< ::beesync::Segment_S3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beesync::Segment_S3 >(arena);
}
template<> PROTOBUF_NOINLINE ::beesync::Segment* Arena::CreateMaybeMessage< ::beesync::Segment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beesync::Segment >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
