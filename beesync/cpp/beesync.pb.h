// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beesync.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_beesync_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_beesync_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "beegfs/beegfs.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_beesync_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_beesync_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_beesync_2eproto;
namespace beesync {
class ConfigUpdateRequest;
struct ConfigUpdateRequestDefaultTypeInternal;
extern ConfigUpdateRequestDefaultTypeInternal _ConfigUpdateRequest_default_instance_;
class ConfigUpdateResponse;
struct ConfigUpdateResponseDefaultTypeInternal;
extern ConfigUpdateResponseDefaultTypeInternal _ConfigUpdateResponse_default_instance_;
class RemoteStorageTarget;
struct RemoteStorageTargetDefaultTypeInternal;
extern RemoteStorageTargetDefaultTypeInternal _RemoteStorageTarget_default_instance_;
class RemoteStorageTarget_Azure;
struct RemoteStorageTarget_AzureDefaultTypeInternal;
extern RemoteStorageTarget_AzureDefaultTypeInternal _RemoteStorageTarget_Azure_default_instance_;
class RemoteStorageTarget_POSIX;
struct RemoteStorageTarget_POSIXDefaultTypeInternal;
extern RemoteStorageTarget_POSIXDefaultTypeInternal _RemoteStorageTarget_POSIX_default_instance_;
class RemoteStorageTarget_Policies;
struct RemoteStorageTarget_PoliciesDefaultTypeInternal;
extern RemoteStorageTarget_PoliciesDefaultTypeInternal _RemoteStorageTarget_Policies_default_instance_;
class RemoteStorageTarget_S3;
struct RemoteStorageTarget_S3DefaultTypeInternal;
extern RemoteStorageTarget_S3DefaultTypeInternal _RemoteStorageTarget_S3_default_instance_;
class Segment;
struct SegmentDefaultTypeInternal;
extern SegmentDefaultTypeInternal _Segment_default_instance_;
class Segment_S3;
struct Segment_S3DefaultTypeInternal;
extern Segment_S3DefaultTypeInternal _Segment_S3_default_instance_;
class Segment_S3_CompletedParts;
struct Segment_S3_CompletedPartsDefaultTypeInternal;
extern Segment_S3_CompletedPartsDefaultTypeInternal _Segment_S3_CompletedParts_default_instance_;
class SyncJob;
struct SyncJobDefaultTypeInternal;
extern SyncJobDefaultTypeInternal _SyncJob_default_instance_;
class SyncRequest;
struct SyncRequestDefaultTypeInternal;
extern SyncRequestDefaultTypeInternal _SyncRequest_default_instance_;
}  // namespace beesync
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace beesync {
enum ConfigUpdateResponse_Result : int {
  ConfigUpdateResponse_Result_UNKNOWN = 0,
  ConfigUpdateResponse_Result_SUCCESS = 1,
  ConfigUpdateResponse_Result_PARTIAL = 2,
  ConfigUpdateResponse_Result_FAILURE = 3,
  ConfigUpdateResponse_Result_ConfigUpdateResponse_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ConfigUpdateResponse_Result_ConfigUpdateResponse_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ConfigUpdateResponse_Result_IsValid(int value);
constexpr ConfigUpdateResponse_Result ConfigUpdateResponse_Result_Result_MIN = static_cast<ConfigUpdateResponse_Result>(0);
constexpr ConfigUpdateResponse_Result ConfigUpdateResponse_Result_Result_MAX = static_cast<ConfigUpdateResponse_Result>(3);
constexpr int ConfigUpdateResponse_Result_Result_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ConfigUpdateResponse_Result_descriptor();
template <typename T>
const std::string& ConfigUpdateResponse_Result_Name(T value) {
  static_assert(std::is_same<T, ConfigUpdateResponse_Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Result_Name().");
  return ConfigUpdateResponse_Result_Name(static_cast<ConfigUpdateResponse_Result>(value));
}
template <>
inline const std::string& ConfigUpdateResponse_Result_Name(ConfigUpdateResponse_Result value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ConfigUpdateResponse_Result_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ConfigUpdateResponse_Result_Parse(absl::string_view name, ConfigUpdateResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConfigUpdateResponse_Result>(
      ConfigUpdateResponse_Result_descriptor(), name, value);
}
enum SyncJob_Operation : int {
  SyncJob_Operation_UNKNOWN = 0,
  SyncJob_Operation_UPLOAD = 1,
  SyncJob_Operation_DOWNLOAD = 2,
  SyncJob_Operation_SyncJob_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SyncJob_Operation_SyncJob_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SyncJob_Operation_IsValid(int value);
constexpr SyncJob_Operation SyncJob_Operation_Operation_MIN = static_cast<SyncJob_Operation>(0);
constexpr SyncJob_Operation SyncJob_Operation_Operation_MAX = static_cast<SyncJob_Operation>(2);
constexpr int SyncJob_Operation_Operation_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
SyncJob_Operation_descriptor();
template <typename T>
const std::string& SyncJob_Operation_Name(T value) {
  static_assert(std::is_same<T, SyncJob_Operation>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Operation_Name().");
  return SyncJob_Operation_Name(static_cast<SyncJob_Operation>(value));
}
template <>
inline const std::string& SyncJob_Operation_Name(SyncJob_Operation value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SyncJob_Operation_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SyncJob_Operation_Parse(absl::string_view name, SyncJob_Operation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncJob_Operation>(
      SyncJob_Operation_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ConfigUpdateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beesync.ConfigUpdateRequest) */ {
 public:
  inline ConfigUpdateRequest() : ConfigUpdateRequest(nullptr) {}
  ~ConfigUpdateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigUpdateRequest(::google::protobuf::internal::ConstantInitialized);

  ConfigUpdateRequest(const ConfigUpdateRequest& from);
  ConfigUpdateRequest(ConfigUpdateRequest&& from) noexcept
    : ConfigUpdateRequest() {
    *this = ::std::move(from);
  }

  inline ConfigUpdateRequest& operator=(const ConfigUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigUpdateRequest& operator=(ConfigUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const ConfigUpdateRequest*>(
               &_ConfigUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConfigUpdateRequest& a, ConfigUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigUpdateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigUpdateRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigUpdateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigUpdateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ConfigUpdateRequest& from) {
    ConfigUpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigUpdateRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beesync.ConfigUpdateRequest";
  }
  protected:
  explicit ConfigUpdateRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRstsFieldNumber = 1,
  };
  // repeated .beesync.RemoteStorageTarget rsts = 1;
  int rsts_size() const;
  private:
  int _internal_rsts_size() const;

  public:
  void clear_rsts() ;
  ::beesync::RemoteStorageTarget* mutable_rsts(int index);
  ::google::protobuf::RepeatedPtrField< ::beesync::RemoteStorageTarget >*
      mutable_rsts();
  private:
  const ::google::protobuf::RepeatedPtrField<::beesync::RemoteStorageTarget>& _internal_rsts() const;
  ::google::protobuf::RepeatedPtrField<::beesync::RemoteStorageTarget>* _internal_mutable_rsts();
  public:
  const ::beesync::RemoteStorageTarget& rsts(int index) const;
  ::beesync::RemoteStorageTarget* add_rsts();
  const ::google::protobuf::RepeatedPtrField< ::beesync::RemoteStorageTarget >&
      rsts() const;
  // @@protoc_insertion_point(class_scope:beesync.ConfigUpdateRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::beesync::RemoteStorageTarget > rsts_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beesync_2eproto;
};// -------------------------------------------------------------------

class ConfigUpdateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beesync.ConfigUpdateResponse) */ {
 public:
  inline ConfigUpdateResponse() : ConfigUpdateResponse(nullptr) {}
  ~ConfigUpdateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigUpdateResponse(::google::protobuf::internal::ConstantInitialized);

  ConfigUpdateResponse(const ConfigUpdateResponse& from);
  ConfigUpdateResponse(ConfigUpdateResponse&& from) noexcept
    : ConfigUpdateResponse() {
    *this = ::std::move(from);
  }

  inline ConfigUpdateResponse& operator=(const ConfigUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigUpdateResponse& operator=(ConfigUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const ConfigUpdateResponse*>(
               &_ConfigUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConfigUpdateResponse& a, ConfigUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigUpdateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigUpdateResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigUpdateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigUpdateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ConfigUpdateResponse& from) {
    ConfigUpdateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigUpdateResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beesync.ConfigUpdateResponse";
  }
  protected:
  explicit ConfigUpdateResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Result = ConfigUpdateResponse_Result;
  static constexpr Result UNKNOWN = ConfigUpdateResponse_Result_UNKNOWN;
  static constexpr Result SUCCESS = ConfigUpdateResponse_Result_SUCCESS;
  static constexpr Result PARTIAL = ConfigUpdateResponse_Result_PARTIAL;
  static constexpr Result FAILURE = ConfigUpdateResponse_Result_FAILURE;
  static inline bool Result_IsValid(int value) {
    return ConfigUpdateResponse_Result_IsValid(value);
  }
  static constexpr Result Result_MIN = ConfigUpdateResponse_Result_Result_MIN;
  static constexpr Result Result_MAX = ConfigUpdateResponse_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE = ConfigUpdateResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Result_descriptor() {
    return ConfigUpdateResponse_Result_descriptor();
  }
  template <typename T>
  static inline const std::string& Result_Name(T value) {
    return ConfigUpdateResponse_Result_Name(value);
  }
  static inline bool Result_Parse(absl::string_view name, Result* value) {
    return ConfigUpdateResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .beesync.ConfigUpdateResponse.Result result = 1;
  void clear_result() ;
  ::beesync::ConfigUpdateResponse_Result result() const;
  void set_result(::beesync::ConfigUpdateResponse_Result value);

  private:
  ::beesync::ConfigUpdateResponse_Result _internal_result() const;
  void _internal_set_result(::beesync::ConfigUpdateResponse_Result value);

  public:
  // @@protoc_insertion_point(class_scope:beesync.ConfigUpdateResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 44, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr message_;
    int result_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beesync_2eproto;
};// -------------------------------------------------------------------

class SyncJob final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beesync.SyncJob) */ {
 public:
  inline SyncJob() : SyncJob(nullptr) {}
  ~SyncJob() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SyncJob(::google::protobuf::internal::ConstantInitialized);

  SyncJob(const SyncJob& from);
  SyncJob(SyncJob&& from) noexcept
    : SyncJob() {
    *this = ::std::move(from);
  }

  inline SyncJob& operator=(const SyncJob& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncJob& operator=(SyncJob&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncJob& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncJob* internal_default_instance() {
    return reinterpret_cast<const SyncJob*>(
               &_SyncJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SyncJob& a, SyncJob& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncJob* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncJob* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncJob* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncJob>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SyncJob& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SyncJob& from) {
    SyncJob::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncJob* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beesync.SyncJob";
  }
  protected:
  explicit SyncJob(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Operation = SyncJob_Operation;
  static constexpr Operation UNKNOWN = SyncJob_Operation_UNKNOWN;
  static constexpr Operation UPLOAD = SyncJob_Operation_UPLOAD;
  static constexpr Operation DOWNLOAD = SyncJob_Operation_DOWNLOAD;
  static inline bool Operation_IsValid(int value) {
    return SyncJob_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN = SyncJob_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX = SyncJob_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE = SyncJob_Operation_Operation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Operation_descriptor() {
    return SyncJob_Operation_descriptor();
  }
  template <typename T>
  static inline const std::string& Operation_Name(T value) {
    return SyncJob_Operation_Name(value);
  }
  static inline bool Operation_Parse(absl::string_view name, Operation* value) {
    return SyncJob_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteStorageTargetFieldNumber = 2,
    kOperationFieldNumber = 1,
  };
  // string remote_storage_target = 2;
  void clear_remote_storage_target() ;
  const std::string& remote_storage_target() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_remote_storage_target(Arg_&& arg, Args_... args);
  std::string* mutable_remote_storage_target();
  PROTOBUF_NODISCARD std::string* release_remote_storage_target();
  void set_allocated_remote_storage_target(std::string* ptr);

  private:
  const std::string& _internal_remote_storage_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_storage_target(
      const std::string& value);
  std::string* _internal_mutable_remote_storage_target();

  public:
  // .beesync.SyncJob.Operation operation = 1;
  void clear_operation() ;
  ::beesync::SyncJob_Operation operation() const;
  void set_operation(::beesync::SyncJob_Operation value);

  private:
  ::beesync::SyncJob_Operation _internal_operation() const;
  void _internal_set_operation(::beesync::SyncJob_Operation value);

  public:
  // @@protoc_insertion_point(class_scope:beesync.SyncJob)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 45, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr remote_storage_target_;
    int operation_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beesync_2eproto;
};// -------------------------------------------------------------------

class SyncRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beesync.SyncRequest) */ {
 public:
  inline SyncRequest() : SyncRequest(nullptr) {}
  ~SyncRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SyncRequest(::google::protobuf::internal::ConstantInitialized);

  SyncRequest(const SyncRequest& from);
  SyncRequest(SyncRequest&& from) noexcept
    : SyncRequest() {
    *this = ::std::move(from);
  }

  inline SyncRequest& operator=(const SyncRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncRequest& operator=(SyncRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncRequest* internal_default_instance() {
    return reinterpret_cast<const SyncRequest*>(
               &_SyncRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SyncRequest& a, SyncRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SyncRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SyncRequest& from) {
    SyncRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beesync.SyncRequest";
  }
  protected:
  explicit SyncRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kPathFieldNumber = 3,
    kMetadataFieldNumber = 2,
    kJobFieldNumber = 4,
    kSegmentFieldNumber = 5,
  };
  // string request_id = 1;
  void clear_request_id() ;
  const std::string& request_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* ptr);

  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
      const std::string& value);
  std::string* _internal_mutable_request_id();

  public:
  // string path = 3;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // .beegfs.JobMetadata metadata = 2;
  bool has_metadata() const;
  void clear_metadata() ;
  const ::beegfs::JobMetadata& metadata() const;
  PROTOBUF_NODISCARD ::beegfs::JobMetadata* release_metadata();
  ::beegfs::JobMetadata* mutable_metadata();
  void set_allocated_metadata(::beegfs::JobMetadata* value);
  void unsafe_arena_set_allocated_metadata(::beegfs::JobMetadata* value);
  ::beegfs::JobMetadata* unsafe_arena_release_metadata();

  private:
  const ::beegfs::JobMetadata& _internal_metadata() const;
  ::beegfs::JobMetadata* _internal_mutable_metadata();

  public:
  // .beesync.SyncJob job = 4;
  bool has_job() const;
  void clear_job() ;
  const ::beesync::SyncJob& job() const;
  PROTOBUF_NODISCARD ::beesync::SyncJob* release_job();
  ::beesync::SyncJob* mutable_job();
  void set_allocated_job(::beesync::SyncJob* value);
  void unsafe_arena_set_allocated_job(::beesync::SyncJob* value);
  ::beesync::SyncJob* unsafe_arena_release_job();

  private:
  const ::beesync::SyncJob& _internal_job() const;
  ::beesync::SyncJob* _internal_mutable_job();

  public:
  // .beesync.Segment segment = 5;
  bool has_segment() const;
  void clear_segment() ;
  const ::beesync::Segment& segment() const;
  PROTOBUF_NODISCARD ::beesync::Segment* release_segment();
  ::beesync::Segment* mutable_segment();
  void set_allocated_segment(::beesync::Segment* value);
  void unsafe_arena_set_allocated_segment(::beesync::Segment* value);
  ::beesync::Segment* unsafe_arena_release_segment();

  private:
  const ::beesync::Segment& _internal_segment() const;
  ::beesync::Segment* _internal_mutable_segment();

  public:
  // @@protoc_insertion_point(class_scope:beesync.SyncRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 3, 42, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr request_id_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::beegfs::JobMetadata* metadata_;
    ::beesync::SyncJob* job_;
    ::beesync::Segment* segment_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beesync_2eproto;
};// -------------------------------------------------------------------

class Segment_S3_CompletedParts final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beesync.Segment.S3.CompletedParts) */ {
 public:
  inline Segment_S3_CompletedParts() : Segment_S3_CompletedParts(nullptr) {}
  ~Segment_S3_CompletedParts() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Segment_S3_CompletedParts(::google::protobuf::internal::ConstantInitialized);

  Segment_S3_CompletedParts(const Segment_S3_CompletedParts& from);
  Segment_S3_CompletedParts(Segment_S3_CompletedParts&& from) noexcept
    : Segment_S3_CompletedParts() {
    *this = ::std::move(from);
  }

  inline Segment_S3_CompletedParts& operator=(const Segment_S3_CompletedParts& from) {
    CopyFrom(from);
    return *this;
  }
  inline Segment_S3_CompletedParts& operator=(Segment_S3_CompletedParts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Segment_S3_CompletedParts& default_instance() {
    return *internal_default_instance();
  }
  static inline const Segment_S3_CompletedParts* internal_default_instance() {
    return reinterpret_cast<const Segment_S3_CompletedParts*>(
               &_Segment_S3_CompletedParts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Segment_S3_CompletedParts& a, Segment_S3_CompletedParts& b) {
    a.Swap(&b);
  }
  inline void Swap(Segment_S3_CompletedParts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Segment_S3_CompletedParts* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Segment_S3_CompletedParts* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Segment_S3_CompletedParts>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Segment_S3_CompletedParts& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Segment_S3_CompletedParts& from) {
    Segment_S3_CompletedParts::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Segment_S3_CompletedParts* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beesync.Segment.S3.CompletedParts";
  }
  protected:
  explicit Segment_S3_CompletedParts(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityTagFieldNumber = 2,
    kChecksumFieldNumber = 3,
    kPartNumberFieldNumber = 1,
  };
  // string entity_tag = 2;
  void clear_entity_tag() ;
  const std::string& entity_tag() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_entity_tag(Arg_&& arg, Args_... args);
  std::string* mutable_entity_tag();
  PROTOBUF_NODISCARD std::string* release_entity_tag();
  void set_allocated_entity_tag(std::string* ptr);

  private:
  const std::string& _internal_entity_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_tag(
      const std::string& value);
  std::string* _internal_mutable_entity_tag();

  public:
  // string checksum = 3;
  void clear_checksum() ;
  const std::string& checksum() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_checksum(Arg_&& arg, Args_... args);
  std::string* mutable_checksum();
  PROTOBUF_NODISCARD std::string* release_checksum();
  void set_allocated_checksum(std::string* ptr);

  private:
  const std::string& _internal_checksum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_checksum(
      const std::string& value);
  std::string* _internal_mutable_checksum();

  public:
  // int32 part_number = 1;
  void clear_part_number() ;
  ::int32_t part_number() const;
  void set_part_number(::int32_t value);

  private:
  ::int32_t _internal_part_number() const;
  void _internal_set_part_number(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:beesync.Segment.S3.CompletedParts)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 60, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr entity_tag_;
    ::google::protobuf::internal::ArenaStringPtr checksum_;
    ::int32_t part_number_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beesync_2eproto;
};// -------------------------------------------------------------------

class Segment_S3 final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beesync.Segment.S3) */ {
 public:
  inline Segment_S3() : Segment_S3(nullptr) {}
  ~Segment_S3() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Segment_S3(::google::protobuf::internal::ConstantInitialized);

  Segment_S3(const Segment_S3& from);
  Segment_S3(Segment_S3&& from) noexcept
    : Segment_S3() {
    *this = ::std::move(from);
  }

  inline Segment_S3& operator=(const Segment_S3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Segment_S3& operator=(Segment_S3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Segment_S3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Segment_S3* internal_default_instance() {
    return reinterpret_cast<const Segment_S3*>(
               &_Segment_S3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Segment_S3& a, Segment_S3& b) {
    a.Swap(&b);
  }
  inline void Swap(Segment_S3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Segment_S3* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Segment_S3* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Segment_S3>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Segment_S3& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Segment_S3& from) {
    Segment_S3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Segment_S3* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beesync.Segment.S3";
  }
  protected:
  explicit Segment_S3(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Segment_S3_CompletedParts CompletedParts;

  // accessors -------------------------------------------------------

  enum : int {
    kCompletedPartsFieldNumber = 4,
    kMultipartIdFieldNumber = 1,
    kPartsStartFieldNumber = 2,
    kPartsStopFieldNumber = 3,
  };
  // repeated .beesync.Segment.S3.CompletedParts completed_parts = 4;
  int completed_parts_size() const;
  private:
  int _internal_completed_parts_size() const;

  public:
  void clear_completed_parts() ;
  ::beesync::Segment_S3_CompletedParts* mutable_completed_parts(int index);
  ::google::protobuf::RepeatedPtrField< ::beesync::Segment_S3_CompletedParts >*
      mutable_completed_parts();
  private:
  const ::google::protobuf::RepeatedPtrField<::beesync::Segment_S3_CompletedParts>& _internal_completed_parts() const;
  ::google::protobuf::RepeatedPtrField<::beesync::Segment_S3_CompletedParts>* _internal_mutable_completed_parts();
  public:
  const ::beesync::Segment_S3_CompletedParts& completed_parts(int index) const;
  ::beesync::Segment_S3_CompletedParts* add_completed_parts();
  const ::google::protobuf::RepeatedPtrField< ::beesync::Segment_S3_CompletedParts >&
      completed_parts() const;
  // string multipart_id = 1;
  void clear_multipart_id() ;
  const std::string& multipart_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_multipart_id(Arg_&& arg, Args_... args);
  std::string* mutable_multipart_id();
  PROTOBUF_NODISCARD std::string* release_multipart_id();
  void set_allocated_multipart_id(std::string* ptr);

  private:
  const std::string& _internal_multipart_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_multipart_id(
      const std::string& value);
  std::string* _internal_mutable_multipart_id();

  public:
  // int32 parts_start = 2;
  void clear_parts_start() ;
  ::int32_t parts_start() const;
  void set_parts_start(::int32_t value);

  private:
  ::int32_t _internal_parts_start() const;
  void _internal_set_parts_start(::int32_t value);

  public:
  // int32 parts_stop = 3;
  void clear_parts_stop() ;
  ::int32_t parts_stop() const;
  void set_parts_stop(::int32_t value);

  private:
  ::int32_t _internal_parts_stop() const;
  void _internal_set_parts_stop(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:beesync.Segment.S3)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 39, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::beesync::Segment_S3_CompletedParts > completed_parts_;
    ::google::protobuf::internal::ArenaStringPtr multipart_id_;
    ::int32_t parts_start_;
    ::int32_t parts_stop_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beesync_2eproto;
};// -------------------------------------------------------------------

class Segment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beesync.Segment) */ {
 public:
  inline Segment() : Segment(nullptr) {}
  ~Segment() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Segment(::google::protobuf::internal::ConstantInitialized);

  Segment(const Segment& from);
  Segment(Segment&& from) noexcept
    : Segment() {
    *this = ::std::move(from);
  }

  inline Segment& operator=(const Segment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Segment& operator=(Segment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Segment& default_instance() {
    return *internal_default_instance();
  }
  enum MethodCase {
    kDefault = 3,
    kS3 = 4,
    METHOD_NOT_SET = 0,
  };

  static inline const Segment* internal_default_instance() {
    return reinterpret_cast<const Segment*>(
               &_Segment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Segment& a, Segment& b) {
    a.Swap(&b);
  }
  inline void Swap(Segment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Segment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Segment* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Segment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Segment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Segment& from) {
    Segment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Segment* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beesync.Segment";
  }
  protected:
  explicit Segment(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Segment_S3 S3;

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetStartFieldNumber = 1,
    kOffsetStopFieldNumber = 2,
    kDefaultFieldNumber = 3,
    kS3FieldNumber = 4,
  };
  // int64 offset_start = 1;
  void clear_offset_start() ;
  ::int64_t offset_start() const;
  void set_offset_start(::int64_t value);

  private:
  ::int64_t _internal_offset_start() const;
  void _internal_set_offset_start(::int64_t value);

  public:
  // int64 offset_stop = 2;
  void clear_offset_stop() ;
  ::int64_t offset_stop() const;
  void set_offset_stop(::int64_t value);

  private:
  ::int64_t _internal_offset_stop() const;
  void _internal_set_offset_stop(::int64_t value);

  public:
  // bool default = 3;
  bool has_default_() const;
  void clear_default_() ;
  bool default_() const;
  void set_default_(bool value);

  private:
  bool _internal_default_() const;
  void _internal_set_default_(bool value);

  public:
  // .beesync.Segment.S3 s3 = 4;
  bool has_s3() const;
  private:
  bool _internal_has_s3() const;

  public:
  void clear_s3() ;
  const ::beesync::Segment_S3& s3() const;
  PROTOBUF_NODISCARD ::beesync::Segment_S3* release_s3();
  ::beesync::Segment_S3* mutable_s3();
  void set_allocated_s3(::beesync::Segment_S3* value);
  void unsafe_arena_set_allocated_s3(::beesync::Segment_S3* value);
  ::beesync::Segment_S3* unsafe_arena_release_s3();

  private:
  const ::beesync::Segment_S3& _internal_s3() const;
  ::beesync::Segment_S3* _internal_mutable_s3();

  public:
  void clear_method();
  MethodCase method_case() const;
  // @@protoc_insertion_point(class_scope:beesync.Segment)
 private:
  class _Internal;
  void set_has_default_();
  void set_has_s3();

  inline bool has_method() const;
  inline void clear_has_method();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 4, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t offset_start_;
    ::int64_t offset_stop_;
    union MethodUnion {
      constexpr MethodUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      bool default__;
      ::beesync::Segment_S3* s3_;
    } method_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beesync_2eproto;
};// -------------------------------------------------------------------

class RemoteStorageTarget_Policies final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beesync.RemoteStorageTarget.Policies) */ {
 public:
  inline RemoteStorageTarget_Policies() : RemoteStorageTarget_Policies(nullptr) {}
  ~RemoteStorageTarget_Policies() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RemoteStorageTarget_Policies(::google::protobuf::internal::ConstantInitialized);

  RemoteStorageTarget_Policies(const RemoteStorageTarget_Policies& from);
  RemoteStorageTarget_Policies(RemoteStorageTarget_Policies&& from) noexcept
    : RemoteStorageTarget_Policies() {
    *this = ::std::move(from);
  }

  inline RemoteStorageTarget_Policies& operator=(const RemoteStorageTarget_Policies& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteStorageTarget_Policies& operator=(RemoteStorageTarget_Policies&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteStorageTarget_Policies& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteStorageTarget_Policies* internal_default_instance() {
    return reinterpret_cast<const RemoteStorageTarget_Policies*>(
               &_RemoteStorageTarget_Policies_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RemoteStorageTarget_Policies& a, RemoteStorageTarget_Policies& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteStorageTarget_Policies* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteStorageTarget_Policies* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteStorageTarget_Policies* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteStorageTarget_Policies>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoteStorageTarget_Policies& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RemoteStorageTarget_Policies& from) {
    RemoteStorageTarget_Policies::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteStorageTarget_Policies* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beesync.RemoteStorageTarget.Policies";
  }
  protected:
  explicit RemoteStorageTarget_Policies(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalFlockFieldNumber = 1,
    kRemoteFlockFieldNumber = 2,
    kKeepDirStructureFieldNumber = 3,
    kKeepBeegfsMetadataFieldNumber = 4,
    kAutostartMaxSizeFieldNumber = 5,
  };
  // bool local_flock = 1;
  void clear_local_flock() ;
  bool local_flock() const;
  void set_local_flock(bool value);

  private:
  bool _internal_local_flock() const;
  void _internal_set_local_flock(bool value);

  public:
  // bool remote_flock = 2;
  void clear_remote_flock() ;
  bool remote_flock() const;
  void set_remote_flock(bool value);

  private:
  bool _internal_remote_flock() const;
  void _internal_set_remote_flock(bool value);

  public:
  // bool keep_dir_structure = 3;
  void clear_keep_dir_structure() ;
  bool keep_dir_structure() const;
  void set_keep_dir_structure(bool value);

  private:
  bool _internal_keep_dir_structure() const;
  void _internal_set_keep_dir_structure(bool value);

  public:
  // bool keep_beegfs_metadata = 4;
  void clear_keep_beegfs_metadata() ;
  bool keep_beegfs_metadata() const;
  void set_keep_beegfs_metadata(bool value);

  private:
  bool _internal_keep_beegfs_metadata() const;
  void _internal_set_keep_beegfs_metadata(bool value);

  public:
  // uint32 autostart_max_size = 5;
  void clear_autostart_max_size() ;
  ::uint32_t autostart_max_size() const;
  void set_autostart_max_size(::uint32_t value);

  private:
  ::uint32_t _internal_autostart_max_size() const;
  void _internal_set_autostart_max_size(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:beesync.RemoteStorageTarget.Policies)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool local_flock_;
    bool remote_flock_;
    bool keep_dir_structure_;
    bool keep_beegfs_metadata_;
    ::uint32_t autostart_max_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beesync_2eproto;
};// -------------------------------------------------------------------

class RemoteStorageTarget_S3 final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beesync.RemoteStorageTarget.S3) */ {
 public:
  inline RemoteStorageTarget_S3() : RemoteStorageTarget_S3(nullptr) {}
  ~RemoteStorageTarget_S3() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RemoteStorageTarget_S3(::google::protobuf::internal::ConstantInitialized);

  RemoteStorageTarget_S3(const RemoteStorageTarget_S3& from);
  RemoteStorageTarget_S3(RemoteStorageTarget_S3&& from) noexcept
    : RemoteStorageTarget_S3() {
    *this = ::std::move(from);
  }

  inline RemoteStorageTarget_S3& operator=(const RemoteStorageTarget_S3& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteStorageTarget_S3& operator=(RemoteStorageTarget_S3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteStorageTarget_S3& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteStorageTarget_S3* internal_default_instance() {
    return reinterpret_cast<const RemoteStorageTarget_S3*>(
               &_RemoteStorageTarget_S3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RemoteStorageTarget_S3& a, RemoteStorageTarget_S3& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteStorageTarget_S3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteStorageTarget_S3* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteStorageTarget_S3* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteStorageTarget_S3>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoteStorageTarget_S3& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RemoteStorageTarget_S3& from) {
    RemoteStorageTarget_S3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteStorageTarget_S3* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beesync.RemoteStorageTarget.S3";
  }
  protected:
  explicit RemoteStorageTarget_S3(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kRegionFieldNumber = 2,
    kEndpointFieldNumber = 3,
    kAccessKeyFieldNumber = 4,
    kSecretKeyFieldNumber = 5,
  };
  // string bucket = 1;
  void clear_bucket() ;
  const std::string& bucket() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bucket(Arg_&& arg, Args_... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* ptr);

  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(
      const std::string& value);
  std::string* _internal_mutable_bucket();

  public:
  // string region = 2;
  void clear_region() ;
  const std::string& region() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_region(Arg_&& arg, Args_... args);
  std::string* mutable_region();
  PROTOBUF_NODISCARD std::string* release_region();
  void set_allocated_region(std::string* ptr);

  private:
  const std::string& _internal_region() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region(
      const std::string& value);
  std::string* _internal_mutable_region();

  public:
  // string endpoint = 3;
  void clear_endpoint() ;
  const std::string& endpoint() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_endpoint(Arg_&& arg, Args_... args);
  std::string* mutable_endpoint();
  PROTOBUF_NODISCARD std::string* release_endpoint();
  void set_allocated_endpoint(std::string* ptr);

  private:
  const std::string& _internal_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_endpoint(
      const std::string& value);
  std::string* _internal_mutable_endpoint();

  public:
  // string access_key = 4;
  void clear_access_key() ;
  const std::string& access_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_access_key(Arg_&& arg, Args_... args);
  std::string* mutable_access_key();
  PROTOBUF_NODISCARD std::string* release_access_key();
  void set_allocated_access_key(std::string* ptr);

  private:
  const std::string& _internal_access_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_key(
      const std::string& value);
  std::string* _internal_mutable_access_key();

  public:
  // string secret_key = 5;
  void clear_secret_key() ;
  const std::string& secret_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_secret_key(Arg_&& arg, Args_... args);
  std::string* mutable_secret_key();
  PROTOBUF_NODISCARD std::string* release_secret_key();
  void set_allocated_secret_key(std::string* ptr);

  private:
  const std::string& _internal_secret_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_key(
      const std::string& value);
  std::string* _internal_mutable_secret_key();

  public:
  // @@protoc_insertion_point(class_scope:beesync.RemoteStorageTarget.S3)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 0, 79, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr bucket_;
    ::google::protobuf::internal::ArenaStringPtr region_;
    ::google::protobuf::internal::ArenaStringPtr endpoint_;
    ::google::protobuf::internal::ArenaStringPtr access_key_;
    ::google::protobuf::internal::ArenaStringPtr secret_key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beesync_2eproto;
};// -------------------------------------------------------------------

class RemoteStorageTarget_Azure final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beesync.RemoteStorageTarget.Azure) */ {
 public:
  inline RemoteStorageTarget_Azure() : RemoteStorageTarget_Azure(nullptr) {}
  ~RemoteStorageTarget_Azure() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RemoteStorageTarget_Azure(::google::protobuf::internal::ConstantInitialized);

  RemoteStorageTarget_Azure(const RemoteStorageTarget_Azure& from);
  RemoteStorageTarget_Azure(RemoteStorageTarget_Azure&& from) noexcept
    : RemoteStorageTarget_Azure() {
    *this = ::std::move(from);
  }

  inline RemoteStorageTarget_Azure& operator=(const RemoteStorageTarget_Azure& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteStorageTarget_Azure& operator=(RemoteStorageTarget_Azure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteStorageTarget_Azure& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteStorageTarget_Azure* internal_default_instance() {
    return reinterpret_cast<const RemoteStorageTarget_Azure*>(
               &_RemoteStorageTarget_Azure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RemoteStorageTarget_Azure& a, RemoteStorageTarget_Azure& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteStorageTarget_Azure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteStorageTarget_Azure* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteStorageTarget_Azure* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteStorageTarget_Azure>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoteStorageTarget_Azure& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RemoteStorageTarget_Azure& from) {
    RemoteStorageTarget_Azure::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteStorageTarget_Azure* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beesync.RemoteStorageTarget.Azure";
  }
  protected:
  explicit RemoteStorageTarget_Azure(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kS3FieldNumber = 1,
  };
  // string account = 2;
  void clear_account() ;
  const std::string& account() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account(Arg_&& arg, Args_... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* ptr);

  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(
      const std::string& value);
  std::string* _internal_mutable_account();

  public:
  // .beesync.RemoteStorageTarget.S3 s3 = 1;
  bool has_s3() const;
  void clear_s3() ;
  const ::beesync::RemoteStorageTarget_S3& s3() const;
  PROTOBUF_NODISCARD ::beesync::RemoteStorageTarget_S3* release_s3();
  ::beesync::RemoteStorageTarget_S3* mutable_s3();
  void set_allocated_s3(::beesync::RemoteStorageTarget_S3* value);
  void unsafe_arena_set_allocated_s3(::beesync::RemoteStorageTarget_S3* value);
  ::beesync::RemoteStorageTarget_S3* unsafe_arena_release_s3();

  private:
  const ::beesync::RemoteStorageTarget_S3& _internal_s3() const;
  ::beesync::RemoteStorageTarget_S3* _internal_mutable_s3();

  public:
  // @@protoc_insertion_point(class_scope:beesync.RemoteStorageTarget.Azure)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 49, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr account_;
    ::beesync::RemoteStorageTarget_S3* s3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beesync_2eproto;
};// -------------------------------------------------------------------

class RemoteStorageTarget_POSIX final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beesync.RemoteStorageTarget.POSIX) */ {
 public:
  inline RemoteStorageTarget_POSIX() : RemoteStorageTarget_POSIX(nullptr) {}
  ~RemoteStorageTarget_POSIX() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RemoteStorageTarget_POSIX(::google::protobuf::internal::ConstantInitialized);

  RemoteStorageTarget_POSIX(const RemoteStorageTarget_POSIX& from);
  RemoteStorageTarget_POSIX(RemoteStorageTarget_POSIX&& from) noexcept
    : RemoteStorageTarget_POSIX() {
    *this = ::std::move(from);
  }

  inline RemoteStorageTarget_POSIX& operator=(const RemoteStorageTarget_POSIX& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteStorageTarget_POSIX& operator=(RemoteStorageTarget_POSIX&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteStorageTarget_POSIX& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteStorageTarget_POSIX* internal_default_instance() {
    return reinterpret_cast<const RemoteStorageTarget_POSIX*>(
               &_RemoteStorageTarget_POSIX_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RemoteStorageTarget_POSIX& a, RemoteStorageTarget_POSIX& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteStorageTarget_POSIX* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteStorageTarget_POSIX* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteStorageTarget_POSIX* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteStorageTarget_POSIX>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoteStorageTarget_POSIX& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RemoteStorageTarget_POSIX& from) {
    RemoteStorageTarget_POSIX::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteStorageTarget_POSIX* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beesync.RemoteStorageTarget.POSIX";
  }
  protected:
  explicit RemoteStorageTarget_POSIX(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // @@protoc_insertion_point(class_scope:beesync.RemoteStorageTarget.POSIX)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 46, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr path_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beesync_2eproto;
};// -------------------------------------------------------------------

class RemoteStorageTarget final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:beesync.RemoteStorageTarget) */ {
 public:
  inline RemoteStorageTarget() : RemoteStorageTarget(nullptr) {}
  ~RemoteStorageTarget() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RemoteStorageTarget(::google::protobuf::internal::ConstantInitialized);

  RemoteStorageTarget(const RemoteStorageTarget& from);
  RemoteStorageTarget(RemoteStorageTarget&& from) noexcept
    : RemoteStorageTarget() {
    *this = ::std::move(from);
  }

  inline RemoteStorageTarget& operator=(const RemoteStorageTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteStorageTarget& operator=(RemoteStorageTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteStorageTarget& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kS3 = 4,
    kPosix = 5,
    kAzure = 6,
    TYPE_NOT_SET = 0,
  };

  static inline const RemoteStorageTarget* internal_default_instance() {
    return reinterpret_cast<const RemoteStorageTarget*>(
               &_RemoteStorageTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RemoteStorageTarget& a, RemoteStorageTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteStorageTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteStorageTarget* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteStorageTarget* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteStorageTarget>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoteStorageTarget& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RemoteStorageTarget& from) {
    RemoteStorageTarget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteStorageTarget* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "beesync.RemoteStorageTarget";
  }
  protected:
  explicit RemoteStorageTarget(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RemoteStorageTarget_Policies Policies;
  typedef RemoteStorageTarget_S3 S3;
  typedef RemoteStorageTarget_Azure Azure;
  typedef RemoteStorageTarget_POSIX POSIX;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kPoliciesFieldNumber = 3,
    kS3FieldNumber = 4,
    kPosixFieldNumber = 5,
    kAzureFieldNumber = 6,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .beesync.RemoteStorageTarget.Policies policies = 3;
  bool has_policies() const;
  void clear_policies() ;
  const ::beesync::RemoteStorageTarget_Policies& policies() const;
  PROTOBUF_NODISCARD ::beesync::RemoteStorageTarget_Policies* release_policies();
  ::beesync::RemoteStorageTarget_Policies* mutable_policies();
  void set_allocated_policies(::beesync::RemoteStorageTarget_Policies* value);
  void unsafe_arena_set_allocated_policies(::beesync::RemoteStorageTarget_Policies* value);
  ::beesync::RemoteStorageTarget_Policies* unsafe_arena_release_policies();

  private:
  const ::beesync::RemoteStorageTarget_Policies& _internal_policies() const;
  ::beesync::RemoteStorageTarget_Policies* _internal_mutable_policies();

  public:
  // .beesync.RemoteStorageTarget.S3 s3 = 4;
  bool has_s3() const;
  private:
  bool _internal_has_s3() const;

  public:
  void clear_s3() ;
  const ::beesync::RemoteStorageTarget_S3& s3() const;
  PROTOBUF_NODISCARD ::beesync::RemoteStorageTarget_S3* release_s3();
  ::beesync::RemoteStorageTarget_S3* mutable_s3();
  void set_allocated_s3(::beesync::RemoteStorageTarget_S3* value);
  void unsafe_arena_set_allocated_s3(::beesync::RemoteStorageTarget_S3* value);
  ::beesync::RemoteStorageTarget_S3* unsafe_arena_release_s3();

  private:
  const ::beesync::RemoteStorageTarget_S3& _internal_s3() const;
  ::beesync::RemoteStorageTarget_S3* _internal_mutable_s3();

  public:
  // .beesync.RemoteStorageTarget.POSIX posix = 5;
  bool has_posix() const;
  private:
  bool _internal_has_posix() const;

  public:
  void clear_posix() ;
  const ::beesync::RemoteStorageTarget_POSIX& posix() const;
  PROTOBUF_NODISCARD ::beesync::RemoteStorageTarget_POSIX* release_posix();
  ::beesync::RemoteStorageTarget_POSIX* mutable_posix();
  void set_allocated_posix(::beesync::RemoteStorageTarget_POSIX* value);
  void unsafe_arena_set_allocated_posix(::beesync::RemoteStorageTarget_POSIX* value);
  ::beesync::RemoteStorageTarget_POSIX* unsafe_arena_release_posix();

  private:
  const ::beesync::RemoteStorageTarget_POSIX& _internal_posix() const;
  ::beesync::RemoteStorageTarget_POSIX* _internal_mutable_posix();

  public:
  // .beesync.RemoteStorageTarget.Azure azure = 6;
  bool has_azure() const;
  private:
  bool _internal_has_azure() const;

  public:
  void clear_azure() ;
  const ::beesync::RemoteStorageTarget_Azure& azure() const;
  PROTOBUF_NODISCARD ::beesync::RemoteStorageTarget_Azure* release_azure();
  ::beesync::RemoteStorageTarget_Azure* mutable_azure();
  void set_allocated_azure(::beesync::RemoteStorageTarget_Azure* value);
  void unsafe_arena_set_allocated_azure(::beesync::RemoteStorageTarget_Azure* value);
  ::beesync::RemoteStorageTarget_Azure* unsafe_arena_release_azure();

  private:
  const ::beesync::RemoteStorageTarget_Azure& _internal_azure() const;
  ::beesync::RemoteStorageTarget_Azure* _internal_mutable_azure();

  public:
  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:beesync.RemoteStorageTarget)
 private:
  class _Internal;
  void set_has_s3();
  void set_has_posix();
  void set_has_azure();

  inline bool has_type() const;
  inline void clear_has_type();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 6, 4, 42, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::beesync::RemoteStorageTarget_Policies* policies_;
    union TypeUnion {
      constexpr TypeUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::beesync::RemoteStorageTarget_S3* s3_;
      ::beesync::RemoteStorageTarget_POSIX* posix_;
      ::beesync::RemoteStorageTarget_Azure* azure_;
    } type_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_beesync_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ConfigUpdateRequest

// repeated .beesync.RemoteStorageTarget rsts = 1;
inline int ConfigUpdateRequest::_internal_rsts_size() const {
  return _internal_rsts().size();
}
inline int ConfigUpdateRequest::rsts_size() const {
  return _internal_rsts_size();
}
inline void ConfigUpdateRequest::clear_rsts() {
  _internal_mutable_rsts()->Clear();
}
inline ::beesync::RemoteStorageTarget* ConfigUpdateRequest::mutable_rsts(int index) {
  // @@protoc_insertion_point(field_mutable:beesync.ConfigUpdateRequest.rsts)
  return _internal_mutable_rsts()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::beesync::RemoteStorageTarget >*
ConfigUpdateRequest::mutable_rsts() {
  // @@protoc_insertion_point(field_mutable_list:beesync.ConfigUpdateRequest.rsts)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_rsts();
}
inline const ::beesync::RemoteStorageTarget& ConfigUpdateRequest::rsts(int index) const {
  // @@protoc_insertion_point(field_get:beesync.ConfigUpdateRequest.rsts)
    return _internal_rsts().Get(index);
}
inline ::beesync::RemoteStorageTarget* ConfigUpdateRequest::add_rsts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::beesync::RemoteStorageTarget* _add = _internal_mutable_rsts()->Add();
  // @@protoc_insertion_point(field_add:beesync.ConfigUpdateRequest.rsts)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::beesync::RemoteStorageTarget >&
ConfigUpdateRequest::rsts() const {
  // @@protoc_insertion_point(field_list:beesync.ConfigUpdateRequest.rsts)
  return _internal_rsts();
}
inline const ::google::protobuf::RepeatedPtrField<::beesync::RemoteStorageTarget>&
ConfigUpdateRequest::_internal_rsts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rsts_;
}
inline ::google::protobuf::RepeatedPtrField<::beesync::RemoteStorageTarget>*
ConfigUpdateRequest::_internal_mutable_rsts() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.rsts_;
}

// -------------------------------------------------------------------

// ConfigUpdateResponse

// .beesync.ConfigUpdateResponse.Result result = 1;
inline void ConfigUpdateResponse::clear_result() {
  _impl_.result_ = 0;
}
inline ::beesync::ConfigUpdateResponse_Result ConfigUpdateResponse::result() const {
  // @@protoc_insertion_point(field_get:beesync.ConfigUpdateResponse.result)
  return _internal_result();
}
inline void ConfigUpdateResponse::set_result(::beesync::ConfigUpdateResponse_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:beesync.ConfigUpdateResponse.result)
}
inline ::beesync::ConfigUpdateResponse_Result ConfigUpdateResponse::_internal_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::beesync::ConfigUpdateResponse_Result>(_impl_.result_);
}
inline void ConfigUpdateResponse::_internal_set_result(::beesync::ConfigUpdateResponse_Result value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.result_ = value;
}

// string message = 2;
inline void ConfigUpdateResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ConfigUpdateResponse::message() const {
  // @@protoc_insertion_point(field_get:beesync.ConfigUpdateResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConfigUpdateResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beesync.ConfigUpdateResponse.message)
}
inline std::string* ConfigUpdateResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:beesync.ConfigUpdateResponse.message)
  return _s;
}
inline const std::string& ConfigUpdateResponse::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void ConfigUpdateResponse::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigUpdateResponse::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* ConfigUpdateResponse::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.ConfigUpdateResponse.message)
  return _impl_.message_.Release();
}
inline void ConfigUpdateResponse::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beesync.ConfigUpdateResponse.message)
}

// -------------------------------------------------------------------

// SyncJob

// .beesync.SyncJob.Operation operation = 1;
inline void SyncJob::clear_operation() {
  _impl_.operation_ = 0;
}
inline ::beesync::SyncJob_Operation SyncJob::operation() const {
  // @@protoc_insertion_point(field_get:beesync.SyncJob.operation)
  return _internal_operation();
}
inline void SyncJob::set_operation(::beesync::SyncJob_Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:beesync.SyncJob.operation)
}
inline ::beesync::SyncJob_Operation SyncJob::_internal_operation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::beesync::SyncJob_Operation>(_impl_.operation_);
}
inline void SyncJob::_internal_set_operation(::beesync::SyncJob_Operation value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.operation_ = value;
}

// string remote_storage_target = 2;
inline void SyncJob::clear_remote_storage_target() {
  _impl_.remote_storage_target_.ClearToEmpty();
}
inline const std::string& SyncJob::remote_storage_target() const {
  // @@protoc_insertion_point(field_get:beesync.SyncJob.remote_storage_target)
  return _internal_remote_storage_target();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SyncJob::set_remote_storage_target(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remote_storage_target_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beesync.SyncJob.remote_storage_target)
}
inline std::string* SyncJob::mutable_remote_storage_target() {
  std::string* _s = _internal_mutable_remote_storage_target();
  // @@protoc_insertion_point(field_mutable:beesync.SyncJob.remote_storage_target)
  return _s;
}
inline const std::string& SyncJob::_internal_remote_storage_target() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.remote_storage_target_.Get();
}
inline void SyncJob::_internal_set_remote_storage_target(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remote_storage_target_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncJob::_internal_mutable_remote_storage_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.remote_storage_target_.Mutable( GetArenaForAllocation());
}
inline std::string* SyncJob::release_remote_storage_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.SyncJob.remote_storage_target)
  return _impl_.remote_storage_target_.Release();
}
inline void SyncJob::set_allocated_remote_storage_target(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.remote_storage_target_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.remote_storage_target_.IsDefault()) {
          _impl_.remote_storage_target_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beesync.SyncJob.remote_storage_target)
}

// -------------------------------------------------------------------

// SyncRequest

// string request_id = 1;
inline void SyncRequest::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& SyncRequest::request_id() const {
  // @@protoc_insertion_point(field_get:beesync.SyncRequest.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SyncRequest::set_request_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beesync.SyncRequest.request_id)
}
inline std::string* SyncRequest::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:beesync.SyncRequest.request_id)
  return _s;
}
inline const std::string& SyncRequest::_internal_request_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.request_id_.Get();
}
inline void SyncRequest::_internal_set_request_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncRequest::_internal_mutable_request_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.request_id_.Mutable( GetArenaForAllocation());
}
inline std::string* SyncRequest::release_request_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.SyncRequest.request_id)
  return _impl_.request_id_.Release();
}
inline void SyncRequest::set_allocated_request_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.request_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.request_id_.IsDefault()) {
          _impl_.request_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beesync.SyncRequest.request_id)
}

// .beegfs.JobMetadata metadata = 2;
inline bool SyncRequest::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline const ::beegfs::JobMetadata& SyncRequest::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::beegfs::JobMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::beegfs::JobMetadata&>(::beegfs::_JobMetadata_default_instance_);
}
inline const ::beegfs::JobMetadata& SyncRequest::metadata() const {
  // @@protoc_insertion_point(field_get:beesync.SyncRequest.metadata)
  return _internal_metadata();
}
inline void SyncRequest::unsafe_arena_set_allocated_metadata(::beegfs::JobMetadata* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = reinterpret_cast<::beegfs::JobMetadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.SyncRequest.metadata)
}
inline ::beegfs::JobMetadata* SyncRequest::release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::beegfs::JobMetadata* released = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::beegfs::JobMetadata* SyncRequest::unsafe_arena_release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.SyncRequest.metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::beegfs::JobMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::beegfs::JobMetadata* SyncRequest::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::beegfs::JobMetadata>(GetArenaForAllocation());
    _impl_.metadata_ = reinterpret_cast<::beegfs::JobMetadata*>(p);
  }
  return _impl_.metadata_;
}
inline ::beegfs::JobMetadata* SyncRequest::mutable_metadata() {
  ::beegfs::JobMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:beesync.SyncRequest.metadata)
  return _msg;
}
inline void SyncRequest::set_allocated_metadata(::beegfs::JobMetadata* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.metadata_ = reinterpret_cast<::beegfs::JobMetadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:beesync.SyncRequest.metadata)
}

// string path = 3;
inline void SyncRequest::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& SyncRequest::path() const {
  // @@protoc_insertion_point(field_get:beesync.SyncRequest.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SyncRequest::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beesync.SyncRequest.path)
}
inline std::string* SyncRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:beesync.SyncRequest.path)
  return _s;
}
inline const std::string& SyncRequest::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void SyncRequest::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncRequest::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* SyncRequest::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.SyncRequest.path)
  return _impl_.path_.Release();
}
inline void SyncRequest::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beesync.SyncRequest.path)
}

// .beesync.SyncJob job = 4;
inline bool SyncRequest::has_job() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.job_ != nullptr);
  return value;
}
inline void SyncRequest::clear_job() {
  if (_impl_.job_ != nullptr) _impl_.job_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::beesync::SyncJob& SyncRequest::_internal_job() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::beesync::SyncJob* p = _impl_.job_;
  return p != nullptr ? *p : reinterpret_cast<const ::beesync::SyncJob&>(::beesync::_SyncJob_default_instance_);
}
inline const ::beesync::SyncJob& SyncRequest::job() const {
  // @@protoc_insertion_point(field_get:beesync.SyncRequest.job)
  return _internal_job();
}
inline void SyncRequest::unsafe_arena_set_allocated_job(::beesync::SyncJob* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.job_);
  }
  _impl_.job_ = reinterpret_cast<::beesync::SyncJob*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.SyncRequest.job)
}
inline ::beesync::SyncJob* SyncRequest::release_job() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::beesync::SyncJob* released = _impl_.job_;
  _impl_.job_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::beesync::SyncJob* SyncRequest::unsafe_arena_release_job() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.SyncRequest.job)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::beesync::SyncJob* temp = _impl_.job_;
  _impl_.job_ = nullptr;
  return temp;
}
inline ::beesync::SyncJob* SyncRequest::_internal_mutable_job() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.job_ == nullptr) {
    auto* p = CreateMaybeMessage<::beesync::SyncJob>(GetArenaForAllocation());
    _impl_.job_ = reinterpret_cast<::beesync::SyncJob*>(p);
  }
  return _impl_.job_;
}
inline ::beesync::SyncJob* SyncRequest::mutable_job() {
  ::beesync::SyncJob* _msg = _internal_mutable_job();
  // @@protoc_insertion_point(field_mutable:beesync.SyncRequest.job)
  return _msg;
}
inline void SyncRequest::set_allocated_job(::beesync::SyncJob* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::beesync::SyncJob*>(_impl_.job_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::beesync::SyncJob*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.job_ = reinterpret_cast<::beesync::SyncJob*>(value);
  // @@protoc_insertion_point(field_set_allocated:beesync.SyncRequest.job)
}

// .beesync.Segment segment = 5;
inline bool SyncRequest::has_segment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.segment_ != nullptr);
  return value;
}
inline void SyncRequest::clear_segment() {
  if (_impl_.segment_ != nullptr) _impl_.segment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::beesync::Segment& SyncRequest::_internal_segment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::beesync::Segment* p = _impl_.segment_;
  return p != nullptr ? *p : reinterpret_cast<const ::beesync::Segment&>(::beesync::_Segment_default_instance_);
}
inline const ::beesync::Segment& SyncRequest::segment() const {
  // @@protoc_insertion_point(field_get:beesync.SyncRequest.segment)
  return _internal_segment();
}
inline void SyncRequest::unsafe_arena_set_allocated_segment(::beesync::Segment* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.segment_);
  }
  _impl_.segment_ = reinterpret_cast<::beesync::Segment*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.SyncRequest.segment)
}
inline ::beesync::Segment* SyncRequest::release_segment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::beesync::Segment* released = _impl_.segment_;
  _impl_.segment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::beesync::Segment* SyncRequest::unsafe_arena_release_segment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.SyncRequest.segment)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::beesync::Segment* temp = _impl_.segment_;
  _impl_.segment_ = nullptr;
  return temp;
}
inline ::beesync::Segment* SyncRequest::_internal_mutable_segment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::beesync::Segment>(GetArenaForAllocation());
    _impl_.segment_ = reinterpret_cast<::beesync::Segment*>(p);
  }
  return _impl_.segment_;
}
inline ::beesync::Segment* SyncRequest::mutable_segment() {
  ::beesync::Segment* _msg = _internal_mutable_segment();
  // @@protoc_insertion_point(field_mutable:beesync.SyncRequest.segment)
  return _msg;
}
inline void SyncRequest::set_allocated_segment(::beesync::Segment* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::beesync::Segment*>(_impl_.segment_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::beesync::Segment*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.segment_ = reinterpret_cast<::beesync::Segment*>(value);
  // @@protoc_insertion_point(field_set_allocated:beesync.SyncRequest.segment)
}

// -------------------------------------------------------------------

// Segment_S3_CompletedParts

// int32 part_number = 1;
inline void Segment_S3_CompletedParts::clear_part_number() {
  _impl_.part_number_ = 0;
}
inline ::int32_t Segment_S3_CompletedParts::part_number() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.S3.CompletedParts.part_number)
  return _internal_part_number();
}
inline void Segment_S3_CompletedParts::set_part_number(::int32_t value) {
  _internal_set_part_number(value);
  // @@protoc_insertion_point(field_set:beesync.Segment.S3.CompletedParts.part_number)
}
inline ::int32_t Segment_S3_CompletedParts::_internal_part_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.part_number_;
}
inline void Segment_S3_CompletedParts::_internal_set_part_number(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.part_number_ = value;
}

// string entity_tag = 2;
inline void Segment_S3_CompletedParts::clear_entity_tag() {
  _impl_.entity_tag_.ClearToEmpty();
}
inline const std::string& Segment_S3_CompletedParts::entity_tag() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.S3.CompletedParts.entity_tag)
  return _internal_entity_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Segment_S3_CompletedParts::set_entity_tag(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.entity_tag_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beesync.Segment.S3.CompletedParts.entity_tag)
}
inline std::string* Segment_S3_CompletedParts::mutable_entity_tag() {
  std::string* _s = _internal_mutable_entity_tag();
  // @@protoc_insertion_point(field_mutable:beesync.Segment.S3.CompletedParts.entity_tag)
  return _s;
}
inline const std::string& Segment_S3_CompletedParts::_internal_entity_tag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.entity_tag_.Get();
}
inline void Segment_S3_CompletedParts::_internal_set_entity_tag(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.entity_tag_.Set(value, GetArenaForAllocation());
}
inline std::string* Segment_S3_CompletedParts::_internal_mutable_entity_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.entity_tag_.Mutable( GetArenaForAllocation());
}
inline std::string* Segment_S3_CompletedParts::release_entity_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.Segment.S3.CompletedParts.entity_tag)
  return _impl_.entity_tag_.Release();
}
inline void Segment_S3_CompletedParts::set_allocated_entity_tag(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.entity_tag_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.entity_tag_.IsDefault()) {
          _impl_.entity_tag_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beesync.Segment.S3.CompletedParts.entity_tag)
}

// string checksum = 3;
inline void Segment_S3_CompletedParts::clear_checksum() {
  _impl_.checksum_.ClearToEmpty();
}
inline const std::string& Segment_S3_CompletedParts::checksum() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.S3.CompletedParts.checksum)
  return _internal_checksum();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Segment_S3_CompletedParts::set_checksum(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.checksum_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beesync.Segment.S3.CompletedParts.checksum)
}
inline std::string* Segment_S3_CompletedParts::mutable_checksum() {
  std::string* _s = _internal_mutable_checksum();
  // @@protoc_insertion_point(field_mutable:beesync.Segment.S3.CompletedParts.checksum)
  return _s;
}
inline const std::string& Segment_S3_CompletedParts::_internal_checksum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.checksum_.Get();
}
inline void Segment_S3_CompletedParts::_internal_set_checksum(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.checksum_.Set(value, GetArenaForAllocation());
}
inline std::string* Segment_S3_CompletedParts::_internal_mutable_checksum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.checksum_.Mutable( GetArenaForAllocation());
}
inline std::string* Segment_S3_CompletedParts::release_checksum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.Segment.S3.CompletedParts.checksum)
  return _impl_.checksum_.Release();
}
inline void Segment_S3_CompletedParts::set_allocated_checksum(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.checksum_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.checksum_.IsDefault()) {
          _impl_.checksum_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beesync.Segment.S3.CompletedParts.checksum)
}

// -------------------------------------------------------------------

// Segment_S3

// string multipart_id = 1;
inline void Segment_S3::clear_multipart_id() {
  _impl_.multipart_id_.ClearToEmpty();
}
inline const std::string& Segment_S3::multipart_id() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.S3.multipart_id)
  return _internal_multipart_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Segment_S3::set_multipart_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.multipart_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beesync.Segment.S3.multipart_id)
}
inline std::string* Segment_S3::mutable_multipart_id() {
  std::string* _s = _internal_mutable_multipart_id();
  // @@protoc_insertion_point(field_mutable:beesync.Segment.S3.multipart_id)
  return _s;
}
inline const std::string& Segment_S3::_internal_multipart_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.multipart_id_.Get();
}
inline void Segment_S3::_internal_set_multipart_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.multipart_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Segment_S3::_internal_mutable_multipart_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.multipart_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Segment_S3::release_multipart_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.Segment.S3.multipart_id)
  return _impl_.multipart_id_.Release();
}
inline void Segment_S3::set_allocated_multipart_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.multipart_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.multipart_id_.IsDefault()) {
          _impl_.multipart_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beesync.Segment.S3.multipart_id)
}

// int32 parts_start = 2;
inline void Segment_S3::clear_parts_start() {
  _impl_.parts_start_ = 0;
}
inline ::int32_t Segment_S3::parts_start() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.S3.parts_start)
  return _internal_parts_start();
}
inline void Segment_S3::set_parts_start(::int32_t value) {
  _internal_set_parts_start(value);
  // @@protoc_insertion_point(field_set:beesync.Segment.S3.parts_start)
}
inline ::int32_t Segment_S3::_internal_parts_start() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parts_start_;
}
inline void Segment_S3::_internal_set_parts_start(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parts_start_ = value;
}

// int32 parts_stop = 3;
inline void Segment_S3::clear_parts_stop() {
  _impl_.parts_stop_ = 0;
}
inline ::int32_t Segment_S3::parts_stop() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.S3.parts_stop)
  return _internal_parts_stop();
}
inline void Segment_S3::set_parts_stop(::int32_t value) {
  _internal_set_parts_stop(value);
  // @@protoc_insertion_point(field_set:beesync.Segment.S3.parts_stop)
}
inline ::int32_t Segment_S3::_internal_parts_stop() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parts_stop_;
}
inline void Segment_S3::_internal_set_parts_stop(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parts_stop_ = value;
}

// repeated .beesync.Segment.S3.CompletedParts completed_parts = 4;
inline int Segment_S3::_internal_completed_parts_size() const {
  return _internal_completed_parts().size();
}
inline int Segment_S3::completed_parts_size() const {
  return _internal_completed_parts_size();
}
inline void Segment_S3::clear_completed_parts() {
  _internal_mutable_completed_parts()->Clear();
}
inline ::beesync::Segment_S3_CompletedParts* Segment_S3::mutable_completed_parts(int index) {
  // @@protoc_insertion_point(field_mutable:beesync.Segment.S3.completed_parts)
  return _internal_mutable_completed_parts()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::beesync::Segment_S3_CompletedParts >*
Segment_S3::mutable_completed_parts() {
  // @@protoc_insertion_point(field_mutable_list:beesync.Segment.S3.completed_parts)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_completed_parts();
}
inline const ::beesync::Segment_S3_CompletedParts& Segment_S3::completed_parts(int index) const {
  // @@protoc_insertion_point(field_get:beesync.Segment.S3.completed_parts)
    return _internal_completed_parts().Get(index);
}
inline ::beesync::Segment_S3_CompletedParts* Segment_S3::add_completed_parts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::beesync::Segment_S3_CompletedParts* _add = _internal_mutable_completed_parts()->Add();
  // @@protoc_insertion_point(field_add:beesync.Segment.S3.completed_parts)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::beesync::Segment_S3_CompletedParts >&
Segment_S3::completed_parts() const {
  // @@protoc_insertion_point(field_list:beesync.Segment.S3.completed_parts)
  return _internal_completed_parts();
}
inline const ::google::protobuf::RepeatedPtrField<::beesync::Segment_S3_CompletedParts>&
Segment_S3::_internal_completed_parts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.completed_parts_;
}
inline ::google::protobuf::RepeatedPtrField<::beesync::Segment_S3_CompletedParts>*
Segment_S3::_internal_mutable_completed_parts() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.completed_parts_;
}

// -------------------------------------------------------------------

// Segment

// int64 offset_start = 1;
inline void Segment::clear_offset_start() {
  _impl_.offset_start_ = ::int64_t{0};
}
inline ::int64_t Segment::offset_start() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.offset_start)
  return _internal_offset_start();
}
inline void Segment::set_offset_start(::int64_t value) {
  _internal_set_offset_start(value);
  // @@protoc_insertion_point(field_set:beesync.Segment.offset_start)
}
inline ::int64_t Segment::_internal_offset_start() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_start_;
}
inline void Segment::_internal_set_offset_start(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_start_ = value;
}

// int64 offset_stop = 2;
inline void Segment::clear_offset_stop() {
  _impl_.offset_stop_ = ::int64_t{0};
}
inline ::int64_t Segment::offset_stop() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.offset_stop)
  return _internal_offset_stop();
}
inline void Segment::set_offset_stop(::int64_t value) {
  _internal_set_offset_stop(value);
  // @@protoc_insertion_point(field_set:beesync.Segment.offset_stop)
}
inline ::int64_t Segment::_internal_offset_stop() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_stop_;
}
inline void Segment::_internal_set_offset_stop(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_stop_ = value;
}

// bool default = 3;
inline bool Segment::has_default_() const {
  return method_case() == kDefault;
}
inline void Segment::set_has_default_() {
  _impl_._oneof_case_[0] = kDefault;
}
inline void Segment::clear_default_() {
  if (method_case() == kDefault) {
    _impl_.method_.default__ = false;
    clear_has_method();
  }
}
inline bool Segment::default_() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.default)
  return _internal_default_();
}
inline void Segment::set_default_(bool value) {
  _internal_set_default_(value);
  // @@protoc_insertion_point(field_set:beesync.Segment.default)
}
inline bool Segment::_internal_default_() const {
  if (method_case() == kDefault) {
    return _impl_.method_.default__;
  }
  return false;
}
inline void Segment::_internal_set_default_(bool value) {
  if (method_case() != kDefault) {
    clear_method();
    set_has_default_();
  }
  _impl_.method_.default__ = value;
}

// .beesync.Segment.S3 s3 = 4;
inline bool Segment::has_s3() const {
  return method_case() == kS3;
}
inline bool Segment::_internal_has_s3() const {
  return method_case() == kS3;
}
inline void Segment::set_has_s3() {
  _impl_._oneof_case_[0] = kS3;
}
inline void Segment::clear_s3() {
  if (method_case() == kS3) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.method_.s3_;
    }
    clear_has_method();
  }
}
inline ::beesync::Segment_S3* Segment::release_s3() {
  // @@protoc_insertion_point(field_release:beesync.Segment.s3)
  if (method_case() == kS3) {
    clear_has_method();
    ::beesync::Segment_S3* temp = _impl_.method_.s3_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.method_.s3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::beesync::Segment_S3& Segment::_internal_s3() const {
  return method_case() == kS3
      ? *_impl_.method_.s3_
      : reinterpret_cast<::beesync::Segment_S3&>(::beesync::_Segment_S3_default_instance_);
}
inline const ::beesync::Segment_S3& Segment::s3() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.s3)
  return _internal_s3();
}
inline ::beesync::Segment_S3* Segment::unsafe_arena_release_s3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beesync.Segment.s3)
  if (method_case() == kS3) {
    clear_has_method();
    ::beesync::Segment_S3* temp = _impl_.method_.s3_;
    _impl_.method_.s3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Segment::unsafe_arena_set_allocated_s3(::beesync::Segment_S3* s3) {
  clear_method();
  if (s3) {
    set_has_s3();
    _impl_.method_.s3_ = s3;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.Segment.s3)
}
inline ::beesync::Segment_S3* Segment::_internal_mutable_s3() {
  if (method_case() != kS3) {
    clear_method();
    set_has_s3();
    _impl_.method_.s3_ = CreateMaybeMessage< ::beesync::Segment_S3 >(GetArenaForAllocation());
  }
  return _impl_.method_.s3_;
}
inline ::beesync::Segment_S3* Segment::mutable_s3() {
  ::beesync::Segment_S3* _msg = _internal_mutable_s3();
  // @@protoc_insertion_point(field_mutable:beesync.Segment.s3)
  return _msg;
}

inline bool Segment::has_method() const {
  return method_case() != METHOD_NOT_SET;
}
inline void Segment::clear_has_method() {
  _impl_._oneof_case_[0] = METHOD_NOT_SET;
}
inline Segment::MethodCase Segment::method_case() const {
  return Segment::MethodCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RemoteStorageTarget_Policies

// bool local_flock = 1;
inline void RemoteStorageTarget_Policies::clear_local_flock() {
  _impl_.local_flock_ = false;
}
inline bool RemoteStorageTarget_Policies::local_flock() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.Policies.local_flock)
  return _internal_local_flock();
}
inline void RemoteStorageTarget_Policies::set_local_flock(bool value) {
  _internal_set_local_flock(value);
  // @@protoc_insertion_point(field_set:beesync.RemoteStorageTarget.Policies.local_flock)
}
inline bool RemoteStorageTarget_Policies::_internal_local_flock() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.local_flock_;
}
inline void RemoteStorageTarget_Policies::_internal_set_local_flock(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_flock_ = value;
}

// bool remote_flock = 2;
inline void RemoteStorageTarget_Policies::clear_remote_flock() {
  _impl_.remote_flock_ = false;
}
inline bool RemoteStorageTarget_Policies::remote_flock() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.Policies.remote_flock)
  return _internal_remote_flock();
}
inline void RemoteStorageTarget_Policies::set_remote_flock(bool value) {
  _internal_set_remote_flock(value);
  // @@protoc_insertion_point(field_set:beesync.RemoteStorageTarget.Policies.remote_flock)
}
inline bool RemoteStorageTarget_Policies::_internal_remote_flock() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.remote_flock_;
}
inline void RemoteStorageTarget_Policies::_internal_set_remote_flock(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remote_flock_ = value;
}

// bool keep_dir_structure = 3;
inline void RemoteStorageTarget_Policies::clear_keep_dir_structure() {
  _impl_.keep_dir_structure_ = false;
}
inline bool RemoteStorageTarget_Policies::keep_dir_structure() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.Policies.keep_dir_structure)
  return _internal_keep_dir_structure();
}
inline void RemoteStorageTarget_Policies::set_keep_dir_structure(bool value) {
  _internal_set_keep_dir_structure(value);
  // @@protoc_insertion_point(field_set:beesync.RemoteStorageTarget.Policies.keep_dir_structure)
}
inline bool RemoteStorageTarget_Policies::_internal_keep_dir_structure() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.keep_dir_structure_;
}
inline void RemoteStorageTarget_Policies::_internal_set_keep_dir_structure(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.keep_dir_structure_ = value;
}

// bool keep_beegfs_metadata = 4;
inline void RemoteStorageTarget_Policies::clear_keep_beegfs_metadata() {
  _impl_.keep_beegfs_metadata_ = false;
}
inline bool RemoteStorageTarget_Policies::keep_beegfs_metadata() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.Policies.keep_beegfs_metadata)
  return _internal_keep_beegfs_metadata();
}
inline void RemoteStorageTarget_Policies::set_keep_beegfs_metadata(bool value) {
  _internal_set_keep_beegfs_metadata(value);
  // @@protoc_insertion_point(field_set:beesync.RemoteStorageTarget.Policies.keep_beegfs_metadata)
}
inline bool RemoteStorageTarget_Policies::_internal_keep_beegfs_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.keep_beegfs_metadata_;
}
inline void RemoteStorageTarget_Policies::_internal_set_keep_beegfs_metadata(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.keep_beegfs_metadata_ = value;
}

// uint32 autostart_max_size = 5;
inline void RemoteStorageTarget_Policies::clear_autostart_max_size() {
  _impl_.autostart_max_size_ = 0u;
}
inline ::uint32_t RemoteStorageTarget_Policies::autostart_max_size() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.Policies.autostart_max_size)
  return _internal_autostart_max_size();
}
inline void RemoteStorageTarget_Policies::set_autostart_max_size(::uint32_t value) {
  _internal_set_autostart_max_size(value);
  // @@protoc_insertion_point(field_set:beesync.RemoteStorageTarget.Policies.autostart_max_size)
}
inline ::uint32_t RemoteStorageTarget_Policies::_internal_autostart_max_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.autostart_max_size_;
}
inline void RemoteStorageTarget_Policies::_internal_set_autostart_max_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.autostart_max_size_ = value;
}

// -------------------------------------------------------------------

// RemoteStorageTarget_S3

// string bucket = 1;
inline void RemoteStorageTarget_S3::clear_bucket() {
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& RemoteStorageTarget_S3::bucket() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.S3.bucket)
  return _internal_bucket();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoteStorageTarget_S3::set_bucket(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bucket_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beesync.RemoteStorageTarget.S3.bucket)
}
inline std::string* RemoteStorageTarget_S3::mutable_bucket() {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:beesync.RemoteStorageTarget.S3.bucket)
  return _s;
}
inline const std::string& RemoteStorageTarget_S3::_internal_bucket() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bucket_.Get();
}
inline void RemoteStorageTarget_S3::_internal_set_bucket(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bucket_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget_S3::_internal_mutable_bucket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.bucket_.Mutable( GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget_S3::release_bucket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.RemoteStorageTarget.S3.bucket)
  return _impl_.bucket_.Release();
}
inline void RemoteStorageTarget_S3::set_allocated_bucket(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bucket_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bucket_.IsDefault()) {
          _impl_.bucket_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beesync.RemoteStorageTarget.S3.bucket)
}

// string region = 2;
inline void RemoteStorageTarget_S3::clear_region() {
  _impl_.region_.ClearToEmpty();
}
inline const std::string& RemoteStorageTarget_S3::region() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.S3.region)
  return _internal_region();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoteStorageTarget_S3::set_region(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.region_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beesync.RemoteStorageTarget.S3.region)
}
inline std::string* RemoteStorageTarget_S3::mutable_region() {
  std::string* _s = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:beesync.RemoteStorageTarget.S3.region)
  return _s;
}
inline const std::string& RemoteStorageTarget_S3::_internal_region() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.region_.Get();
}
inline void RemoteStorageTarget_S3::_internal_set_region(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.region_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget_S3::_internal_mutable_region() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.region_.Mutable( GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget_S3::release_region() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.RemoteStorageTarget.S3.region)
  return _impl_.region_.Release();
}
inline void RemoteStorageTarget_S3::set_allocated_region(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.region_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.region_.IsDefault()) {
          _impl_.region_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beesync.RemoteStorageTarget.S3.region)
}

// string endpoint = 3;
inline void RemoteStorageTarget_S3::clear_endpoint() {
  _impl_.endpoint_.ClearToEmpty();
}
inline const std::string& RemoteStorageTarget_S3::endpoint() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.S3.endpoint)
  return _internal_endpoint();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoteStorageTarget_S3::set_endpoint(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.endpoint_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beesync.RemoteStorageTarget.S3.endpoint)
}
inline std::string* RemoteStorageTarget_S3::mutable_endpoint() {
  std::string* _s = _internal_mutable_endpoint();
  // @@protoc_insertion_point(field_mutable:beesync.RemoteStorageTarget.S3.endpoint)
  return _s;
}
inline const std::string& RemoteStorageTarget_S3::_internal_endpoint() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.endpoint_.Get();
}
inline void RemoteStorageTarget_S3::_internal_set_endpoint(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.endpoint_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget_S3::_internal_mutable_endpoint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.endpoint_.Mutable( GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget_S3::release_endpoint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.RemoteStorageTarget.S3.endpoint)
  return _impl_.endpoint_.Release();
}
inline void RemoteStorageTarget_S3::set_allocated_endpoint(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.endpoint_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.endpoint_.IsDefault()) {
          _impl_.endpoint_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beesync.RemoteStorageTarget.S3.endpoint)
}

// string access_key = 4;
inline void RemoteStorageTarget_S3::clear_access_key() {
  _impl_.access_key_.ClearToEmpty();
}
inline const std::string& RemoteStorageTarget_S3::access_key() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.S3.access_key)
  return _internal_access_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoteStorageTarget_S3::set_access_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.access_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beesync.RemoteStorageTarget.S3.access_key)
}
inline std::string* RemoteStorageTarget_S3::mutable_access_key() {
  std::string* _s = _internal_mutable_access_key();
  // @@protoc_insertion_point(field_mutable:beesync.RemoteStorageTarget.S3.access_key)
  return _s;
}
inline const std::string& RemoteStorageTarget_S3::_internal_access_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.access_key_.Get();
}
inline void RemoteStorageTarget_S3::_internal_set_access_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.access_key_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget_S3::_internal_mutable_access_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.access_key_.Mutable( GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget_S3::release_access_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.RemoteStorageTarget.S3.access_key)
  return _impl_.access_key_.Release();
}
inline void RemoteStorageTarget_S3::set_allocated_access_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.access_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.access_key_.IsDefault()) {
          _impl_.access_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beesync.RemoteStorageTarget.S3.access_key)
}

// string secret_key = 5;
inline void RemoteStorageTarget_S3::clear_secret_key() {
  _impl_.secret_key_.ClearToEmpty();
}
inline const std::string& RemoteStorageTarget_S3::secret_key() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.S3.secret_key)
  return _internal_secret_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoteStorageTarget_S3::set_secret_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.secret_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beesync.RemoteStorageTarget.S3.secret_key)
}
inline std::string* RemoteStorageTarget_S3::mutable_secret_key() {
  std::string* _s = _internal_mutable_secret_key();
  // @@protoc_insertion_point(field_mutable:beesync.RemoteStorageTarget.S3.secret_key)
  return _s;
}
inline const std::string& RemoteStorageTarget_S3::_internal_secret_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.secret_key_.Get();
}
inline void RemoteStorageTarget_S3::_internal_set_secret_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.secret_key_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget_S3::_internal_mutable_secret_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.secret_key_.Mutable( GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget_S3::release_secret_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.RemoteStorageTarget.S3.secret_key)
  return _impl_.secret_key_.Release();
}
inline void RemoteStorageTarget_S3::set_allocated_secret_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secret_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.secret_key_.IsDefault()) {
          _impl_.secret_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beesync.RemoteStorageTarget.S3.secret_key)
}

// -------------------------------------------------------------------

// RemoteStorageTarget_Azure

// .beesync.RemoteStorageTarget.S3 s3 = 1;
inline bool RemoteStorageTarget_Azure::has_s3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.s3_ != nullptr);
  return value;
}
inline void RemoteStorageTarget_Azure::clear_s3() {
  if (_impl_.s3_ != nullptr) _impl_.s3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::beesync::RemoteStorageTarget_S3& RemoteStorageTarget_Azure::_internal_s3() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::beesync::RemoteStorageTarget_S3* p = _impl_.s3_;
  return p != nullptr ? *p : reinterpret_cast<const ::beesync::RemoteStorageTarget_S3&>(::beesync::_RemoteStorageTarget_S3_default_instance_);
}
inline const ::beesync::RemoteStorageTarget_S3& RemoteStorageTarget_Azure::s3() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.Azure.s3)
  return _internal_s3();
}
inline void RemoteStorageTarget_Azure::unsafe_arena_set_allocated_s3(::beesync::RemoteStorageTarget_S3* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.s3_);
  }
  _impl_.s3_ = reinterpret_cast<::beesync::RemoteStorageTarget_S3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.RemoteStorageTarget.Azure.s3)
}
inline ::beesync::RemoteStorageTarget_S3* RemoteStorageTarget_Azure::release_s3() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::beesync::RemoteStorageTarget_S3* released = _impl_.s3_;
  _impl_.s3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::beesync::RemoteStorageTarget_S3* RemoteStorageTarget_Azure::unsafe_arena_release_s3() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.RemoteStorageTarget.Azure.s3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::beesync::RemoteStorageTarget_S3* temp = _impl_.s3_;
  _impl_.s3_ = nullptr;
  return temp;
}
inline ::beesync::RemoteStorageTarget_S3* RemoteStorageTarget_Azure::_internal_mutable_s3() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.s3_ == nullptr) {
    auto* p = CreateMaybeMessage<::beesync::RemoteStorageTarget_S3>(GetArenaForAllocation());
    _impl_.s3_ = reinterpret_cast<::beesync::RemoteStorageTarget_S3*>(p);
  }
  return _impl_.s3_;
}
inline ::beesync::RemoteStorageTarget_S3* RemoteStorageTarget_Azure::mutable_s3() {
  ::beesync::RemoteStorageTarget_S3* _msg = _internal_mutable_s3();
  // @@protoc_insertion_point(field_mutable:beesync.RemoteStorageTarget.Azure.s3)
  return _msg;
}
inline void RemoteStorageTarget_Azure::set_allocated_s3(::beesync::RemoteStorageTarget_S3* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::beesync::RemoteStorageTarget_S3*>(_impl_.s3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::beesync::RemoteStorageTarget_S3*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.s3_ = reinterpret_cast<::beesync::RemoteStorageTarget_S3*>(value);
  // @@protoc_insertion_point(field_set_allocated:beesync.RemoteStorageTarget.Azure.s3)
}

// string account = 2;
inline void RemoteStorageTarget_Azure::clear_account() {
  _impl_.account_.ClearToEmpty();
}
inline const std::string& RemoteStorageTarget_Azure::account() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.Azure.account)
  return _internal_account();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoteStorageTarget_Azure::set_account(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beesync.RemoteStorageTarget.Azure.account)
}
inline std::string* RemoteStorageTarget_Azure::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:beesync.RemoteStorageTarget.Azure.account)
  return _s;
}
inline const std::string& RemoteStorageTarget_Azure::_internal_account() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.account_.Get();
}
inline void RemoteStorageTarget_Azure::_internal_set_account(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget_Azure::_internal_mutable_account() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.account_.Mutable( GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget_Azure::release_account() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.RemoteStorageTarget.Azure.account)
  return _impl_.account_.Release();
}
inline void RemoteStorageTarget_Azure::set_allocated_account(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_.IsDefault()) {
          _impl_.account_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beesync.RemoteStorageTarget.Azure.account)
}

// -------------------------------------------------------------------

// RemoteStorageTarget_POSIX

// string path = 1;
inline void RemoteStorageTarget_POSIX::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& RemoteStorageTarget_POSIX::path() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.POSIX.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoteStorageTarget_POSIX::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beesync.RemoteStorageTarget.POSIX.path)
}
inline std::string* RemoteStorageTarget_POSIX::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:beesync.RemoteStorageTarget.POSIX.path)
  return _s;
}
inline const std::string& RemoteStorageTarget_POSIX::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void RemoteStorageTarget_POSIX::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget_POSIX::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget_POSIX::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.RemoteStorageTarget.POSIX.path)
  return _impl_.path_.Release();
}
inline void RemoteStorageTarget_POSIX::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beesync.RemoteStorageTarget.POSIX.path)
}

// -------------------------------------------------------------------

// RemoteStorageTarget

// string id = 1;
inline void RemoteStorageTarget::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& RemoteStorageTarget::id() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoteStorageTarget::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beesync.RemoteStorageTarget.id)
}
inline std::string* RemoteStorageTarget::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:beesync.RemoteStorageTarget.id)
  return _s;
}
inline const std::string& RemoteStorageTarget::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void RemoteStorageTarget::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.RemoteStorageTarget.id)
  return _impl_.id_.Release();
}
inline void RemoteStorageTarget::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beesync.RemoteStorageTarget.id)
}

// string name = 2;
inline void RemoteStorageTarget::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RemoteStorageTarget::name() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoteStorageTarget::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:beesync.RemoteStorageTarget.name)
}
inline std::string* RemoteStorageTarget::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:beesync.RemoteStorageTarget.name)
  return _s;
}
inline const std::string& RemoteStorageTarget::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void RemoteStorageTarget::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* RemoteStorageTarget::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.RemoteStorageTarget.name)
  return _impl_.name_.Release();
}
inline void RemoteStorageTarget::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:beesync.RemoteStorageTarget.name)
}

// .beesync.RemoteStorageTarget.Policies policies = 3;
inline bool RemoteStorageTarget::has_policies() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.policies_ != nullptr);
  return value;
}
inline void RemoteStorageTarget::clear_policies() {
  if (_impl_.policies_ != nullptr) _impl_.policies_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::beesync::RemoteStorageTarget_Policies& RemoteStorageTarget::_internal_policies() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::beesync::RemoteStorageTarget_Policies* p = _impl_.policies_;
  return p != nullptr ? *p : reinterpret_cast<const ::beesync::RemoteStorageTarget_Policies&>(::beesync::_RemoteStorageTarget_Policies_default_instance_);
}
inline const ::beesync::RemoteStorageTarget_Policies& RemoteStorageTarget::policies() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.policies)
  return _internal_policies();
}
inline void RemoteStorageTarget::unsafe_arena_set_allocated_policies(::beesync::RemoteStorageTarget_Policies* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.policies_);
  }
  _impl_.policies_ = reinterpret_cast<::beesync::RemoteStorageTarget_Policies*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.RemoteStorageTarget.policies)
}
inline ::beesync::RemoteStorageTarget_Policies* RemoteStorageTarget::release_policies() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::beesync::RemoteStorageTarget_Policies* released = _impl_.policies_;
  _impl_.policies_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::beesync::RemoteStorageTarget_Policies* RemoteStorageTarget::unsafe_arena_release_policies() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:beesync.RemoteStorageTarget.policies)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::beesync::RemoteStorageTarget_Policies* temp = _impl_.policies_;
  _impl_.policies_ = nullptr;
  return temp;
}
inline ::beesync::RemoteStorageTarget_Policies* RemoteStorageTarget::_internal_mutable_policies() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.policies_ == nullptr) {
    auto* p = CreateMaybeMessage<::beesync::RemoteStorageTarget_Policies>(GetArenaForAllocation());
    _impl_.policies_ = reinterpret_cast<::beesync::RemoteStorageTarget_Policies*>(p);
  }
  return _impl_.policies_;
}
inline ::beesync::RemoteStorageTarget_Policies* RemoteStorageTarget::mutable_policies() {
  ::beesync::RemoteStorageTarget_Policies* _msg = _internal_mutable_policies();
  // @@protoc_insertion_point(field_mutable:beesync.RemoteStorageTarget.policies)
  return _msg;
}
inline void RemoteStorageTarget::set_allocated_policies(::beesync::RemoteStorageTarget_Policies* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::beesync::RemoteStorageTarget_Policies*>(_impl_.policies_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::beesync::RemoteStorageTarget_Policies*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.policies_ = reinterpret_cast<::beesync::RemoteStorageTarget_Policies*>(value);
  // @@protoc_insertion_point(field_set_allocated:beesync.RemoteStorageTarget.policies)
}

// .beesync.RemoteStorageTarget.S3 s3 = 4;
inline bool RemoteStorageTarget::has_s3() const {
  return type_case() == kS3;
}
inline bool RemoteStorageTarget::_internal_has_s3() const {
  return type_case() == kS3;
}
inline void RemoteStorageTarget::set_has_s3() {
  _impl_._oneof_case_[0] = kS3;
}
inline void RemoteStorageTarget::clear_s3() {
  if (type_case() == kS3) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.s3_;
    }
    clear_has_type();
  }
}
inline ::beesync::RemoteStorageTarget_S3* RemoteStorageTarget::release_s3() {
  // @@protoc_insertion_point(field_release:beesync.RemoteStorageTarget.s3)
  if (type_case() == kS3) {
    clear_has_type();
    ::beesync::RemoteStorageTarget_S3* temp = _impl_.type_.s3_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.s3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::beesync::RemoteStorageTarget_S3& RemoteStorageTarget::_internal_s3() const {
  return type_case() == kS3
      ? *_impl_.type_.s3_
      : reinterpret_cast<::beesync::RemoteStorageTarget_S3&>(::beesync::_RemoteStorageTarget_S3_default_instance_);
}
inline const ::beesync::RemoteStorageTarget_S3& RemoteStorageTarget::s3() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.s3)
  return _internal_s3();
}
inline ::beesync::RemoteStorageTarget_S3* RemoteStorageTarget::unsafe_arena_release_s3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beesync.RemoteStorageTarget.s3)
  if (type_case() == kS3) {
    clear_has_type();
    ::beesync::RemoteStorageTarget_S3* temp = _impl_.type_.s3_;
    _impl_.type_.s3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RemoteStorageTarget::unsafe_arena_set_allocated_s3(::beesync::RemoteStorageTarget_S3* s3) {
  clear_type();
  if (s3) {
    set_has_s3();
    _impl_.type_.s3_ = s3;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.RemoteStorageTarget.s3)
}
inline ::beesync::RemoteStorageTarget_S3* RemoteStorageTarget::_internal_mutable_s3() {
  if (type_case() != kS3) {
    clear_type();
    set_has_s3();
    _impl_.type_.s3_ = CreateMaybeMessage< ::beesync::RemoteStorageTarget_S3 >(GetArenaForAllocation());
  }
  return _impl_.type_.s3_;
}
inline ::beesync::RemoteStorageTarget_S3* RemoteStorageTarget::mutable_s3() {
  ::beesync::RemoteStorageTarget_S3* _msg = _internal_mutable_s3();
  // @@protoc_insertion_point(field_mutable:beesync.RemoteStorageTarget.s3)
  return _msg;
}

// .beesync.RemoteStorageTarget.POSIX posix = 5;
inline bool RemoteStorageTarget::has_posix() const {
  return type_case() == kPosix;
}
inline bool RemoteStorageTarget::_internal_has_posix() const {
  return type_case() == kPosix;
}
inline void RemoteStorageTarget::set_has_posix() {
  _impl_._oneof_case_[0] = kPosix;
}
inline void RemoteStorageTarget::clear_posix() {
  if (type_case() == kPosix) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.posix_;
    }
    clear_has_type();
  }
}
inline ::beesync::RemoteStorageTarget_POSIX* RemoteStorageTarget::release_posix() {
  // @@protoc_insertion_point(field_release:beesync.RemoteStorageTarget.posix)
  if (type_case() == kPosix) {
    clear_has_type();
    ::beesync::RemoteStorageTarget_POSIX* temp = _impl_.type_.posix_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.posix_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::beesync::RemoteStorageTarget_POSIX& RemoteStorageTarget::_internal_posix() const {
  return type_case() == kPosix
      ? *_impl_.type_.posix_
      : reinterpret_cast<::beesync::RemoteStorageTarget_POSIX&>(::beesync::_RemoteStorageTarget_POSIX_default_instance_);
}
inline const ::beesync::RemoteStorageTarget_POSIX& RemoteStorageTarget::posix() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.posix)
  return _internal_posix();
}
inline ::beesync::RemoteStorageTarget_POSIX* RemoteStorageTarget::unsafe_arena_release_posix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beesync.RemoteStorageTarget.posix)
  if (type_case() == kPosix) {
    clear_has_type();
    ::beesync::RemoteStorageTarget_POSIX* temp = _impl_.type_.posix_;
    _impl_.type_.posix_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RemoteStorageTarget::unsafe_arena_set_allocated_posix(::beesync::RemoteStorageTarget_POSIX* posix) {
  clear_type();
  if (posix) {
    set_has_posix();
    _impl_.type_.posix_ = posix;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.RemoteStorageTarget.posix)
}
inline ::beesync::RemoteStorageTarget_POSIX* RemoteStorageTarget::_internal_mutable_posix() {
  if (type_case() != kPosix) {
    clear_type();
    set_has_posix();
    _impl_.type_.posix_ = CreateMaybeMessage< ::beesync::RemoteStorageTarget_POSIX >(GetArenaForAllocation());
  }
  return _impl_.type_.posix_;
}
inline ::beesync::RemoteStorageTarget_POSIX* RemoteStorageTarget::mutable_posix() {
  ::beesync::RemoteStorageTarget_POSIX* _msg = _internal_mutable_posix();
  // @@protoc_insertion_point(field_mutable:beesync.RemoteStorageTarget.posix)
  return _msg;
}

// .beesync.RemoteStorageTarget.Azure azure = 6;
inline bool RemoteStorageTarget::has_azure() const {
  return type_case() == kAzure;
}
inline bool RemoteStorageTarget::_internal_has_azure() const {
  return type_case() == kAzure;
}
inline void RemoteStorageTarget::set_has_azure() {
  _impl_._oneof_case_[0] = kAzure;
}
inline void RemoteStorageTarget::clear_azure() {
  if (type_case() == kAzure) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.azure_;
    }
    clear_has_type();
  }
}
inline ::beesync::RemoteStorageTarget_Azure* RemoteStorageTarget::release_azure() {
  // @@protoc_insertion_point(field_release:beesync.RemoteStorageTarget.azure)
  if (type_case() == kAzure) {
    clear_has_type();
    ::beesync::RemoteStorageTarget_Azure* temp = _impl_.type_.azure_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.azure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::beesync::RemoteStorageTarget_Azure& RemoteStorageTarget::_internal_azure() const {
  return type_case() == kAzure
      ? *_impl_.type_.azure_
      : reinterpret_cast<::beesync::RemoteStorageTarget_Azure&>(::beesync::_RemoteStorageTarget_Azure_default_instance_);
}
inline const ::beesync::RemoteStorageTarget_Azure& RemoteStorageTarget::azure() const {
  // @@protoc_insertion_point(field_get:beesync.RemoteStorageTarget.azure)
  return _internal_azure();
}
inline ::beesync::RemoteStorageTarget_Azure* RemoteStorageTarget::unsafe_arena_release_azure() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beesync.RemoteStorageTarget.azure)
  if (type_case() == kAzure) {
    clear_has_type();
    ::beesync::RemoteStorageTarget_Azure* temp = _impl_.type_.azure_;
    _impl_.type_.azure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RemoteStorageTarget::unsafe_arena_set_allocated_azure(::beesync::RemoteStorageTarget_Azure* azure) {
  clear_type();
  if (azure) {
    set_has_azure();
    _impl_.type_.azure_ = azure;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.RemoteStorageTarget.azure)
}
inline ::beesync::RemoteStorageTarget_Azure* RemoteStorageTarget::_internal_mutable_azure() {
  if (type_case() != kAzure) {
    clear_type();
    set_has_azure();
    _impl_.type_.azure_ = CreateMaybeMessage< ::beesync::RemoteStorageTarget_Azure >(GetArenaForAllocation());
  }
  return _impl_.type_.azure_;
}
inline ::beesync::RemoteStorageTarget_Azure* RemoteStorageTarget::mutable_azure() {
  ::beesync::RemoteStorageTarget_Azure* _msg = _internal_mutable_azure();
  // @@protoc_insertion_point(field_mutable:beesync.RemoteStorageTarget.azure)
  return _msg;
}

inline bool RemoteStorageTarget::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void RemoteStorageTarget::clear_has_type() {
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}
inline RemoteStorageTarget::TypeCase RemoteStorageTarget::type_case() const {
  return RemoteStorageTarget::TypeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace beesync


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::beesync::ConfigUpdateResponse_Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::beesync::ConfigUpdateResponse_Result>() {
  return ::beesync::ConfigUpdateResponse_Result_descriptor();
}
template <>
struct is_proto_enum<::beesync::SyncJob_Operation> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::beesync::SyncJob_Operation>() {
  return ::beesync::SyncJob_Operation_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_beesync_2eproto_2epb_2eh
