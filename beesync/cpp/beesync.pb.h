// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beesync.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_beesync_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_beesync_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "beegfs/beegfs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_beesync_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_beesync_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_beesync_2eproto;
namespace beesync {
class ConfigUpdateRequest;
class ConfigUpdateRequestDefaultTypeInternal;
extern ConfigUpdateRequestDefaultTypeInternal _ConfigUpdateRequest_default_instance_;
class ConfigUpdateResponse;
class ConfigUpdateResponseDefaultTypeInternal;
extern ConfigUpdateResponseDefaultTypeInternal _ConfigUpdateResponse_default_instance_;
class JobRequest;
class JobRequestDefaultTypeInternal;
extern JobRequestDefaultTypeInternal _JobRequest_default_instance_;
class JobResponse;
class JobResponseDefaultTypeInternal;
extern JobResponseDefaultTypeInternal _JobResponse_default_instance_;
class Segment;
class SegmentDefaultTypeInternal;
extern SegmentDefaultTypeInternal _Segment_default_instance_;
class Segment_Config;
class Segment_ConfigDefaultTypeInternal;
extern Segment_ConfigDefaultTypeInternal _Segment_Config_default_instance_;
class Segment_S3;
class Segment_S3DefaultTypeInternal;
extern Segment_S3DefaultTypeInternal _Segment_S3_default_instance_;
class Segment_S3_CompletedParts;
class Segment_S3_CompletedPartsDefaultTypeInternal;
extern Segment_S3_CompletedPartsDefaultTypeInternal _Segment_S3_CompletedParts_default_instance_;
class SyncRequest;
class SyncRequestDefaultTypeInternal;
extern SyncRequestDefaultTypeInternal _SyncRequest_default_instance_;
}  // namespace beesync
PROTOBUF_NAMESPACE_OPEN
template<> ::beesync::ConfigUpdateRequest* Arena::CreateMaybeMessage<::beesync::ConfigUpdateRequest>(Arena*);
template<> ::beesync::ConfigUpdateResponse* Arena::CreateMaybeMessage<::beesync::ConfigUpdateResponse>(Arena*);
template<> ::beesync::JobRequest* Arena::CreateMaybeMessage<::beesync::JobRequest>(Arena*);
template<> ::beesync::JobResponse* Arena::CreateMaybeMessage<::beesync::JobResponse>(Arena*);
template<> ::beesync::Segment* Arena::CreateMaybeMessage<::beesync::Segment>(Arena*);
template<> ::beesync::Segment_Config* Arena::CreateMaybeMessage<::beesync::Segment_Config>(Arena*);
template<> ::beesync::Segment_S3* Arena::CreateMaybeMessage<::beesync::Segment_S3>(Arena*);
template<> ::beesync::Segment_S3_CompletedParts* Arena::CreateMaybeMessage<::beesync::Segment_S3_CompletedParts>(Arena*);
template<> ::beesync::SyncRequest* Arena::CreateMaybeMessage<::beesync::SyncRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace beesync {

enum ConfigUpdateResponse_Result : int {
  ConfigUpdateResponse_Result_UNKNOWN = 0,
  ConfigUpdateResponse_Result_SUCCESS = 1,
  ConfigUpdateResponse_Result_PARTIAL = 2,
  ConfigUpdateResponse_Result_FAILURE = 3,
  ConfigUpdateResponse_Result_ConfigUpdateResponse_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConfigUpdateResponse_Result_ConfigUpdateResponse_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConfigUpdateResponse_Result_IsValid(int value);
constexpr ConfigUpdateResponse_Result ConfigUpdateResponse_Result_Result_MIN = ConfigUpdateResponse_Result_UNKNOWN;
constexpr ConfigUpdateResponse_Result ConfigUpdateResponse_Result_Result_MAX = ConfigUpdateResponse_Result_FAILURE;
constexpr int ConfigUpdateResponse_Result_Result_ARRAYSIZE = ConfigUpdateResponse_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfigUpdateResponse_Result_descriptor();
template<typename T>
inline const std::string& ConfigUpdateResponse_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConfigUpdateResponse_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConfigUpdateResponse_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConfigUpdateResponse_Result_descriptor(), enum_t_value);
}
inline bool ConfigUpdateResponse_Result_Parse(
    const std::string& name, ConfigUpdateResponse_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConfigUpdateResponse_Result>(
    ConfigUpdateResponse_Result_descriptor(), name, value);
}
enum SyncRequest_Operation : int {
  SyncRequest_Operation_UNKNOWN = 0,
  SyncRequest_Operation_UPLOAD = 1,
  SyncRequest_Operation_DOWNLOAD = 2,
  SyncRequest_Operation_SyncRequest_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SyncRequest_Operation_SyncRequest_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SyncRequest_Operation_IsValid(int value);
constexpr SyncRequest_Operation SyncRequest_Operation_Operation_MIN = SyncRequest_Operation_UNKNOWN;
constexpr SyncRequest_Operation SyncRequest_Operation_Operation_MAX = SyncRequest_Operation_DOWNLOAD;
constexpr int SyncRequest_Operation_Operation_ARRAYSIZE = SyncRequest_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SyncRequest_Operation_descriptor();
template<typename T>
inline const std::string& SyncRequest_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SyncRequest_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SyncRequest_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SyncRequest_Operation_descriptor(), enum_t_value);
}
inline bool SyncRequest_Operation_Parse(
    const std::string& name, SyncRequest_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SyncRequest_Operation>(
    SyncRequest_Operation_descriptor(), name, value);
}
// ===================================================================

class ConfigUpdateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beesync.ConfigUpdateRequest) */ {
 public:
  inline ConfigUpdateRequest() : ConfigUpdateRequest(nullptr) {};
  virtual ~ConfigUpdateRequest();

  ConfigUpdateRequest(const ConfigUpdateRequest& from);
  ConfigUpdateRequest(ConfigUpdateRequest&& from) noexcept
    : ConfigUpdateRequest() {
    *this = ::std::move(from);
  }

  inline ConfigUpdateRequest& operator=(const ConfigUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigUpdateRequest& operator=(ConfigUpdateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const ConfigUpdateRequest*>(
               &_ConfigUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConfigUpdateRequest& a, ConfigUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigUpdateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigUpdateRequest* New() const final {
    return CreateMaybeMessage<ConfigUpdateRequest>(nullptr);
  }

  ConfigUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigUpdateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigUpdateRequest& from);
  void MergeFrom(const ConfigUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigUpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beesync.ConfigUpdateRequest";
  }
  protected:
  explicit ConfigUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beesync_2eproto);
    return ::descriptor_table_beesync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRstsFieldNumber = 1,
  };
  // repeated .beegfs.RemoteStorageTarget rsts = 1;
  int rsts_size() const;
  private:
  int _internal_rsts_size() const;
  public:
  void clear_rsts();
  ::beegfs::RemoteStorageTarget* mutable_rsts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::RemoteStorageTarget >*
      mutable_rsts();
  private:
  const ::beegfs::RemoteStorageTarget& _internal_rsts(int index) const;
  ::beegfs::RemoteStorageTarget* _internal_add_rsts();
  public:
  const ::beegfs::RemoteStorageTarget& rsts(int index) const;
  ::beegfs::RemoteStorageTarget* add_rsts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::RemoteStorageTarget >&
      rsts() const;

  // @@protoc_insertion_point(class_scope:beesync.ConfigUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::RemoteStorageTarget > rsts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beesync_2eproto;
};
// -------------------------------------------------------------------

class ConfigUpdateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beesync.ConfigUpdateResponse) */ {
 public:
  inline ConfigUpdateResponse() : ConfigUpdateResponse(nullptr) {};
  virtual ~ConfigUpdateResponse();

  ConfigUpdateResponse(const ConfigUpdateResponse& from);
  ConfigUpdateResponse(ConfigUpdateResponse&& from) noexcept
    : ConfigUpdateResponse() {
    *this = ::std::move(from);
  }

  inline ConfigUpdateResponse& operator=(const ConfigUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigUpdateResponse& operator=(ConfigUpdateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const ConfigUpdateResponse*>(
               &_ConfigUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConfigUpdateResponse& a, ConfigUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigUpdateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigUpdateResponse* New() const final {
    return CreateMaybeMessage<ConfigUpdateResponse>(nullptr);
  }

  ConfigUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigUpdateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigUpdateResponse& from);
  void MergeFrom(const ConfigUpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigUpdateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beesync.ConfigUpdateResponse";
  }
  protected:
  explicit ConfigUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beesync_2eproto);
    return ::descriptor_table_beesync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConfigUpdateResponse_Result Result;
  static constexpr Result UNKNOWN =
    ConfigUpdateResponse_Result_UNKNOWN;
  static constexpr Result SUCCESS =
    ConfigUpdateResponse_Result_SUCCESS;
  static constexpr Result PARTIAL =
    ConfigUpdateResponse_Result_PARTIAL;
  static constexpr Result FAILURE =
    ConfigUpdateResponse_Result_FAILURE;
  static inline bool Result_IsValid(int value) {
    return ConfigUpdateResponse_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    ConfigUpdateResponse_Result_Result_MIN;
  static constexpr Result Result_MAX =
    ConfigUpdateResponse_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    ConfigUpdateResponse_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return ConfigUpdateResponse_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return ConfigUpdateResponse_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(const std::string& name,
      Result* value) {
    return ConfigUpdateResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .beesync.ConfigUpdateResponse.Result result = 1;
  void clear_result();
  ::beesync::ConfigUpdateResponse_Result result() const;
  void set_result(::beesync::ConfigUpdateResponse_Result value);
  private:
  ::beesync::ConfigUpdateResponse_Result _internal_result() const;
  void _internal_set_result(::beesync::ConfigUpdateResponse_Result value);
  public:

  // @@protoc_insertion_point(class_scope:beesync.ConfigUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beesync_2eproto;
};
// -------------------------------------------------------------------

class JobRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beesync.JobRequest) */ {
 public:
  inline JobRequest() : JobRequest(nullptr) {};
  virtual ~JobRequest();

  JobRequest(const JobRequest& from);
  JobRequest(JobRequest&& from) noexcept
    : JobRequest() {
    *this = ::std::move(from);
  }

  inline JobRequest& operator=(const JobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobRequest& operator=(JobRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobRequest* internal_default_instance() {
    return reinterpret_cast<const JobRequest*>(
               &_JobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JobRequest& a, JobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JobRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobRequest* New() const final {
    return CreateMaybeMessage<JobRequest>(nullptr);
  }

  JobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobRequest& from);
  void MergeFrom(const JobRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beesync.JobRequest";
  }
  protected:
  explicit JobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beesync_2eproto);
    return ::descriptor_table_beesync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kRequestFieldNumber = 3,
    kSegmentFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .beegfs.JobStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::beegfs::JobStatus& status() const;
  ::beegfs::JobStatus* release_status();
  ::beegfs::JobStatus* mutable_status();
  void set_allocated_status(::beegfs::JobStatus* status);
  private:
  const ::beegfs::JobStatus& _internal_status() const;
  ::beegfs::JobStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::beegfs::JobStatus* status);
  ::beegfs::JobStatus* unsafe_arena_release_status();

  // .beesync.SyncRequest request = 3;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::beesync::SyncRequest& request() const;
  ::beesync::SyncRequest* release_request();
  ::beesync::SyncRequest* mutable_request();
  void set_allocated_request(::beesync::SyncRequest* request);
  private:
  const ::beesync::SyncRequest& _internal_request() const;
  ::beesync::SyncRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::beesync::SyncRequest* request);
  ::beesync::SyncRequest* unsafe_arena_release_request();

  // .beesync.Segment segment = 4;
  bool has_segment() const;
  private:
  bool _internal_has_segment() const;
  public:
  void clear_segment();
  const ::beesync::Segment& segment() const;
  ::beesync::Segment* release_segment();
  ::beesync::Segment* mutable_segment();
  void set_allocated_segment(::beesync::Segment* segment);
  private:
  const ::beesync::Segment& _internal_segment() const;
  ::beesync::Segment* _internal_mutable_segment();
  public:
  void unsafe_arena_set_allocated_segment(
      ::beesync::Segment* segment);
  ::beesync::Segment* unsafe_arena_release_segment();

  // @@protoc_insertion_point(class_scope:beesync.JobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::beegfs::JobStatus* status_;
  ::beesync::SyncRequest* request_;
  ::beesync::Segment* segment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beesync_2eproto;
};
// -------------------------------------------------------------------

class SyncRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beesync.SyncRequest) */ {
 public:
  inline SyncRequest() : SyncRequest(nullptr) {};
  virtual ~SyncRequest();

  SyncRequest(const SyncRequest& from);
  SyncRequest(SyncRequest&& from) noexcept
    : SyncRequest() {
    *this = ::std::move(from);
  }

  inline SyncRequest& operator=(const SyncRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncRequest& operator=(SyncRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncRequest* internal_default_instance() {
    return reinterpret_cast<const SyncRequest*>(
               &_SyncRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SyncRequest& a, SyncRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncRequest* New() const final {
    return CreateMaybeMessage<SyncRequest>(nullptr);
  }

  SyncRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncRequest& from);
  void MergeFrom(const SyncRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beesync.SyncRequest";
  }
  protected:
  explicit SyncRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beesync_2eproto);
    return ::descriptor_table_beesync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SyncRequest_Operation Operation;
  static constexpr Operation UNKNOWN =
    SyncRequest_Operation_UNKNOWN;
  static constexpr Operation UPLOAD =
    SyncRequest_Operation_UPLOAD;
  static constexpr Operation DOWNLOAD =
    SyncRequest_Operation_DOWNLOAD;
  static inline bool Operation_IsValid(int value) {
    return SyncRequest_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    SyncRequest_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    SyncRequest_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    SyncRequest_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return SyncRequest_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return SyncRequest_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(const std::string& name,
      Operation* value) {
    return SyncRequest_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 1,
    kOperationFieldNumber = 2,
  };
  // .beegfs.BeeGFSEntry entry = 1;
  bool has_entry() const;
  private:
  bool _internal_has_entry() const;
  public:
  void clear_entry();
  const ::beegfs::BeeGFSEntry& entry() const;
  ::beegfs::BeeGFSEntry* release_entry();
  ::beegfs::BeeGFSEntry* mutable_entry();
  void set_allocated_entry(::beegfs::BeeGFSEntry* entry);
  private:
  const ::beegfs::BeeGFSEntry& _internal_entry() const;
  ::beegfs::BeeGFSEntry* _internal_mutable_entry();
  public:
  void unsafe_arena_set_allocated_entry(
      ::beegfs::BeeGFSEntry* entry);
  ::beegfs::BeeGFSEntry* unsafe_arena_release_entry();

  // .beesync.SyncRequest.Operation operation = 2;
  void clear_operation();
  ::beesync::SyncRequest_Operation operation() const;
  void set_operation(::beesync::SyncRequest_Operation value);
  private:
  ::beesync::SyncRequest_Operation _internal_operation() const;
  void _internal_set_operation(::beesync::SyncRequest_Operation value);
  public:

  // @@protoc_insertion_point(class_scope:beesync.SyncRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::beegfs::BeeGFSEntry* entry_;
  int operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beesync_2eproto;
};
// -------------------------------------------------------------------

class JobResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beesync.JobResponse) */ {
 public:
  inline JobResponse() : JobResponse(nullptr) {};
  virtual ~JobResponse();

  JobResponse(const JobResponse& from);
  JobResponse(JobResponse&& from) noexcept
    : JobResponse() {
    *this = ::std::move(from);
  }

  inline JobResponse& operator=(const JobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobResponse& operator=(JobResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobResponse* internal_default_instance() {
    return reinterpret_cast<const JobResponse*>(
               &_JobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JobResponse& a, JobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JobResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobResponse* New() const final {
    return CreateMaybeMessage<JobResponse>(nullptr);
  }

  JobResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobResponse& from);
  void MergeFrom(const JobResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beesync.JobResponse";
  }
  protected:
  explicit JobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beesync_2eproto);
    return ::descriptor_table_beesync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .beegfs.JobStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::beegfs::JobStatus& status() const;
  ::beegfs::JobStatus* release_status();
  ::beegfs::JobStatus* mutable_status();
  void set_allocated_status(::beegfs::JobStatus* status);
  private:
  const ::beegfs::JobStatus& _internal_status() const;
  ::beegfs::JobStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::beegfs::JobStatus* status);
  ::beegfs::JobStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:beesync.JobResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::beegfs::JobStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beesync_2eproto;
};
// -------------------------------------------------------------------

class Segment_Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beesync.Segment.Config) */ {
 public:
  inline Segment_Config() : Segment_Config(nullptr) {};
  virtual ~Segment_Config();

  Segment_Config(const Segment_Config& from);
  Segment_Config(Segment_Config&& from) noexcept
    : Segment_Config() {
    *this = ::std::move(from);
  }

  inline Segment_Config& operator=(const Segment_Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Segment_Config& operator=(Segment_Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Segment_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Segment_Config* internal_default_instance() {
    return reinterpret_cast<const Segment_Config*>(
               &_Segment_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Segment_Config& a, Segment_Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Segment_Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Segment_Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Segment_Config* New() const final {
    return CreateMaybeMessage<Segment_Config>(nullptr);
  }

  Segment_Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Segment_Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Segment_Config& from);
  void MergeFrom(const Segment_Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Segment_Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beesync.Segment.Config";
  }
  protected:
  explicit Segment_Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beesync_2eproto);
    return ::descriptor_table_beesync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutostartMaxSizeFieldNumber = 1,
  };
  // uint32 autostart_max_size = 1;
  void clear_autostart_max_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 autostart_max_size() const;
  void set_autostart_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_autostart_max_size() const;
  void _internal_set_autostart_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:beesync.Segment.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 autostart_max_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beesync_2eproto;
};
// -------------------------------------------------------------------

class Segment_S3_CompletedParts PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beesync.Segment.S3.CompletedParts) */ {
 public:
  inline Segment_S3_CompletedParts() : Segment_S3_CompletedParts(nullptr) {};
  virtual ~Segment_S3_CompletedParts();

  Segment_S3_CompletedParts(const Segment_S3_CompletedParts& from);
  Segment_S3_CompletedParts(Segment_S3_CompletedParts&& from) noexcept
    : Segment_S3_CompletedParts() {
    *this = ::std::move(from);
  }

  inline Segment_S3_CompletedParts& operator=(const Segment_S3_CompletedParts& from) {
    CopyFrom(from);
    return *this;
  }
  inline Segment_S3_CompletedParts& operator=(Segment_S3_CompletedParts&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Segment_S3_CompletedParts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Segment_S3_CompletedParts* internal_default_instance() {
    return reinterpret_cast<const Segment_S3_CompletedParts*>(
               &_Segment_S3_CompletedParts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Segment_S3_CompletedParts& a, Segment_S3_CompletedParts& b) {
    a.Swap(&b);
  }
  inline void Swap(Segment_S3_CompletedParts* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Segment_S3_CompletedParts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Segment_S3_CompletedParts* New() const final {
    return CreateMaybeMessage<Segment_S3_CompletedParts>(nullptr);
  }

  Segment_S3_CompletedParts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Segment_S3_CompletedParts>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Segment_S3_CompletedParts& from);
  void MergeFrom(const Segment_S3_CompletedParts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Segment_S3_CompletedParts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beesync.Segment.S3.CompletedParts";
  }
  protected:
  explicit Segment_S3_CompletedParts(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beesync_2eproto);
    return ::descriptor_table_beesync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityTagFieldNumber = 2,
    kChecksumFieldNumber = 3,
    kPartNumberFieldNumber = 1,
  };
  // string entity_tag = 2;
  void clear_entity_tag();
  const std::string& entity_tag() const;
  void set_entity_tag(const std::string& value);
  void set_entity_tag(std::string&& value);
  void set_entity_tag(const char* value);
  void set_entity_tag(const char* value, size_t size);
  std::string* mutable_entity_tag();
  std::string* release_entity_tag();
  void set_allocated_entity_tag(std::string* entity_tag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_entity_tag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_entity_tag(
      std::string* entity_tag);
  private:
  const std::string& _internal_entity_tag() const;
  void _internal_set_entity_tag(const std::string& value);
  std::string* _internal_mutable_entity_tag();
  public:

  // string checksum = 3;
  void clear_checksum();
  const std::string& checksum() const;
  void set_checksum(const std::string& value);
  void set_checksum(std::string&& value);
  void set_checksum(const char* value);
  void set_checksum(const char* value, size_t size);
  std::string* mutable_checksum();
  std::string* release_checksum();
  void set_allocated_checksum(std::string* checksum);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_checksum();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_checksum(
      std::string* checksum);
  private:
  const std::string& _internal_checksum() const;
  void _internal_set_checksum(const std::string& value);
  std::string* _internal_mutable_checksum();
  public:

  // int32 part_number = 1;
  void clear_part_number();
  ::PROTOBUF_NAMESPACE_ID::int32 part_number() const;
  void set_part_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_part_number() const;
  void _internal_set_part_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:beesync.Segment.S3.CompletedParts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checksum_;
  ::PROTOBUF_NAMESPACE_ID::int32 part_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beesync_2eproto;
};
// -------------------------------------------------------------------

class Segment_S3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beesync.Segment.S3) */ {
 public:
  inline Segment_S3() : Segment_S3(nullptr) {};
  virtual ~Segment_S3();

  Segment_S3(const Segment_S3& from);
  Segment_S3(Segment_S3&& from) noexcept
    : Segment_S3() {
    *this = ::std::move(from);
  }

  inline Segment_S3& operator=(const Segment_S3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Segment_S3& operator=(Segment_S3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Segment_S3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Segment_S3* internal_default_instance() {
    return reinterpret_cast<const Segment_S3*>(
               &_Segment_S3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Segment_S3& a, Segment_S3& b) {
    a.Swap(&b);
  }
  inline void Swap(Segment_S3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Segment_S3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Segment_S3* New() const final {
    return CreateMaybeMessage<Segment_S3>(nullptr);
  }

  Segment_S3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Segment_S3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Segment_S3& from);
  void MergeFrom(const Segment_S3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Segment_S3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beesync.Segment.S3";
  }
  protected:
  explicit Segment_S3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beesync_2eproto);
    return ::descriptor_table_beesync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Segment_S3_CompletedParts CompletedParts;

  // accessors -------------------------------------------------------

  enum : int {
    kCompletedPartsFieldNumber = 4,
    kMultipartIdFieldNumber = 1,
    kPartsStartFieldNumber = 2,
    kPartsStopFieldNumber = 3,
  };
  // repeated .beesync.Segment.S3.CompletedParts completed_parts = 4;
  int completed_parts_size() const;
  private:
  int _internal_completed_parts_size() const;
  public:
  void clear_completed_parts();
  ::beesync::Segment_S3_CompletedParts* mutable_completed_parts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beesync::Segment_S3_CompletedParts >*
      mutable_completed_parts();
  private:
  const ::beesync::Segment_S3_CompletedParts& _internal_completed_parts(int index) const;
  ::beesync::Segment_S3_CompletedParts* _internal_add_completed_parts();
  public:
  const ::beesync::Segment_S3_CompletedParts& completed_parts(int index) const;
  ::beesync::Segment_S3_CompletedParts* add_completed_parts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beesync::Segment_S3_CompletedParts >&
      completed_parts() const;

  // string multipart_id = 1;
  void clear_multipart_id();
  const std::string& multipart_id() const;
  void set_multipart_id(const std::string& value);
  void set_multipart_id(std::string&& value);
  void set_multipart_id(const char* value);
  void set_multipart_id(const char* value, size_t size);
  std::string* mutable_multipart_id();
  std::string* release_multipart_id();
  void set_allocated_multipart_id(std::string* multipart_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_multipart_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_multipart_id(
      std::string* multipart_id);
  private:
  const std::string& _internal_multipart_id() const;
  void _internal_set_multipart_id(const std::string& value);
  std::string* _internal_mutable_multipart_id();
  public:

  // int32 parts_start = 2;
  void clear_parts_start();
  ::PROTOBUF_NAMESPACE_ID::int32 parts_start() const;
  void set_parts_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parts_start() const;
  void _internal_set_parts_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 parts_stop = 3;
  void clear_parts_stop();
  ::PROTOBUF_NAMESPACE_ID::int32 parts_stop() const;
  void set_parts_stop(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parts_stop() const;
  void _internal_set_parts_stop(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:beesync.Segment.S3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beesync::Segment_S3_CompletedParts > completed_parts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multipart_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 parts_start_;
  ::PROTOBUF_NAMESPACE_ID::int32 parts_stop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beesync_2eproto;
};
// -------------------------------------------------------------------

class Segment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:beesync.Segment) */ {
 public:
  inline Segment() : Segment(nullptr) {};
  virtual ~Segment();

  Segment(const Segment& from);
  Segment(Segment&& from) noexcept
    : Segment() {
    *this = ::std::move(from);
  }

  inline Segment& operator=(const Segment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Segment& operator=(Segment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Segment& default_instance();

  enum MethodCase {
    kDefault = 5,
    kS3 = 6,
    METHOD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Segment* internal_default_instance() {
    return reinterpret_cast<const Segment*>(
               &_Segment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Segment& a, Segment& b) {
    a.Swap(&b);
  }
  inline void Swap(Segment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Segment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Segment* New() const final {
    return CreateMaybeMessage<Segment>(nullptr);
  }

  Segment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Segment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Segment& from);
  void MergeFrom(const Segment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Segment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "beesync.Segment";
  }
  protected:
  explicit Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beesync_2eproto);
    return ::descriptor_table_beesync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Segment_Config Config;
  typedef Segment_S3 S3;

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 4,
    kOffsetStartFieldNumber = 1,
    kOffsetStopFieldNumber = 2,
    kFileSizeFieldNumber = 3,
    kDefaultFieldNumber = 5,
    kS3FieldNumber = 6,
  };
  // .beesync.Segment.Config config = 4;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::beesync::Segment_Config& config() const;
  ::beesync::Segment_Config* release_config();
  ::beesync::Segment_Config* mutable_config();
  void set_allocated_config(::beesync::Segment_Config* config);
  private:
  const ::beesync::Segment_Config& _internal_config() const;
  ::beesync::Segment_Config* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::beesync::Segment_Config* config);
  ::beesync::Segment_Config* unsafe_arena_release_config();

  // int64 offset_start = 1;
  void clear_offset_start();
  ::PROTOBUF_NAMESPACE_ID::int64 offset_start() const;
  void set_offset_start(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset_start() const;
  void _internal_set_offset_start(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offset_stop = 2;
  void clear_offset_stop();
  ::PROTOBUF_NAMESPACE_ID::int64 offset_stop() const;
  void set_offset_stop(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset_stop() const;
  void _internal_set_offset_stop(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 file_size = 3;
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool default = 5;
  private:
  bool _internal_has_default_() const;
  public:
  void clear_default_();
  bool default_() const;
  void set_default_(bool value);
  private:
  bool _internal_default_() const;
  void _internal_set_default_(bool value);
  public:

  // .beesync.Segment.S3 s3 = 6;
  bool has_s3() const;
  private:
  bool _internal_has_s3() const;
  public:
  void clear_s3();
  const ::beesync::Segment_S3& s3() const;
  ::beesync::Segment_S3* release_s3();
  ::beesync::Segment_S3* mutable_s3();
  void set_allocated_s3(::beesync::Segment_S3* s3);
  private:
  const ::beesync::Segment_S3& _internal_s3() const;
  ::beesync::Segment_S3* _internal_mutable_s3();
  public:
  void unsafe_arena_set_allocated_s3(
      ::beesync::Segment_S3* s3);
  ::beesync::Segment_S3* unsafe_arena_release_s3();

  void clear_method();
  MethodCase method_case() const;
  // @@protoc_insertion_point(class_scope:beesync.Segment)
 private:
  class _Internal;
  void set_has_default_();
  void set_has_s3();

  inline bool has_method() const;
  inline void clear_has_method();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::beesync::Segment_Config* config_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_start_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_stop_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  union MethodUnion {
    MethodUnion() {}
    bool default__;
    ::beesync::Segment_S3* s3_;
  } method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_beesync_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigUpdateRequest

// repeated .beegfs.RemoteStorageTarget rsts = 1;
inline int ConfigUpdateRequest::_internal_rsts_size() const {
  return rsts_.size();
}
inline int ConfigUpdateRequest::rsts_size() const {
  return _internal_rsts_size();
}
inline ::beegfs::RemoteStorageTarget* ConfigUpdateRequest::mutable_rsts(int index) {
  // @@protoc_insertion_point(field_mutable:beesync.ConfigUpdateRequest.rsts)
  return rsts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::RemoteStorageTarget >*
ConfigUpdateRequest::mutable_rsts() {
  // @@protoc_insertion_point(field_mutable_list:beesync.ConfigUpdateRequest.rsts)
  return &rsts_;
}
inline const ::beegfs::RemoteStorageTarget& ConfigUpdateRequest::_internal_rsts(int index) const {
  return rsts_.Get(index);
}
inline const ::beegfs::RemoteStorageTarget& ConfigUpdateRequest::rsts(int index) const {
  // @@protoc_insertion_point(field_get:beesync.ConfigUpdateRequest.rsts)
  return _internal_rsts(index);
}
inline ::beegfs::RemoteStorageTarget* ConfigUpdateRequest::_internal_add_rsts() {
  return rsts_.Add();
}
inline ::beegfs::RemoteStorageTarget* ConfigUpdateRequest::add_rsts() {
  // @@protoc_insertion_point(field_add:beesync.ConfigUpdateRequest.rsts)
  return _internal_add_rsts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beegfs::RemoteStorageTarget >&
ConfigUpdateRequest::rsts() const {
  // @@protoc_insertion_point(field_list:beesync.ConfigUpdateRequest.rsts)
  return rsts_;
}

// -------------------------------------------------------------------

// ConfigUpdateResponse

// .beesync.ConfigUpdateResponse.Result result = 1;
inline void ConfigUpdateResponse::clear_result() {
  result_ = 0;
}
inline ::beesync::ConfigUpdateResponse_Result ConfigUpdateResponse::_internal_result() const {
  return static_cast< ::beesync::ConfigUpdateResponse_Result >(result_);
}
inline ::beesync::ConfigUpdateResponse_Result ConfigUpdateResponse::result() const {
  // @@protoc_insertion_point(field_get:beesync.ConfigUpdateResponse.result)
  return _internal_result();
}
inline void ConfigUpdateResponse::_internal_set_result(::beesync::ConfigUpdateResponse_Result value) {
  
  result_ = value;
}
inline void ConfigUpdateResponse::set_result(::beesync::ConfigUpdateResponse_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:beesync.ConfigUpdateResponse.result)
}

// string message = 2;
inline void ConfigUpdateResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConfigUpdateResponse::message() const {
  // @@protoc_insertion_point(field_get:beesync.ConfigUpdateResponse.message)
  return _internal_message();
}
inline void ConfigUpdateResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:beesync.ConfigUpdateResponse.message)
}
inline std::string* ConfigUpdateResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:beesync.ConfigUpdateResponse.message)
  return _internal_mutable_message();
}
inline const std::string& ConfigUpdateResponse::_internal_message() const {
  return message_.Get();
}
inline void ConfigUpdateResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigUpdateResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beesync.ConfigUpdateResponse.message)
}
inline void ConfigUpdateResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beesync.ConfigUpdateResponse.message)
}
inline void ConfigUpdateResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beesync.ConfigUpdateResponse.message)
}
inline std::string* ConfigUpdateResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigUpdateResponse::release_message() {
  // @@protoc_insertion_point(field_release:beesync.ConfigUpdateResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigUpdateResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beesync.ConfigUpdateResponse.message)
}
inline std::string* ConfigUpdateResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beesync.ConfigUpdateResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConfigUpdateResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.ConfigUpdateResponse.message)
}

// -------------------------------------------------------------------

// JobRequest

// string id = 1;
inline void JobRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobRequest::id() const {
  // @@protoc_insertion_point(field_get:beesync.JobRequest.id)
  return _internal_id();
}
inline void JobRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:beesync.JobRequest.id)
}
inline std::string* JobRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:beesync.JobRequest.id)
  return _internal_mutable_id();
}
inline const std::string& JobRequest::_internal_id() const {
  return id_.Get();
}
inline void JobRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beesync.JobRequest.id)
}
inline void JobRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beesync.JobRequest.id)
}
inline void JobRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beesync.JobRequest.id)
}
inline std::string* JobRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobRequest::release_id() {
  // @@protoc_insertion_point(field_release:beesync.JobRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beesync.JobRequest.id)
}
inline std::string* JobRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beesync.JobRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JobRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.JobRequest.id)
}

// .beegfs.JobStatus status = 2;
inline bool JobRequest::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool JobRequest::has_status() const {
  return _internal_has_status();
}
inline const ::beegfs::JobStatus& JobRequest::_internal_status() const {
  const ::beegfs::JobStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::beegfs::JobStatus*>(
      &::beegfs::_JobStatus_default_instance_);
}
inline const ::beegfs::JobStatus& JobRequest::status() const {
  // @@protoc_insertion_point(field_get:beesync.JobRequest.status)
  return _internal_status();
}
inline void JobRequest::unsafe_arena_set_allocated_status(
    ::beegfs::JobStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.JobRequest.status)
}
inline ::beegfs::JobStatus* JobRequest::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::beegfs::JobStatus* JobRequest::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:beesync.JobRequest.status)
  
  ::beegfs::JobStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::beegfs::JobStatus* JobRequest::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::beegfs::JobStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::beegfs::JobStatus* JobRequest::mutable_status() {
  // @@protoc_insertion_point(field_mutable:beesync.JobRequest.status)
  return _internal_mutable_status();
}
inline void JobRequest::set_allocated_status(::beegfs::JobStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:beesync.JobRequest.status)
}

// .beesync.SyncRequest request = 3;
inline bool JobRequest::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool JobRequest::has_request() const {
  return _internal_has_request();
}
inline void JobRequest::clear_request() {
  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::beesync::SyncRequest& JobRequest::_internal_request() const {
  const ::beesync::SyncRequest* p = request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::beesync::SyncRequest*>(
      &::beesync::_SyncRequest_default_instance_);
}
inline const ::beesync::SyncRequest& JobRequest::request() const {
  // @@protoc_insertion_point(field_get:beesync.JobRequest.request)
  return _internal_request();
}
inline void JobRequest::unsafe_arena_set_allocated_request(
    ::beesync::SyncRequest* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.JobRequest.request)
}
inline ::beesync::SyncRequest* JobRequest::release_request() {
  auto temp = unsafe_arena_release_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::beesync::SyncRequest* JobRequest::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:beesync.JobRequest.request)
  
  ::beesync::SyncRequest* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::beesync::SyncRequest* JobRequest::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::beesync::SyncRequest>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::beesync::SyncRequest* JobRequest::mutable_request() {
  // @@protoc_insertion_point(field_mutable:beesync.JobRequest.request)
  return _internal_mutable_request();
}
inline void JobRequest::set_allocated_request(::beesync::SyncRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:beesync.JobRequest.request)
}

// .beesync.Segment segment = 4;
inline bool JobRequest::_internal_has_segment() const {
  return this != internal_default_instance() && segment_ != nullptr;
}
inline bool JobRequest::has_segment() const {
  return _internal_has_segment();
}
inline void JobRequest::clear_segment() {
  if (GetArena() == nullptr && segment_ != nullptr) {
    delete segment_;
  }
  segment_ = nullptr;
}
inline const ::beesync::Segment& JobRequest::_internal_segment() const {
  const ::beesync::Segment* p = segment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::beesync::Segment*>(
      &::beesync::_Segment_default_instance_);
}
inline const ::beesync::Segment& JobRequest::segment() const {
  // @@protoc_insertion_point(field_get:beesync.JobRequest.segment)
  return _internal_segment();
}
inline void JobRequest::unsafe_arena_set_allocated_segment(
    ::beesync::Segment* segment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(segment_);
  }
  segment_ = segment;
  if (segment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.JobRequest.segment)
}
inline ::beesync::Segment* JobRequest::release_segment() {
  auto temp = unsafe_arena_release_segment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::beesync::Segment* JobRequest::unsafe_arena_release_segment() {
  // @@protoc_insertion_point(field_release:beesync.JobRequest.segment)
  
  ::beesync::Segment* temp = segment_;
  segment_ = nullptr;
  return temp;
}
inline ::beesync::Segment* JobRequest::_internal_mutable_segment() {
  
  if (segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::beesync::Segment>(GetArena());
    segment_ = p;
  }
  return segment_;
}
inline ::beesync::Segment* JobRequest::mutable_segment() {
  // @@protoc_insertion_point(field_mutable:beesync.JobRequest.segment)
  return _internal_mutable_segment();
}
inline void JobRequest::set_allocated_segment(::beesync::Segment* segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete segment_;
  }
  if (segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(segment);
    if (message_arena != submessage_arena) {
      segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segment, submessage_arena);
    }
    
  } else {
    
  }
  segment_ = segment;
  // @@protoc_insertion_point(field_set_allocated:beesync.JobRequest.segment)
}

// -------------------------------------------------------------------

// SyncRequest

// .beegfs.BeeGFSEntry entry = 1;
inline bool SyncRequest::_internal_has_entry() const {
  return this != internal_default_instance() && entry_ != nullptr;
}
inline bool SyncRequest::has_entry() const {
  return _internal_has_entry();
}
inline const ::beegfs::BeeGFSEntry& SyncRequest::_internal_entry() const {
  const ::beegfs::BeeGFSEntry* p = entry_;
  return p != nullptr ? *p : *reinterpret_cast<const ::beegfs::BeeGFSEntry*>(
      &::beegfs::_BeeGFSEntry_default_instance_);
}
inline const ::beegfs::BeeGFSEntry& SyncRequest::entry() const {
  // @@protoc_insertion_point(field_get:beesync.SyncRequest.entry)
  return _internal_entry();
}
inline void SyncRequest::unsafe_arena_set_allocated_entry(
    ::beegfs::BeeGFSEntry* entry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entry_);
  }
  entry_ = entry;
  if (entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.SyncRequest.entry)
}
inline ::beegfs::BeeGFSEntry* SyncRequest::release_entry() {
  auto temp = unsafe_arena_release_entry();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::beegfs::BeeGFSEntry* SyncRequest::unsafe_arena_release_entry() {
  // @@protoc_insertion_point(field_release:beesync.SyncRequest.entry)
  
  ::beegfs::BeeGFSEntry* temp = entry_;
  entry_ = nullptr;
  return temp;
}
inline ::beegfs::BeeGFSEntry* SyncRequest::_internal_mutable_entry() {
  
  if (entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::beegfs::BeeGFSEntry>(GetArena());
    entry_ = p;
  }
  return entry_;
}
inline ::beegfs::BeeGFSEntry* SyncRequest::mutable_entry() {
  // @@protoc_insertion_point(field_mutable:beesync.SyncRequest.entry)
  return _internal_mutable_entry();
}
inline void SyncRequest::set_allocated_entry(::beegfs::BeeGFSEntry* entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entry_);
  }
  if (entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entry)->GetArena();
    if (message_arena != submessage_arena) {
      entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entry, submessage_arena);
    }
    
  } else {
    
  }
  entry_ = entry;
  // @@protoc_insertion_point(field_set_allocated:beesync.SyncRequest.entry)
}

// .beesync.SyncRequest.Operation operation = 2;
inline void SyncRequest::clear_operation() {
  operation_ = 0;
}
inline ::beesync::SyncRequest_Operation SyncRequest::_internal_operation() const {
  return static_cast< ::beesync::SyncRequest_Operation >(operation_);
}
inline ::beesync::SyncRequest_Operation SyncRequest::operation() const {
  // @@protoc_insertion_point(field_get:beesync.SyncRequest.operation)
  return _internal_operation();
}
inline void SyncRequest::_internal_set_operation(::beesync::SyncRequest_Operation value) {
  
  operation_ = value;
}
inline void SyncRequest::set_operation(::beesync::SyncRequest_Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:beesync.SyncRequest.operation)
}

// -------------------------------------------------------------------

// JobResponse

// string id = 1;
inline void JobResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JobResponse::id() const {
  // @@protoc_insertion_point(field_get:beesync.JobResponse.id)
  return _internal_id();
}
inline void JobResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:beesync.JobResponse.id)
}
inline std::string* JobResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:beesync.JobResponse.id)
  return _internal_mutable_id();
}
inline const std::string& JobResponse::_internal_id() const {
  return id_.Get();
}
inline void JobResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JobResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beesync.JobResponse.id)
}
inline void JobResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beesync.JobResponse.id)
}
inline void JobResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beesync.JobResponse.id)
}
inline std::string* JobResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JobResponse::release_id() {
  // @@protoc_insertion_point(field_release:beesync.JobResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beesync.JobResponse.id)
}
inline std::string* JobResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beesync.JobResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JobResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.JobResponse.id)
}

// .beegfs.JobStatus status = 2;
inline bool JobResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool JobResponse::has_status() const {
  return _internal_has_status();
}
inline const ::beegfs::JobStatus& JobResponse::_internal_status() const {
  const ::beegfs::JobStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::beegfs::JobStatus*>(
      &::beegfs::_JobStatus_default_instance_);
}
inline const ::beegfs::JobStatus& JobResponse::status() const {
  // @@protoc_insertion_point(field_get:beesync.JobResponse.status)
  return _internal_status();
}
inline void JobResponse::unsafe_arena_set_allocated_status(
    ::beegfs::JobStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.JobResponse.status)
}
inline ::beegfs::JobStatus* JobResponse::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::beegfs::JobStatus* JobResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:beesync.JobResponse.status)
  
  ::beegfs::JobStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::beegfs::JobStatus* JobResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::beegfs::JobStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::beegfs::JobStatus* JobResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:beesync.JobResponse.status)
  return _internal_mutable_status();
}
inline void JobResponse::set_allocated_status(::beegfs::JobStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:beesync.JobResponse.status)
}

// -------------------------------------------------------------------

// Segment_Config

// uint32 autostart_max_size = 1;
inline void Segment_Config::clear_autostart_max_size() {
  autostart_max_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Segment_Config::_internal_autostart_max_size() const {
  return autostart_max_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Segment_Config::autostart_max_size() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.Config.autostart_max_size)
  return _internal_autostart_max_size();
}
inline void Segment_Config::_internal_set_autostart_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  autostart_max_size_ = value;
}
inline void Segment_Config::set_autostart_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_autostart_max_size(value);
  // @@protoc_insertion_point(field_set:beesync.Segment.Config.autostart_max_size)
}

// -------------------------------------------------------------------

// Segment_S3_CompletedParts

// int32 part_number = 1;
inline void Segment_S3_CompletedParts::clear_part_number() {
  part_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Segment_S3_CompletedParts::_internal_part_number() const {
  return part_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Segment_S3_CompletedParts::part_number() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.S3.CompletedParts.part_number)
  return _internal_part_number();
}
inline void Segment_S3_CompletedParts::_internal_set_part_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  part_number_ = value;
}
inline void Segment_S3_CompletedParts::set_part_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_part_number(value);
  // @@protoc_insertion_point(field_set:beesync.Segment.S3.CompletedParts.part_number)
}

// string entity_tag = 2;
inline void Segment_S3_CompletedParts::clear_entity_tag() {
  entity_tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Segment_S3_CompletedParts::entity_tag() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.S3.CompletedParts.entity_tag)
  return _internal_entity_tag();
}
inline void Segment_S3_CompletedParts::set_entity_tag(const std::string& value) {
  _internal_set_entity_tag(value);
  // @@protoc_insertion_point(field_set:beesync.Segment.S3.CompletedParts.entity_tag)
}
inline std::string* Segment_S3_CompletedParts::mutable_entity_tag() {
  // @@protoc_insertion_point(field_mutable:beesync.Segment.S3.CompletedParts.entity_tag)
  return _internal_mutable_entity_tag();
}
inline const std::string& Segment_S3_CompletedParts::_internal_entity_tag() const {
  return entity_tag_.Get();
}
inline void Segment_S3_CompletedParts::_internal_set_entity_tag(const std::string& value) {
  
  entity_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Segment_S3_CompletedParts::set_entity_tag(std::string&& value) {
  
  entity_tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beesync.Segment.S3.CompletedParts.entity_tag)
}
inline void Segment_S3_CompletedParts::set_entity_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beesync.Segment.S3.CompletedParts.entity_tag)
}
inline void Segment_S3_CompletedParts::set_entity_tag(const char* value,
    size_t size) {
  
  entity_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beesync.Segment.S3.CompletedParts.entity_tag)
}
inline std::string* Segment_S3_CompletedParts::_internal_mutable_entity_tag() {
  
  return entity_tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Segment_S3_CompletedParts::release_entity_tag() {
  // @@protoc_insertion_point(field_release:beesync.Segment.S3.CompletedParts.entity_tag)
  return entity_tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Segment_S3_CompletedParts::set_allocated_entity_tag(std::string* entity_tag) {
  if (entity_tag != nullptr) {
    
  } else {
    
  }
  entity_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beesync.Segment.S3.CompletedParts.entity_tag)
}
inline std::string* Segment_S3_CompletedParts::unsafe_arena_release_entity_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beesync.Segment.S3.CompletedParts.entity_tag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return entity_tag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Segment_S3_CompletedParts::unsafe_arena_set_allocated_entity_tag(
    std::string* entity_tag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (entity_tag != nullptr) {
    
  } else {
    
  }
  entity_tag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      entity_tag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.Segment.S3.CompletedParts.entity_tag)
}

// string checksum = 3;
inline void Segment_S3_CompletedParts::clear_checksum() {
  checksum_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Segment_S3_CompletedParts::checksum() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.S3.CompletedParts.checksum)
  return _internal_checksum();
}
inline void Segment_S3_CompletedParts::set_checksum(const std::string& value) {
  _internal_set_checksum(value);
  // @@protoc_insertion_point(field_set:beesync.Segment.S3.CompletedParts.checksum)
}
inline std::string* Segment_S3_CompletedParts::mutable_checksum() {
  // @@protoc_insertion_point(field_mutable:beesync.Segment.S3.CompletedParts.checksum)
  return _internal_mutable_checksum();
}
inline const std::string& Segment_S3_CompletedParts::_internal_checksum() const {
  return checksum_.Get();
}
inline void Segment_S3_CompletedParts::_internal_set_checksum(const std::string& value) {
  
  checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Segment_S3_CompletedParts::set_checksum(std::string&& value) {
  
  checksum_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beesync.Segment.S3.CompletedParts.checksum)
}
inline void Segment_S3_CompletedParts::set_checksum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beesync.Segment.S3.CompletedParts.checksum)
}
inline void Segment_S3_CompletedParts::set_checksum(const char* value,
    size_t size) {
  
  checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beesync.Segment.S3.CompletedParts.checksum)
}
inline std::string* Segment_S3_CompletedParts::_internal_mutable_checksum() {
  
  return checksum_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Segment_S3_CompletedParts::release_checksum() {
  // @@protoc_insertion_point(field_release:beesync.Segment.S3.CompletedParts.checksum)
  return checksum_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Segment_S3_CompletedParts::set_allocated_checksum(std::string* checksum) {
  if (checksum != nullptr) {
    
  } else {
    
  }
  checksum_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checksum,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beesync.Segment.S3.CompletedParts.checksum)
}
inline std::string* Segment_S3_CompletedParts::unsafe_arena_release_checksum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beesync.Segment.S3.CompletedParts.checksum)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return checksum_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Segment_S3_CompletedParts::unsafe_arena_set_allocated_checksum(
    std::string* checksum) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (checksum != nullptr) {
    
  } else {
    
  }
  checksum_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      checksum, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.Segment.S3.CompletedParts.checksum)
}

// -------------------------------------------------------------------

// Segment_S3

// string multipart_id = 1;
inline void Segment_S3::clear_multipart_id() {
  multipart_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Segment_S3::multipart_id() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.S3.multipart_id)
  return _internal_multipart_id();
}
inline void Segment_S3::set_multipart_id(const std::string& value) {
  _internal_set_multipart_id(value);
  // @@protoc_insertion_point(field_set:beesync.Segment.S3.multipart_id)
}
inline std::string* Segment_S3::mutable_multipart_id() {
  // @@protoc_insertion_point(field_mutable:beesync.Segment.S3.multipart_id)
  return _internal_mutable_multipart_id();
}
inline const std::string& Segment_S3::_internal_multipart_id() const {
  return multipart_id_.Get();
}
inline void Segment_S3::_internal_set_multipart_id(const std::string& value) {
  
  multipart_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Segment_S3::set_multipart_id(std::string&& value) {
  
  multipart_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:beesync.Segment.S3.multipart_id)
}
inline void Segment_S3::set_multipart_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  multipart_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:beesync.Segment.S3.multipart_id)
}
inline void Segment_S3::set_multipart_id(const char* value,
    size_t size) {
  
  multipart_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:beesync.Segment.S3.multipart_id)
}
inline std::string* Segment_S3::_internal_mutable_multipart_id() {
  
  return multipart_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Segment_S3::release_multipart_id() {
  // @@protoc_insertion_point(field_release:beesync.Segment.S3.multipart_id)
  return multipart_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Segment_S3::set_allocated_multipart_id(std::string* multipart_id) {
  if (multipart_id != nullptr) {
    
  } else {
    
  }
  multipart_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), multipart_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:beesync.Segment.S3.multipart_id)
}
inline std::string* Segment_S3::unsafe_arena_release_multipart_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beesync.Segment.S3.multipart_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return multipart_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Segment_S3::unsafe_arena_set_allocated_multipart_id(
    std::string* multipart_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (multipart_id != nullptr) {
    
  } else {
    
  }
  multipart_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      multipart_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.Segment.S3.multipart_id)
}

// int32 parts_start = 2;
inline void Segment_S3::clear_parts_start() {
  parts_start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Segment_S3::_internal_parts_start() const {
  return parts_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Segment_S3::parts_start() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.S3.parts_start)
  return _internal_parts_start();
}
inline void Segment_S3::_internal_set_parts_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parts_start_ = value;
}
inline void Segment_S3::set_parts_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parts_start(value);
  // @@protoc_insertion_point(field_set:beesync.Segment.S3.parts_start)
}

// int32 parts_stop = 3;
inline void Segment_S3::clear_parts_stop() {
  parts_stop_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Segment_S3::_internal_parts_stop() const {
  return parts_stop_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Segment_S3::parts_stop() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.S3.parts_stop)
  return _internal_parts_stop();
}
inline void Segment_S3::_internal_set_parts_stop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parts_stop_ = value;
}
inline void Segment_S3::set_parts_stop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parts_stop(value);
  // @@protoc_insertion_point(field_set:beesync.Segment.S3.parts_stop)
}

// repeated .beesync.Segment.S3.CompletedParts completed_parts = 4;
inline int Segment_S3::_internal_completed_parts_size() const {
  return completed_parts_.size();
}
inline int Segment_S3::completed_parts_size() const {
  return _internal_completed_parts_size();
}
inline void Segment_S3::clear_completed_parts() {
  completed_parts_.Clear();
}
inline ::beesync::Segment_S3_CompletedParts* Segment_S3::mutable_completed_parts(int index) {
  // @@protoc_insertion_point(field_mutable:beesync.Segment.S3.completed_parts)
  return completed_parts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beesync::Segment_S3_CompletedParts >*
Segment_S3::mutable_completed_parts() {
  // @@protoc_insertion_point(field_mutable_list:beesync.Segment.S3.completed_parts)
  return &completed_parts_;
}
inline const ::beesync::Segment_S3_CompletedParts& Segment_S3::_internal_completed_parts(int index) const {
  return completed_parts_.Get(index);
}
inline const ::beesync::Segment_S3_CompletedParts& Segment_S3::completed_parts(int index) const {
  // @@protoc_insertion_point(field_get:beesync.Segment.S3.completed_parts)
  return _internal_completed_parts(index);
}
inline ::beesync::Segment_S3_CompletedParts* Segment_S3::_internal_add_completed_parts() {
  return completed_parts_.Add();
}
inline ::beesync::Segment_S3_CompletedParts* Segment_S3::add_completed_parts() {
  // @@protoc_insertion_point(field_add:beesync.Segment.S3.completed_parts)
  return _internal_add_completed_parts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::beesync::Segment_S3_CompletedParts >&
Segment_S3::completed_parts() const {
  // @@protoc_insertion_point(field_list:beesync.Segment.S3.completed_parts)
  return completed_parts_;
}

// -------------------------------------------------------------------

// Segment

// int64 offset_start = 1;
inline void Segment::clear_offset_start() {
  offset_start_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Segment::_internal_offset_start() const {
  return offset_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Segment::offset_start() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.offset_start)
  return _internal_offset_start();
}
inline void Segment::_internal_set_offset_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_start_ = value;
}
inline void Segment::set_offset_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset_start(value);
  // @@protoc_insertion_point(field_set:beesync.Segment.offset_start)
}

// int64 offset_stop = 2;
inline void Segment::clear_offset_stop() {
  offset_stop_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Segment::_internal_offset_stop() const {
  return offset_stop_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Segment::offset_stop() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.offset_stop)
  return _internal_offset_stop();
}
inline void Segment::_internal_set_offset_stop(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_stop_ = value;
}
inline void Segment::set_offset_stop(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset_stop(value);
  // @@protoc_insertion_point(field_set:beesync.Segment.offset_stop)
}

// uint64 file_size = 3;
inline void Segment::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Segment::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Segment::file_size() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.file_size)
  return _internal_file_size();
}
inline void Segment::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_size_ = value;
}
inline void Segment::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:beesync.Segment.file_size)
}

// .beesync.Segment.Config config = 4;
inline bool Segment::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool Segment::has_config() const {
  return _internal_has_config();
}
inline void Segment::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::beesync::Segment_Config& Segment::_internal_config() const {
  const ::beesync::Segment_Config* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::beesync::Segment_Config*>(
      &::beesync::_Segment_Config_default_instance_);
}
inline const ::beesync::Segment_Config& Segment::config() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.config)
  return _internal_config();
}
inline void Segment::unsafe_arena_set_allocated_config(
    ::beesync::Segment_Config* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.Segment.config)
}
inline ::beesync::Segment_Config* Segment::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::beesync::Segment_Config* Segment::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:beesync.Segment.config)
  
  ::beesync::Segment_Config* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::beesync::Segment_Config* Segment::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::beesync::Segment_Config>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::beesync::Segment_Config* Segment::mutable_config() {
  // @@protoc_insertion_point(field_mutable:beesync.Segment.config)
  return _internal_mutable_config();
}
inline void Segment::set_allocated_config(::beesync::Segment_Config* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:beesync.Segment.config)
}

// bool default = 5;
inline bool Segment::_internal_has_default_() const {
  return method_case() == kDefault;
}
inline void Segment::set_has_default_() {
  _oneof_case_[0] = kDefault;
}
inline void Segment::clear_default_() {
  if (_internal_has_default_()) {
    method_.default__ = false;
    clear_has_method();
  }
}
inline bool Segment::_internal_default_() const {
  if (_internal_has_default_()) {
    return method_.default__;
  }
  return false;
}
inline void Segment::_internal_set_default_(bool value) {
  if (!_internal_has_default_()) {
    clear_method();
    set_has_default_();
  }
  method_.default__ = value;
}
inline bool Segment::default_() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.default)
  return _internal_default_();
}
inline void Segment::set_default_(bool value) {
  _internal_set_default_(value);
  // @@protoc_insertion_point(field_set:beesync.Segment.default)
}

// .beesync.Segment.S3 s3 = 6;
inline bool Segment::_internal_has_s3() const {
  return method_case() == kS3;
}
inline bool Segment::has_s3() const {
  return _internal_has_s3();
}
inline void Segment::set_has_s3() {
  _oneof_case_[0] = kS3;
}
inline void Segment::clear_s3() {
  if (_internal_has_s3()) {
    if (GetArena() == nullptr) {
      delete method_.s3_;
    }
    clear_has_method();
  }
}
inline ::beesync::Segment_S3* Segment::release_s3() {
  // @@protoc_insertion_point(field_release:beesync.Segment.s3)
  if (_internal_has_s3()) {
    clear_has_method();
      ::beesync::Segment_S3* temp = method_.s3_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    method_.s3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::beesync::Segment_S3& Segment::_internal_s3() const {
  return _internal_has_s3()
      ? *method_.s3_
      : *reinterpret_cast< ::beesync::Segment_S3*>(&::beesync::_Segment_S3_default_instance_);
}
inline const ::beesync::Segment_S3& Segment::s3() const {
  // @@protoc_insertion_point(field_get:beesync.Segment.s3)
  return _internal_s3();
}
inline ::beesync::Segment_S3* Segment::unsafe_arena_release_s3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:beesync.Segment.s3)
  if (_internal_has_s3()) {
    clear_has_method();
    ::beesync::Segment_S3* temp = method_.s3_;
    method_.s3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Segment::unsafe_arena_set_allocated_s3(::beesync::Segment_S3* s3) {
  clear_method();
  if (s3) {
    set_has_s3();
    method_.s3_ = s3;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:beesync.Segment.s3)
}
inline ::beesync::Segment_S3* Segment::_internal_mutable_s3() {
  if (!_internal_has_s3()) {
    clear_method();
    set_has_s3();
    method_.s3_ = CreateMaybeMessage< ::beesync::Segment_S3 >(GetArena());
  }
  return method_.s3_;
}
inline ::beesync::Segment_S3* Segment::mutable_s3() {
  // @@protoc_insertion_point(field_mutable:beesync.Segment.s3)
  return _internal_mutable_s3();
}

inline bool Segment::has_method() const {
  return method_case() != METHOD_NOT_SET;
}
inline void Segment::clear_has_method() {
  _oneof_case_[0] = METHOD_NOT_SET;
}
inline Segment::MethodCase Segment::method_case() const {
  return Segment::MethodCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace beesync

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::beesync::ConfigUpdateResponse_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::beesync::ConfigUpdateResponse_Result>() {
  return ::beesync::ConfigUpdateResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::beesync::SyncRequest_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::beesync::SyncRequest_Operation>() {
  return ::beesync::SyncRequest_Operation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_beesync_2eproto
