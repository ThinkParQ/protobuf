// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beegfs.proto

#include "beegfs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_beegfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoteStorageTarget_Azure_beegfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beegfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteStorageTarget_POSIX_beegfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beegfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteStorageTarget_Policies_beegfs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_beegfs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteStorageTarget_S3_beegfs_2eproto;
namespace beegfs {
class EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Entry> _instance;
} _Entry_default_instance_;
class JobStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobStatus> _instance;
} _JobStatus_default_instance_;
class RemoteStorageTarget_PoliciesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteStorageTarget_Policies> _instance;
} _RemoteStorageTarget_Policies_default_instance_;
class RemoteStorageTarget_S3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteStorageTarget_S3> _instance;
} _RemoteStorageTarget_S3_default_instance_;
class RemoteStorageTarget_AzureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteStorageTarget_Azure> _instance;
} _RemoteStorageTarget_Azure_default_instance_;
class RemoteStorageTarget_POSIXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteStorageTarget_POSIX> _instance;
} _RemoteStorageTarget_POSIX_default_instance_;
class RemoteStorageTargetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteStorageTarget> _instance;
  const ::beegfs::RemoteStorageTarget_S3* s3_;
  const ::beegfs::RemoteStorageTarget_POSIX* posix_;
  const ::beegfs::RemoteStorageTarget_Azure* azure_;
} _RemoteStorageTarget_default_instance_;
}  // namespace beegfs
static void InitDefaultsscc_info_Entry_beegfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beegfs::_Entry_default_instance_;
    new (ptr) ::beegfs::Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beegfs::Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Entry_beegfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Entry_beegfs_2eproto}, {}};

static void InitDefaultsscc_info_JobStatus_beegfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beegfs::_JobStatus_default_instance_;
    new (ptr) ::beegfs::JobStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beegfs::JobStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStatus_beegfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JobStatus_beegfs_2eproto}, {}};

static void InitDefaultsscc_info_RemoteStorageTarget_beegfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beegfs::_RemoteStorageTarget_default_instance_;
    new (ptr) ::beegfs::RemoteStorageTarget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beegfs::RemoteStorageTarget::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RemoteStorageTarget_beegfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_RemoteStorageTarget_beegfs_2eproto}, {
      &scc_info_RemoteStorageTarget_Policies_beegfs_2eproto.base,
      &scc_info_RemoteStorageTarget_S3_beegfs_2eproto.base,
      &scc_info_RemoteStorageTarget_POSIX_beegfs_2eproto.base,
      &scc_info_RemoteStorageTarget_Azure_beegfs_2eproto.base,}};

static void InitDefaultsscc_info_RemoteStorageTarget_Azure_beegfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beegfs::_RemoteStorageTarget_Azure_default_instance_;
    new (ptr) ::beegfs::RemoteStorageTarget_Azure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beegfs::RemoteStorageTarget_Azure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoteStorageTarget_Azure_beegfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RemoteStorageTarget_Azure_beegfs_2eproto}, {
      &scc_info_RemoteStorageTarget_S3_beegfs_2eproto.base,}};

static void InitDefaultsscc_info_RemoteStorageTarget_POSIX_beegfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beegfs::_RemoteStorageTarget_POSIX_default_instance_;
    new (ptr) ::beegfs::RemoteStorageTarget_POSIX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beegfs::RemoteStorageTarget_POSIX::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteStorageTarget_POSIX_beegfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteStorageTarget_POSIX_beegfs_2eproto}, {}};

static void InitDefaultsscc_info_RemoteStorageTarget_Policies_beegfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beegfs::_RemoteStorageTarget_Policies_default_instance_;
    new (ptr) ::beegfs::RemoteStorageTarget_Policies();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beegfs::RemoteStorageTarget_Policies::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteStorageTarget_Policies_beegfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteStorageTarget_Policies_beegfs_2eproto}, {}};

static void InitDefaultsscc_info_RemoteStorageTarget_S3_beegfs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::beegfs::_RemoteStorageTarget_S3_default_instance_;
    new (ptr) ::beegfs::RemoteStorageTarget_S3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::beegfs::RemoteStorageTarget_S3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteStorageTarget_S3_beegfs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteStorageTarget_S3_beegfs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_beegfs_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_beegfs_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_beegfs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_beegfs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beegfs::Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beegfs::Entry, id_),
  PROTOBUF_FIELD_OFFSET(::beegfs::Entry, path_),
  PROTOBUF_FIELD_OFFSET(::beegfs::Entry, remote_storage_target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beegfs::JobStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beegfs::JobStatus, status_),
  PROTOBUF_FIELD_OFFSET(::beegfs::JobStatus, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget_Policies, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget_Policies, local_flock_),
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget_Policies, remote_flock_),
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget_Policies, keep_dir_structure_),
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget_Policies, keep_beegfs_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget_S3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget_S3, bucket_),
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget_S3, region_),
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget_S3, endpoint_),
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget_S3, access_key_),
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget_S3, secret_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget_Azure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget_Azure, s3_),
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget_Azure, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget_POSIX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget_POSIX, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget, id_),
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget, name_),
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget, policies_),
  offsetof(::beegfs::RemoteStorageTargetDefaultTypeInternal, s3_),
  offsetof(::beegfs::RemoteStorageTargetDefaultTypeInternal, posix_),
  offsetof(::beegfs::RemoteStorageTargetDefaultTypeInternal, azure_),
  PROTOBUF_FIELD_OFFSET(::beegfs::RemoteStorageTarget, type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::beegfs::Entry)},
  { 8, -1, sizeof(::beegfs::JobStatus)},
  { 15, -1, sizeof(::beegfs::RemoteStorageTarget_Policies)},
  { 24, -1, sizeof(::beegfs::RemoteStorageTarget_S3)},
  { 34, -1, sizeof(::beegfs::RemoteStorageTarget_Azure)},
  { 41, -1, sizeof(::beegfs::RemoteStorageTarget_POSIX)},
  { 47, -1, sizeof(::beegfs::RemoteStorageTarget)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beegfs::_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beegfs::_JobStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beegfs::_RemoteStorageTarget_Policies_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beegfs::_RemoteStorageTarget_S3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beegfs::_RemoteStorageTarget_Azure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beegfs::_RemoteStorageTarget_POSIX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::beegfs::_RemoteStorageTarget_default_instance_),
};

const char descriptor_table_protodef_beegfs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014beegfs.proto\022\006beegfs\"@\n\005Entry\022\n\n\002id\030\001 "
  "\001(\t\022\014\n\004path\030\002 \001(\t\022\035\n\025remote_storage_targ"
  "et\030\003 \001(\t\"\371\001\n\tJobStatus\022(\n\006status\030\001 \001(\0162\030"
  ".beegfs.JobStatus.Status\022\017\n\007message\030\002 \001("
  "\t\"\260\001\n\006Status\022\013\n\007UNKNOWN\020\000\022\016\n\nUNASSIGNED\020"
  "\001\022\014\n\010ASSIGNED\020\002\022\013\n\007CREATED\020\003\022\017\n\013RESCHEDU"
  "LED\020\004\022\r\n\tSCHEDULED\020\005\022\013\n\007RUNNING\020\006\022\013\n\007STA"
  "LLED\020\007\022\n\n\006PAUSED\020\010\022\n\n\006FAILED\020\t\022\r\n\tCOMPLE"
  "TED\020\n\022\r\n\tCANCELLED\020\013\"\263\004\n\023RemoteStorageTa"
  "rget\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\0226\n\010polici"
  "es\030\003 \001(\0132$.beegfs.RemoteStorageTarget.Po"
  "licies\022,\n\002s3\030\004 \001(\0132\036.beegfs.RemoteStorag"
  "eTarget.S3H\000\0222\n\005posix\030\005 \001(\0132!.beegfs.Rem"
  "oteStorageTarget.POSIXH\000\0222\n\005azure\030\006 \001(\0132"
  "!.beegfs.RemoteStorageTarget.AzureH\000\032o\n\010"
  "Policies\022\023\n\013local_flock\030\001 \001(\010\022\024\n\014remote_"
  "flock\030\002 \001(\010\022\032\n\022keep_dir_structure\030\003 \001(\010\022"
  "\034\n\024keep_beegfs_metadata\030\004 \001(\010\032^\n\002S3\022\016\n\006b"
  "ucket\030\001 \001(\t\022\016\n\006region\030\002 \001(\t\022\020\n\010endpoint\030"
  "\003 \001(\t\022\022\n\naccess_key\030\004 \001(\t\022\022\n\nsecret_key\030"
  "\005 \001(\t\032D\n\005Azure\022*\n\002s3\030\001 \001(\0132\036.beegfs.Remo"
  "teStorageTarget.S3\022\017\n\007account\030\002 \001(\t\032\025\n\005P"
  "OSIX\022\014\n\004path\030\001 \001(\tB\006\n\004typeB0Z.github.com"
  "/thinkparq/protobuf/beegfs/go;beegfsb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_beegfs_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_beegfs_2eproto_sccs[7] = {
  &scc_info_Entry_beegfs_2eproto.base,
  &scc_info_JobStatus_beegfs_2eproto.base,
  &scc_info_RemoteStorageTarget_beegfs_2eproto.base,
  &scc_info_RemoteStorageTarget_Azure_beegfs_2eproto.base,
  &scc_info_RemoteStorageTarget_POSIX_beegfs_2eproto.base,
  &scc_info_RemoteStorageTarget_Policies_beegfs_2eproto.base,
  &scc_info_RemoteStorageTarget_S3_beegfs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_beegfs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_beegfs_2eproto = {
  false, false, descriptor_table_protodef_beegfs_2eproto, "beegfs.proto", 964,
  &descriptor_table_beegfs_2eproto_once, descriptor_table_beegfs_2eproto_sccs, descriptor_table_beegfs_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_beegfs_2eproto::offsets,
  file_level_metadata_beegfs_2eproto, 7, file_level_enum_descriptors_beegfs_2eproto, file_level_service_descriptors_beegfs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_beegfs_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_beegfs_2eproto)), true);
namespace beegfs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobStatus_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_beegfs_2eproto);
  return file_level_enum_descriptors_beegfs_2eproto[0];
}
bool JobStatus_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JobStatus_Status JobStatus::UNKNOWN;
constexpr JobStatus_Status JobStatus::UNASSIGNED;
constexpr JobStatus_Status JobStatus::ASSIGNED;
constexpr JobStatus_Status JobStatus::CREATED;
constexpr JobStatus_Status JobStatus::RESCHEDULED;
constexpr JobStatus_Status JobStatus::SCHEDULED;
constexpr JobStatus_Status JobStatus::RUNNING;
constexpr JobStatus_Status JobStatus::STALLED;
constexpr JobStatus_Status JobStatus::PAUSED;
constexpr JobStatus_Status JobStatus::FAILED;
constexpr JobStatus_Status JobStatus::COMPLETED;
constexpr JobStatus_Status JobStatus::CANCELLED;
constexpr JobStatus_Status JobStatus::Status_MIN;
constexpr JobStatus_Status JobStatus::Status_MAX;
constexpr int JobStatus::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Entry::InitAsDefaultInstance() {
}
class Entry::_Internal {
 public:
};

Entry::Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beegfs.Entry)
}
Entry::Entry(const Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  remote_storage_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_storage_target().empty()) {
    remote_storage_target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_remote_storage_target(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:beegfs.Entry)
}

void Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Entry_beegfs_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_storage_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:beegfs.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_storage_target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Entry::ArenaDtor(void* object) {
  Entry* _this = reinterpret_cast< Entry* >(object);
  (void)_this;
}
void Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Entry& Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Entry_beegfs_2eproto.base);
  return *internal_default_instance();
}


void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:beegfs.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_storage_target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beegfs.Entry.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beegfs.Entry.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_storage_target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_remote_storage_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beegfs.Entry.remote_storage_target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beegfs.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beegfs.Entry.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beegfs.Entry.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // string remote_storage_target = 3;
  if (this->remote_storage_target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_storage_target().data(), static_cast<int>(this->_internal_remote_storage_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beegfs.Entry.remote_storage_target");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_remote_storage_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beegfs.Entry)
  return target;
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beegfs.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string remote_storage_target = 3;
  if (this->remote_storage_target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_storage_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beegfs.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beegfs.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beegfs.Entry)
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beegfs.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.remote_storage_target().size() > 0) {
    _internal_set_remote_storage_target(from._internal_remote_storage_target());
  }
}

void Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beegfs.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beegfs.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::InternalSwap(Entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_storage_target_.Swap(&other->remote_storage_target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobStatus::InitAsDefaultInstance() {
}
class JobStatus::_Internal {
 public:
};

JobStatus::JobStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beegfs.JobStatus)
}
JobStatus::JobStatus(const JobStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:beegfs.JobStatus)
}

void JobStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobStatus_beegfs_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

JobStatus::~JobStatus() {
  // @@protoc_insertion_point(destructor:beegfs.JobStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JobStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JobStatus::ArenaDtor(void* object) {
  JobStatus* _this = reinterpret_cast< JobStatus* >(object);
  (void)_this;
}
void JobStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JobStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobStatus& JobStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobStatus_beegfs_2eproto.base);
  return *internal_default_instance();
}


void JobStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:beegfs.JobStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .beegfs.JobStatus.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::beegfs::JobStatus_Status>(val));
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beegfs.JobStatus.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beegfs.JobStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .beegfs.JobStatus.Status status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beegfs.JobStatus.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beegfs.JobStatus)
  return target;
}

size_t JobStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beegfs.JobStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .beegfs.JobStatus.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beegfs.JobStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beegfs.JobStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beegfs.JobStatus)
    MergeFrom(*source);
  }
}

void JobStatus::MergeFrom(const JobStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beegfs.JobStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void JobStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beegfs.JobStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatus::CopyFrom(const JobStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beegfs.JobStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatus::IsInitialized() const {
  return true;
}

void JobStatus::InternalSwap(JobStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteStorageTarget_Policies::InitAsDefaultInstance() {
}
class RemoteStorageTarget_Policies::_Internal {
 public:
};

RemoteStorageTarget_Policies::RemoteStorageTarget_Policies(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beegfs.RemoteStorageTarget.Policies)
}
RemoteStorageTarget_Policies::RemoteStorageTarget_Policies(const RemoteStorageTarget_Policies& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&local_flock_, &from.local_flock_,
    static_cast<size_t>(reinterpret_cast<char*>(&keep_beegfs_metadata_) -
    reinterpret_cast<char*>(&local_flock_)) + sizeof(keep_beegfs_metadata_));
  // @@protoc_insertion_point(copy_constructor:beegfs.RemoteStorageTarget.Policies)
}

void RemoteStorageTarget_Policies::SharedCtor() {
  ::memset(&local_flock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keep_beegfs_metadata_) -
      reinterpret_cast<char*>(&local_flock_)) + sizeof(keep_beegfs_metadata_));
}

RemoteStorageTarget_Policies::~RemoteStorageTarget_Policies() {
  // @@protoc_insertion_point(destructor:beegfs.RemoteStorageTarget.Policies)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteStorageTarget_Policies::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoteStorageTarget_Policies::ArenaDtor(void* object) {
  RemoteStorageTarget_Policies* _this = reinterpret_cast< RemoteStorageTarget_Policies* >(object);
  (void)_this;
}
void RemoteStorageTarget_Policies::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteStorageTarget_Policies::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteStorageTarget_Policies& RemoteStorageTarget_Policies::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteStorageTarget_Policies_beegfs_2eproto.base);
  return *internal_default_instance();
}


void RemoteStorageTarget_Policies::Clear() {
// @@protoc_insertion_point(message_clear_start:beegfs.RemoteStorageTarget.Policies)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&local_flock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keep_beegfs_metadata_) -
      reinterpret_cast<char*>(&local_flock_)) + sizeof(keep_beegfs_metadata_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteStorageTarget_Policies::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool local_flock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          local_flock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool remote_flock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          remote_flock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool keep_dir_structure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          keep_dir_structure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool keep_beegfs_metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          keep_beegfs_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteStorageTarget_Policies::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beegfs.RemoteStorageTarget.Policies)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool local_flock = 1;
  if (this->local_flock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_local_flock(), target);
  }

  // bool remote_flock = 2;
  if (this->remote_flock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_remote_flock(), target);
  }

  // bool keep_dir_structure = 3;
  if (this->keep_dir_structure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_keep_dir_structure(), target);
  }

  // bool keep_beegfs_metadata = 4;
  if (this->keep_beegfs_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_keep_beegfs_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beegfs.RemoteStorageTarget.Policies)
  return target;
}

size_t RemoteStorageTarget_Policies::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beegfs.RemoteStorageTarget.Policies)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool local_flock = 1;
  if (this->local_flock() != 0) {
    total_size += 1 + 1;
  }

  // bool remote_flock = 2;
  if (this->remote_flock() != 0) {
    total_size += 1 + 1;
  }

  // bool keep_dir_structure = 3;
  if (this->keep_dir_structure() != 0) {
    total_size += 1 + 1;
  }

  // bool keep_beegfs_metadata = 4;
  if (this->keep_beegfs_metadata() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteStorageTarget_Policies::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beegfs.RemoteStorageTarget.Policies)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteStorageTarget_Policies* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteStorageTarget_Policies>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beegfs.RemoteStorageTarget.Policies)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beegfs.RemoteStorageTarget.Policies)
    MergeFrom(*source);
  }
}

void RemoteStorageTarget_Policies::MergeFrom(const RemoteStorageTarget_Policies& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beegfs.RemoteStorageTarget.Policies)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_flock() != 0) {
    _internal_set_local_flock(from._internal_local_flock());
  }
  if (from.remote_flock() != 0) {
    _internal_set_remote_flock(from._internal_remote_flock());
  }
  if (from.keep_dir_structure() != 0) {
    _internal_set_keep_dir_structure(from._internal_keep_dir_structure());
  }
  if (from.keep_beegfs_metadata() != 0) {
    _internal_set_keep_beegfs_metadata(from._internal_keep_beegfs_metadata());
  }
}

void RemoteStorageTarget_Policies::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beegfs.RemoteStorageTarget.Policies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteStorageTarget_Policies::CopyFrom(const RemoteStorageTarget_Policies& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beegfs.RemoteStorageTarget.Policies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteStorageTarget_Policies::IsInitialized() const {
  return true;
}

void RemoteStorageTarget_Policies::InternalSwap(RemoteStorageTarget_Policies* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteStorageTarget_Policies, keep_beegfs_metadata_)
      + sizeof(RemoteStorageTarget_Policies::keep_beegfs_metadata_)
      - PROTOBUF_FIELD_OFFSET(RemoteStorageTarget_Policies, local_flock_)>(
          reinterpret_cast<char*>(&local_flock_),
          reinterpret_cast<char*>(&other->local_flock_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteStorageTarget_Policies::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteStorageTarget_S3::InitAsDefaultInstance() {
}
class RemoteStorageTarget_S3::_Internal {
 public:
};

RemoteStorageTarget_S3::RemoteStorageTarget_S3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beegfs.RemoteStorageTarget.S3)
}
RemoteStorageTarget_S3::RemoteStorageTarget_S3(const RemoteStorageTarget_S3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bucket().empty()) {
    bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bucket(),
      GetArena());
  }
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_region().empty()) {
    region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_region(),
      GetArena());
  }
  endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endpoint().empty()) {
    endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_endpoint(),
      GetArena());
  }
  access_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_key().empty()) {
    access_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_access_key(),
      GetArena());
  }
  secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret_key().empty()) {
    secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_secret_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:beegfs.RemoteStorageTarget.S3)
}

void RemoteStorageTarget_S3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteStorageTarget_S3_beegfs_2eproto.base);
  bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoteStorageTarget_S3::~RemoteStorageTarget_S3() {
  // @@protoc_insertion_point(destructor:beegfs.RemoteStorageTarget.S3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteStorageTarget_S3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteStorageTarget_S3::ArenaDtor(void* object) {
  RemoteStorageTarget_S3* _this = reinterpret_cast< RemoteStorageTarget_S3* >(object);
  (void)_this;
}
void RemoteStorageTarget_S3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteStorageTarget_S3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteStorageTarget_S3& RemoteStorageTarget_S3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteStorageTarget_S3_beegfs_2eproto.base);
  return *internal_default_instance();
}


void RemoteStorageTarget_S3::Clear() {
// @@protoc_insertion_point(message_clear_start:beegfs.RemoteStorageTarget.S3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  endpoint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  access_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secret_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteStorageTarget_S3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string bucket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bucket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beegfs.RemoteStorageTarget.S3.bucket"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beegfs.RemoteStorageTarget.S3.region"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string endpoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_endpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beegfs.RemoteStorageTarget.S3.endpoint"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_access_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beegfs.RemoteStorageTarget.S3.access_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_secret_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beegfs.RemoteStorageTarget.S3.secret_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteStorageTarget_S3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beegfs.RemoteStorageTarget.S3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bucket = 1;
  if (this->bucket().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beegfs.RemoteStorageTarget.S3.bucket");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bucket(), target);
  }

  // string region = 2;
  if (this->region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beegfs.RemoteStorageTarget.S3.region");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_region(), target);
  }

  // string endpoint = 3;
  if (this->endpoint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint().data(), static_cast<int>(this->_internal_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beegfs.RemoteStorageTarget.S3.endpoint");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_endpoint(), target);
  }

  // string access_key = 4;
  if (this->access_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_key().data(), static_cast<int>(this->_internal_access_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beegfs.RemoteStorageTarget.S3.access_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_access_key(), target);
  }

  // string secret_key = 5;
  if (this->secret_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret_key().data(), static_cast<int>(this->_internal_secret_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beegfs.RemoteStorageTarget.S3.secret_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_secret_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beegfs.RemoteStorageTarget.S3)
  return target;
}

size_t RemoteStorageTarget_S3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beegfs.RemoteStorageTarget.S3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket = 1;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket());
  }

  // string region = 2;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string endpoint = 3;
  if (this->endpoint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint());
  }

  // string access_key = 4;
  if (this->access_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_key());
  }

  // string secret_key = 5;
  if (this->secret_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteStorageTarget_S3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beegfs.RemoteStorageTarget.S3)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteStorageTarget_S3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteStorageTarget_S3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beegfs.RemoteStorageTarget.S3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beegfs.RemoteStorageTarget.S3)
    MergeFrom(*source);
  }
}

void RemoteStorageTarget_S3::MergeFrom(const RemoteStorageTarget_S3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beegfs.RemoteStorageTarget.S3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bucket().size() > 0) {
    _internal_set_bucket(from._internal_bucket());
  }
  if (from.region().size() > 0) {
    _internal_set_region(from._internal_region());
  }
  if (from.endpoint().size() > 0) {
    _internal_set_endpoint(from._internal_endpoint());
  }
  if (from.access_key().size() > 0) {
    _internal_set_access_key(from._internal_access_key());
  }
  if (from.secret_key().size() > 0) {
    _internal_set_secret_key(from._internal_secret_key());
  }
}

void RemoteStorageTarget_S3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beegfs.RemoteStorageTarget.S3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteStorageTarget_S3::CopyFrom(const RemoteStorageTarget_S3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beegfs.RemoteStorageTarget.S3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteStorageTarget_S3::IsInitialized() const {
  return true;
}

void RemoteStorageTarget_S3::InternalSwap(RemoteStorageTarget_S3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bucket_.Swap(&other->bucket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  endpoint_.Swap(&other->endpoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  access_key_.Swap(&other->access_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secret_key_.Swap(&other->secret_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteStorageTarget_S3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteStorageTarget_Azure::InitAsDefaultInstance() {
  ::beegfs::_RemoteStorageTarget_Azure_default_instance_._instance.get_mutable()->s3_ = const_cast< ::beegfs::RemoteStorageTarget_S3*>(
      ::beegfs::RemoteStorageTarget_S3::internal_default_instance());
}
class RemoteStorageTarget_Azure::_Internal {
 public:
  static const ::beegfs::RemoteStorageTarget_S3& s3(const RemoteStorageTarget_Azure* msg);
};

const ::beegfs::RemoteStorageTarget_S3&
RemoteStorageTarget_Azure::_Internal::s3(const RemoteStorageTarget_Azure* msg) {
  return *msg->s3_;
}
RemoteStorageTarget_Azure::RemoteStorageTarget_Azure(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beegfs.RemoteStorageTarget.Azure)
}
RemoteStorageTarget_Azure::RemoteStorageTarget_Azure(const RemoteStorageTarget_Azure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_account(),
      GetArena());
  }
  if (from._internal_has_s3()) {
    s3_ = new ::beegfs::RemoteStorageTarget_S3(*from.s3_);
  } else {
    s3_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:beegfs.RemoteStorageTarget.Azure)
}

void RemoteStorageTarget_Azure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteStorageTarget_Azure_beegfs_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s3_ = nullptr;
}

RemoteStorageTarget_Azure::~RemoteStorageTarget_Azure() {
  // @@protoc_insertion_point(destructor:beegfs.RemoteStorageTarget.Azure)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteStorageTarget_Azure::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete s3_;
}

void RemoteStorageTarget_Azure::ArenaDtor(void* object) {
  RemoteStorageTarget_Azure* _this = reinterpret_cast< RemoteStorageTarget_Azure* >(object);
  (void)_this;
}
void RemoteStorageTarget_Azure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteStorageTarget_Azure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteStorageTarget_Azure& RemoteStorageTarget_Azure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteStorageTarget_Azure_beegfs_2eproto.base);
  return *internal_default_instance();
}


void RemoteStorageTarget_Azure::Clear() {
// @@protoc_insertion_point(message_clear_start:beegfs.RemoteStorageTarget.Azure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && s3_ != nullptr) {
    delete s3_;
  }
  s3_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteStorageTarget_Azure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .beegfs.RemoteStorageTarget.S3 s3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_s3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beegfs.RemoteStorageTarget.Azure.account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteStorageTarget_Azure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beegfs.RemoteStorageTarget.Azure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .beegfs.RemoteStorageTarget.S3 s3 = 1;
  if (this->has_s3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::s3(this), target, stream);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beegfs.RemoteStorageTarget.Azure.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beegfs.RemoteStorageTarget.Azure)
  return target;
}

size_t RemoteStorageTarget_Azure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beegfs.RemoteStorageTarget.Azure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // .beegfs.RemoteStorageTarget.S3 s3 = 1;
  if (this->has_s3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *s3_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteStorageTarget_Azure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beegfs.RemoteStorageTarget.Azure)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteStorageTarget_Azure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteStorageTarget_Azure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beegfs.RemoteStorageTarget.Azure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beegfs.RemoteStorageTarget.Azure)
    MergeFrom(*source);
  }
}

void RemoteStorageTarget_Azure::MergeFrom(const RemoteStorageTarget_Azure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beegfs.RemoteStorageTarget.Azure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {
    _internal_set_account(from._internal_account());
  }
  if (from.has_s3()) {
    _internal_mutable_s3()->::beegfs::RemoteStorageTarget_S3::MergeFrom(from._internal_s3());
  }
}

void RemoteStorageTarget_Azure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beegfs.RemoteStorageTarget.Azure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteStorageTarget_Azure::CopyFrom(const RemoteStorageTarget_Azure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beegfs.RemoteStorageTarget.Azure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteStorageTarget_Azure::IsInitialized() const {
  return true;
}

void RemoteStorageTarget_Azure::InternalSwap(RemoteStorageTarget_Azure* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(s3_, other->s3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteStorageTarget_Azure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteStorageTarget_POSIX::InitAsDefaultInstance() {
}
class RemoteStorageTarget_POSIX::_Internal {
 public:
};

RemoteStorageTarget_POSIX::RemoteStorageTarget_POSIX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beegfs.RemoteStorageTarget.POSIX)
}
RemoteStorageTarget_POSIX::RemoteStorageTarget_POSIX(const RemoteStorageTarget_POSIX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:beegfs.RemoteStorageTarget.POSIX)
}

void RemoteStorageTarget_POSIX::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteStorageTarget_POSIX_beegfs_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoteStorageTarget_POSIX::~RemoteStorageTarget_POSIX() {
  // @@protoc_insertion_point(destructor:beegfs.RemoteStorageTarget.POSIX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteStorageTarget_POSIX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteStorageTarget_POSIX::ArenaDtor(void* object) {
  RemoteStorageTarget_POSIX* _this = reinterpret_cast< RemoteStorageTarget_POSIX* >(object);
  (void)_this;
}
void RemoteStorageTarget_POSIX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteStorageTarget_POSIX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteStorageTarget_POSIX& RemoteStorageTarget_POSIX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteStorageTarget_POSIX_beegfs_2eproto.base);
  return *internal_default_instance();
}


void RemoteStorageTarget_POSIX::Clear() {
// @@protoc_insertion_point(message_clear_start:beegfs.RemoteStorageTarget.POSIX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteStorageTarget_POSIX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beegfs.RemoteStorageTarget.POSIX.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteStorageTarget_POSIX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beegfs.RemoteStorageTarget.POSIX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beegfs.RemoteStorageTarget.POSIX.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beegfs.RemoteStorageTarget.POSIX)
  return target;
}

size_t RemoteStorageTarget_POSIX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beegfs.RemoteStorageTarget.POSIX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteStorageTarget_POSIX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beegfs.RemoteStorageTarget.POSIX)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteStorageTarget_POSIX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteStorageTarget_POSIX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beegfs.RemoteStorageTarget.POSIX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beegfs.RemoteStorageTarget.POSIX)
    MergeFrom(*source);
  }
}

void RemoteStorageTarget_POSIX::MergeFrom(const RemoteStorageTarget_POSIX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beegfs.RemoteStorageTarget.POSIX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
}

void RemoteStorageTarget_POSIX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beegfs.RemoteStorageTarget.POSIX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteStorageTarget_POSIX::CopyFrom(const RemoteStorageTarget_POSIX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beegfs.RemoteStorageTarget.POSIX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteStorageTarget_POSIX::IsInitialized() const {
  return true;
}

void RemoteStorageTarget_POSIX::InternalSwap(RemoteStorageTarget_POSIX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteStorageTarget_POSIX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteStorageTarget::InitAsDefaultInstance() {
  ::beegfs::_RemoteStorageTarget_default_instance_._instance.get_mutable()->policies_ = const_cast< ::beegfs::RemoteStorageTarget_Policies*>(
      ::beegfs::RemoteStorageTarget_Policies::internal_default_instance());
  ::beegfs::_RemoteStorageTarget_default_instance_.s3_ = const_cast< ::beegfs::RemoteStorageTarget_S3*>(
      ::beegfs::RemoteStorageTarget_S3::internal_default_instance());
  ::beegfs::_RemoteStorageTarget_default_instance_.posix_ = const_cast< ::beegfs::RemoteStorageTarget_POSIX*>(
      ::beegfs::RemoteStorageTarget_POSIX::internal_default_instance());
  ::beegfs::_RemoteStorageTarget_default_instance_.azure_ = const_cast< ::beegfs::RemoteStorageTarget_Azure*>(
      ::beegfs::RemoteStorageTarget_Azure::internal_default_instance());
}
class RemoteStorageTarget::_Internal {
 public:
  static const ::beegfs::RemoteStorageTarget_Policies& policies(const RemoteStorageTarget* msg);
  static const ::beegfs::RemoteStorageTarget_S3& s3(const RemoteStorageTarget* msg);
  static const ::beegfs::RemoteStorageTarget_POSIX& posix(const RemoteStorageTarget* msg);
  static const ::beegfs::RemoteStorageTarget_Azure& azure(const RemoteStorageTarget* msg);
};

const ::beegfs::RemoteStorageTarget_Policies&
RemoteStorageTarget::_Internal::policies(const RemoteStorageTarget* msg) {
  return *msg->policies_;
}
const ::beegfs::RemoteStorageTarget_S3&
RemoteStorageTarget::_Internal::s3(const RemoteStorageTarget* msg) {
  return *msg->type_.s3_;
}
const ::beegfs::RemoteStorageTarget_POSIX&
RemoteStorageTarget::_Internal::posix(const RemoteStorageTarget* msg) {
  return *msg->type_.posix_;
}
const ::beegfs::RemoteStorageTarget_Azure&
RemoteStorageTarget::_Internal::azure(const RemoteStorageTarget* msg) {
  return *msg->type_.azure_;
}
void RemoteStorageTarget::set_allocated_s3(::beegfs::RemoteStorageTarget_S3* s3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (s3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(s3);
    if (message_arena != submessage_arena) {
      s3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s3, submessage_arena);
    }
    set_has_s3();
    type_.s3_ = s3;
  }
  // @@protoc_insertion_point(field_set_allocated:beegfs.RemoteStorageTarget.s3)
}
void RemoteStorageTarget::set_allocated_posix(::beegfs::RemoteStorageTarget_POSIX* posix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (posix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(posix);
    if (message_arena != submessage_arena) {
      posix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posix, submessage_arena);
    }
    set_has_posix();
    type_.posix_ = posix;
  }
  // @@protoc_insertion_point(field_set_allocated:beegfs.RemoteStorageTarget.posix)
}
void RemoteStorageTarget::set_allocated_azure(::beegfs::RemoteStorageTarget_Azure* azure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (azure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(azure);
    if (message_arena != submessage_arena) {
      azure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, azure, submessage_arena);
    }
    set_has_azure();
    type_.azure_ = azure;
  }
  // @@protoc_insertion_point(field_set_allocated:beegfs.RemoteStorageTarget.azure)
}
RemoteStorageTarget::RemoteStorageTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:beegfs.RemoteStorageTarget)
}
RemoteStorageTarget::RemoteStorageTarget(const RemoteStorageTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_policies()) {
    policies_ = new ::beegfs::RemoteStorageTarget_Policies(*from.policies_);
  } else {
    policies_ = nullptr;
  }
  clear_has_type();
  switch (from.type_case()) {
    case kS3: {
      _internal_mutable_s3()->::beegfs::RemoteStorageTarget_S3::MergeFrom(from._internal_s3());
      break;
    }
    case kPosix: {
      _internal_mutable_posix()->::beegfs::RemoteStorageTarget_POSIX::MergeFrom(from._internal_posix());
      break;
    }
    case kAzure: {
      _internal_mutable_azure()->::beegfs::RemoteStorageTarget_Azure::MergeFrom(from._internal_azure());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:beegfs.RemoteStorageTarget)
}

void RemoteStorageTarget::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteStorageTarget_beegfs_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policies_ = nullptr;
  clear_has_type();
}

RemoteStorageTarget::~RemoteStorageTarget() {
  // @@protoc_insertion_point(destructor:beegfs.RemoteStorageTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteStorageTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete policies_;
  if (has_type()) {
    clear_type();
  }
}

void RemoteStorageTarget::ArenaDtor(void* object) {
  RemoteStorageTarget* _this = reinterpret_cast< RemoteStorageTarget* >(object);
  (void)_this;
}
void RemoteStorageTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteStorageTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteStorageTarget& RemoteStorageTarget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteStorageTarget_beegfs_2eproto.base);
  return *internal_default_instance();
}


void RemoteStorageTarget::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:beegfs.RemoteStorageTarget)
  switch (type_case()) {
    case kS3: {
      if (GetArena() == nullptr) {
        delete type_.s3_;
      }
      break;
    }
    case kPosix: {
      if (GetArena() == nullptr) {
        delete type_.posix_;
      }
      break;
    }
    case kAzure: {
      if (GetArena() == nullptr) {
        delete type_.azure_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void RemoteStorageTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:beegfs.RemoteStorageTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && policies_ != nullptr) {
    delete policies_;
  }
  policies_ = nullptr;
  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteStorageTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beegfs.RemoteStorageTarget.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "beegfs.RemoteStorageTarget.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .beegfs.RemoteStorageTarget.Policies policies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_policies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .beegfs.RemoteStorageTarget.S3 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_s3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .beegfs.RemoteStorageTarget.POSIX posix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_posix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .beegfs.RemoteStorageTarget.Azure azure = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_azure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteStorageTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:beegfs.RemoteStorageTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beegfs.RemoteStorageTarget.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "beegfs.RemoteStorageTarget.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .beegfs.RemoteStorageTarget.Policies policies = 3;
  if (this->has_policies()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::policies(this), target, stream);
  }

  // .beegfs.RemoteStorageTarget.S3 s3 = 4;
  if (_internal_has_s3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::s3(this), target, stream);
  }

  // .beegfs.RemoteStorageTarget.POSIX posix = 5;
  if (_internal_has_posix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::posix(this), target, stream);
  }

  // .beegfs.RemoteStorageTarget.Azure azure = 6;
  if (_internal_has_azure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::azure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:beegfs.RemoteStorageTarget)
  return target;
}

size_t RemoteStorageTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:beegfs.RemoteStorageTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .beegfs.RemoteStorageTarget.Policies policies = 3;
  if (this->has_policies()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policies_);
  }

  switch (type_case()) {
    // .beegfs.RemoteStorageTarget.S3 s3 = 4;
    case kS3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.s3_);
      break;
    }
    // .beegfs.RemoteStorageTarget.POSIX posix = 5;
    case kPosix: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.posix_);
      break;
    }
    // .beegfs.RemoteStorageTarget.Azure azure = 6;
    case kAzure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.azure_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteStorageTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:beegfs.RemoteStorageTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteStorageTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteStorageTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:beegfs.RemoteStorageTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:beegfs.RemoteStorageTarget)
    MergeFrom(*source);
  }
}

void RemoteStorageTarget::MergeFrom(const RemoteStorageTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:beegfs.RemoteStorageTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_policies()) {
    _internal_mutable_policies()->::beegfs::RemoteStorageTarget_Policies::MergeFrom(from._internal_policies());
  }
  switch (from.type_case()) {
    case kS3: {
      _internal_mutable_s3()->::beegfs::RemoteStorageTarget_S3::MergeFrom(from._internal_s3());
      break;
    }
    case kPosix: {
      _internal_mutable_posix()->::beegfs::RemoteStorageTarget_POSIX::MergeFrom(from._internal_posix());
      break;
    }
    case kAzure: {
      _internal_mutable_azure()->::beegfs::RemoteStorageTarget_Azure::MergeFrom(from._internal_azure());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void RemoteStorageTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:beegfs.RemoteStorageTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteStorageTarget::CopyFrom(const RemoteStorageTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:beegfs.RemoteStorageTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteStorageTarget::IsInitialized() const {
  return true;
}

void RemoteStorageTarget::InternalSwap(RemoteStorageTarget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(policies_, other->policies_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteStorageTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace beegfs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::beegfs::Entry* Arena::CreateMaybeMessage< ::beegfs::Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beegfs::Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::beegfs::JobStatus* Arena::CreateMaybeMessage< ::beegfs::JobStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beegfs::JobStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::beegfs::RemoteStorageTarget_Policies* Arena::CreateMaybeMessage< ::beegfs::RemoteStorageTarget_Policies >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beegfs::RemoteStorageTarget_Policies >(arena);
}
template<> PROTOBUF_NOINLINE ::beegfs::RemoteStorageTarget_S3* Arena::CreateMaybeMessage< ::beegfs::RemoteStorageTarget_S3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beegfs::RemoteStorageTarget_S3 >(arena);
}
template<> PROTOBUF_NOINLINE ::beegfs::RemoteStorageTarget_Azure* Arena::CreateMaybeMessage< ::beegfs::RemoteStorageTarget_Azure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beegfs::RemoteStorageTarget_Azure >(arena);
}
template<> PROTOBUF_NOINLINE ::beegfs::RemoteStorageTarget_POSIX* Arena::CreateMaybeMessage< ::beegfs::RemoteStorageTarget_POSIX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beegfs::RemoteStorageTarget_POSIX >(arena);
}
template<> PROTOBUF_NOINLINE ::beegfs::RemoteStorageTarget* Arena::CreateMaybeMessage< ::beegfs::RemoteStorageTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::beegfs::RemoteStorageTarget >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
