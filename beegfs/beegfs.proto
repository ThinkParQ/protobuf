syntax = "proto3";
package beegfs;
option go_package = "github.com/thinkparq/protobuf/beegfs/go;beegfs"; 


enum NewState {
    UNCHANGED = 0;
    CANCEL = 1;
}

message UpdateWorkRequest {
    string jobID = 1;
    string requestID = 2;
    NewState newState = 3;
}

message UpdateWorkRequests {
    // A list of jobs whose work requests should be modfied.
    repeated job jobs = 1;
    // Default state is the state for any work requests not explicitly mentioned in the modification request.
    State defaultState = 2;
    message job {
        string path = 1;
        string id = 2;
        State state = 3;
    }
    enum State {
        UNCHANGED = 0;
        CANCEL = 1;
        RESUME = 2;
    }
}

// Status codes used by BeeRemote and its worker nodes to track the progress of
// a Job and its work requests. We use a common set of statuses across all types
// of Jobs and worker nodes (such as BeeSync).
message RequestStatus {
    Status status = 1;
    // Message should be used to return any additional details, particuarly to aid in troubleshooting.
    string message = 2;

    // The Status fields are used to track the progress of each JobRequest to a terminal state.
    // See the docs/design/architecture/v1/job-request-state-flow.drawio diagram for more details.
    enum Status {
        UNKNOWN = 0;     // Used if BeeRemote is unable to make contact with a worker node.
        UNASSIGNED = 1;  // When BeeRemote has a job waiting on an available worker node.
        //ASSIGNED = 2;    // When BeeRemote first assigns a job to a worker node. In this state we don't know if the worker node actually received the request until it is acknowledged (in the SCHEDULED state).
        //CREATED = 3;     // When either BeeRemote or a worker has created a multipart upload/other prerequisites of a specific job type.
        //RESCHEDULED = 4; // If a worker node is waiting on BeeRemote to determine if the job should be distributed across multiple workers.
        SCHEDULED = 5;   // When a worker node has accepted a job but is waiting on CPU cycles to actually run it.
        RUNNING = 6;     // If a job is actively in progress on a worker.
        STALLED = 7;     // If a worker node comes up with outstanding jobs, it will first check with BeeRemote to ensure the job wasn't cancelled. If something queries the state of a job before BeeRemote responds the job will be considered STALLED.
        PAUSED = 8;      // If a job has been manually paused.
        FAILED = 9;      // If the worker node encounters an unrecoverable error it will return this status to BeeRemote.
        COMPLETED = 10;  // If the job has finished succesfully.
        CANCELLED = 11;  // Set by BeeRemote if a job needs to be cancelled.
    }
}

// Basic metadata all job responses and work request/responses for must embed.
message JobMetadata {
    string id = 1;
    RequestStatus status = 2;
}

message WorkResponse {
    string job_id = 1;
    string request_id = 2;
    RequestStatus status = 3; // TODO: Do we need a different list of statuses for WorkResponses?
}
