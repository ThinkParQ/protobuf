// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: beegfs.proto

package _go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The Status fields are used to track the progress of each JobRequest to a terminal state.
// See the docs/design/architecture/v1/job-request-state-flow.drawio diagram for more details.
type JobStatus_Status int32

const (
	JobStatus_UNKNOWN     JobStatus_Status = 0  // Used if BeeRemote is unable to make contact with a worker node.
	JobStatus_UNASSIGNED  JobStatus_Status = 1  // When BeeRemote has a job waiting on an available worker node.
	JobStatus_ASSIGNED    JobStatus_Status = 2  // When BeeRemote first assigns a job to a worker node.
	JobStatus_CREATED     JobStatus_Status = 3  // When either BeeRemote or a worker has created a multipart upload/other prerequisites of a specific job type.
	JobStatus_RESCHEDULED JobStatus_Status = 4  // If a worker node is waiting on BeeRemote to determine if the job should be distributed across multiple workers.
	JobStatus_SCHEDULED   JobStatus_Status = 5  // When a worker node has accepted a job but is waiting on CPU cycles to actually run it.
	JobStatus_RUNNING     JobStatus_Status = 6  // If a job is actively in progress on a worker.
	JobStatus_STALLED     JobStatus_Status = 7  // If a worker node comes up with outstanding jobs, it will first check with BeeRemote to ensure the job wasn't cancelled.
	JobStatus_PAUSED      JobStatus_Status = 8  // If a job has been manually paused.
	JobStatus_FAILED      JobStatus_Status = 9  // If the worker node encounters an unrecoverable error it will return this status to BeeRemote.
	JobStatus_COMPLETED   JobStatus_Status = 10 // If the job has finished succesfully.
	JobStatus_CANCELLED   JobStatus_Status = 11 // Set by BeeRemote if a job needs to be cancelled.
)

// Enum value maps for JobStatus_Status.
var (
	JobStatus_Status_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "UNASSIGNED",
		2:  "ASSIGNED",
		3:  "CREATED",
		4:  "RESCHEDULED",
		5:  "SCHEDULED",
		6:  "RUNNING",
		7:  "STALLED",
		8:  "PAUSED",
		9:  "FAILED",
		10: "COMPLETED",
		11: "CANCELLED",
	}
	JobStatus_Status_value = map[string]int32{
		"UNKNOWN":     0,
		"UNASSIGNED":  1,
		"ASSIGNED":    2,
		"CREATED":     3,
		"RESCHEDULED": 4,
		"SCHEDULED":   5,
		"RUNNING":     6,
		"STALLED":     7,
		"PAUSED":      8,
		"FAILED":      9,
		"COMPLETED":   10,
		"CANCELLED":   11,
	}
)

func (x JobStatus_Status) Enum() *JobStatus_Status {
	p := new(JobStatus_Status)
	*p = x
	return p
}

func (x JobStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_beegfs_proto_enumTypes[0].Descriptor()
}

func (JobStatus_Status) Type() protoreflect.EnumType {
	return &file_beegfs_proto_enumTypes[0]
}

func (x JobStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatus_Status.Descriptor instead.
func (JobStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{1, 0}
}

type BeeGFSEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// This is the string based ID, NOT an actual reference to an RST.
	// This ensures we don't have to include the full RST configuration,
	// every time we send a BeeGFSEntry (commonly as part of a Job).
	RemoteStorageTarget string `protobuf:"bytes,3,opt,name=remote_storage_target,json=remoteStorageTarget,proto3" json:"remote_storage_target,omitempty"`
}

func (x *BeeGFSEntry) Reset() {
	*x = BeeGFSEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeeGFSEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeeGFSEntry) ProtoMessage() {}

func (x *BeeGFSEntry) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeeGFSEntry.ProtoReflect.Descriptor instead.
func (*BeeGFSEntry) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{0}
}

func (x *BeeGFSEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BeeGFSEntry) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *BeeGFSEntry) GetRemoteStorageTarget() string {
	if x != nil {
		return x.RemoteStorageTarget
	}
	return ""
}

// Status codese used by BeeRemote and its worker nodes to track the progress of a Job.
// We use a common set of statuses across all types of workers (such as BeeSync).
type JobStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status JobStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=beegfs.JobStatus_Status" json:"status,omitempty"`
	// Message should be used to return any additional details, particuarly to aid in troubleshooting.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *JobStatus) Reset() {
	*x = JobStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatus) ProtoMessage() {}

func (x *JobStatus) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatus.ProtoReflect.Descriptor instead.
func (*JobStatus) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{1}
}

func (x *JobStatus) GetStatus() JobStatus_Status {
	if x != nil {
		return x.Status
	}
	return JobStatus_UNKNOWN
}

func (x *JobStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Note while there is a lot of data contained in RemoteStorageTarget,
// gRPC will not serialize fields to the wire unless they are set.
// https://protobuf.dev/programming-guides/proto3/#specifying-field-rules
// This allows us to define all possible fields that may need to be sent
// to BeeSync to configure different target types, without extra overhead.
type RemoteStorageTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Policies *RemoteStorageTarget_Policies `protobuf:"bytes,3,opt,name=policies,proto3" json:"policies,omitempty"`
	// Type defines fields required to figure out "where" to transfer content.
	//
	// Types that are assignable to Type:
	//
	//	*RemoteStorageTarget_S3_
	//	*RemoteStorageTarget_Posix
	//	*RemoteStorageTarget_Azure_
	Type isRemoteStorageTarget_Type `protobuf_oneof:"type"`
}

func (x *RemoteStorageTarget) Reset() {
	*x = RemoteStorageTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget) ProtoMessage() {}

func (x *RemoteStorageTarget) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{2}
}

func (x *RemoteStorageTarget) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RemoteStorageTarget) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoteStorageTarget) GetPolicies() *RemoteStorageTarget_Policies {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (m *RemoteStorageTarget) GetType() isRemoteStorageTarget_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RemoteStorageTarget) GetS3() *RemoteStorageTarget_S3 {
	if x, ok := x.GetType().(*RemoteStorageTarget_S3_); ok {
		return x.S3
	}
	return nil
}

func (x *RemoteStorageTarget) GetPosix() *RemoteStorageTarget_POSIX {
	if x, ok := x.GetType().(*RemoteStorageTarget_Posix); ok {
		return x.Posix
	}
	return nil
}

func (x *RemoteStorageTarget) GetAzure() *RemoteStorageTarget_Azure {
	if x, ok := x.GetType().(*RemoteStorageTarget_Azure_); ok {
		return x.Azure
	}
	return nil
}

type isRemoteStorageTarget_Type interface {
	isRemoteStorageTarget_Type()
}

type RemoteStorageTarget_S3_ struct {
	S3 *RemoteStorageTarget_S3 `protobuf:"bytes,4,opt,name=s3,proto3,oneof"`
}

type RemoteStorageTarget_Posix struct {
	Posix *RemoteStorageTarget_POSIX `protobuf:"bytes,5,opt,name=posix,proto3,oneof"`
}

type RemoteStorageTarget_Azure_ struct {
	Azure *RemoteStorageTarget_Azure `protobuf:"bytes,6,opt,name=azure,proto3,oneof"`
}

func (*RemoteStorageTarget_S3_) isRemoteStorageTarget_Type() {}

func (*RemoteStorageTarget_Posix) isRemoteStorageTarget_Type() {}

func (*RemoteStorageTarget_Azure_) isRemoteStorageTarget_Type() {}

// TODO: consider if defining policies would be more flexible as a map.
// These could change a lot early on, and defining them here creates a contract
// we won't ever remove/change them.
type RemoteStorageTarget_Policies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalFlock         bool `protobuf:"varint,1,opt,name=local_flock,json=localFlock,proto3" json:"local_flock,omitempty"`
	RemoteFlock        bool `protobuf:"varint,2,opt,name=remote_flock,json=remoteFlock,proto3" json:"remote_flock,omitempty"`
	KeepDirStructure   bool `protobuf:"varint,3,opt,name=keep_dir_structure,json=keepDirStructure,proto3" json:"keep_dir_structure,omitempty"`
	KeepBeegfsMetadata bool `protobuf:"varint,4,opt,name=keep_beegfs_metadata,json=keepBeegfsMetadata,proto3" json:"keep_beegfs_metadata,omitempty"` // If BeeGFS metadata should be stored as extended attributes/metadata (if supported).
}

func (x *RemoteStorageTarget_Policies) Reset() {
	*x = RemoteStorageTarget_Policies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget_Policies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_Policies) ProtoMessage() {}

func (x *RemoteStorageTarget_Policies) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget_Policies.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget_Policies) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{2, 0}
}

func (x *RemoteStorageTarget_Policies) GetLocalFlock() bool {
	if x != nil {
		return x.LocalFlock
	}
	return false
}

func (x *RemoteStorageTarget_Policies) GetRemoteFlock() bool {
	if x != nil {
		return x.RemoteFlock
	}
	return false
}

func (x *RemoteStorageTarget_Policies) GetKeepDirStructure() bool {
	if x != nil {
		return x.KeepDirStructure
	}
	return false
}

func (x *RemoteStorageTarget_Policies) GetKeepBeegfsMetadata() bool {
	if x != nil {
		return x.KeepBeegfsMetadata
	}
	return false
}

type RemoteStorageTarget_S3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket    string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Region    string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Endpoint  string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	AccessKey string `protobuf:"bytes,4,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey string `protobuf:"bytes,5,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
}

func (x *RemoteStorageTarget_S3) Reset() {
	*x = RemoteStorageTarget_S3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget_S3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_S3) ProtoMessage() {}

func (x *RemoteStorageTarget_S3) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget_S3.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget_S3) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{2, 1}
}

func (x *RemoteStorageTarget_S3) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *RemoteStorageTarget_S3) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type RemoteStorageTarget_Azure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S3      *RemoteStorageTarget_S3 `protobuf:"bytes,1,opt,name=s3,proto3" json:"s3,omitempty"`
	Account string                  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *RemoteStorageTarget_Azure) Reset() {
	*x = RemoteStorageTarget_Azure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget_Azure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_Azure) ProtoMessage() {}

func (x *RemoteStorageTarget_Azure) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget_Azure.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget_Azure) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{2, 2}
}

func (x *RemoteStorageTarget_Azure) GetS3() *RemoteStorageTarget_S3 {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *RemoteStorageTarget_Azure) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type RemoteStorageTarget_POSIX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *RemoteStorageTarget_POSIX) Reset() {
	*x = RemoteStorageTarget_POSIX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beegfs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageTarget_POSIX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageTarget_POSIX) ProtoMessage() {}

func (x *RemoteStorageTarget_POSIX) ProtoReflect() protoreflect.Message {
	mi := &file_beegfs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageTarget_POSIX.ProtoReflect.Descriptor instead.
func (*RemoteStorageTarget_POSIX) Descriptor() ([]byte, []int) {
	return file_beegfs_proto_rawDescGZIP(), []int{2, 3}
}

func (x *RemoteStorageTarget_POSIX) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_beegfs_proto protoreflect.FileDescriptor

var file_beegfs_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x22, 0x65, 0x0a, 0x0b, 0x42, 0x65, 0x65, 0x47, 0x46, 0x53,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x8a, 0x02,
	0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x65,
	0x65, 0x67, 0x66, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x08,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x22, 0xdd, 0x05, 0x0a, 0x13, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66,
	0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x2e, 0x53, 0x33, 0x48, 0x00, 0x52, 0x02, 0x73, 0x33, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x6f,
	0x73, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x65, 0x65, 0x67,
	0x66, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x50, 0x4f, 0x53, 0x49, 0x58, 0x48, 0x00, 0x52, 0x05,
	0x70, 0x6f, 0x73, 0x69, 0x78, 0x12, 0x39, 0x0a, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x1a, 0xae, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6b,
	0x65, 0x65, 0x70, 0x44, 0x69, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6b,
	0x65, 0x65, 0x70, 0x42, 0x65, 0x65, 0x67, 0x66, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x8e, 0x01, 0x0a, 0x02, 0x53, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x1a, 0x51, 0x0a, 0x05, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x73,
	0x33, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x65, 0x65, 0x67, 0x66, 0x73,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x33, 0x52, 0x02, 0x73, 0x33, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1b, 0x0a, 0x05, 0x50, 0x4f, 0x53, 0x49, 0x58, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x70, 0x61,
	0x72, 0x71, 0x2f, 0x62, 0x65, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x65,
	0x65, 0x67, 0x66, 0x73, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_beegfs_proto_rawDescOnce sync.Once
	file_beegfs_proto_rawDescData = file_beegfs_proto_rawDesc
)

func file_beegfs_proto_rawDescGZIP() []byte {
	file_beegfs_proto_rawDescOnce.Do(func() {
		file_beegfs_proto_rawDescData = protoimpl.X.CompressGZIP(file_beegfs_proto_rawDescData)
	})
	return file_beegfs_proto_rawDescData
}

var file_beegfs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_beegfs_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_beegfs_proto_goTypes = []interface{}{
	(JobStatus_Status)(0),                // 0: beegfs.JobStatus.Status
	(*BeeGFSEntry)(nil),                  // 1: beegfs.BeeGFSEntry
	(*JobStatus)(nil),                    // 2: beegfs.JobStatus
	(*RemoteStorageTarget)(nil),          // 3: beegfs.RemoteStorageTarget
	(*RemoteStorageTarget_Policies)(nil), // 4: beegfs.RemoteStorageTarget.Policies
	(*RemoteStorageTarget_S3)(nil),       // 5: beegfs.RemoteStorageTarget.S3
	(*RemoteStorageTarget_Azure)(nil),    // 6: beegfs.RemoteStorageTarget.Azure
	(*RemoteStorageTarget_POSIX)(nil),    // 7: beegfs.RemoteStorageTarget.POSIX
}
var file_beegfs_proto_depIdxs = []int32{
	0, // 0: beegfs.JobStatus.status:type_name -> beegfs.JobStatus.Status
	4, // 1: beegfs.RemoteStorageTarget.policies:type_name -> beegfs.RemoteStorageTarget.Policies
	5, // 2: beegfs.RemoteStorageTarget.s3:type_name -> beegfs.RemoteStorageTarget.S3
	7, // 3: beegfs.RemoteStorageTarget.posix:type_name -> beegfs.RemoteStorageTarget.POSIX
	6, // 4: beegfs.RemoteStorageTarget.azure:type_name -> beegfs.RemoteStorageTarget.Azure
	5, // 5: beegfs.RemoteStorageTarget.Azure.s3:type_name -> beegfs.RemoteStorageTarget.S3
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_beegfs_proto_init() }
func file_beegfs_proto_init() {
	if File_beegfs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_beegfs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeeGFSEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget_Policies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget_S3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget_Azure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beegfs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageTarget_POSIX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_beegfs_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RemoteStorageTarget_S3_)(nil),
		(*RemoteStorageTarget_Posix)(nil),
		(*RemoteStorageTarget_Azure_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beegfs_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beegfs_proto_goTypes,
		DependencyIndexes: file_beegfs_proto_depIdxs,
		EnumInfos:         file_beegfs_proto_enumTypes,
		MessageInfos:      file_beegfs_proto_msgTypes,
	}.Build()
	File_beegfs_proto = out.File
	file_beegfs_proto_rawDesc = nil
	file_beegfs_proto_goTypes = nil
	file_beegfs_proto_depIdxs = nil
}
